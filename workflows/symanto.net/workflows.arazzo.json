{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/symanto.net/main/1.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "full-psycholinguistic-profile-unknown-language",
      "summary": "Detects the language of input texts and then performs a comprehensive analysis including sentiment, emotion (Ekman), communication style, and personality traits. Provides a holistic understanding of the text and its author when the language is not known beforehand.",
      "description": "Detects the language of input texts and then performs a comprehensive analysis including sentiment, emotion (Ekman), communication style, and personality traits. Provides a holistic understanding of the text and its author when the language is not known beforehand.",
      "inputs": {
        "type": "object",
        "properties": {
          "detect-language_body": {
            "type": "object"
          },
          "all": {
            "type": "string"
          },
          "analyze-sentiment_body": {
            "type": "object"
          },
          "analyze-ekman-emotion_body": {
            "type": "object"
          },
          "analyze-communication-style_body": {
            "type": "object"
          },
          "analyze-personality_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "detect-language",
          "description": "Detect the language of the provided texts.",
          "operationId": "language-detection",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.detect-language_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "language_results": "$response.body"
          }
        },
        {
          "stepId": "analyze-sentiment",
          "description": "Analyze the sentiment of the texts using the detected language.",
          "operationId": "sentiment",
          "parameters": [
            {
              "name": "all",
              "in": "query",
              "value": "$inputs.all"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.analyze-sentiment_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sentiment_predictions": "$response.body"
          }
        },
        {
          "stepId": "analyze-ekman-emotion",
          "description": "Analyze the Ekman emotions of the texts using the detected language.",
          "operationId": "ekman-emotion",
          "parameters": [
            {
              "name": "all",
              "in": "query",
              "value": "$inputs.all"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.analyze-ekman-emotion_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "emotion_predictions": "$response.body"
          }
        },
        {
          "stepId": "analyze-communication-style",
          "description": "Analyze the communication style of the texts using the detected language.",
          "operationId": "communication",
          "parameters": [
            {
              "name": "all",
              "in": "query",
              "value": "$inputs.all"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.analyze-communication-style_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "communication_predictions": "$response.body"
          }
        },
        {
          "stepId": "analyze-personality",
          "description": "Analyze the personality traits evident in the texts using the detected language.",
          "operationId": "personality",
          "parameters": [
            {
              "name": "all",
              "in": "query",
              "value": "$inputs.all"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.analyze-personality_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "personality_predictions": "$response.body"
          }
        }
      ],
      "outputs": {
        "language_results": "$steps.detect-language.outputs.language_results",
        "sentiment_predictions": "$steps.analyze-sentiment.outputs.sentiment_predictions",
        "emotion_predictions": "$steps.analyze-ekman-emotion.outputs.emotion_predictions",
        "communication_predictions": "$steps.analyze-communication-style.outputs.communication_predictions",
        "personality_predictions": "$steps.analyze-personality.outputs.personality_predictions"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "domain-specific-topic--sentiment-analysis-unknown-language",
      "summary": "Detects the language of input texts (e.g., customer reviews) and then extracts key topics and their associated sentiments, optionally tailored to a specific domain (e.g., Ecom, Hotel). Useful for understanding specific feedback points.",
      "description": "Detects the language of input texts (e.g., customer reviews) and then extracts key topics and their associated sentiments, optionally tailored to a specific domain (e.g., Ecom, Hotel). Useful for understanding specific feedback points.",
      "inputs": {
        "type": "object",
        "properties": {
          "detect-language_body": {
            "type": "object"
          },
          "domain": {
            "type": "string"
          },
          "extract-topic-sentiment_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "detect-language",
          "description": "Detect the language of the provided texts.",
          "operationId": "language-detection",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.detect-language_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "language_results": "$response.body"
          }
        },
        {
          "stepId": "extract-topic-sentiment",
          "description": "Extract topics and associated sentiments from the texts using the detected language, optionally specifying an analysis domain.",
          "operationId": "topic-sentiment",
          "parameters": [
            {
              "name": "domain",
              "in": "query",
              "value": "$inputs.domain"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.extract-topic-sentiment_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "topic_sentiment_results": "$response.body"
          }
        }
      ],
      "outputs": {
        "language_results": "$steps.detect-language.outputs.language_results",
        "topic_sentiment_results": "$steps.extract-topic-sentiment.outputs.topic_sentiment_results"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "domain-specific-brand-recommendation-analysis-unknown-language",
      "summary": "Detects the language of input texts (e.g., customer feedback) and predicts whether the author is likely a promoter, detractor, or indifferent towards a brand/product, optionally tailored to a specific domain. Useful as a proxy for NPS from qualitative data.",
      "description": "Detects the language of input texts (e.g., customer feedback) and predicts whether the author is likely a promoter, detractor, or indifferent towards a brand/product, optionally tailored to a specific domain. Useful as a proxy for NPS from qualitative data.",
      "inputs": {
        "type": "object",
        "properties": {
          "detect-language_body": {
            "type": "object"
          },
          "domain": {
            "type": "string"
          },
          "predict-brand-recommendation_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "detect-language",
          "description": "Detect the language of the provided texts.",
          "operationId": "language-detection",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.detect-language_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "language_results": "$response.body"
          }
        },
        {
          "stepId": "predict-brand-recommendation",
          "description": "Predict brand recommendation status (Promoter/Detractor/Indifferent) from the texts using the detected language, optionally specifying an analysis domain.",
          "operationId": "Pipeline_BrandRecommendations",
          "parameters": [
            {
              "name": "domain",
              "in": "query",
              "value": "$inputs.domain"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.predict-brand-recommendation_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "brand_recommendation_results": "$response.body"
          }
        }
      ],
      "outputs": {
        "language_results": "$steps.detect-language.outputs.language_results",
        "brand_recommendation_results": "$steps.predict-brand-recommendation.outputs.brand_recommendation_results"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}