{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/opendatasoft.com/main/v2.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "query-and-export-dataset-records",
      "summary": "Enables users to query specific records from a chosen dataset using ODSQL filters and then export the filtered results in a desired format for offline analysis, integration, or bulk processing. This is a core data consumption workflow.",
      "description": "Enables users to query specific records from a chosen dataset using ODSQL filters and then export the filtered results in a desired format for offline analysis, integration, or bulk processing. This is a core data consumption workflow.",
      "inputs": {
        "type": "object",
        "properties": {
          "select": {
            "type": "string"
          },
          "where": {
            "type": "string"
          },
          "order_by": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "refine": {
            "type": "string"
          },
          "exclude": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "dataset_id": {
            "type": "string"
          },
          "group_by": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "use_labels": {
            "type": "string"
          },
          "epsg": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-datasets-for-query",
          "description": "Identifies the target dataset by listing available datasets, potentially with initial filtering, to select the dataset from which records will be queried.",
          "operationId": "getDatasets",
          "parameters": [
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "where",
              "in": "query",
              "value": "$inputs.where"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "refine",
              "in": "query",
              "value": "$inputs.refine"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dataset_id": "$response.body#/dataset_id"
          }
        },
        {
          "stepId": "query-dataset-records",
          "description": "Executes a detailed query on the records of the selected dataset, applying ODSQL filters, field selections, grouping, and ordering. This step retrieves a subset of records for preview or pagination.",
          "operationId": "getRecords",
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "value": "$steps.list-datasets-for-query.outputs.dataset_id"
            },
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "where",
              "in": "query",
              "value": "$inputs.where"
            },
            {
              "name": "group_by",
              "in": "query",
              "value": "$inputs.group_by"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "refine",
              "in": "query",
              "value": "$inputs.refine"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "records": "$response.body#/records",
            "total_count": "$response.body#/total_count"
          }
        },
        {
          "stepId": "export-queried-records",
          "description": "Exports the records of the dataset, applying the same or similar query parameters as the previous step, allowing for full data download in various formats (e.g., JSON, CSV, GeoJSON).",
          "operationId": "exportRecords",
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "value": "$steps.list-datasets-for-query.outputs.dataset_id"
            },
            {
              "name": "format",
              "in": "path",
              "value": "$inputs.format"
            },
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "where",
              "in": "query",
              "value": "$inputs.where"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "refine",
              "in": "query",
              "value": "$inputs.refine"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            },
            {
              "name": "use_labels",
              "in": "query",
              "value": "$inputs.use_labels"
            },
            {
              "name": "epsg",
              "in": "query",
              "value": "$inputs.epsg"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "exported_file": "$response.body#/exported_file"
          }
        }
      ],
      "outputs": {
        "dataset_id": "$steps.list-datasets-for-query.outputs.dataset_id",
        "records": "$steps.query-dataset-records.outputs.records",
        "total_count": "$steps.query-dataset-records.outputs.total_count",
        "exported_file": "$steps.export-queried-records.outputs.exported_file"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "discover-and-explore-datasets",
      "summary": "Allows users to discover available datasets, retrieve detailed metadata for a specific dataset, and then explore the facets available for its records to understand its structure and content. This workflow is crucial for initial data exploration.",
      "description": "Allows users to discover available datasets, retrieve detailed metadata for a specific dataset, and then explore the facets available for its records to understand its structure and content. This workflow is crucial for initial data exploration.",
      "inputs": {
        "type": "object",
        "properties": {
          "select": {
            "type": "string"
          },
          "where": {
            "type": "string"
          },
          "order_by": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "refine": {
            "type": "string"
          },
          "exclude": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "dataset_id": {
            "type": "string"
          },
          "facet": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-datasets",
          "description": "Retrieves a paginated list of all available datasets in the catalog, optionally filtered or ordered. This serves as the entry point for dataset discovery.",
          "operationId": "getDatasets",
          "parameters": [
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "where",
              "in": "query",
              "value": "$inputs.where"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "refine",
              "in": "query",
              "value": "$inputs.refine"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "total_count": "$response.body#/total_count",
            "dataset_id": "$response.body#/dataset_id",
            "dataset_metadata": "$response.body#/dataset_metadata"
          }
        },
        {
          "stepId": "get-dataset-details",
          "description": "Fetches comprehensive metadata and available endpoints for a specific dataset, including its fields, attachments, and links to related resources. This provides deep insight into a chosen dataset.",
          "operationId": "getDataset",
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "value": "$steps.list-datasets.outputs.dataset_id"
            },
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dataset_details": "$response.body#/dataset_details"
          }
        },
        {
          "stepId": "list-dataset-record-facets",
          "description": "Enumerates the facet values available for records within a specified dataset. This is essential for implementing guided navigation and advanced filtering options for the dataset's content.",
          "operationId": "getRecordsFacets",
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "value": "$steps.list-datasets.outputs.dataset_id"
            },
            {
              "name": "where",
              "in": "query",
              "value": "$inputs.where"
            },
            {
              "name": "refine",
              "in": "query",
              "value": "$inputs.refine"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "facet",
              "in": "query",
              "value": "$inputs.facet"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "record_facets": "$response.body#/record_facets"
          }
        }
      ],
      "outputs": {
        "total_count": "$steps.list-datasets.outputs.total_count",
        "dataset_id": "$steps.list-datasets.outputs.dataset_id",
        "dataset_metadata": "$steps.list-datasets.outputs.dataset_metadata",
        "dataset_details": "$steps.get-dataset-details.outputs.dataset_details",
        "record_facets": "$steps.list-dataset-record-facets.outputs.record_facets"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "guided-catalog-exploration-with-facets",
      "summary": "Facilitates interactive discovery of datasets by first listing available catalog-wide facets and then allowing users to refine their dataset search based on selected facet values. This is ideal for building dynamic data portals.",
      "description": "Facilitates interactive discovery of datasets by first listing available catalog-wide facets and then allowing users to refine their dataset search based on selected facet values. This is ideal for building dynamic data portals.",
      "inputs": {
        "type": "object",
        "properties": {
          "facet": {
            "type": "string"
          },
          "refine": {
            "type": "string"
          },
          "exclude": {
            "type": "string"
          },
          "where": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "select": {
            "type": "string"
          },
          "order_by": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-catalog-facets",
          "description": "Retrieves a list of all available facets across the entire data catalog, along with their values and counts, to enable broad filtering and exploration.",
          "operationId": "getDatasetsFacets",
          "parameters": [
            {
              "name": "facet",
              "in": "query",
              "value": "$inputs.facet"
            },
            {
              "name": "refine",
              "in": "query",
              "value": "$inputs.refine"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "where",
              "in": "query",
              "value": "$inputs.where"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "catalog_facets": "$response.body#/catalog_facets"
          }
        },
        {
          "stepId": "filter-datasets-by-facets",
          "description": "Queries datasets, applying refinement filters based on the facet values obtained from the previous step, effectively narrowing down the search results based on user selections.",
          "operationId": "getDatasets",
          "parameters": [
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "where",
              "in": "query",
              "value": "$inputs.where"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "refine",
              "in": "query",
              "value": "$steps.get-catalog-facets.outputs.catalog_facets"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "filtered_datasets": "$response.body#/filtered_datasets",
            "total_count": "$response.body#/total_count"
          }
        }
      ],
      "outputs": {
        "catalog_facets": "$steps.get-catalog-facets.outputs.catalog_facets",
        "filtered_datasets": "$steps.filter-datasets-by-facets.outputs.filtered_datasets",
        "total_count": "$steps.filter-datasets-by-facets.outputs.total_count"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "find-and-retrieve-a-specific-record",
      "summary": "Enables users to locate a specific record within a dataset using query parameters and then retrieve its full details by its unique identifier. This is useful for applications needing to display individual data points.",
      "description": "Enables users to locate a specific record within a dataset using query parameters and then retrieve its full details by its unique identifier. This is useful for applications needing to display individual data points.",
      "inputs": {
        "type": "object",
        "properties": {
          "dataset_id": {
            "type": "string"
          },
          "select": {
            "type": "string"
          },
          "where": {
            "type": "string"
          },
          "group_by": {
            "type": "string"
          },
          "order_by": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "refine": {
            "type": "string"
          },
          "exclude": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "record_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "query-records-to-find-id",
          "description": "Queries records within a specified dataset to identify the unique ID of a target record, typically by filtering on known fields or searching for specific content. It's assumed the dataset_id is known.",
          "operationId": "getRecords",
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "value": "$inputs.dataset_id"
            },
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "where",
              "in": "query",
              "value": "$inputs.where"
            },
            {
              "name": "group_by",
              "in": "query",
              "value": "$inputs.group_by"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "refine",
              "in": "query",
              "value": "$inputs.refine"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "record_id": "$response.body#/record_id",
            "dataset_id_from_query": "$response.body#/dataset_id_from_query"
          }
        },
        {
          "stepId": "get-single-record-details",
          "description": "Fetches the complete information for a single record using its unique identifier and the dataset ID, providing all fields and metadata for that specific entry.",
          "operationId": "getRecord",
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "value": "$steps.query-records-to-find-id.outputs.dataset_id_from_query"
            },
            {
              "name": "record_id",
              "in": "path",
              "value": "$steps.query-records-to-find-id.outputs.record_id"
            },
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "single_record_details": "$response.body#/single_record_details"
          }
        }
      ],
      "outputs": {
        "record_id": "$steps.query-records-to-find-id.outputs.record_id",
        "dataset_id_from_query": "$steps.query-records-to-find-id.outputs.dataset_id_from_query",
        "single_record_details": "$steps.get-single-record-details.outputs.single_record_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}