{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/gsmtasks.com/main/2.4.13/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "optimize-route-and-commit",
      "summary": "Submit a set of tasks and assignees for route optimization, check the status, retrieve results, and commit the optimized routes.",
      "description": "Submit a set of tasks and assignees for route optimization, check the status, retrieve results, and commit the optimized routes.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "create-route-optimization_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-route-optimization",
          "description": "Create a route optimization request with specified tasks and assignees.",
          "operationId": "route_optimizations_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-route-optimization_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "optimization_id": "$response.body",
            "optimization_state": "$response.body"
          }
        },
        {
          "stepId": "get-optimization-status",
          "description": "Retrieve the status of the route optimization process. Poll until state is 'ready' or 'failed'.",
          "operationId": "route_optimizations_retrieve",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "optimization_details": "$response.body",
            "optimization_state": "$response.body"
          }
        },
        {
          "stepId": "get-optimization-results",
          "description": "Retrieve the results of the completed route optimization.",
          "operationId": "route_optimizations_results_retrieve",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "optimization_results": "$response.body"
          }
        },
        {
          "stepId": "commit-optimization",
          "description": "Commit the optimized routes, updating task assignments and potentially routes.",
          "operationId": "route_optimizations_commit_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "optimization_id": "$steps.create-route-optimization.outputs.optimization_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "committed_optimization_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "optimization_id": "$steps.create-route-optimization.outputs.optimization_id",
        "optimization_state": "$steps.get-optimization-status.outputs.optimization_state",
        "optimization_details": "$steps.get-optimization-status.outputs.optimization_details",
        "optimization_results": "$steps.get-optimization-results.outputs.optimization_results",
        "committed_optimization_details": "$steps.commit-optimization.outputs.committed_optimization_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-assign-task",
      "summary": "Creates a new task and assigns it to a specific worker.",
      "description": "Creates a new task and assigns it to a specific worker.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "order__orderer__company": {
            "type": "string"
          },
          "order__orderer__company__icontains": {
            "type": "string"
          },
          "order__orderer__company__iexact": {
            "type": "string"
          },
          "order__orderer__company__istartswith": {
            "type": "string"
          },
          "order__orderer__emails__contained_by": {
            "type": "string"
          },
          "order__orderer__emails__contains": {
            "type": "string"
          },
          "order__orderer__emails__overlap": {
            "type": "string"
          },
          "order__orderer__name": {
            "type": "string"
          },
          "order__orderer__name__icontains": {
            "type": "string"
          },
          "order__orderer__name__iexact": {
            "type": "string"
          },
          "order__orderer__name__istartswith": {
            "type": "string"
          },
          "order__orderer__notes": {
            "type": "string"
          },
          "order__orderer__notes__icontains": {
            "type": "string"
          },
          "order__orderer__notes__iexact": {
            "type": "string"
          },
          "order__orderer__notes__istartswith": {
            "type": "string"
          },
          "order__orderer__phones__contained_by": {
            "type": "string"
          },
          "order__orderer__phones__contains": {
            "type": "string"
          },
          "order__orderer__phones__overlap": {
            "type": "string"
          },
          "create-task_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-task",
          "description": "Create a new task with details like contact, address, and description.",
          "operationId": "tasks_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "order__orderer__company",
              "in": "query",
              "value": "$inputs.order__orderer__company"
            },
            {
              "name": "order__orderer__company__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__company__icontains"
            },
            {
              "name": "order__orderer__company__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__company__iexact"
            },
            {
              "name": "order__orderer__company__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__company__istartswith"
            },
            {
              "name": "order__orderer__emails__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contained_by"
            },
            {
              "name": "order__orderer__emails__contains",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contains"
            },
            {
              "name": "order__orderer__emails__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__emails__overlap"
            },
            {
              "name": "order__orderer__name",
              "in": "query",
              "value": "$inputs.order__orderer__name"
            },
            {
              "name": "order__orderer__name__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__name__icontains"
            },
            {
              "name": "order__orderer__name__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__name__iexact"
            },
            {
              "name": "order__orderer__name__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__name__istartswith"
            },
            {
              "name": "order__orderer__notes",
              "in": "query",
              "value": "$inputs.order__orderer__notes"
            },
            {
              "name": "order__orderer__notes__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__notes__icontains"
            },
            {
              "name": "order__orderer__notes__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__notes__iexact"
            },
            {
              "name": "order__orderer__notes__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__notes__istartswith"
            },
            {
              "name": "order__orderer__phones__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contained_by"
            },
            {
              "name": "order__orderer__phones__contains",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contains"
            },
            {
              "name": "order__orderer__phones__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__phones__overlap"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-task_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_id": "$response.body",
            "task_details": "$response.body"
          }
        },
        {
          "stepId": "assign-task",
          "description": "Assign the newly created task to a worker.",
          "operationId": "tasks_assign_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "order__orderer__company",
              "in": "query",
              "value": "$inputs.order__orderer__company"
            },
            {
              "name": "order__orderer__company__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__company__icontains"
            },
            {
              "name": "order__orderer__company__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__company__iexact"
            },
            {
              "name": "order__orderer__company__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__company__istartswith"
            },
            {
              "name": "order__orderer__emails__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contained_by"
            },
            {
              "name": "order__orderer__emails__contains",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contains"
            },
            {
              "name": "order__orderer__emails__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__emails__overlap"
            },
            {
              "name": "order__orderer__name",
              "in": "query",
              "value": "$inputs.order__orderer__name"
            },
            {
              "name": "order__orderer__name__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__name__icontains"
            },
            {
              "name": "order__orderer__name__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__name__iexact"
            },
            {
              "name": "order__orderer__name__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__name__istartswith"
            },
            {
              "name": "order__orderer__notes",
              "in": "query",
              "value": "$inputs.order__orderer__notes"
            },
            {
              "name": "order__orderer__notes__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__notes__icontains"
            },
            {
              "name": "order__orderer__notes__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__notes__iexact"
            },
            {
              "name": "order__orderer__notes__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__notes__istartswith"
            },
            {
              "name": "order__orderer__phones__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contained_by"
            },
            {
              "name": "order__orderer__phones__contains",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contains"
            },
            {
              "name": "order__orderer__phones__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__phones__overlap"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "task_id": "$steps.create-task.outputs.task_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_assign_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "task_id": "$steps.create-task.outputs.task_id",
        "task_details": "$steps.create-task.outputs.task_details",
        "task_assign_details": "$steps.assign-task.outputs.task_assign_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "worker-task-workflow-accept-transit-activate-complete",
      "summary": "Simulates a worker accepting a task, starting transit, activating it upon arrival, and completing it.",
      "description": "Simulates a worker accepting a task, starting transit, activating it upon arrival, and completing it.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "order__orderer__company": {
            "type": "string"
          },
          "order__orderer__company__icontains": {
            "type": "string"
          },
          "order__orderer__company__iexact": {
            "type": "string"
          },
          "order__orderer__company__istartswith": {
            "type": "string"
          },
          "order__orderer__emails__contained_by": {
            "type": "string"
          },
          "order__orderer__emails__contains": {
            "type": "string"
          },
          "order__orderer__emails__overlap": {
            "type": "string"
          },
          "order__orderer__name": {
            "type": "string"
          },
          "order__orderer__name__icontains": {
            "type": "string"
          },
          "order__orderer__name__iexact": {
            "type": "string"
          },
          "order__orderer__name__istartswith": {
            "type": "string"
          },
          "order__orderer__notes": {
            "type": "string"
          },
          "order__orderer__notes__icontains": {
            "type": "string"
          },
          "order__orderer__notes__iexact": {
            "type": "string"
          },
          "order__orderer__notes__istartswith": {
            "type": "string"
          },
          "order__orderer__phones__contained_by": {
            "type": "string"
          },
          "order__orderer__phones__contains": {
            "type": "string"
          },
          "order__orderer__phones__overlap": {
            "type": "string"
          },
          "accept-task_body": {
            "type": "object"
          },
          "start-transit_body": {
            "type": "object"
          },
          "activate-task_body": {
            "type": "object"
          },
          "complete-task_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "accept-task",
          "description": "Worker accepts an assigned task.",
          "operationId": "tasks_accept_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "order__orderer__company",
              "in": "query",
              "value": "$inputs.order__orderer__company"
            },
            {
              "name": "order__orderer__company__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__company__icontains"
            },
            {
              "name": "order__orderer__company__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__company__iexact"
            },
            {
              "name": "order__orderer__company__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__company__istartswith"
            },
            {
              "name": "order__orderer__emails__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contained_by"
            },
            {
              "name": "order__orderer__emails__contains",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contains"
            },
            {
              "name": "order__orderer__emails__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__emails__overlap"
            },
            {
              "name": "order__orderer__name",
              "in": "query",
              "value": "$inputs.order__orderer__name"
            },
            {
              "name": "order__orderer__name__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__name__icontains"
            },
            {
              "name": "order__orderer__name__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__name__iexact"
            },
            {
              "name": "order__orderer__name__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__name__istartswith"
            },
            {
              "name": "order__orderer__notes",
              "in": "query",
              "value": "$inputs.order__orderer__notes"
            },
            {
              "name": "order__orderer__notes__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__notes__icontains"
            },
            {
              "name": "order__orderer__notes__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__notes__iexact"
            },
            {
              "name": "order__orderer__notes__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__notes__istartswith"
            },
            {
              "name": "order__orderer__phones__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contained_by"
            },
            {
              "name": "order__orderer__phones__contains",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contains"
            },
            {
              "name": "order__orderer__phones__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__phones__overlap"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.accept-task_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_action_details": "$response.body"
          }
        },
        {
          "stepId": "start-transit",
          "description": "Worker indicates they are in transit to the task location.",
          "operationId": "tasks_transit_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "order__orderer__company",
              "in": "query",
              "value": "$inputs.order__orderer__company"
            },
            {
              "name": "order__orderer__company__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__company__icontains"
            },
            {
              "name": "order__orderer__company__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__company__iexact"
            },
            {
              "name": "order__orderer__company__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__company__istartswith"
            },
            {
              "name": "order__orderer__emails__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contained_by"
            },
            {
              "name": "order__orderer__emails__contains",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contains"
            },
            {
              "name": "order__orderer__emails__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__emails__overlap"
            },
            {
              "name": "order__orderer__name",
              "in": "query",
              "value": "$inputs.order__orderer__name"
            },
            {
              "name": "order__orderer__name__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__name__icontains"
            },
            {
              "name": "order__orderer__name__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__name__iexact"
            },
            {
              "name": "order__orderer__name__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__name__istartswith"
            },
            {
              "name": "order__orderer__notes",
              "in": "query",
              "value": "$inputs.order__orderer__notes"
            },
            {
              "name": "order__orderer__notes__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__notes__icontains"
            },
            {
              "name": "order__orderer__notes__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__notes__iexact"
            },
            {
              "name": "order__orderer__notes__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__notes__istartswith"
            },
            {
              "name": "order__orderer__phones__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contained_by"
            },
            {
              "name": "order__orderer__phones__contains",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contains"
            },
            {
              "name": "order__orderer__phones__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__phones__overlap"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.start-transit_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_action_details": "$response.body"
          }
        },
        {
          "stepId": "activate-task",
          "description": "Worker activates the task upon arrival at the location.",
          "operationId": "tasks_activate_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "order__orderer__company",
              "in": "query",
              "value": "$inputs.order__orderer__company"
            },
            {
              "name": "order__orderer__company__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__company__icontains"
            },
            {
              "name": "order__orderer__company__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__company__iexact"
            },
            {
              "name": "order__orderer__company__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__company__istartswith"
            },
            {
              "name": "order__orderer__emails__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contained_by"
            },
            {
              "name": "order__orderer__emails__contains",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contains"
            },
            {
              "name": "order__orderer__emails__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__emails__overlap"
            },
            {
              "name": "order__orderer__name",
              "in": "query",
              "value": "$inputs.order__orderer__name"
            },
            {
              "name": "order__orderer__name__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__name__icontains"
            },
            {
              "name": "order__orderer__name__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__name__iexact"
            },
            {
              "name": "order__orderer__name__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__name__istartswith"
            },
            {
              "name": "order__orderer__notes",
              "in": "query",
              "value": "$inputs.order__orderer__notes"
            },
            {
              "name": "order__orderer__notes__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__notes__icontains"
            },
            {
              "name": "order__orderer__notes__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__notes__iexact"
            },
            {
              "name": "order__orderer__notes__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__notes__istartswith"
            },
            {
              "name": "order__orderer__phones__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contained_by"
            },
            {
              "name": "order__orderer__phones__contains",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contains"
            },
            {
              "name": "order__orderer__phones__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__phones__overlap"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.activate-task_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_action_details": "$response.body"
          }
        },
        {
          "stepId": "complete-task",
          "description": "Worker completes the task.",
          "operationId": "tasks_complete_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "order__orderer__company",
              "in": "query",
              "value": "$inputs.order__orderer__company"
            },
            {
              "name": "order__orderer__company__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__company__icontains"
            },
            {
              "name": "order__orderer__company__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__company__iexact"
            },
            {
              "name": "order__orderer__company__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__company__istartswith"
            },
            {
              "name": "order__orderer__emails__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contained_by"
            },
            {
              "name": "order__orderer__emails__contains",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contains"
            },
            {
              "name": "order__orderer__emails__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__emails__overlap"
            },
            {
              "name": "order__orderer__name",
              "in": "query",
              "value": "$inputs.order__orderer__name"
            },
            {
              "name": "order__orderer__name__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__name__icontains"
            },
            {
              "name": "order__orderer__name__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__name__iexact"
            },
            {
              "name": "order__orderer__name__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__name__istartswith"
            },
            {
              "name": "order__orderer__notes",
              "in": "query",
              "value": "$inputs.order__orderer__notes"
            },
            {
              "name": "order__orderer__notes__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__notes__icontains"
            },
            {
              "name": "order__orderer__notes__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__notes__iexact"
            },
            {
              "name": "order__orderer__notes__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__notes__istartswith"
            },
            {
              "name": "order__orderer__phones__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contained_by"
            },
            {
              "name": "order__orderer__phones__contains",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contains"
            },
            {
              "name": "order__orderer__phones__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__phones__overlap"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.complete-task_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_action_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "task_action_details": "$steps.complete-task.outputs.task_action_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "task-completion-with-signature",
      "summary": "Worker activates a task, uploads a signature as proof of delivery/service, and then completes the task.",
      "description": "Worker activates a task, uploads a signature as proof of delivery/service, and then completes the task.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "order__orderer__company": {
            "type": "string"
          },
          "order__orderer__company__icontains": {
            "type": "string"
          },
          "order__orderer__company__iexact": {
            "type": "string"
          },
          "order__orderer__company__istartswith": {
            "type": "string"
          },
          "order__orderer__emails__contained_by": {
            "type": "string"
          },
          "order__orderer__emails__contains": {
            "type": "string"
          },
          "order__orderer__emails__overlap": {
            "type": "string"
          },
          "order__orderer__name": {
            "type": "string"
          },
          "order__orderer__name__icontains": {
            "type": "string"
          },
          "order__orderer__name__iexact": {
            "type": "string"
          },
          "order__orderer__name__istartswith": {
            "type": "string"
          },
          "order__orderer__notes": {
            "type": "string"
          },
          "order__orderer__notes__icontains": {
            "type": "string"
          },
          "order__orderer__notes__iexact": {
            "type": "string"
          },
          "order__orderer__notes__istartswith": {
            "type": "string"
          },
          "order__orderer__phones__contained_by": {
            "type": "string"
          },
          "order__orderer__phones__contains": {
            "type": "string"
          },
          "order__orderer__phones__overlap": {
            "type": "string"
          },
          "activate-task-for-signature_body": {
            "type": "object"
          },
          "prepare-file-upload_body": {
            "type": "object"
          },
          "complete-task-with-signature_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "activate-task-for-signature",
          "description": "Worker activates the task upon arrival.",
          "operationId": "tasks_activate_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "order__orderer__company",
              "in": "query",
              "value": "$inputs.order__orderer__company"
            },
            {
              "name": "order__orderer__company__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__company__icontains"
            },
            {
              "name": "order__orderer__company__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__company__iexact"
            },
            {
              "name": "order__orderer__company__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__company__istartswith"
            },
            {
              "name": "order__orderer__emails__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contained_by"
            },
            {
              "name": "order__orderer__emails__contains",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contains"
            },
            {
              "name": "order__orderer__emails__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__emails__overlap"
            },
            {
              "name": "order__orderer__name",
              "in": "query",
              "value": "$inputs.order__orderer__name"
            },
            {
              "name": "order__orderer__name__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__name__icontains"
            },
            {
              "name": "order__orderer__name__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__name__iexact"
            },
            {
              "name": "order__orderer__name__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__name__istartswith"
            },
            {
              "name": "order__orderer__notes",
              "in": "query",
              "value": "$inputs.order__orderer__notes"
            },
            {
              "name": "order__orderer__notes__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__notes__icontains"
            },
            {
              "name": "order__orderer__notes__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__notes__iexact"
            },
            {
              "name": "order__orderer__notes__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__notes__istartswith"
            },
            {
              "name": "order__orderer__phones__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contained_by"
            },
            {
              "name": "order__orderer__phones__contains",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contains"
            },
            {
              "name": "order__orderer__phones__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__phones__overlap"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.activate-task-for-signature_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_action_details": "$response.body"
          }
        },
        {
          "stepId": "prepare-file-upload",
          "description": "Prepare for file upload by getting S3 signature details.",
          "operationId": "file_uploads_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.prepare-file-upload_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_upload_id": "$response.body",
            "file_upload_url": "$response.body",
            "s3_signature": "$response.body"
          }
        },
        {
          "stepId": "create-signature-record",
          "description": "Create a signature record linking the task and the uploaded file.",
          "operationId": "signatures_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "file_upload_url": "$steps.prepare-file-upload.outputs.file_upload_url"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "signature_id": "$response.body",
            "signature_details": "$response.body"
          }
        },
        {
          "stepId": "complete-task-with-signature",
          "description": "Worker completes the task, potentially adding notes about the signature.",
          "operationId": "tasks_complete_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "order__orderer__company",
              "in": "query",
              "value": "$inputs.order__orderer__company"
            },
            {
              "name": "order__orderer__company__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__company__icontains"
            },
            {
              "name": "order__orderer__company__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__company__iexact"
            },
            {
              "name": "order__orderer__company__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__company__istartswith"
            },
            {
              "name": "order__orderer__emails__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contained_by"
            },
            {
              "name": "order__orderer__emails__contains",
              "in": "query",
              "value": "$inputs.order__orderer__emails__contains"
            },
            {
              "name": "order__orderer__emails__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__emails__overlap"
            },
            {
              "name": "order__orderer__name",
              "in": "query",
              "value": "$inputs.order__orderer__name"
            },
            {
              "name": "order__orderer__name__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__name__icontains"
            },
            {
              "name": "order__orderer__name__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__name__iexact"
            },
            {
              "name": "order__orderer__name__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__name__istartswith"
            },
            {
              "name": "order__orderer__notes",
              "in": "query",
              "value": "$inputs.order__orderer__notes"
            },
            {
              "name": "order__orderer__notes__icontains",
              "in": "query",
              "value": "$inputs.order__orderer__notes__icontains"
            },
            {
              "name": "order__orderer__notes__iexact",
              "in": "query",
              "value": "$inputs.order__orderer__notes__iexact"
            },
            {
              "name": "order__orderer__notes__istartswith",
              "in": "query",
              "value": "$inputs.order__orderer__notes__istartswith"
            },
            {
              "name": "order__orderer__phones__contained_by",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contained_by"
            },
            {
              "name": "order__orderer__phones__contains",
              "in": "query",
              "value": "$inputs.order__orderer__phones__contains"
            },
            {
              "name": "order__orderer__phones__overlap",
              "in": "query",
              "value": "$inputs.order__orderer__phones__overlap"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.complete-task-with-signature_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_action_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "task_action_details": "$steps.complete-task-with-signature.outputs.task_action_details",
        "file_upload_id": "$steps.prepare-file-upload.outputs.file_upload_id",
        "file_upload_url": "$steps.prepare-file-upload.outputs.file_upload_url",
        "s3_signature": "$steps.prepare-file-upload.outputs.s3_signature",
        "signature_id": "$steps.create-signature-record.outputs.signature_id",
        "signature_details": "$steps.create-signature-record.outputs.signature_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "worker-goes-onoff-duty",
      "summary": "Allows a worker (user) to toggle their on-duty status.",
      "description": "Allows a worker (user) to toggle their on-duty status.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "go-on-duty_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "go-on-duty",
          "description": "Set the worker's status to 'on duty' for a specific account.",
          "operationId": "users_on_duty_update",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.go-on-duty_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user_details": "$response.body"
          }
        },
        {
          "stepId": "go-off-duty",
          "description": "Set the worker's status to 'off duty'.",
          "operationId": "users_on_duty_destroy",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "user_details": "$steps.go-off-duty.outputs.user_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "bulk-import-tasks-from-file",
      "summary": "Upload a task data file and initiate a background import process, then monitor its status.",
      "description": "Upload a task data file and initiate a background import process, then monitor its status.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "prepare-task-import-upload_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "prepare-task-import-upload",
          "description": "Prepare for task import file upload by getting S3 signature details.",
          "operationId": "file_uploads_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.prepare-task-import-upload_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_upload_id": "$response.body",
            "file_upload_url": "$response.body",
            "s3_signature": "$response.body"
          }
        },
        {
          "stepId": "start-task-import",
          "description": "Start the background task import process using the uploaded file.",
          "operationId": "task_import_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "file_upload_url": "$steps.prepare-task-import-upload.outputs.file_upload_url"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "import_job_id": "$response.body",
            "import_job_state": "$response.body"
          }
        },
        {
          "stepId": "monitor-task-import",
          "description": "Poll the status of the background import job until completed or failed.",
          "operationId": "task_import_retrieve",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "import_job_details": "$response.body",
            "import_job_state": "$response.body",
            "tasks_created": "$response.body",
            "errors": "$response.body"
          }
        }
      ],
      "outputs": {
        "file_upload_id": "$steps.prepare-task-import-upload.outputs.file_upload_id",
        "file_upload_url": "$steps.prepare-task-import-upload.outputs.file_upload_url",
        "s3_signature": "$steps.prepare-task-import-upload.outputs.s3_signature",
        "import_job_id": "$steps.start-task-import.outputs.import_job_id",
        "import_job_state": "$steps.monitor-task-import.outputs.import_job_state",
        "import_job_details": "$steps.monitor-task-import.outputs.import_job_details",
        "tasks_created": "$steps.monitor-task-import.outputs.tasks_created",
        "errors": "$steps.monitor-task-import.outputs.errors"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-user-roles",
      "summary": "Create an account role for a user, activate it, and potentially retrieve the activation token.",
      "description": "Create an account role for a user, activate it, and potentially retrieve the activation token.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "create-account-role_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-account-role",
          "description": "Create a new role linking a user to an account.",
          "operationId": "account_roles_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-account-role_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "account_role_id": "$response.body",
            "account_role_details": "$response.body"
          }
        },
        {
          "stepId": "get-activation-token",
          "description": "Retrieve the activation token for the newly created account role.",
          "operationId": "account_roles_token_retrieve",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "activation_token": "$response.body"
          }
        },
        {
          "stepId": "activate-account-role",
          "description": "Activate the account role using the retrieved token.",
          "operationId": "account_roles_activate_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "account_role_id": "$steps.create-account-role.outputs.account_role_id",
              "activation_token": "$steps.get-activation-token.outputs.activation_token"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "activation_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "account_role_id": "$steps.create-account-role.outputs.account_role_id",
        "account_role_details": "$steps.create-account-role.outputs.account_role_details",
        "activation_token": "$steps.get-activation-token.outputs.activation_token",
        "activation_details": "$steps.activate-account-role.outputs.activation_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-and-activate-webhook",
      "summary": "Create a new webhook for receiving event notifications and activate it.",
      "description": "Create a new webhook for receiving event notifications and activate it.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "create-webhook_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-webhook",
          "description": "Define a new webhook with target URL, event types, and other configurations.",
          "operationId": "webhooks_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-webhook_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_id": "$response.body",
            "webhook_details": "$response.body"
          }
        },
        {
          "stepId": "activate-webhook",
          "description": "Activate the newly created webhook to start receiving events.",
          "operationId": "webhooks_active_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "webhook_id": "$steps.create-webhook.outputs.webhook_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "webhook_id": "$steps.create-webhook.outputs.webhook_id",
        "webhook_details": "$steps.activate-webhook.outputs.webhook_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-account-billing-stripe",
      "summary": "Create a Stripe setup intent, attach the payment method to the account, and set it as default.",
      "description": "Create a Stripe setup intent, attach the payment method to the account, and set it as default.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "create-stripe-setup-intent_body": {
            "type": "object"
          },
          "attach-stripe-payment-method_body": {
            "type": "object"
          },
          "set-default-stripe-payment-method_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-stripe-setup-intent",
          "description": "Initiate a Stripe Setup Intent to collect payment method details.",
          "operationId": "accounts_stripe_create_setup_intent_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-stripe-setup-intent_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "setup_intent_details": "$response.body"
          }
        },
        {
          "stepId": "attach-stripe-payment-method",
          "description": "Attach the confirmed Stripe payment method to the GSMtasks account.",
          "operationId": "accounts_stripe_attach_payment_method_update",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.attach-stripe-payment-method_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "attach_details": "$response.body"
          }
        },
        {
          "stepId": "set-default-stripe-payment-method",
          "description": "Set the newly attached Stripe payment method as the default for the account.",
          "operationId": "accounts_stripe_set_default_payment_method_update",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.set-default-stripe-payment-method_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "set_default_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "setup_intent_details": "$steps.create-stripe-setup-intent.outputs.setup_intent_details",
        "attach_details": "$steps.attach-stripe-payment-method.outputs.attach_details",
        "set_default_details": "$steps.set-default-stripe-payment-method.outputs.set_default_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "export-task-data",
      "summary": "Initiate a task data export and retrieve the download link.",
      "description": "Initiate a task data export and retrieve the download link.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "create-task-export_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-task-export",
          "description": "Create a request to export task data.",
          "operationId": "exports_create",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-task-export_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "export_id": "$response.body",
            "export_details": "$response.body"
          }
        },
        {
          "stepId": "get-task-export-link",
          "description": "Retrieve the details of the export request, including the download link.",
          "operationId": "exports_retrieve",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "export_link": "$response.body",
            "export_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "export_id": "$steps.create-task-export.outputs.export_id",
        "export_details": "$steps.get-task-export-link.outputs.export_details",
        "export_link": "$steps.get-task-export-link.outputs.export_link"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}