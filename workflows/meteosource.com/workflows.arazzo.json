{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/meteosource.com/main/v1/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "get-weather-forecast-by-place-name",
      "summary": "Allows a user to search for a location by its name and then retrieve its current weather and forecast data (hourly, daily, alerts). This workflow is valuable for applications requiring location-based weather information where users provide a textual place name.",
      "description": "Allows a user to search for a location by its name and then retrieve its current weather and forecast data (hourly, daily, alerts). This workflow is valuable for applications requiring location-based weather information where users provide a textual place name.",
      "inputs": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "place_id": {
            "type": "string"
          },
          "lat": {
            "type": "string"
          },
          "lon": {
            "type": "string"
          },
          "sections": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "units": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-place-by-name",
          "description": "Searches for a place using a full name or ZIP code and returns a list of matching locations, including their place_id and coordinates. For this workflow, the first result's place_id will be used.",
          "operationId": "find_places_find_places_get",
          "parameters": [
            {
              "name": "text",
              "in": "query",
              "value": "$inputs.text"
            },
            {
              "name": "language",
              "in": "query",
              "value": "$inputs.language"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "found_places": "$response.body#/0/found_places"
          }
        },
        {
          "stepId": "get-point-weather-by-place-id",
          "description": "Retrieves current weather, hourly, daily forecasts, and weather alerts for the selected place using its unique place_id.",
          "operationId": "point_point_get",
          "parameters": [
            {
              "name": "place_id",
              "in": "query",
              "value": "$steps.search-place-by-name.outputs.found_places.place_id"
            },
            {
              "name": "lat",
              "in": "query",
              "value": "$inputs.lat"
            },
            {
              "name": "lon",
              "in": "query",
              "value": "$inputs.lon"
            },
            {
              "name": "sections",
              "in": "query",
              "value": "$inputs.sections"
            },
            {
              "name": "timezone",
              "in": "query",
              "value": "$inputs.timezone"
            },
            {
              "name": "language",
              "in": "query",
              "value": "$inputs.language"
            },
            {
              "name": "units",
              "in": "query",
              "value": "$inputs.units"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "current_weather": "$response.body#/current_weather",
            "hourly_forecast": "$response.body#/hourly_forecast",
            "daily_forecast": "$response.body#/daily_forecast",
            "weather_alerts": "$response.body#/weather_alerts"
          }
        }
      ],
      "outputs": {
        "found_places": "$steps.search-place-by-name.outputs.found_places",
        "current_weather": "$steps.get-point-weather-by-place-id.outputs.current_weather",
        "hourly_forecast": "$steps.get-point-weather-by-place-id.outputs.hourly_forecast",
        "daily_forecast": "$steps.get-point-weather-by-place-id.outputs.daily_forecast",
        "weather_alerts": "$steps.get-point-weather-by-place-id.outputs.weather_alerts"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "display-weather-map-by-place-name",
      "summary": "Enables a user to find a location by name and then visualize a specific weather variable (e.g., temperature, precipitation) on a PNG map for the area around that location. This is useful for visual weather applications.",
      "description": "Enables a user to find a location by name and then visualize a specific weather variable (e.g., temperature, precipitation) on a PNG map for the area around that location. This is useful for visual weather applications.",
      "inputs": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "tile_x": {
            "type": "string"
          },
          "tile_y": {
            "type": "string"
          },
          "tile_zoom": {
            "type": "string"
          },
          "min_lat": {
            "type": "string"
          },
          "min_lon": {
            "type": "string"
          },
          "max_lat": {
            "type": "string"
          },
          "max_lon": {
            "type": "string"
          },
          "variable": {
            "type": "string"
          },
          "datetime": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-place-for-map",
          "description": "Searches for a place using a full name or ZIP code to obtain its geographic coordinates (latitude and longitude). For this workflow, the coordinates of the first result will be used.",
          "operationId": "find_places_find_places_get",
          "parameters": [
            {
              "name": "text",
              "in": "query",
              "value": "$inputs.text"
            },
            {
              "name": "language",
              "in": "query",
              "value": "$inputs.language"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "found_places": "$response.body#/0/found_places"
          }
        },
        {
          "stepId": "get-weather-map-for-area",
          "description": "Generates a PNG weather map for a specified variable and time. The map's area is defined by a bounding box derived from the latitude and longitude of the previously searched place.",
          "operationId": "map_map_get",
          "parameters": [
            {
              "name": "tile_x",
              "in": "query",
              "value": "$inputs.tile_x"
            },
            {
              "name": "tile_y",
              "in": "query",
              "value": "$inputs.tile_y"
            },
            {
              "name": "tile_zoom",
              "in": "query",
              "value": "$inputs.tile_zoom"
            },
            {
              "name": "min_lat",
              "in": "query",
              "value": "$steps.search-place-for-map.outputs.found_places.lat"
            },
            {
              "name": "min_lon",
              "in": "query",
              "value": "$steps.search-place-for-map.outputs.found_places.lon"
            },
            {
              "name": "max_lat",
              "in": "query",
              "value": "$steps.search-place-for-map.outputs.found_places.lat"
            },
            {
              "name": "max_lon",
              "in": "query",
              "value": "$steps.search-place-for-map.outputs.found_places.lon"
            },
            {
              "name": "variable",
              "in": "query",
              "value": "$inputs.variable"
            },
            {
              "name": "datetime",
              "in": "query",
              "value": "$inputs.datetime"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "weather_map_png": "$response.body#/weather_map_png"
          }
        }
      ],
      "outputs": {
        "found_places": "$steps.search-place-for-map.outputs.found_places",
        "weather_map_png": "$steps.get-weather-map-for-area.outputs.weather_map_png"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
