{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/1password.com/events/1.2.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "retrieve-audit-events-with-pagination",
      "summary": "Fetches general audit events (user actions, administrative changes, etc.) for compliance and security auditing, retrieving subsequent pages using the cursor.",
      "description": "Fetches general audit events (user actions, administrative changes, etc.) for compliance and security auditing, retrieving subsequent pages using the cursor.",
      "steps": [
        {
          "stepId": "fetch-first-auditevent-page",
          "description": "Retrieves the first page of audit events within a specified time range.",
          "operationId": "getAuditEvents",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "audit_events_page1": "$response.body",
            "cursor": "$response.body",
            "has_more": "$response.body"
          }
        },
        {
          "stepId": "fetch-next-auditevent-page",
          "description": "Retrieves the next page of audit events using the cursor from the previous response. This step would be repeated as long as 'has_more' is true.",
          "operationId": "getAuditEvents",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "audit_events_next_page": "$response.body",
            "cursor": "$response.body",
            "has_more": "$response.body"
          }
        }
      ],
      "outputs": {
        "audit_events_page1": "$steps.fetch-first-auditevent-page.outputs.audit_events_page1",
        "cursor": "$steps.fetch-next-auditevent-page.outputs.cursor",
        "has_more": "$steps.fetch-next-auditevent-page.outputs.has_more",
        "audit_events_next_page": "$steps.fetch-next-auditevent-page.outputs.audit_events_next_page"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "retrieve-sign-in-attempts-with-pagination",
      "summary": "Fetches sign-in attempt events for security monitoring, retrieving subsequent pages using the cursor until all relevant events within the initial time range are collected.",
      "description": "Fetches sign-in attempt events for security monitoring, retrieving subsequent pages using the cursor until all relevant events within the initial time range are collected.",
      "steps": [
        {
          "stepId": "fetch-first-signin-page",
          "description": "Retrieves the first page of sign-in attempt events within a specified time range.",
          "operationId": "getSignInAttempts",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "signin_attempts_page1": "$response.body",
            "cursor": "$response.body",
            "has_more": "$response.body"
          }
        },
        {
          "stepId": "fetch-next-signin-page",
          "description": "Retrieves the next page of sign-in attempt events using the cursor from the previous response. This step would be repeated as long as 'has_more' is true.",
          "operationId": "getSignInAttempts",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "signin_attempts_next_page": "$response.body",
            "cursor": "$response.body",
            "has_more": "$response.body"
          }
        }
      ],
      "outputs": {
        "signin_attempts_page1": "$steps.fetch-first-signin-page.outputs.signin_attempts_page1",
        "cursor": "$steps.fetch-next-signin-page.outputs.cursor",
        "has_more": "$steps.fetch-next-signin-page.outputs.has_more",
        "signin_attempts_next_page": "$steps.fetch-next-signin-page.outputs.signin_attempts_next_page"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "retrieve-item-usage-events-with-pagination",
      "summary": "Fetches item usage events (like password fills, copies, reveals) for auditing access to sensitive information, retrieving subsequent pages using the cursor.",
      "description": "Fetches item usage events (like password fills, copies, reveals) for auditing access to sensitive information, retrieving subsequent pages using the cursor.",
      "steps": [
        {
          "stepId": "fetch-first-itemusage-page",
          "description": "Retrieves the first page of item usage events within a specified time range.",
          "operationId": "getItemUsages",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "item_usages_page1": "$response.body",
            "cursor": "$response.body",
            "has_more": "$response.body"
          }
        },
        {
          "stepId": "fetch-next-itemusage-page",
          "description": "Retrieves the next page of item usage events using the cursor from the previous response. This step would be repeated as long as 'has_more' is true.",
          "operationId": "getItemUsages",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "item_usages_next_page": "$response.body",
            "cursor": "$response.body",
            "has_more": "$response.body"
          }
        }
      ],
      "outputs": {
        "item_usages_page1": "$steps.fetch-first-itemusage-page.outputs.item_usages_page1",
        "cursor": "$steps.fetch-next-itemusage-page.outputs.cursor",
        "has_more": "$steps.fetch-next-itemusage-page.outputs.has_more",
        "item_usages_next_page": "$steps.fetch-next-itemusage-page.outputs.item_usages_next_page"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}