{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/getpostman.com/main/1.20.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "define-api-add-schema-and-generate-contract-test-collection",
      "summary": "Creates a new API definition in a workspace, adds an initial version, uploads an API schema (e.g., OpenAPI) to that version, and then generates a Postman collection from the schema, linking it as a contract test relation. This automates the foundational setup for API development and testing within Postman.",
      "description": "Creates a new API definition in a workspace, adds an initial version, uploads an API schema (e.g., OpenAPI) to that version, and then generates a Postman collection from the schema, linking it as a contract test relation. This automates the foundational setup for API development and testing within Postman.",
      "inputs": {
        "type": "object",
        "properties": {
          "workspace": {
            "type": "string"
          },
          "create-api_body": {
            "type": "object"
          },
          "apiId": {
            "type": "string"
          },
          "create-api-version_body": {
            "type": "object"
          },
          "apiVersionId": {
            "type": "string"
          },
          "create-schema_body": {
            "type": "object"
          },
          "schemaId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "relations": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-api",
          "description": "Create a new API definition within a specified workspace.",
          "operationId": "createApi",
          "parameters": [
            {
              "name": "workspace",
              "in": "query",
              "value": "$inputs.workspace"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-api_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "api.id": "$response.body",
            "api.name": "$response.body",
            "api.createdAt": "$response.body",
            "api.createdBy": "$response.body"
          }
        },
        {
          "stepId": "create-api-version",
          "description": "Create an initial version for the newly created API.",
          "operationId": "createApiVersion",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-api-version_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "version.id": "$response.body",
            "version.name": "$response.body",
            "version.api": "$response.body"
          }
        },
        {
          "stepId": "create-schema",
          "description": "Upload an API schema definition (e.g., OpenAPI, RAML) to the API version.",
          "operationId": "createSchema",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            },
            {
              "name": "apiVersionId",
              "in": "path",
              "value": "$inputs.apiVersionId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-schema_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "schema.id": "$response.body",
            "schema.apiVersion": "$response.body",
            "schema.language": "$response.body",
            "schema.type": "$response.body"
          }
        },
        {
          "stepId": "create-collection-from-schema",
          "description": "Generate a Postman collection from the uploaded schema and link it as a contract test relation to the API version.",
          "operationId": "createCollectionFromSchema",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            },
            {
              "name": "apiVersionId",
              "in": "path",
              "value": "$inputs.apiVersionId"
            },
            {
              "name": "schemaId",
              "in": "path",
              "value": "$inputs.schemaId"
            },
            {
              "name": "workspace",
              "in": "query",
              "value": "$inputs.workspace"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name",
              "relations": "$inputs.relations"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body",
            "collection.uid": "$response.body",
            "relations": "$response.body"
          }
        }
      ],
      "outputs": {
        "api.id": "$steps.create-api.outputs.api.id",
        "api.name": "$steps.create-api.outputs.api.name",
        "api.createdAt": "$steps.create-api.outputs.api.createdAt",
        "api.createdBy": "$steps.create-api.outputs.api.createdBy",
        "version.id": "$steps.create-api-version.outputs.version.id",
        "version.name": "$steps.create-api-version.outputs.version.name",
        "version.api": "$steps.create-api-version.outputs.version.api",
        "schema.id": "$steps.create-schema.outputs.schema.id",
        "schema.apiVersion": "$steps.create-schema.outputs.schema.apiVersion",
        "schema.language": "$steps.create-schema.outputs.schema.language",
        "schema.type": "$steps.create-schema.outputs.schema.type",
        "collection.id": "$steps.create-collection-from-schema.outputs.collection.id",
        "collection.uid": "$steps.create-collection-from-schema.outputs.collection.uid",
        "relations": "$steps.create-collection-from-schema.outputs.relations"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "define-api-schema-and-link-existing-documentation-collection",
      "summary": "Creates a new API and version, uploads its schema, and then links an *existing* Postman collection (identified by its UID) as the 'documentation' relation for that API version. This connects formal API definitions with pre-existing documentation.",
      "description": "Creates a new API and version, uploads its schema, and then links an *existing* Postman collection (identified by its UID) as the 'documentation' relation for that API version. This connects formal API definitions with pre-existing documentation.",
      "inputs": {
        "type": "object",
        "properties": {
          "workspace": {
            "type": "string"
          },
          "create-api_body": {
            "type": "object"
          },
          "apiId": {
            "type": "string"
          },
          "create-api-version_body": {
            "type": "object"
          },
          "apiVersionId": {
            "type": "string"
          },
          "create-schema_body": {
            "type": "object"
          },
          "documentation": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-api",
          "description": "Create a new API definition.",
          "operationId": "createApi",
          "parameters": [
            {
              "name": "workspace",
              "in": "query",
              "value": "$inputs.workspace"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-api_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "api.id": "$response.body",
            "api.name": "$response.body"
          }
        },
        {
          "stepId": "create-api-version",
          "description": "Create an initial version for the API.",
          "operationId": "createApiVersion",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-api-version_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "version.id": "$response.body",
            "version.name": "$response.body"
          }
        },
        {
          "stepId": "create-schema",
          "description": "Upload an API schema definition to the API version.",
          "operationId": "createSchema",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            },
            {
              "name": "apiVersionId",
              "in": "path",
              "value": "$inputs.apiVersionId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-schema_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "schema.id": "$response.body"
          }
        },
        {
          "stepId": "create-relations",
          "description": "Link an existing collection (by UID) as a 'documentation' relation to the API version.",
          "operationId": "createRelations",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            },
            {
              "name": "apiVersionId",
              "in": "path",
              "value": "$inputs.apiVersionId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "documentation": "$inputs.documentation"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "documentation": "$response.body"
          }
        }
      ],
      "outputs": {
        "api.id": "$steps.create-api.outputs.api.id",
        "api.name": "$steps.create-api.outputs.api.name",
        "version.id": "$steps.create-api-version.outputs.version.id",
        "version.name": "$steps.create-api-version.outputs.version.name",
        "schema.id": "$steps.create-schema.outputs.schema.id",
        "documentation": "$steps.create-relations.outputs.documentation"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-run-monitor-for-existing-collection",
      "summary": "Sets up and triggers monitoring for an existing Postman collection, optionally using a specific environment. This workflow automates the process of ensuring an API's health and performance.",
      "description": "Sets up and triggers monitoring for an existing Postman collection, optionally using a specific environment. This workflow automates the process of ensuring an API's health and performance.",
      "inputs": {
        "type": "object",
        "properties": {
          "create-monitor_body": {
            "type": "object"
          },
          "monitor_uid": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-monitor",
          "description": "Create a new monitor for a specified collection and environment with a defined schedule.",
          "operationId": "createMonitor",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-monitor_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "monitor.id": "$response.body",
            "monitor.name": "$response.body",
            "monitor.uid": "$response.body"
          }
        },
        {
          "stepId": "run-monitor",
          "description": "Trigger an immediate run of the newly created monitor to verify its setup and get initial results.",
          "operationId": "runAMonitor",
          "parameters": [
            {
              "name": "monitor_uid",
              "in": "path",
              "value": "$inputs.monitor_uid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "run.info.status": "$response.body",
            "run.stats": "$response.body",
            "run.executions": "$response.body",
            "run.failures": "$response.body"
          }
        }
      ],
      "outputs": {
        "monitor.id": "$steps.create-monitor.outputs.monitor.id",
        "monitor.name": "$steps.create-monitor.outputs.monitor.name",
        "monitor.uid": "$steps.create-monitor.outputs.monitor.uid",
        "run.info.status": "$steps.run-monitor.outputs.run.info.status",
        "run.stats": "$steps.run-monitor.outputs.run.stats",
        "run.executions": "$steps.run-monitor.outputs.run.executions",
        "run.failures": "$steps.run-monitor.outputs.run.failures"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "sync-api-collection-with-schema-changes",
      "summary": "After updating an API schema, this workflow retrieves a related collection (e.g., documentation or test suite) and triggers a sync operation to update the collection based on the latest schema changes.",
      "description": "After updating an API schema, this workflow retrieves a related collection (e.g., documentation or test suite) and triggers a sync operation to update the collection based on the latest schema changes.",
      "inputs": {
        "type": "object",
        "properties": {
          "apiId": {
            "type": "string"
          },
          "apiVersionId": {
            "type": "string"
          },
          "schemaId": {
            "type": "string"
          },
          "update-schema_body": {
            "type": "object"
          },
          "entityType": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-api-version-details",
          "description": "Get details of a specific API version, including linked schema IDs.",
          "operationId": "getAnApiVersion",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            },
            {
              "name": "apiVersionId",
              "in": "path",
              "value": "$inputs.apiVersionId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "version.id": "$response.body",
            "version.schema": "$response.body"
          }
        },
        {
          "stepId": "update-schema",
          "description": "Update the schema content for the API version.",
          "operationId": "updateSchema",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            },
            {
              "name": "apiVersionId",
              "in": "path",
              "value": "$inputs.apiVersionId"
            },
            {
              "name": "schemaId",
              "in": "path",
              "value": "$inputs.schemaId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-schema_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "schema.id": "$response.body"
          }
        },
        {
          "stepId": "get-documentation-relation",
          "description": "Get the documentation relation linked to the API version to find the collection ID.",
          "operationId": "getDocumentationRelations",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$inputs.apiId"
            },
            {
              "name": "apiVersionId",
              "in": "path",
              "value": "$inputs.apiVersionId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "documentation": "$response.body"
          }
        },
        {
          "stepId": "sync-relation-with-schema",
          "description": "Trigger the synchronization of the documentation collection with the updated API schema.",
          "operationId": "syncRelationsWithSchema",
          "parameters": [
            {
              "name": "apiId",
              "in": "path",
              "value": "$steps.get-documentation-relation.outputs.documentation.apiId"
            },
            {
              "name": "apiVersionId",
              "in": "path",
              "value": "$steps.get-documentation-relation.outputs.documentation.apiVersionId"
            },
            {
              "name": "entityType",
              "in": "path",
              "value": "$inputs.entityType"
            },
            {
              "name": "entityId",
              "in": "path",
              "value": "$steps.get-documentation-relation.outputs.documentation.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body"
          }
        }
      ],
      "outputs": {
        "version.id": "$steps.get-api-version-details.outputs.version.id",
        "version.schema": "$steps.get-api-version-details.outputs.version.schema",
        "schema.id": "$steps.update-schema.outputs.schema.id",
        "documentation": "$steps.get-documentation-relation.outputs.documentation",
        "success": "$steps.sync-relation-with-schema.outputs.success"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-publish-mock-server-for-collection",
      "summary": "Creates a mock server based on an existing Postman collection and environment, then publishes it to make it accessible. Useful for frontend development or testing dependencies before the actual API is ready.",
      "description": "Creates a mock server based on an existing Postman collection and environment, then publishes it to make it accessible. Useful for frontend development or testing dependencies before the actual API is ready.",
      "inputs": {
        "type": "object",
        "properties": {
          "create-mock_body": {
            "type": "object"
          },
          "mock_uid": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-mock",
          "description": "Create a new mock server based on a specified collection and environment.",
          "operationId": "createMock",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-mock_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "mock.id": "$response.body",
            "mock.uid": "$response.body",
            "mock.mockUrl": "$response.body",
            "mock.owner": "$response.body"
          }
        },
        {
          "stepId": "publish-mock",
          "description": "Publish the newly created mock server to make it publicly accessible.",
          "operationId": "publishMock",
          "parameters": [
            {
              "name": "mock_uid",
              "in": "path",
              "value": "$inputs.mock_uid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "mock.id": "$response.body"
          }
        }
      ],
      "outputs": {
        "mock.id": "$steps.publish-mock.outputs.mock.id",
        "mock.uid": "$steps.create-mock.outputs.mock.uid",
        "mock.mockUrl": "$steps.create-mock.outputs.mock.mockUrl",
        "mock.owner": "$steps.create-mock.outputs.mock.owner"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "fork-update-externally-and-merge-collection",
      "summary": "Facilitates a collaborative workflow by forking an existing collection into a workspace, allowing for external updates (e.g., via Postman app), and then merging the changes back into the original collection.",
      "description": "Facilitates a collaborative workflow by forking an existing collection into a workspace, allowing for external updates (e.g., via Postman app), and then merging the changes back into the original collection.",
      "inputs": {
        "type": "object",
        "properties": {
          "collection_uid": {
            "type": "string"
          },
          "workspace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "strategy": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-fork",
          "description": "Create a fork of an existing collection into a specified workspace.",
          "operationId": "createAFork",
          "parameters": [
            {
              "name": "collection_uid",
              "in": "path",
              "value": "$inputs.collection_uid"
            },
            {
              "name": "workspace",
              "in": "query",
              "value": "$inputs.workspace"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body",
            "collection.name": "$response.body",
            "collection.uid": "$response.body",
            "collection.fork.label": "$response.body",
            "collection.fork.createdAt": "$response.body"
          }
        },
        {
          "stepId": "merge-fork",
          "description": "Merge the changes from the forked collection (source) back into the original collection (destination). Assumes updates happened externally.",
          "operationId": "mergeAFork",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "destination": "$inputs.destination",
              "source": "$inputs.source",
              "strategy": "$inputs.strategy"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body",
            "collection.name": "$response.body",
            "collection.uid": "$response.body"
          }
        }
      ],
      "outputs": {
        "collection.id": "$steps.merge-fork.outputs.collection.id",
        "collection.name": "$steps.merge-fork.outputs.collection.name",
        "collection.uid": "$steps.merge-fork.outputs.collection.uid",
        "collection.fork.label": "$steps.create-fork.outputs.collection.fork.label",
        "collection.fork.createdAt": "$steps.create-fork.outputs.collection.fork.createdAt"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}