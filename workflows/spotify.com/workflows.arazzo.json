{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/spotify.com/main/1.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "create-playlist-from-artist-recommendations",
      "summary": "Searches for an artist, gets recommendations based on that artist, creates a new playlist for the current user, and adds the recommended tracks to it.",
      "description": "Searches for an artist, gets recommendations based on that artist, creates a new playlist for the current user, and adds the recommended tracks to it.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "include_external": {
            "type": "string"
          },
          "seed_artists": {
            "type": "string"
          },
          "seed_genres": {
            "type": "string"
          },
          "seed_tracks": {
            "type": "string"
          },
          "min_acousticness": {
            "type": "string"
          },
          "max_acousticness": {
            "type": "string"
          },
          "target_acousticness": {
            "type": "string"
          },
          "min_danceability": {
            "type": "string"
          },
          "max_danceability": {
            "type": "string"
          },
          "target_danceability": {
            "type": "string"
          },
          "min_duration_ms": {
            "type": "string"
          },
          "max_duration_ms": {
            "type": "string"
          },
          "target_duration_ms": {
            "type": "string"
          },
          "min_energy": {
            "type": "string"
          },
          "max_energy": {
            "type": "string"
          },
          "target_energy": {
            "type": "string"
          },
          "min_instrumentalness": {
            "type": "string"
          },
          "max_instrumentalness": {
            "type": "string"
          },
          "target_instrumentalness": {
            "type": "string"
          },
          "min_key": {
            "type": "string"
          },
          "max_key": {
            "type": "string"
          },
          "target_key": {
            "type": "string"
          },
          "min_liveness": {
            "type": "string"
          },
          "max_liveness": {
            "type": "string"
          },
          "target_liveness": {
            "type": "string"
          },
          "min_loudness": {
            "type": "string"
          },
          "max_loudness": {
            "type": "string"
          },
          "target_loudness": {
            "type": "string"
          },
          "min_mode": {
            "type": "string"
          },
          "max_mode": {
            "type": "string"
          },
          "target_mode": {
            "type": "string"
          },
          "min_popularity": {
            "type": "string"
          },
          "max_popularity": {
            "type": "string"
          },
          "target_popularity": {
            "type": "string"
          },
          "min_speechiness": {
            "type": "string"
          },
          "max_speechiness": {
            "type": "string"
          },
          "target_speechiness": {
            "type": "string"
          },
          "min_tempo": {
            "type": "string"
          },
          "max_tempo": {
            "type": "string"
          },
          "target_tempo": {
            "type": "string"
          },
          "min_time_signature": {
            "type": "string"
          },
          "max_time_signature": {
            "type": "string"
          },
          "target_time_signature": {
            "type": "string"
          },
          "min_valence": {
            "type": "string"
          },
          "max_valence": {
            "type": "string"
          },
          "target_valence": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "uris": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-artist",
          "description": "Search for an artist by name.",
          "operationId": "search",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "include_external",
              "in": "query",
              "value": "$inputs.include_external"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "artist_id": "$response.body"
          }
        },
        {
          "stepId": "get-recommendations",
          "description": "Get track recommendations based on the seed artist.",
          "operationId": "get-recommendations",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "seed_artists",
              "in": "query",
              "value": "$steps.search-artist.outputs.artist_id"
            },
            {
              "name": "seed_genres",
              "in": "query",
              "value": "$inputs.seed_genres"
            },
            {
              "name": "seed_tracks",
              "in": "query",
              "value": "$inputs.seed_tracks"
            },
            {
              "name": "min_acousticness",
              "in": "query",
              "value": "$inputs.min_acousticness"
            },
            {
              "name": "max_acousticness",
              "in": "query",
              "value": "$inputs.max_acousticness"
            },
            {
              "name": "target_acousticness",
              "in": "query",
              "value": "$inputs.target_acousticness"
            },
            {
              "name": "min_danceability",
              "in": "query",
              "value": "$inputs.min_danceability"
            },
            {
              "name": "max_danceability",
              "in": "query",
              "value": "$inputs.max_danceability"
            },
            {
              "name": "target_danceability",
              "in": "query",
              "value": "$inputs.target_danceability"
            },
            {
              "name": "min_duration_ms",
              "in": "query",
              "value": "$inputs.min_duration_ms"
            },
            {
              "name": "max_duration_ms",
              "in": "query",
              "value": "$inputs.max_duration_ms"
            },
            {
              "name": "target_duration_ms",
              "in": "query",
              "value": "$inputs.target_duration_ms"
            },
            {
              "name": "min_energy",
              "in": "query",
              "value": "$inputs.min_energy"
            },
            {
              "name": "max_energy",
              "in": "query",
              "value": "$inputs.max_energy"
            },
            {
              "name": "target_energy",
              "in": "query",
              "value": "$inputs.target_energy"
            },
            {
              "name": "min_instrumentalness",
              "in": "query",
              "value": "$inputs.min_instrumentalness"
            },
            {
              "name": "max_instrumentalness",
              "in": "query",
              "value": "$inputs.max_instrumentalness"
            },
            {
              "name": "target_instrumentalness",
              "in": "query",
              "value": "$inputs.target_instrumentalness"
            },
            {
              "name": "min_key",
              "in": "query",
              "value": "$inputs.min_key"
            },
            {
              "name": "max_key",
              "in": "query",
              "value": "$inputs.max_key"
            },
            {
              "name": "target_key",
              "in": "query",
              "value": "$inputs.target_key"
            },
            {
              "name": "min_liveness",
              "in": "query",
              "value": "$inputs.min_liveness"
            },
            {
              "name": "max_liveness",
              "in": "query",
              "value": "$inputs.max_liveness"
            },
            {
              "name": "target_liveness",
              "in": "query",
              "value": "$inputs.target_liveness"
            },
            {
              "name": "min_loudness",
              "in": "query",
              "value": "$inputs.min_loudness"
            },
            {
              "name": "max_loudness",
              "in": "query",
              "value": "$inputs.max_loudness"
            },
            {
              "name": "target_loudness",
              "in": "query",
              "value": "$inputs.target_loudness"
            },
            {
              "name": "min_mode",
              "in": "query",
              "value": "$inputs.min_mode"
            },
            {
              "name": "max_mode",
              "in": "query",
              "value": "$inputs.max_mode"
            },
            {
              "name": "target_mode",
              "in": "query",
              "value": "$inputs.target_mode"
            },
            {
              "name": "min_popularity",
              "in": "query",
              "value": "$inputs.min_popularity"
            },
            {
              "name": "max_popularity",
              "in": "query",
              "value": "$inputs.max_popularity"
            },
            {
              "name": "target_popularity",
              "in": "query",
              "value": "$inputs.target_popularity"
            },
            {
              "name": "min_speechiness",
              "in": "query",
              "value": "$inputs.min_speechiness"
            },
            {
              "name": "max_speechiness",
              "in": "query",
              "value": "$inputs.max_speechiness"
            },
            {
              "name": "target_speechiness",
              "in": "query",
              "value": "$inputs.target_speechiness"
            },
            {
              "name": "min_tempo",
              "in": "query",
              "value": "$inputs.min_tempo"
            },
            {
              "name": "max_tempo",
              "in": "query",
              "value": "$inputs.max_tempo"
            },
            {
              "name": "target_tempo",
              "in": "query",
              "value": "$inputs.target_tempo"
            },
            {
              "name": "min_time_signature",
              "in": "query",
              "value": "$inputs.min_time_signature"
            },
            {
              "name": "max_time_signature",
              "in": "query",
              "value": "$inputs.max_time_signature"
            },
            {
              "name": "target_time_signature",
              "in": "query",
              "value": "$inputs.target_time_signature"
            },
            {
              "name": "min_valence",
              "in": "query",
              "value": "$inputs.min_valence"
            },
            {
              "name": "max_valence",
              "in": "query",
              "value": "$inputs.max_valence"
            },
            {
              "name": "target_valence",
              "in": "query",
              "value": "$inputs.target_valence"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "recommended_track_uris": "$response.body"
          }
        },
        {
          "stepId": "get-user-id",
          "description": "Get the current user's ID.",
          "operationId": "get-current-users-profile",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user_id": "$response.body"
          }
        },
        {
          "stepId": "create-playlist",
          "description": "Create a new empty playlist for the user.",
          "operationId": "create-playlist",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "user_id": "$steps.get-user-id.outputs.user_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "playlist_id": "$response.body"
          }
        },
        {
          "stepId": "add-recommended-tracks",
          "description": "Add the recommended tracks to the newly created playlist.",
          "operationId": "add-tracks-to-playlist",
          "parameters": [
            {
              "name": "position",
              "in": "query",
              "value": "$inputs.position"
            },
            {
              "name": "uris",
              "in": "query",
              "value": "$inputs.uris"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "playlist_id": "$steps.create-playlist.outputs.playlist_id",
              "track_uris": "$steps.get-recommendations.outputs.recommended_track_uris"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "snapshot_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "artist_id": "$steps.search-artist.outputs.artist_id",
        "recommended_track_uris": "$steps.get-recommendations.outputs.recommended_track_uris",
        "user_id": "$steps.get-user-id.outputs.user_id",
        "playlist_id": "$steps.create-playlist.outputs.playlist_id",
        "snapshot_id": "$steps.add-recommended-tracks.outputs.snapshot_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "explore-artist-and-related-music",
      "summary": "Find an artist, view their details, top tracks, and discover similar artists.",
      "description": "Find an artist, view their details, top tracks, and discover similar artists.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "include_external": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-artist",
          "description": "Search for an artist by name.",
          "operationId": "search",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "include_external",
              "in": "query",
              "value": "$inputs.include_external"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "artist_id": "$response.body"
          }
        },
        {
          "stepId": "get-artist-details",
          "description": "Get detailed information about the artist.",
          "operationId": "get-an-artist",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "artist_details": "$response.body"
          }
        },
        {
          "stepId": "get-artist-top-tracks",
          "description": "Get the artist's top tracks in a specific market.",
          "operationId": "get-an-artists-top-tracks",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "top_tracks": "$response.body"
          }
        },
        {
          "stepId": "get-related-artists",
          "description": "Find artists similar to the initial artist.",
          "operationId": "get-an-artists-related-artists",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "related_artists_list": "$response.body"
          }
        },
        {
          "stepId": "get-related-artist-top-tracks",
          "description": "Get the top tracks for the first related artist found.",
          "operationId": "get-an-artists-top-tracks",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "related_artist_top_tracks": "$response.body"
          }
        }
      ],
      "outputs": {
        "artist_id": "$steps.search-artist.outputs.artist_id",
        "artist_details": "$steps.get-artist-details.outputs.artist_details",
        "top_tracks": "$steps.get-artist-top-tracks.outputs.top_tracks",
        "related_artists_list": "$steps.get-related-artists.outputs.related_artists_list",
        "related_artist_top_tracks": "$steps.get-related-artist-top-tracks.outputs.related_artist_top_tracks"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "start-playback-on-a-specific-device",
      "summary": "Finds available playback devices, searches for content (e.g., an album), and starts playback on a chosen device.",
      "description": "Finds available playback devices, searches for content (e.g., an album), and starts playback on a chosen device.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "include_external": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-available-devices",
          "description": "Retrieve the list of the user's available playback devices.",
          "operationId": "get-a-users-available-devices",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "devices_list": "$response.body"
          }
        },
        {
          "stepId": "search-album",
          "description": "Search for an album to play.",
          "operationId": "search",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "include_external",
              "in": "query",
              "value": "$inputs.include_external"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "album_uri": "$response.body"
          }
        },
        {
          "stepId": "start-playback",
          "description": "Start playback of the found album on the first available device.",
          "operationId": "start-a-users-playback",
          "parameters": [
            {
              "name": "device_id",
              "in": "query",
              "value": "$steps.get-available-devices.outputs.devices_list.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "device_id": "$steps.get-available-devices.outputs.devices_list[0].id",
              "context_uri": "$steps.search-album.outputs.album_uri"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "playback_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "devices_list": "$steps.get-available-devices.outputs.devices_list",
        "album_uri": "$steps.search-album.outputs.album_uri",
        "playback_status": "$steps.start-playback.outputs.playback_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-playlist-from-users-top-tracks",
      "summary": "Fetches the user's top tracks and creates a new playlist containing them.",
      "description": "Fetches the user's top tracks and creates a new playlist containing them.",
      "inputs": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string"
          },
          "uris": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-user-id",
          "description": "Get the current user's ID.",
          "operationId": "get-current-users-profile",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user_id": "$response.body"
          }
        },
        {
          "stepId": "create-top-tracks-playlist",
          "description": "Create a new playlist for the top tracks.",
          "operationId": "create-playlist",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "user_id": "$steps.get-user-id.outputs.user_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "playlist_id": "$response.body"
          }
        },
        {
          "stepId": "add-top-tracks",
          "description": "Add the user's top tracks to the new playlist.",
          "operationId": "add-tracks-to-playlist",
          "parameters": [
            {
              "name": "position",
              "in": "query",
              "value": "$inputs.position"
            },
            {
              "name": "uris",
              "in": "query",
              "value": "$inputs.uris"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "playlist_id": "$steps.create-top-tracks-playlist.outputs.playlist_id",
              "track_uris": "$steps.get-user-top-tracks.outputs.top_track_uris"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "snapshot_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "user_id": "$steps.get-user-id.outputs.user_id",
        "playlist_id": "$steps.create-top-tracks-playlist.outputs.playlist_id",
        "snapshot_id": "$steps.add-top-tracks.outputs.snapshot_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "save-discovered-album-to-library",
      "summary": "Searches for an album, checks if it's already in the user's library, and saves it if it's not.",
      "description": "Searches for an album, checks if it's already in the user's library, and saves it if it's not.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "include_external": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-album",
          "description": "Search for an album by name.",
          "operationId": "search",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "include_external",
              "in": "query",
              "value": "$inputs.include_external"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "album_id": "$response.body"
          }
        },
        {
          "stepId": "check-saved-album",
          "description": "Check if the found album is already in the user's library.",
          "operationId": "check-users-saved-albums",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "is_saved_flags": "$response.body"
          }
        },
        {
          "stepId": "save-album",
          "description": "Save the album to the user's library (conditional on check).",
          "operationId": "save-albums-user",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "album_ids": "$steps.search-album.outputs.album_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "save_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "album_id": "$steps.search-album.outputs.album_id",
        "is_saved_flags": "$steps.check-saved-album.outputs.is_saved_flags",
        "save_status": "$steps.save-album.outputs.save_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "add-searched-track-to-queue",
      "summary": "Searches for a track and adds it to the user's playback queue.",
      "description": "Searches for a track and adds it to the user's playback queue.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "include_external": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-track",
          "description": "Search for a track by name.",
          "operationId": "search",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "include_external",
              "in": "query",
              "value": "$inputs.include_external"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "track_uri": "$response.body"
          }
        },
        {
          "stepId": "add-track-to-queue",
          "description": "Add the found track to the user's playback queue.",
          "operationId": "add-to-queue",
          "parameters": [
            {
              "name": "uri",
              "in": "query",
              "value": "$steps.search-track.outputs.track_uri"
            },
            {
              "name": "device_id",
              "in": "query",
              "value": "$inputs.device_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "queue_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "track_uri": "$steps.search-track.outputs.track_uri",
        "queue_status": "$steps.add-track-to-queue.outputs.queue_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "discover-new-music-releases-and-save",
      "summary": "Gets the latest album releases, retrieves details for the first one, checks if it's saved, and saves it.",
      "description": "Gets the latest album releases, retrieves details for the first one, checks if it's saved, and saves it.",
      "steps": [
        {
          "stepId": "get-new-releases",
          "description": "Get a list of new album releases.",
          "operationId": "get-new-releases",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "new_release_album_id": "$response.body"
          }
        },
        {
          "stepId": "get-album-details",
          "description": "Get details for the first new release album.",
          "operationId": "get-an-album",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "album_details": "$response.body"
          }
        },
        {
          "stepId": "check-if-album-saved",
          "description": "Check if the new release album is already saved.",
          "operationId": "check-users-saved-albums",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "is_saved_flags": "$response.body"
          }
        },
        {
          "stepId": "save-new-release-album",
          "description": "Save the new release album if not already saved (conditional).",
          "operationId": "save-albums-user",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "album_ids": "$steps.get-new-releases.outputs.new_release_album_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "save_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "new_release_album_id": "$steps.get-new-releases.outputs.new_release_album_id",
        "album_details": "$steps.get-album-details.outputs.album_details",
        "is_saved_flags": "$steps.check-if-album-saved.outputs.is_saved_flags",
        "save_status": "$steps.save-new-release-album.outputs.save_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "find-and-follow-featured-playlist",
      "summary": "Discovers Spotify's featured playlists and allows the user to follow one.",
      "description": "Discovers Spotify's featured playlists and allows the user to follow one.",
      "inputs": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-featured-playlists",
          "description": "Get a list of Spotify's featured playlists.",
          "operationId": "get-featured-playlists",
          "parameters": [
            {
              "name": "locale",
              "in": "query",
              "value": "$inputs.locale"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "featured_playlists_list": "$response.body"
          }
        },
        {
          "stepId": "get-playlist-details",
          "description": "Get details of the first featured playlist.",
          "operationId": "get-playlist",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "playlist_details": "$response.body"
          }
        },
        {
          "stepId": "follow-playlist",
          "description": "Follow the selected featured playlist.",
          "operationId": "follow-playlist",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "playlist_id": "$steps.get-featured-playlists.outputs.featured_playlists_list.playlists.items[0].id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "follow_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "featured_playlists_list": "$steps.get-featured-playlists.outputs.featured_playlists_list",
        "playlist_details": "$steps.get-playlist-details.outputs.playlist_details",
        "follow_status": "$steps.follow-playlist.outputs.follow_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "analyze-track-audio-features",
      "summary": "Searches for a track and retrieves its detailed audio features (like danceability, energy, tempo).",
      "description": "Searches for a track and retrieves its detailed audio features (like danceability, energy, tempo).",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "include_external": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-track",
          "description": "Search for a track by name.",
          "operationId": "search",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "include_external",
              "in": "query",
              "value": "$inputs.include_external"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "track_id": "$response.body"
          }
        },
        {
          "stepId": "get-audio-features",
          "description": "Get audio features for the specified track.",
          "operationId": "get-audio-features",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "audio_features": "$response.body"
          }
        }
      ],
      "outputs": {
        "track_id": "$steps.search-track.outputs.track_id",
        "audio_features": "$steps.get-audio-features.outputs.audio_features"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}