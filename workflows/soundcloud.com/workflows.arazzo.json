{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/soundcloud.com/main/1.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "oauth-user-authentication",
      "summary": "Authenticate a user using the OAuth 2.0 authorization code flow to obtain an access token for making authenticated API calls.",
      "description": "Authenticate a user using the OAuth 2.0 authorization code flow to obtain an access token for making authenticated API calls.",
      "inputs": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "exchange-code-for-token_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "initiate-oauth",
          "description": "Redirect the user to SoundCloud's authorization page.",
          "operationPath": "openapi_source#/paths/~1connect/get",
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "value": "$inputs.client_id"
            },
            {
              "name": "redirect_uri",
              "in": "query",
              "value": "$inputs.redirect_uri"
            },
            {
              "name": "response_type",
              "in": "query",
              "value": "$inputs.response_type"
            },
            {
              "name": "scope",
              "in": "query",
              "value": "$inputs.scope"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        },
        {
          "stepId": "exchange-code-for-token",
          "description": "Exchange the authorization code received from the redirect for an access token.",
          "operationPath": "openapi_source#/paths/~1oauth2~1token/post",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": "$inputs.exchange-code-for-token_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "access_token": "$response.body",
            "refresh_token": "$response.body",
            "expires_in": "$response.body",
            "scope": "$response.body"
          }
        }
      ],
      "outputs": {
        "access_token": "$steps.exchange-code-for-token.outputs.access_token",
        "refresh_token": "$steps.exchange-code-for-token.outputs.refresh_token",
        "expires_in": "$steps.exchange-code-for-token.outputs.expires_in",
        "scope": "$steps.exchange-code-for-token.outputs.scope"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "search-and-play-track",
      "summary": "Search for a track by name and retrieve its streamable URLs for playback.",
      "description": "Search for a track by name and retrieve its streamable URLs for playback.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "ids": {
            "type": "string"
          },
          "genres": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "bpm": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "access": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "linked_partitioning": {
            "type": "string"
          },
          "track_id": {
            "type": "string"
          },
          "secret_token": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-tracks",
          "description": "Search for tracks based on a query string.",
          "operationPath": "openapi_source#/paths/~1tracks/get",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "ids",
              "in": "query",
              "value": "$inputs.ids"
            },
            {
              "name": "genres",
              "in": "query",
              "value": "$inputs.genres"
            },
            {
              "name": "tags",
              "in": "query",
              "value": "$inputs.tags"
            },
            {
              "name": "bpm",
              "in": "query",
              "value": "$inputs.bpm"
            },
            {
              "name": "duration",
              "in": "query",
              "value": "$inputs.duration"
            },
            {
              "name": "created_at",
              "in": "query",
              "value": "$inputs.created_at"
            },
            {
              "name": "access",
              "in": "query",
              "value": "$inputs.access"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "linked_partitioning",
              "in": "query",
              "value": "$inputs.linked_partitioning"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body",
            "collection.title": "$response.body",
            "collection.streamable": "$response.body"
          }
        },
        {
          "stepId": "get-track-streams",
          "description": "Retrieve the streamable URLs for a specific track.",
          "operationPath": "openapi_source#/paths/~1tracks~1{track_id}~1streams/get",
          "parameters": [
            {
              "name": "track_id",
              "in": "path",
              "value": "$inputs.track_id"
            },
            {
              "name": "secret_token",
              "in": "query",
              "value": "$inputs.secret_token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "http_mp3_128_url": "$response.body",
            "hls_mp3_128_url": "$response.body",
            "hls_opus_64_url": "$response.body",
            "preview_mp3_128_url": "$response.body"
          }
        }
      ],
      "outputs": {
        "collection.id": "$steps.search-tracks.outputs.collection.id",
        "collection.title": "$steps.search-tracks.outputs.collection.title",
        "collection.streamable": "$steps.search-tracks.outputs.collection.streamable",
        "http_mp3_128_url": "$steps.get-track-streams.outputs.http_mp3_128_url",
        "hls_mp3_128_url": "$steps.get-track-streams.outputs.hls_mp3_128_url",
        "hls_opus_64_url": "$steps.get-track-streams.outputs.hls_opus_64_url",
        "preview_mp3_128_url": "$steps.get-track-streams.outputs.preview_mp3_128_url"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-playlist-and-add-tracks",
      "summary": "Find specific tracks via search and then create a new playlist containing those tracks.",
      "description": "Find specific tracks via search and then create a new playlist containing those tracks.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "ids": {
            "type": "string"
          },
          "genres": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "bpm": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "access": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "linked_partitioning": {
            "type": "string"
          },
          "create-playlist-with-tracks_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-tracks-for-playlist",
          "description": "Search for tracks to add to the new playlist.",
          "operationPath": "openapi_source#/paths/~1tracks/get",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "ids",
              "in": "query",
              "value": "$inputs.ids"
            },
            {
              "name": "genres",
              "in": "query",
              "value": "$inputs.genres"
            },
            {
              "name": "tags",
              "in": "query",
              "value": "$inputs.tags"
            },
            {
              "name": "bpm",
              "in": "query",
              "value": "$inputs.bpm"
            },
            {
              "name": "duration",
              "in": "query",
              "value": "$inputs.duration"
            },
            {
              "name": "created_at",
              "in": "query",
              "value": "$inputs.created_at"
            },
            {
              "name": "access",
              "in": "query",
              "value": "$inputs.access"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "linked_partitioning",
              "in": "query",
              "value": "$inputs.linked_partitioning"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body"
          }
        },
        {
          "stepId": "create-playlist-with-tracks",
          "description": "Create a new playlist and populate it with the tracks found in the previous step.",
          "operationPath": "openapi_source#/paths/~1playlists/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-playlist-with-tracks_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body",
            "title": "$response.body",
            "uri": "$response.body",
            "tracks": "$response.body"
          }
        }
      ],
      "outputs": {
        "collection.id": "$steps.search-tracks-for-playlist.outputs.collection.id",
        "id": "$steps.create-playlist-with-tracks.outputs.id",
        "title": "$steps.create-playlist-with-tracks.outputs.title",
        "uri": "$steps.create-playlist-with-tracks.outputs.uri",
        "tracks": "$steps.create-playlist-with-tracks.outputs.tracks"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "upload-and-update-track-metadata",
      "summary": "Upload a new audio track and subsequently update its metadata (like genre, tags, description).",
      "description": "Upload a new audio track and subsequently update its metadata (like genre, tags, description).",
      "inputs": {
        "type": "object",
        "properties": {
          "track[title]": {
            "type": "string"
          },
          "track[asset_data]": {
            "type": "string"
          },
          "track[permalink]": {
            "type": "string"
          },
          "track[sharing]": {
            "type": "string"
          },
          "track_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-track",
          "description": "Upload the track audio file and set initial metadata.",
          "operationPath": "openapi_source#/paths/~1tracks/post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "track[title]": "$inputs.track[title]",
              "track[asset_data]": "$inputs.track[asset_data]",
              "track[permalink]": "$inputs.track[permalink]",
              "track[sharing]": "$inputs.track[sharing]"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body",
            "uri": "$response.body",
            "permalink_url": "$response.body"
          }
        },
        {
          "stepId": "update-track-metadata",
          "description": "Update the metadata for the newly uploaded track.",
          "operationPath": "openapi_source#/paths/~1tracks~1{track_id}/put",
          "parameters": [
            {
              "name": "track_id",
              "in": "path",
              "value": "$steps.upload-track.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "track_id": "$steps.upload-track.outputs.id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body",
            "description": "$response.body",
            "genre": "$response.body",
            "tag_list": "$response.body",
            "license": "$response.body"
          }
        }
      ],
      "outputs": {
        "id": "$steps.update-track-metadata.outputs.id",
        "uri": "$steps.upload-track.outputs.uri",
        "permalink_url": "$steps.upload-track.outputs.permalink_url",
        "description": "$steps.update-track-metadata.outputs.description",
        "genre": "$steps.update-track-metadata.outputs.genre",
        "tag_list": "$steps.update-track-metadata.outputs.tag_list",
        "license": "$steps.update-track-metadata.outputs.license"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "follow-user-and-view-their-recent-tracks",
      "summary": "Search for a user, follow them, and then retrieve their recently uploaded tracks.",
      "description": "Search for a user, follow them, and then retrieve their recently uploaded tracks.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "ids": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "linked_partitioning": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "access": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-user",
          "description": "Find a user by their username or other query.",
          "operationPath": "openapi_source#/paths/~1users/get",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "ids",
              "in": "query",
              "value": "$inputs.ids"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "linked_partitioning",
              "in": "query",
              "value": "$inputs.linked_partitioning"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body",
            "collection.username": "$response.body"
          }
        },
        {
          "stepId": "follow-user",
          "description": "Follow the user found in the search.",
          "operationPath": "openapi_source#/paths/~1me~1followings~1{user_id}/put",
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "value": "$inputs.user_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code_200_or_201": "$response.body"
          }
        },
        {
          "stepId": "get-followed-user-tracks",
          "description": "Retrieve the tracks uploaded by the user just followed.",
          "operationPath": "openapi_source#/paths/~1users~1{user_id}~1tracks/get",
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "value": "$inputs.user_id"
            },
            {
              "name": "access",
              "in": "query",
              "value": "$inputs.access"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "linked_partitioning",
              "in": "query",
              "value": "$inputs.linked_partitioning"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body",
            "collection.title": "$response.body"
          }
        }
      ],
      "outputs": {
        "collection.id": "$steps.get-followed-user-tracks.outputs.collection.id",
        "collection.username": "$steps.search-user.outputs.collection.username",
        "status_code_200_or_201": "$steps.follow-user.outputs.status_code_200_or_201",
        "collection.title": "$steps.get-followed-user-tracks.outputs.collection.title"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "discover-and-like-a-track",
      "summary": "Search for tracks and then like a specific track from the results.",
      "description": "Search for tracks and then like a specific track from the results.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "ids": {
            "type": "string"
          },
          "genres": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "bpm": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "access": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "linked_partitioning": {
            "type": "string"
          },
          "track_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-track-to-like",
          "description": "Search for tracks based on a query.",
          "operationPath": "openapi_source#/paths/~1tracks/get",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "ids",
              "in": "query",
              "value": "$inputs.ids"
            },
            {
              "name": "genres",
              "in": "query",
              "value": "$inputs.genres"
            },
            {
              "name": "tags",
              "in": "query",
              "value": "$inputs.tags"
            },
            {
              "name": "bpm",
              "in": "query",
              "value": "$inputs.bpm"
            },
            {
              "name": "duration",
              "in": "query",
              "value": "$inputs.duration"
            },
            {
              "name": "created_at",
              "in": "query",
              "value": "$inputs.created_at"
            },
            {
              "name": "access",
              "in": "query",
              "value": "$inputs.access"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "linked_partitioning",
              "in": "query",
              "value": "$inputs.linked_partitioning"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body",
            "collection.title": "$response.body"
          }
        },
        {
          "stepId": "like-track",
          "description": "Like a specific track found in the search results.",
          "operationPath": "openapi_source#/paths/~1likes~1tracks~1{track_id}/post",
          "parameters": [
            {
              "name": "track_id",
              "in": "path",
              "value": "$inputs.track_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code_200": "$response.body"
          }
        }
      ],
      "outputs": {
        "collection.id": "$steps.find-track-to-like.outputs.collection.id",
        "collection.title": "$steps.find-track-to-like.outputs.collection.title",
        "status_code_200": "$steps.like-track.outputs.status_code_200"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "discover-and-repost-a-playlist",
      "summary": "Search for playlists and then repost a specific playlist from the results.",
      "description": "Search for playlists and then repost a specific playlist from the results.",
      "inputs": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "access": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "linked_partitioning": {
            "type": "string"
          },
          "playlist_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-playlist-to-repost",
          "description": "Search for playlists based on a query.",
          "operationPath": "openapi_source#/paths/~1playlists/get",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "access",
              "in": "query",
              "value": "$inputs.access"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "linked_partitioning",
              "in": "query",
              "value": "$inputs.linked_partitioning"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collection.id": "$response.body",
            "collection.title": "$response.body"
          }
        },
        {
          "stepId": "repost-playlist",
          "description": "Repost a specific playlist found in the search results.",
          "operationPath": "openapi_source#/paths/~1reposts~1playlists~1{playlist_id}/post",
          "parameters": [
            {
              "name": "playlist_id",
              "in": "path",
              "value": "$inputs.playlist_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code_201": "$response.body"
          }
        }
      ],
      "outputs": {
        "collection.id": "$steps.find-playlist-to-repost.outputs.collection.id",
        "collection.title": "$steps.find-playlist-to-repost.outputs.collection.title",
        "status_code_201": "$steps.repost-playlist.outputs.status_code_201"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "comment-on-a-track",
      "summary": "Find a specific track and post a comment on it.",
      "description": "Find a specific track and post a comment on it.",
      "inputs": {
        "type": "object",
        "properties": {
          "track_id": {
            "type": "string"
          },
          "secret_token": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-track-to-comment",
          "description": "Retrieve details of a specific track to comment on.",
          "operationPath": "openapi_source#/paths/~1tracks~1{track_id}/get",
          "parameters": [
            {
              "name": "track_id",
              "in": "path",
              "value": "$inputs.track_id"
            },
            {
              "name": "secret_token",
              "in": "query",
              "value": "$inputs.secret_token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body",
            "title": "$response.body",
            "commentable": "$response.body"
          }
        },
        {
          "stepId": "post-comment",
          "description": "Post a comment on the specified track.",
          "operationPath": "openapi_source#/paths/~1tracks~1{track_id}~1comments/post",
          "parameters": [
            {
              "name": "track_id",
              "in": "path",
              "value": "$steps.find-track-to-comment.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json; charset=utf-8",
            "payload": {
              "track_id": "$steps.find-track-to-comment.outputs.id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body",
            "body": "$response.body",
            "created_at": "$response.body",
            "user_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "id": "$steps.post-comment.outputs.id",
        "title": "$steps.find-track-to-comment.outputs.title",
        "commentable": "$steps.find-track-to-comment.outputs.commentable",
        "body": "$steps.post-comment.outputs.body",
        "created_at": "$steps.post-comment.outputs.created_at",
        "user_id": "$steps.post-comment.outputs.user_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "resolve-sound-cloud-url-and-fetch-track-details",
      "summary": "Take a standard soundcloud.com track URL, resolve it to its API resource URL, and then fetch the full track details.",
      "description": "Take a standard soundcloud.com track URL, resolve it to its API resource URL, and then fetch the full track details.",
      "inputs": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "track_id": {
            "type": "string"
          },
          "secret_token": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "resolve-url",
          "description": "Resolve a soundcloud.com URL to its corresponding API resource URL.",
          "operationPath": "openapi_source#/paths/~1resolve/get",
          "parameters": [
            {
              "name": "url",
              "in": "query",
              "value": "$inputs.url"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        },
        {
          "stepId": "get-resolved-track",
          "description": "Fetch the track details using the ID extracted from the resolved API URL.",
          "operationPath": "openapi_source#/paths/~1tracks~1{track_id}/get",
          "parameters": [
            {
              "name": "track_id",
              "in": "path",
              "value": "$steps.resolve-url.outputs.location"
            },
            {
              "name": "secret_token",
              "in": "query",
              "value": "$inputs.secret_token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body",
            "title": "$response.body",
            "description": "$response.body",
            "user": "$response.body",
            "stream_url": "$response.body"
          }
        }
      ],
      "outputs": {
        "id": "$steps.get-resolved-track.outputs.id",
        "title": "$steps.get-resolved-track.outputs.title",
        "description": "$steps.get-resolved-track.outputs.description",
        "user": "$steps.get-resolved-track.outputs.user",
        "stream_url": "$steps.get-resolved-track.outputs.stream_url"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}