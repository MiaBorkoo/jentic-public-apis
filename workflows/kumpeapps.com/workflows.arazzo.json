{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/kumpeapps.com/main/5.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "user-login-and-session-management",
      "summary": "Authenticate a KumpeApps user within an application, handling optional YubiKey OTP, and manage their session by logging them out.",
      "description": "Authenticate a KumpeApps user within an application, handling optional YubiKey OTP, and manage their session by logging them out.",
      "inputs": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "auth_key": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "login-user",
          "description": "Authenticates a user's credentials to obtain an authentication key (auth_key) for their session. May require an OTP if configured.",
          "operationId": "auth_authkey_post",
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "value": "$inputs.username"
            },
            {
              "name": "password",
              "in": "query",
              "value": "$inputs.password"
            },
            {
              "name": "otp",
              "in": "query",
              "value": "$inputs.otp"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "auth_key": "$response.body#/auth_key"
          }
        },
        {
          "stepId": "logout-user",
          "description": "Deactivates the user's authentication key, effectively logging them out of the application.",
          "operationId": "auth_authkey_put",
          "parameters": [
            {
              "name": "auth_key",
              "in": "query",
              "value": "$steps.login-user.outputs.auth_key"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        }
      ],
      "outputs": {
        "auth_key": "$steps.login-user.outputs.auth_key",
        "success": "$steps.logout-user.outputs.success"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "child-user-account-management",
      "summary": "Create new child user accounts under a master account, retrieve their details, and update their profiles.",
      "description": "Create new child user accounts under a master account, retrieve their details, and update their profiles.",
      "inputs": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "isChild": {
            "type": "string"
          },
          "isActive": {
            "type": "string"
          },
          "isAdmin": {
            "type": "string"
          },
          "enableAllowance": {
            "type": "string"
          },
          "enableChores": {
            "type": "string"
          },
          "userID": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          },
          "tmdbKey": {
            "type": "string"
          },
          "enableWishList": {
            "type": "string"
          },
          "enableAdmin": {
            "type": "string"
          },
          "enableTmdb": {
            "type": "string"
          },
          "enableObjectDetection": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "add-child-user",
          "description": "Creates a new child user account and assigns it to the authenticated master account.",
          "operationId": "kkid_userlist_post",
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "value": "$inputs.username"
            },
            {
              "name": "password",
              "in": "query",
              "value": "$inputs.password"
            },
            {
              "name": "email",
              "in": "query",
              "value": "$inputs.email"
            },
            {
              "name": "firstName",
              "in": "query",
              "value": "$inputs.firstName"
            },
            {
              "name": "lastName",
              "in": "query",
              "value": "$inputs.lastName"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user_id": "$response.body#/user_id",
            "login": "$response.body#/login",
            "name_f": "$response.body#/name_f",
            "name_l": "$response.body#/name_l",
            "email": "$response.body#/email"
          }
        },
        {
          "stepId": "get-specific-child-user-details",
          "description": "Retrieves detailed information for a specific child user, typically after creation, to obtain their unique ID.",
          "operationId": "kkid_userlist_get",
          "parameters": [
            {
              "name": "isChild",
              "in": "query",
              "value": "$inputs.isChild"
            },
            {
              "name": "isActive",
              "in": "query",
              "value": "$inputs.isActive"
            },
            {
              "name": "isAdmin",
              "in": "query",
              "value": "$inputs.isAdmin"
            },
            {
              "name": "enableAllowance",
              "in": "query",
              "value": "$inputs.enableAllowance"
            },
            {
              "name": "enableChores",
              "in": "query",
              "value": "$inputs.enableChores"
            },
            {
              "name": "userID",
              "in": "query",
              "value": "$inputs.userID"
            },
            {
              "name": "username",
              "in": "query",
              "value": "$steps.add-child-user.outputs.login"
            },
            {
              "name": "email",
              "in": "query",
              "value": "$inputs.email"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user": "$response.body#/user"
          }
        },
        {
          "stepId": "update-child-user-profile",
          "description": "Updates various profile details for an existing child user, such as their name, email, or module enablement.",
          "operationId": "kkid_userlist_put",
          "parameters": [
            {
              "name": "userID",
              "in": "query",
              "value": "$steps.get-specific-child-user-details.outputs.user.userId"
            },
            {
              "name": "username",
              "in": "query",
              "value": "$steps.get-specific-child-user-details.outputs.user.username"
            },
            {
              "name": "email",
              "in": "query",
              "value": "$steps.get-specific-child-user-details.outputs.user.email"
            },
            {
              "name": "firstName",
              "in": "query",
              "value": "$steps.get-specific-child-user-details.outputs.user.firstName"
            },
            {
              "name": "lastName",
              "in": "query",
              "value": "$steps.get-specific-child-user-details.outputs.user.lastName"
            },
            {
              "name": "emoji",
              "in": "query",
              "value": "$inputs.emoji"
            },
            {
              "name": "tmdbKey",
              "in": "query",
              "value": "$inputs.tmdbKey"
            },
            {
              "name": "enableWishList",
              "in": "query",
              "value": "$inputs.enableWishList"
            },
            {
              "name": "enableChores",
              "in": "query",
              "value": "$inputs.enableChores"
            },
            {
              "name": "enableAllowance",
              "in": "query",
              "value": "$inputs.enableAllowance"
            },
            {
              "name": "enableAdmin",
              "in": "query",
              "value": "$inputs.enableAdmin"
            },
            {
              "name": "enableTmdb",
              "in": "query",
              "value": "$inputs.enableTmdb"
            },
            {
              "name": "enableObjectDetection",
              "in": "query",
              "value": "$inputs.enableObjectDetection"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        }
      ],
      "outputs": {
        "user_id": "$steps.add-child-user.outputs.user_id",
        "login": "$steps.add-child-user.outputs.login",
        "name_f": "$steps.add-child-user.outputs.name_f",
        "name_l": "$steps.add-child-user.outputs.name_l",
        "email": "$steps.add-child-user.outputs.email",
        "user": "$steps.get-specific-child-user-details.outputs.user",
        "success": "$steps.update-child-user-profile.outputs.success"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "chore-management-and-completion",
      "summary": "Parents can view a child's assigned chores, add new chores, and mark existing chores as completed.",
      "description": "Parents can view a child's assigned chores, add new chores, and mark existing chores as completed.",
      "inputs": {
        "type": "object",
        "properties": {
          "kidUsername": {
            "type": "string"
          },
          "day": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "blockDash": {
            "type": "string"
          },
          "optional": {
            "type": "string"
          },
          "canSteal": {
            "type": "string"
          },
          "includeCalendar": {
            "type": "string"
          },
          "nfcTag": {
            "type": "string"
          },
          "choreName": {
            "type": "string"
          },
          "choreDescription": {
            "type": "string"
          },
          "choreNumber": {
            "type": "string"
          },
          "oneTime": {
            "type": "string"
          },
          "extraAllowance": {
            "type": "string"
          },
          "reassignable": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "requireObjectDetection": {
            "type": "string"
          },
          "objectDetectionTag": {
            "type": "string"
          },
          "updatedByAutomation": {
            "type": "string"
          },
          "aiIcon": {
            "type": "string"
          },
          "isCalendar": {
            "type": "string"
          },
          "idChoreList": {
            "type": "string"
          },
          "stolen": {
            "type": "string"
          },
          "stolenBy": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "altitude": {
            "type": "string"
          },
          "whereDay": {
            "type": "string"
          },
          "whereStatus": {
            "type": "string"
          },
          "whereName": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-child-chores",
          "description": "Retrieves a list of chores assigned to a specific child, with options to filter by day or status.",
          "operationId": "kkid_chorelist_get",
          "parameters": [
            {
              "name": "kidUsername",
              "in": "query",
              "value": "$inputs.kidUsername"
            },
            {
              "name": "day",
              "in": "query",
              "value": "$inputs.day"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "blockDash",
              "in": "query",
              "value": "$inputs.blockDash"
            },
            {
              "name": "optional",
              "in": "query",
              "value": "$inputs.optional"
            },
            {
              "name": "canSteal",
              "in": "query",
              "value": "$inputs.canSteal"
            },
            {
              "name": "includeCalendar",
              "in": "query",
              "value": "$inputs.includeCalendar"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "chore": "$response.body#/chore"
          }
        },
        {
          "stepId": "add-new-chore",
          "description": "Adds a new chore to a child's chore list, specifying details like name, description, and allowance.",
          "operationId": "kkid_chorelist_post",
          "parameters": [
            {
              "name": "kidUsername",
              "in": "query",
              "value": "$steps.get-child-chores.outputs.chore.kid"
            },
            {
              "name": "day",
              "in": "query",
              "value": "$inputs.day"
            },
            {
              "name": "nfcTag",
              "in": "query",
              "value": "$inputs.nfcTag"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "choreName",
              "in": "query",
              "value": "$inputs.choreName"
            },
            {
              "name": "choreDescription",
              "in": "query",
              "value": "$inputs.choreDescription"
            },
            {
              "name": "choreNumber",
              "in": "query",
              "value": "$inputs.choreNumber"
            },
            {
              "name": "blockDash",
              "in": "query",
              "value": "$inputs.blockDash"
            },
            {
              "name": "oneTime",
              "in": "query",
              "value": "$inputs.oneTime"
            },
            {
              "name": "extraAllowance",
              "in": "query",
              "value": "$inputs.extraAllowance"
            },
            {
              "name": "optional",
              "in": "query",
              "value": "$inputs.optional"
            },
            {
              "name": "reassignable",
              "in": "query",
              "value": "$inputs.reassignable"
            },
            {
              "name": "canSteal",
              "in": "query",
              "value": "$inputs.canSteal"
            },
            {
              "name": "startDate",
              "in": "query",
              "value": "$inputs.startDate"
            },
            {
              "name": "notes",
              "in": "query",
              "value": "$inputs.notes"
            },
            {
              "name": "requireObjectDetection",
              "in": "query",
              "value": "$inputs.requireObjectDetection"
            },
            {
              "name": "objectDetectionTag",
              "in": "query",
              "value": "$inputs.objectDetectionTag"
            },
            {
              "name": "updatedByAutomation",
              "in": "query",
              "value": "$inputs.updatedByAutomation"
            },
            {
              "name": "aiIcon",
              "in": "query",
              "value": "$inputs.aiIcon"
            },
            {
              "name": "isCalendar",
              "in": "query",
              "value": "$inputs.isCalendar"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        },
        {
          "stepId": "update-chore-status",
          "description": "Updates the status of a specific chore (e.g., marking it as 'completed') using its unique ID.",
          "operationId": "kkid_chorelist_put",
          "parameters": [
            {
              "name": "idChoreList",
              "in": "query",
              "value": "$steps.get-child-chores.outputs.chore.idChoreList"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "stolen",
              "in": "query",
              "value": "$inputs.stolen"
            },
            {
              "name": "stolenBy",
              "in": "query",
              "value": "$inputs.stolenBy"
            },
            {
              "name": "nfcTag",
              "in": "query",
              "value": "$inputs.nfcTag"
            },
            {
              "name": "notes",
              "in": "query",
              "value": "$inputs.notes"
            },
            {
              "name": "latitude",
              "in": "query",
              "value": "$inputs.latitude"
            },
            {
              "name": "longitude",
              "in": "query",
              "value": "$inputs.longitude"
            },
            {
              "name": "altitude",
              "in": "query",
              "value": "$inputs.altitude"
            },
            {
              "name": "updatedByAutomation",
              "in": "query",
              "value": "$inputs.updatedByAutomation"
            },
            {
              "name": "whereDay",
              "in": "query",
              "value": "$inputs.whereDay"
            },
            {
              "name": "whereStatus",
              "in": "query",
              "value": "$inputs.whereStatus"
            },
            {
              "name": "whereName",
              "in": "query",
              "value": "$inputs.whereName"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        }
      ],
      "outputs": {
        "chore": "$steps.get-child-chores.outputs.chore",
        "success": "$steps.update-chore-status.outputs.success"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "child-allowance-management",
      "summary": "View a child's current allowance balance and transaction history, and add or subtract funds.",
      "description": "View a child's current allowance balance and transaction history, and add or subtract funds.",
      "inputs": {
        "type": "object",
        "properties": {
          "kidUserId": {
            "type": "string"
          },
          "transactionDays": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "transactionType": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-allowance-details",
          "description": "Retrieves the current allowance balance and a history of transactions for a specified child.",
          "operationId": "kkid_allowance_get",
          "parameters": [
            {
              "name": "kidUserId",
              "in": "query",
              "value": "$inputs.kidUserId"
            },
            {
              "name": "transactionDays",
              "in": "query",
              "value": "$inputs.transactionDays"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "balance": "$response.body#/balance",
            "allowanceTransaction": "$response.body#/allowanceTransaction",
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-or-subtract-allowance",
          "description": "Adds or subtracts a specified amount from a child's allowance balance with a description.",
          "operationId": "kkid_allowance_post",
          "parameters": [
            {
              "name": "kidUserId",
              "in": "query",
              "value": "$steps.get-allowance-details.outputs.id"
            },
            {
              "name": "amount",
              "in": "query",
              "value": "$inputs.amount"
            },
            {
              "name": "description",
              "in": "query",
              "value": "$inputs.description"
            },
            {
              "name": "transactionType",
              "in": "query",
              "value": "$inputs.transactionType"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        }
      ],
      "outputs": {
        "balance": "$steps.get-allowance-details.outputs.balance",
        "allowanceTransaction": "$steps.get-allowance-details.outputs.allowanceTransaction",
        "id": "$steps.get-allowance-details.outputs.id",
        "success": "$steps.add-or-subtract-allowance.outputs.success"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "push-notification-setup-for-a-childs-device",
      "summary": "Discover a child user's ID, then register a mobile device for them to receive Apple Push Notification Service (APNS) notifications and subscribe it to relevant notification categories.",
      "description": "Discover a child user's ID, then register a mobile device for them to receive Apple Push Notification Service (APNS) notifications and subscribe it to relevant notification categories.",
      "inputs": {
        "type": "object",
        "properties": {
          "isChild": {
            "type": "string"
          },
          "isActive": {
            "type": "string"
          },
          "isAdmin": {
            "type": "string"
          },
          "enableAllowance": {
            "type": "string"
          },
          "enableChores": {
            "type": "string"
          },
          "userID": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "kidUserId": {
            "type": "string"
          },
          "tool": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "devicename": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "badge": {
            "type": "string"
          },
          "sound": {
            "type": "string"
          },
          "section": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-child-user-id",
          "description": "Retrieves the user ID for a specific child based on their username.",
          "operationId": "kkid_userlist_get",
          "parameters": [
            {
              "name": "isChild",
              "in": "query",
              "value": "$inputs.isChild"
            },
            {
              "name": "isActive",
              "in": "query",
              "value": "$inputs.isActive"
            },
            {
              "name": "isAdmin",
              "in": "query",
              "value": "$inputs.isAdmin"
            },
            {
              "name": "enableAllowance",
              "in": "query",
              "value": "$inputs.enableAllowance"
            },
            {
              "name": "enableChores",
              "in": "query",
              "value": "$inputs.enableChores"
            },
            {
              "name": "userID",
              "in": "query",
              "value": "$inputs.userID"
            },
            {
              "name": "username",
              "in": "query",
              "value": "$inputs.username"
            },
            {
              "name": "email",
              "in": "query",
              "value": "$inputs.email"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user": "$response.body#/user"
          }
        },
        {
          "stepId": "register-device-for-apns",
          "description": "Registers a device's APNS token and name for a specific child user to enable push notifications.",
          "operationId": "kkid_apns_post",
          "parameters": [
            {
              "name": "kidUserId",
              "in": "query",
              "value": "$steps.get-child-user-id.outputs.user.userId"
            },
            {
              "name": "tool",
              "in": "query",
              "value": "$inputs.tool"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            },
            {
              "name": "devicename",
              "in": "query",
              "value": "$inputs.devicename"
            },
            {
              "name": "title",
              "in": "query",
              "value": "$inputs.title"
            },
            {
              "name": "message",
              "in": "query",
              "value": "$inputs.message"
            },
            {
              "name": "badge",
              "in": "query",
              "value": "$inputs.badge"
            },
            {
              "name": "sound",
              "in": "query",
              "value": "$inputs.sound"
            },
            {
              "name": "section",
              "in": "query",
              "value": "$inputs.section"
            },
            {
              "name": "priority",
              "in": "query",
              "value": "$inputs.priority"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        },
        {
          "stepId": "subscribe-to-chore-notifications",
          "description": "Subscribes the registered device to receive notifications related to chores for the child.",
          "operationId": "kkid_apns_post",
          "parameters": [
            {
              "name": "kidUserId",
              "in": "query",
              "value": "$steps.get-child-user-id.outputs.user.userId"
            },
            {
              "name": "tool",
              "in": "query",
              "value": "$inputs.tool"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            },
            {
              "name": "devicename",
              "in": "query",
              "value": "$inputs.devicename"
            },
            {
              "name": "title",
              "in": "query",
              "value": "$inputs.title"
            },
            {
              "name": "message",
              "in": "query",
              "value": "$inputs.message"
            },
            {
              "name": "badge",
              "in": "query",
              "value": "$inputs.badge"
            },
            {
              "name": "sound",
              "in": "query",
              "value": "$inputs.sound"
            },
            {
              "name": "section",
              "in": "query",
              "value": "$inputs.section"
            },
            {
              "name": "priority",
              "in": "query",
              "value": "$inputs.priority"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        },
        {
          "stepId": "subscribe-to-allowance-notifications",
          "description": "Subscribes the registered device to receive notifications related to allowance for the child.",
          "operationId": "kkid_apns_post",
          "parameters": [
            {
              "name": "kidUserId",
              "in": "query",
              "value": "$steps.get-child-user-id.outputs.user.userId"
            },
            {
              "name": "tool",
              "in": "query",
              "value": "$inputs.tool"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            },
            {
              "name": "devicename",
              "in": "query",
              "value": "$inputs.devicename"
            },
            {
              "name": "title",
              "in": "query",
              "value": "$inputs.title"
            },
            {
              "name": "message",
              "in": "query",
              "value": "$inputs.message"
            },
            {
              "name": "badge",
              "in": "query",
              "value": "$inputs.badge"
            },
            {
              "name": "sound",
              "in": "query",
              "value": "$inputs.sound"
            },
            {
              "name": "section",
              "in": "query",
              "value": "$inputs.section"
            },
            {
              "name": "priority",
              "in": "query",
              "value": "$inputs.priority"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        }
      ],
      "outputs": {
        "user": "$steps.get-child-user-id.outputs.user",
        "success": "$steps.subscribe-to-allowance-notifications.outputs.success"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "child-wishlist-management-and-sharing",
      "summary": "Manage a child's wishlist by viewing existing items, adding new ones, and generating a shareable link for the wishlist.",
      "description": "Manage a child's wishlist by viewing existing items, adding new ones, and generating a shareable link for the wishlist.",
      "inputs": {
        "type": "object",
        "properties": {
          "kidUserId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "linkUserId": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "scope2": {
            "type": "string"
          },
          "scope3": {
            "type": "string"
          },
          "scope4": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-wishlist-items",
          "description": "Retrieves all items currently on a child's wishlist.",
          "operationId": "kkid_wishlist_get",
          "parameters": [
            {
              "name": "kidUserId",
              "in": "query",
              "value": "$inputs.kidUserId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "wish": "$response.body#/wish"
          }
        },
        {
          "stepId": "add-new-wishlist-item",
          "description": "Adds a new item to a child's wishlist with a title, description, priority, and optional link.",
          "operationId": "kkid_wishlist_post",
          "parameters": [
            {
              "name": "kidUserId",
              "in": "query",
              "value": "$steps.get-wishlist-items.outputs.wish.user_id"
            },
            {
              "name": "title",
              "in": "query",
              "value": "$inputs.title"
            },
            {
              "name": "description",
              "in": "query",
              "value": "$inputs.description"
            },
            {
              "name": "priority",
              "in": "query",
              "value": "$inputs.priority"
            },
            {
              "name": "link",
              "in": "query",
              "value": "$inputs.link"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "success": "$response.body#/success"
          }
        },
        {
          "stepId": "create-wishlist-share-link",
          "description": "Generates an authenticated shareable link for a child's wishlist, allowing others to view it.",
          "operationId": "kkid_share_get",
          "parameters": [
            {
              "name": "linkUserId",
              "in": "query",
              "value": "$steps.get-wishlist-items.outputs.wish.user_id"
            },
            {
              "name": "link",
              "in": "query",
              "value": "$inputs.link"
            },
            {
              "name": "scope",
              "in": "query",
              "value": "$inputs.scope"
            },
            {
              "name": "scope2",
              "in": "query",
              "value": "$inputs.scope2"
            },
            {
              "name": "scope3",
              "in": "query",
              "value": "$inputs.scope3"
            },
            {
              "name": "scope4",
              "in": "query",
              "value": "$inputs.scope4"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "auth_link": "$response.body#/auth_link"
          }
        }
      ],
      "outputs": {
        "wish": "$steps.get-wishlist-items.outputs.wish",
        "success": "$steps.add-new-wishlist-item.outputs.success",
        "auth_link": "$steps.create-wishlist-share-link.outputs.auth_link"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
