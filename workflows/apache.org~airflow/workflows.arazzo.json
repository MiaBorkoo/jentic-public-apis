{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/apache.org/airflow/2.10.5/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "trigger-and-monitor-dag-run",
      "summary": "Triggers a specific DAG to run and then monitors its progress by checking the DAG run status and the status of its task instances.",
      "description": "Triggers a specific DAG to run and then monitors its progress by checking the DAG run status and the status of its task instances.",
      "inputs": {
        "type": "object",
        "properties": {
          "dag_id": {
            "type": "string"
          },
          "logical_date": {
            "type": "string"
          },
          "conf": {
            "type": "string"
          },
          "dag_run_id": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "execution_date_gte": {
            "type": "string"
          },
          "execution_date_lte": {
            "type": "string"
          },
          "start_date_gte": {
            "type": "string"
          },
          "start_date_lte": {
            "type": "string"
          },
          "end_date_gte": {
            "type": "string"
          },
          "end_date_lte": {
            "type": "string"
          },
          "updated_at_gte": {
            "type": "string"
          },
          "updated_at_lte": {
            "type": "string"
          },
          "duration_gte": {
            "type": "string"
          },
          "duration_lte": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "queue": {
            "type": "string"
          },
          "executor": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "trigger-dag-run",
          "description": "Trigger a new run for a specified DAG.",
          "operationId": "post_dag_run",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$inputs.dag_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "dag_id": "$inputs.dag_id",
              "logical_date": "$inputs.logical_date",
              "conf": "$inputs.conf"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dag_run_id": "$response.body",
            "state": "$response.body",
            "run_type": "$response.body"
          }
        },
        {
          "stepId": "get-dag-run-status",
          "description": "Get the current status of the triggered DAG run.",
          "operationId": "get_dag_run",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$inputs.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.trigger-dag-run.outputs.dag_run_id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "state": "$response.body",
            "start_date": "$response.body",
            "end_date": "$response.body"
          }
        },
        {
          "stepId": "get-task-instances-for-run",
          "description": "List the task instances for the triggered DAG run to check individual task statuses.",
          "operationId": "get_task_instances",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$inputs.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.trigger-dag-run.outputs.dag_run_id"
            },
            {
              "name": "execution_date_gte",
              "in": "query",
              "value": "$inputs.execution_date_gte"
            },
            {
              "name": "execution_date_lte",
              "in": "query",
              "value": "$inputs.execution_date_lte"
            },
            {
              "name": "start_date_gte",
              "in": "query",
              "value": "$inputs.start_date_gte"
            },
            {
              "name": "start_date_lte",
              "in": "query",
              "value": "$inputs.start_date_lte"
            },
            {
              "name": "end_date_gte",
              "in": "query",
              "value": "$inputs.end_date_gte"
            },
            {
              "name": "end_date_lte",
              "in": "query",
              "value": "$inputs.end_date_lte"
            },
            {
              "name": "updated_at_gte",
              "in": "query",
              "value": "$inputs.updated_at_gte"
            },
            {
              "name": "updated_at_lte",
              "in": "query",
              "value": "$inputs.updated_at_lte"
            },
            {
              "name": "duration_gte",
              "in": "query",
              "value": "$inputs.duration_gte"
            },
            {
              "name": "duration_lte",
              "in": "query",
              "value": "$inputs.duration_lte"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "pool",
              "in": "query",
              "value": "$inputs.pool"
            },
            {
              "name": "queue",
              "in": "query",
              "value": "$inputs.queue"
            },
            {
              "name": "executor",
              "in": "query",
              "value": "$inputs.executor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_instances": "$response.body"
          }
        }
      ],
      "outputs": {
        "dag_run_id": "$steps.trigger-dag-run.outputs.dag_run_id",
        "state": "$steps.get-dag-run-status.outputs.state",
        "run_type": "$steps.trigger-dag-run.outputs.run_type",
        "start_date": "$steps.get-dag-run-status.outputs.start_date",
        "end_date": "$steps.get-dag-run-status.outputs.end_date",
        "task_instances": "$steps.get-task-instances-for-run.outputs.task_instances"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "debug-failed-task-instance",
      "summary": "Identifies a failed task instance within a specific DAG run, retrieves its details, fetches its logs, checks dependencies, and optionally retrieves its XCom data for debugging purposes.",
      "description": "Identifies a failed task instance within a specific DAG run, retrieves its details, fetches its logs, checks dependencies, and optionally retrieves its XCom data for debugging purposes.",
      "inputs": {
        "type": "object",
        "properties": {
          "dag_id": {
            "type": "string"
          },
          "dag_run_id": {
            "type": "string"
          },
          "execution_date_gte": {
            "type": "string"
          },
          "execution_date_lte": {
            "type": "string"
          },
          "start_date_gte": {
            "type": "string"
          },
          "start_date_lte": {
            "type": "string"
          },
          "end_date_gte": {
            "type": "string"
          },
          "end_date_lte": {
            "type": "string"
          },
          "updated_at_gte": {
            "type": "string"
          },
          "updated_at_lte": {
            "type": "string"
          },
          "duration_gte": {
            "type": "string"
          },
          "duration_lte": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "queue": {
            "type": "string"
          },
          "executor": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "task_id": {
            "type": "string"
          },
          "task_try_number": {
            "type": "string"
          },
          "full_content": {
            "type": "string"
          },
          "map_index": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "xcom_key": {
            "type": "string"
          },
          "deserialize": {
            "type": "string"
          },
          "stringify": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-failed-task",
          "description": "List task instances for a specific DAG run, filtering for failed states (filter applied client-side or using query params if available).",
          "operationId": "get_task_instances",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$inputs.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$inputs.dag_run_id"
            },
            {
              "name": "execution_date_gte",
              "in": "query",
              "value": "$inputs.execution_date_gte"
            },
            {
              "name": "execution_date_lte",
              "in": "query",
              "value": "$inputs.execution_date_lte"
            },
            {
              "name": "start_date_gte",
              "in": "query",
              "value": "$inputs.start_date_gte"
            },
            {
              "name": "start_date_lte",
              "in": "query",
              "value": "$inputs.start_date_lte"
            },
            {
              "name": "end_date_gte",
              "in": "query",
              "value": "$inputs.end_date_gte"
            },
            {
              "name": "end_date_lte",
              "in": "query",
              "value": "$inputs.end_date_lte"
            },
            {
              "name": "updated_at_gte",
              "in": "query",
              "value": "$inputs.updated_at_gte"
            },
            {
              "name": "updated_at_lte",
              "in": "query",
              "value": "$inputs.updated_at_lte"
            },
            {
              "name": "duration_gte",
              "in": "query",
              "value": "$inputs.duration_gte"
            },
            {
              "name": "duration_lte",
              "in": "query",
              "value": "$inputs.duration_lte"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "pool",
              "in": "query",
              "value": "$inputs.pool"
            },
            {
              "name": "queue",
              "in": "query",
              "value": "$inputs.queue"
            },
            {
              "name": "executor",
              "in": "query",
              "value": "$inputs.executor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_instances": "$response.body"
          }
        },
        {
          "stepId": "get-failed-task-details",
          "description": "Get detailed information about the specific failed task instance.",
          "operationId": "get_task_instance",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.find-failed-task.outputs.task_instances.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.find-failed-task.outputs.task_instances.dag_run_id"
            },
            {
              "name": "task_id",
              "in": "path",
              "value": "$steps.find-failed-task.outputs.task_instances.task_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_instance_details": "$response.body",
            "try_number": "$response.body"
          }
        },
        {
          "stepId": "get-failed-task-log",
          "description": "Retrieve the logs for the latest try of the failed task instance.",
          "operationId": "get_log",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.dag_run_id"
            },
            {
              "name": "task_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.task_id"
            },
            {
              "name": "task_try_number",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.try_number"
            },
            {
              "name": "full_content",
              "in": "query",
              "value": "$inputs.full_content"
            },
            {
              "name": "map_index",
              "in": "query",
              "value": "$inputs.map_index"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "log_content": "$response.body",
            "continuation_token": "$response.body"
          }
        },
        {
          "stepId": "get-task-dependencies",
          "description": "Check if the task failed due to unmet dependencies.",
          "operationId": "get_task_instance_dependencies",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.dag_run_id"
            },
            {
              "name": "task_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.task_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dependencies": "$response.body"
          }
        },
        {
          "stepId": "get-task-xcom",
          "description": "Retrieve a specific XCom entry produced by the task instance (optional, if XCom key is known/relevant).",
          "operationId": "get_xcom_entry",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.dag_run_id"
            },
            {
              "name": "task_id",
              "in": "path",
              "value": "$steps.get-failed-task-details.outputs.task_instance_details.task_id"
            },
            {
              "name": "xcom_key",
              "in": "path",
              "value": "$inputs.xcom_key"
            },
            {
              "name": "map_index",
              "in": "query",
              "value": "$inputs.map_index"
            },
            {
              "name": "deserialize",
              "in": "query",
              "value": "$inputs.deserialize"
            },
            {
              "name": "stringify",
              "in": "query",
              "value": "$inputs.stringify"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "xcom_value": "$response.body"
          }
        }
      ],
      "outputs": {
        "task_instances": "$steps.find-failed-task.outputs.task_instances",
        "task_instance_details": "$steps.get-failed-task-details.outputs.task_instance_details",
        "try_number": "$steps.get-failed-task-details.outputs.try_number",
        "log_content": "$steps.get-failed-task-log.outputs.log_content",
        "continuation_token": "$steps.get-failed-task-log.outputs.continuation_token",
        "dependencies": "$steps.get-task-dependencies.outputs.dependencies",
        "xcom_value": "$steps.get-task-xcom.outputs.xcom_value"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "retry-failed-task-instance",
      "summary": "Identifies a failed task instance and clears its state, allowing the scheduler to retry it.",
      "description": "Identifies a failed task instance and clears its state, allowing the scheduler to retry it.",
      "inputs": {
        "type": "object",
        "properties": {
          "dag_id": {
            "type": "string"
          },
          "dag_run_id": {
            "type": "string"
          },
          "task_id": {
            "type": "string"
          },
          "dry_run": {
            "type": "string"
          },
          "task_ids": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-failed-task-instance",
          "description": "Retrieve the details of a specific task instance known to have failed.",
          "operationId": "get_task_instance",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$inputs.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$inputs.dag_run_id"
            },
            {
              "name": "task_id",
              "in": "path",
              "value": "$inputs.task_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_instance_details": "$response.body"
          }
        },
        {
          "stepId": "clear-failed-task",
          "description": "Clear the state of the failed task instance within its DAG run to enable a retry.",
          "operationId": "post_clear_task_instances",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.get-failed-task-instance.outputs.task_instance_details.dag_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "dag_id": "$steps.get-failed-task-instance.outputs.task_instance_details.dag_id",
              "dag_run_id": "$steps.get-failed-task-instance.outputs.task_instance_details.dag_run_id",
              "dry_run": "$inputs.dry_run",
              "task_ids": "$inputs.task_ids"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_instance_references": "$response.body"
          }
        },
        {
          "stepId": "monitor-retried-task",
          "description": "Monitor the status of the task instance after clearing its state.",
          "operationId": "get_task_instance",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.get-failed-task-instance.outputs.task_instance_details.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.get-failed-task-instance.outputs.task_instance_details.dag_run_id"
            },
            {
              "name": "task_id",
              "in": "path",
              "value": "$steps.get-failed-task-instance.outputs.task_instance_details.task_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_instance_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "task_instance_details": "$steps.monitor-retried-task.outputs.task_instance_details",
        "task_instance_references": "$steps.clear-failed-task.outputs.task_instance_references"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-test-connection",
      "summary": "Creates a new Airflow connection and then immediately tests it to ensure it's configured correctly.",
      "description": "Creates a new Airflow connection and then immediately tests it to ensure it's configured correctly.",
      "inputs": {
        "type": "object",
        "properties": {
          "create-connection_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-connection",
          "description": "Create a new connection with specified details.",
          "operationId": "post_connection",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-connection_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connection_details": "$response.body"
          }
        },
        {
          "stepId": "test-new-connection",
          "description": "Test the newly created connection to verify its validity.",
          "operationId": "test_connection",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "connection_id": "$steps.create-connection.outputs.connection_details.connection_id",
              "conn_type": "$steps.create-connection.outputs.connection_details.conn_type",
              "host": "$steps.create-connection.outputs.connection_details.host",
              "login": "$steps.create-connection.outputs.connection_details.login",
              "schema": "$steps.create-connection.outputs.connection_details.schema",
              "port": "$steps.create-connection.outputs.connection_details.port",
              "password": "$steps.create-connection.outputs.connection_details.password",
              "extra": "$steps.create-connection.outputs.connection_details.extra"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body",
            "message": "$response.body"
          }
        }
      ],
      "outputs": {
        "connection_details": "$steps.create-connection.outputs.connection_details",
        "status": "$steps.test-new-connection.outputs.status",
        "message": "$steps.test-new-connection.outputs.message"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "troubleshoot-dag-import-error-and-reparse",
      "summary": "Identifies DAG import errors, retrieves the source code of the problematic DAG file, allows for external correction, and then triggers a re-parse request.",
      "description": "Identifies DAG import errors, retrieves the source code of the problematic DAG file, allows for external correction, and then triggers a re-parse request.",
      "inputs": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "order_by": {
            "type": "string"
          },
          "dag_id": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "file_token": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-import-errors",
          "description": "List recent DAG import errors to identify problematic files.",
          "operationId": "get_import_errors",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "import_errors": "$response.body"
          }
        },
        {
          "stepId": "get-dag-with-error",
          "description": "Get details of the DAG associated with the import error to retrieve its file token.",
          "operationId": "get_dag",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.list-import-errors.outputs.import_errors.filename"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dag_details": "$response.body",
            "file_token": "$response.body"
          }
        },
        {
          "stepId": "get-dag-source-code",
          "description": "Retrieve the source code of the DAG file using the file token.",
          "operationId": "get_dag_source",
          "parameters": [
            {
              "name": "file_token",
              "in": "path",
              "value": "$steps.get-dag-with-error.outputs.file_token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "content": "$response.body"
          }
        },
        {
          "stepId": "request-dag-reparse",
          "description": "Request Airflow to re-parse the DAG file after it has been corrected externally.",
          "operationId": "reparse_dag_file",
          "parameters": [
            {
              "name": "file_token",
              "in": "path",
              "value": "$steps.get-dag-with-error.outputs.file_token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code_201": "$response.body"
          }
        }
      ],
      "outputs": {
        "import_errors": "$steps.list-import-errors.outputs.import_errors",
        "dag_details": "$steps.get-dag-with-error.outputs.dag_details",
        "file_token": "$steps.get-dag-with-error.outputs.file_token",
        "content": "$steps.get-dag-source-code.outputs.content",
        "status_code_201": "$steps.request-dag-reparse.outputs.status_code_201"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "monitor-dataset-triggered-run",
      "summary": "Creates a dataset event and then monitors for DAG runs triggered by this event, finally confirming the triggering event for a specific run.",
      "description": "Creates a dataset event and then monitors for DAG runs triggered by this event, finally confirming the triggering event for a specific run.",
      "inputs": {
        "type": "object",
        "properties": {
          "dataset_uri": {
            "type": "string"
          },
          "dag_id": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "execution_date_gte": {
            "type": "string"
          },
          "execution_date_lte": {
            "type": "string"
          },
          "start_date_gte": {
            "type": "string"
          },
          "start_date_lte": {
            "type": "string"
          },
          "end_date_gte": {
            "type": "string"
          },
          "end_date_lte": {
            "type": "string"
          },
          "updated_at_gte": {
            "type": "string"
          },
          "updated_at_lte": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "order_by": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "dag_run_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-dataset-event",
          "description": "Create an event for a specific dataset URI, potentially triggering downstream DAGs.",
          "operationId": "create_dataset_event",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "dataset_uri": "$inputs.dataset_uri"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dataset_event_details": "$response.body"
          }
        },
        {
          "stepId": "list-consuming-dag-runs",
          "description": "List DAG runs for a known consuming DAG to find runs potentially triggered by the dataset event (requires client-side filtering based on time or run_type='dataset_triggered').",
          "operationId": "get_dag_runs",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$inputs.dag_id"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "execution_date_gte",
              "in": "query",
              "value": "$inputs.execution_date_gte"
            },
            {
              "name": "execution_date_lte",
              "in": "query",
              "value": "$inputs.execution_date_lte"
            },
            {
              "name": "start_date_gte",
              "in": "query",
              "value": "$inputs.start_date_gte"
            },
            {
              "name": "start_date_lte",
              "in": "query",
              "value": "$inputs.start_date_lte"
            },
            {
              "name": "end_date_gte",
              "in": "query",
              "value": "$inputs.end_date_gte"
            },
            {
              "name": "end_date_lte",
              "in": "query",
              "value": "$inputs.end_date_lte"
            },
            {
              "name": "updated_at_gte",
              "in": "query",
              "value": "$inputs.updated_at_gte"
            },
            {
              "name": "updated_at_lte",
              "in": "query",
              "value": "$inputs.updated_at_lte"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dag_runs": "$response.body"
          }
        },
        {
          "stepId": "get-triggering-events-for-run",
          "description": "Get the specific dataset events that triggered a particular DAG run.",
          "operationId": "get_upstream_dataset_events",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.list-consuming-dag-runs.outputs.dag_runs.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.list-consuming-dag-runs.outputs.dag_runs.dag_run_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dataset_events": "$response.body"
          }
        }
      ],
      "outputs": {
        "dataset_event_details": "$steps.create-dataset-event.outputs.dataset_event_details",
        "dag_runs": "$steps.list-consuming-dag-runs.outputs.dag_runs",
        "dataset_events": "$steps.get-triggering-events-for-run.outputs.dataset_events"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "clear-specific-task-instances-in-a-dag-run",
      "summary": "Clears the state of a specified set of task instances within a particular DAG run, often used to rerun parts of a workflow.",
      "description": "Clears the state of a specified set of task instances within a particular DAG run, often used to rerun parts of a workflow.",
      "inputs": {
        "type": "object",
        "properties": {
          "dag_id": {
            "type": "string"
          },
          "dag_run_id": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "dry_run": {
            "type": "string"
          },
          "task_ids": {
            "type": "string"
          },
          "execution_date_gte": {
            "type": "string"
          },
          "execution_date_lte": {
            "type": "string"
          },
          "start_date_gte": {
            "type": "string"
          },
          "start_date_lte": {
            "type": "string"
          },
          "end_date_gte": {
            "type": "string"
          },
          "end_date_lte": {
            "type": "string"
          },
          "updated_at_gte": {
            "type": "string"
          },
          "updated_at_lte": {
            "type": "string"
          },
          "duration_gte": {
            "type": "string"
          },
          "duration_lte": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "queue": {
            "type": "string"
          },
          "executor": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-target-dag-run",
          "description": "Retrieve details of the target DAG run.",
          "operationId": "get_dag_run",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$inputs.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$inputs.dag_run_id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dag_run_details": "$response.body"
          }
        },
        {
          "stepId": "clear-specific-tasks",
          "description": "Clear the state of specific task instances within the target DAG run.",
          "operationId": "post_clear_task_instances",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.get-target-dag-run.outputs.dag_run_details.dag_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "dag_id": "$steps.get-target-dag-run.outputs.dag_run_details.dag_id",
              "dag_run_id": "$steps.get-target-dag-run.outputs.dag_run_details.dag_run_id",
              "dry_run": "$inputs.dry_run",
              "task_ids": "$inputs.task_ids"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_instance_references": "$response.body"
          }
        },
        {
          "stepId": "check-cleared-tasks-status",
          "description": "Check the status of the task instances after clearing.",
          "operationId": "get_task_instances",
          "parameters": [
            {
              "name": "dag_id",
              "in": "path",
              "value": "$steps.get-target-dag-run.outputs.dag_run_details.dag_id"
            },
            {
              "name": "dag_run_id",
              "in": "path",
              "value": "$steps.get-target-dag-run.outputs.dag_run_details.dag_run_id"
            },
            {
              "name": "execution_date_gte",
              "in": "query",
              "value": "$inputs.execution_date_gte"
            },
            {
              "name": "execution_date_lte",
              "in": "query",
              "value": "$inputs.execution_date_lte"
            },
            {
              "name": "start_date_gte",
              "in": "query",
              "value": "$inputs.start_date_gte"
            },
            {
              "name": "start_date_lte",
              "in": "query",
              "value": "$inputs.start_date_lte"
            },
            {
              "name": "end_date_gte",
              "in": "query",
              "value": "$inputs.end_date_gte"
            },
            {
              "name": "end_date_lte",
              "in": "query",
              "value": "$inputs.end_date_lte"
            },
            {
              "name": "updated_at_gte",
              "in": "query",
              "value": "$inputs.updated_at_gte"
            },
            {
              "name": "updated_at_lte",
              "in": "query",
              "value": "$inputs.updated_at_lte"
            },
            {
              "name": "duration_gte",
              "in": "query",
              "value": "$inputs.duration_gte"
            },
            {
              "name": "duration_lte",
              "in": "query",
              "value": "$inputs.duration_lte"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "pool",
              "in": "query",
              "value": "$inputs.pool"
            },
            {
              "name": "queue",
              "in": "query",
              "value": "$inputs.queue"
            },
            {
              "name": "executor",
              "in": "query",
              "value": "$inputs.executor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_instances": "$response.body"
          }
        }
      ],
      "outputs": {
        "dag_run_details": "$steps.get-target-dag-run.outputs.dag_run_details",
        "task_instance_references": "$steps.clear-specific-tasks.outputs.task_instance_references",
        "task_instances": "$steps.check-cleared-tasks-status.outputs.task_instances"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}