{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/twilio.com/twilio_verify_v2/1.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "initiate-and-verify-one-time-password-otp",
      "summary": "Sends a one-time password (OTP) to a user via a chosen channel (SMS, Call, Email, WhatsApp, SNA) and then verifies the code provided by the user.",
      "description": "Sends a one-time password (OTP) to a user via a chosen channel (SMS, Call, Email, WhatsApp, SNA) and then verifies the code provided by the user.",
      "inputs": {
        "type": "object",
        "properties": {
          "ServiceSid": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Channel": {
            "type": "string"
          },
          "Code": {
            "type": "string"
          },
          "VerificationSid": {
            "type": "string"
          },
          "Amount": {
            "type": "string"
          },
          "Payee": {
            "type": "string"
          },
          "SnaClientToken": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-verification",
          "description": "Initiates a verification process by sending an OTP to the specified recipient via the chosen channel.",
          "operationId": "CreateVerification",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "To": "$inputs.To",
              "Channel": "$inputs.Channel"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "status": "$response.body#/status",
            "to": "$response.body#/to",
            "channel": "$response.body#/channel"
          }
        },
        {
          "stepId": "create-verification-check",
          "description": "Checks the OTP provided by the user against the initiated verification to confirm their identity.",
          "operationId": "CreateVerificationCheck",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Code": "$inputs.Code",
              "To": "$inputs.To",
              "VerificationSid": "$inputs.VerificationSid",
              "Amount": "$inputs.Amount",
              "Payee": "$inputs.Payee",
              "SnaClientToken": "$inputs.SnaClientToken"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status",
            "valid": "$response.body#/valid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.create-verification.outputs.sid",
        "status": "$steps.create-verification-check.outputs.status",
        "to": "$steps.create-verification.outputs.to",
        "channel": "$steps.create-verification.outputs.channel",
        "valid": "$steps.create-verification-check.outputs.valid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "push-authentication-challenge-and-verification",
      "summary": "Initiates a push notification challenge to a user's enrolled device and verifies their response for authentication or transaction approval.",
      "description": "Initiates a push notification challenge to a user's enrolled device and verifies their response for authentication or transaction approval.",
      "inputs": {
        "type": "object",
        "properties": {
          "ServiceSid": {
            "type": "string"
          },
          "Identity": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "FactorSid": {
            "type": "string"
          },
          "ChallengeSid": {
            "type": "string"
          },
          "Ttl": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          },
          "AuthPayload": {
            "type": "string"
          },
          "Metadata": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "fetch-entity",
          "description": "Retrieves an existing entity (user identity) within a Verify Service.",
          "operationId": "FetchEntity",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Identity",
              "in": "path",
              "value": "$inputs.Identity"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "identity": "$response.body#/identity"
          }
        },
        {
          "stepId": "list-factor",
          "description": "Lists all factors associated with the entity to identify the push factor for the challenge.",
          "operationId": "ListFactor",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Identity",
              "in": "path",
              "value": "$inputs.Identity"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "factors": "$response.body#/factors"
          }
        },
        {
          "stepId": "create-challenge",
          "description": "Creates a new challenge for a specific push factor, triggering a push notification to the user's device.",
          "operationId": "CreateChallenge",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Identity",
              "in": "path",
              "value": "$inputs.Identity"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FactorSid": "$inputs.FactorSid"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "status": "$response.body#/status",
            "factor_sid": "$response.body#/factor_sid"
          }
        },
        {
          "stepId": "create-notification",
          "description": "Optionally sends a new notification for an existing challenge, useful for re-sending or managing notification delivery.",
          "operationId": "CreateNotification",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Identity",
              "in": "path",
              "value": "$inputs.Identity"
            },
            {
              "name": "ChallengeSid",
              "in": "path",
              "value": "$inputs.ChallengeSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Ttl": "$inputs.Ttl"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "update-challenge",
          "description": "Verifies the challenge by processing the user's response (e.g., approval/denial from the mobile app).",
          "operationId": "UpdateChallenge",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Identity",
              "in": "path",
              "value": "$inputs.Identity"
            },
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "AuthPayload": "$inputs.AuthPayload",
              "Metadata": "$inputs.Metadata"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status",
            "responded_reason": "$response.body#/responded_reason"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.create-notification.outputs.sid",
        "identity": "$steps.fetch-entity.outputs.identity",
        "factors": "$steps.list-factor.outputs.factors",
        "status": "$steps.update-challenge.outputs.status",
        "factor_sid": "$steps.create-challenge.outputs.factor_sid",
        "responded_reason": "$steps.update-challenge.outputs.responded_reason"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "service-configuration---rate-limit-management",
      "summary": "Allows an administrator to create, configure, and manage rate limits and their associated buckets for a verification service to prevent abuse.",
      "description": "Allows an administrator to create, configure, and manage rate limits and their associated buckets for a verification service to prevent abuse.",
      "inputs": {
        "type": "object",
        "properties": {
          "ServiceSid": {
            "type": "string"
          },
          "UniqueName": {
            "type": "string"
          },
          "RateLimitSid": {
            "type": "string"
          },
          "Max": {
            "type": "string"
          },
          "Interval": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-rate-limit",
          "description": "Creates a new rate limit configuration for a specific verification service.",
          "operationId": "CreateRateLimit",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "UniqueName": "$inputs.UniqueName"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "unique_name": "$response.body#/unique_name"
          }
        },
        {
          "stepId": "create-bucket",
          "description": "Creates a new bucket within a defined rate limit, specifying the maximum requests and interval.",
          "operationId": "CreateBucket",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "RateLimitSid",
              "in": "path",
              "value": "$inputs.RateLimitSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Max": "$inputs.Max",
              "Interval": "$inputs.Interval"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "max": "$response.body#/max",
            "interval": "$response.body#/interval"
          }
        },
        {
          "stepId": "update-bucket",
          "description": "Updates the maximum requests or interval for an existing rate limit bucket.",
          "operationId": "UpdateBucket",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "RateLimitSid",
              "in": "path",
              "value": "$inputs.RateLimitSid"
            },
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Max": "$inputs.Max",
              "Interval": "$inputs.Interval"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "max": "$response.body#/max",
            "interval": "$response.body#/interval"
          }
        },
        {
          "stepId": "list-buckets",
          "description": "Retrieves a list of all buckets configured for a specific rate limit.",
          "operationId": "ListBucket",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "RateLimitSid",
              "in": "path",
              "value": "$inputs.RateLimitSid"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "buckets": "$response.body#/buckets"
          }
        },
        {
          "stepId": "delete-bucket",
          "description": "Deletes a specific rate limit bucket.",
          "operationId": "DeleteBucket",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "RateLimitSid",
              "in": "path",
              "value": "$inputs.RateLimitSid"
            },
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "bucket_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.create-bucket.outputs.sid",
        "unique_name": "$steps.create-rate-limit.outputs.unique_name",
        "max": "$steps.update-bucket.outputs.max",
        "interval": "$steps.update-bucket.outputs.interval",
        "buckets": "$steps.list-buckets.outputs.buckets",
        "bucket_data": "$steps.delete-bucket.outputs.bucket_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "service-configuration---messaging-configuration-management",
      "summary": "Enables administrators to define and manage messaging services used for sending SMS/WhatsApp verifications for specific countries.",
      "description": "Enables administrators to define and manage messaging services used for sending SMS/WhatsApp verifications for specific countries.",
      "inputs": {
        "type": "object",
        "properties": {
          "ServiceSid": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "MessagingServiceSid": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-messaging-configuration",
          "description": "Creates a new messaging configuration, associating a Twilio Messaging Service with a country for verification messages.",
          "operationId": "CreateMessagingConfiguration",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Country": "$inputs.Country",
              "MessagingServiceSid": "$inputs.MessagingServiceSid"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "country": "$response.body#/country",
            "messaging_service_sid": "$response.body#/messaging_service_sid"
          }
        },
        {
          "stepId": "update-messaging-configuration",
          "description": "Updates the Messaging Service SID for an existing country-specific messaging configuration.",
          "operationId": "UpdateMessagingConfiguration",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Country",
              "in": "path",
              "value": "$inputs.Country"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "MessagingServiceSid": "$inputs.MessagingServiceSid"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "country": "$response.body#/country",
            "messaging_service_sid": "$response.body#/messaging_service_sid"
          }
        },
        {
          "stepId": "list-messaging-configuration",
          "description": "Retrieves a list of all messaging configurations defined for a service.",
          "operationId": "ListMessagingConfiguration",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "messaging_configurations": "$response.body#/messaging_configurations"
          }
        },
        {
          "stepId": "fetch-messaging-configuration",
          "description": "Fetches details of a specific messaging configuration by country code.",
          "operationId": "FetchMessagingConfiguration",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Country",
              "in": "path",
              "value": "$inputs.Country"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "country": "$response.body#/country",
            "messaging_service_sid": "$response.body#/messaging_service_sid"
          }
        },
        {
          "stepId": "delete-messaging-configuration",
          "description": "Deletes a specific messaging configuration for a country.",
          "operationId": "DeleteMessagingConfiguration",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Country",
              "in": "path",
              "value": "$inputs.Country"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "configuration_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "country": "$steps.fetch-messaging-configuration.outputs.country",
        "messaging_service_sid": "$steps.fetch-messaging-configuration.outputs.messaging_service_sid",
        "messaging_configurations": "$steps.list-messaging-configuration.outputs.messaging_configurations",
        "configuration_data": "$steps.delete-messaging-configuration.outputs.configuration_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "service-configuration---webhook-management",
      "summary": "Allows administrators to set up and manage webhooks to receive real-time notifications about verification events (e.g., factor created, challenge approved).",
      "description": "Allows administrators to set up and manage webhooks to receive real-time notifications about verification events (e.g., factor created, challenge approved).",
      "inputs": {
        "type": "object",
        "properties": {
          "ServiceSid": {
            "type": "string"
          },
          "FriendlyName": {
            "type": "string"
          },
          "EventTypes": {
            "type": "string"
          },
          "WebhookUrl": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-webhook",
          "description": "Creates a new webhook for a service, specifying the URL and event types to subscribe to.",
          "operationId": "CreateWebhook",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName",
              "EventTypes": "$inputs.EventTypes",
              "WebhookUrl": "$inputs.WebhookUrl"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "friendly_name": "$response.body#/friendly_name",
            "event_types": "$response.body#/event_types",
            "webhook_url": "$response.body#/webhook_url"
          }
        },
        {
          "stepId": "update-webhook",
          "description": "Updates the properties of an existing webhook, such as its friendly name, event types, or status.",
          "operationId": "UpdateWebhook",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName",
              "EventTypes": "$inputs.EventTypes",
              "WebhookUrl": "$inputs.WebhookUrl",
              "Status": "$inputs.Status",
              "Version": "$inputs.Version"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "friendly_name": "$response.body#/friendly_name",
            "event_types": "$response.body#/event_types",
            "webhook_url": "$response.body#/webhook_url",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "list-webhook",
          "description": "Retrieves a list of all webhooks configured for a specific service.",
          "operationId": "ListWebhook",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhooks": "$response.body#/webhooks"
          }
        },
        {
          "stepId": "fetch-webhook",
          "description": "Fetches details of a specific webhook by its SID.",
          "operationId": "FetchWebhook",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "friendly_name": "$response.body#/friendly_name",
            "event_types": "$response.body#/event_types",
            "webhook_url": "$response.body#/webhook_url"
          }
        },
        {
          "stepId": "delete-webhook",
          "description": "Deletes a specific webhook configuration.",
          "operationId": "DeleteWebhook",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.create-webhook.outputs.sid",
        "friendly_name": "$steps.fetch-webhook.outputs.friendly_name",
        "event_types": "$steps.fetch-webhook.outputs.event_types",
        "webhook_url": "$steps.fetch-webhook.outputs.webhook_url",
        "status": "$steps.update-webhook.outputs.status",
        "webhooks": "$steps.list-webhook.outputs.webhooks",
        "webhook_data": "$steps.delete-webhook.outputs.webhook_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}