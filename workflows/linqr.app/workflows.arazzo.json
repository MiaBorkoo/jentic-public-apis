{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/linqr.app/main/2.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "generate-custom-qr-code-with-hosted-logo",
      "summary": "This workflow allows users to upload a custom image (e.g., a company logo) to LinQR's storage for optimal performance and then use that hosted image to generate a visually attractive QR code. The ID of the hosted image is then used to construct the `image.uri` for QR code generation.",
      "description": "This workflow allows users to upload a custom image (e.g., a company logo) to LinQR's storage for optimal performance and then use that hosted image to generate a visually attractive QR code. The ID of the hosted image is then used to construct the `image.uri` for QR code generation.",
      "inputs": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-qr-logo",
          "description": "Uploads a binary image file (e.g., a logo) to LinQR's storage. This is the preferred method for embedding images in QR codes due to caching benefits.",
          "operationId": "imageUpload_images_post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "image": "$inputs.image"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "generate-qr-with-hosted-logo",
          "description": "Generates a QR code embedding the previously uploaded image. The `image.uri` input should be formatted as `storage://{id}` using the ID obtained from the `upload-qr-logo` step.",
          "operationId": "qrcode_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "image.uri": "$steps.upload-qr-logo.outputs.id",
              "data": "$inputs.data"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "qr_code_image": "$response.body#/qr_code_image"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-qr-logo.outputs.id",
        "source": "$steps.upload-qr-logo.outputs.source",
        "size": "$steps.upload-qr-logo.outputs.size",
        "created": "$steps.upload-qr-logo.outputs.created",
        "qr_code_image": "$steps.generate-qr-with-hosted-logo.outputs.qr_code_image"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "generate-batch-qr-codes-with-single-hosted-logo",
      "summary": "This workflow enables the efficient generation of multiple QR codes, all sharing a single pre-uploaded custom logo. This is ideal for campaigns requiring consistent branding across many QR codes. The ID of the uploaded image is used to construct the `image.uri` for each QR code in the batch.",
      "description": "This workflow enables the efficient generation of multiple QR codes, all sharing a single pre-uploaded custom logo. This is ideal for campaigns requiring consistent branding across many QR codes. The ID of the uploaded image is used to construct the `image.uri` for each QR code in the batch.",
      "inputs": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-batch-logo",
          "description": "Uploads a binary image file to LinQR's storage to be used as a common logo for a batch of QR codes. This ensures consistent branding and performance.",
          "operationId": "imageUpload_images_post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "image": "$inputs.image"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "generate-qr-batch-with-hosted-logo",
          "description": "Generates a single archive containing multiple QR codes. Each QR code definition within the `items` array of the request body should include an `image` object where `image.uri` is set to `storage://{id}` using the ID from the `upload-batch-logo` step.",
          "operationId": "qrCodeBatch_batch_qrcode_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "items": "$steps.upload-batch-logo.outputs.id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "qr_code_archive": "$response.body#/qr_code_archive"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-batch-logo.outputs.id",
        "source": "$steps.upload-batch-logo.outputs.source",
        "size": "$steps.upload-batch-logo.outputs.size",
        "created": "$steps.upload-batch-logo.outputs.created",
        "qr_code_archive": "$steps.generate-qr-batch-with-hosted-logo.outputs.qr_code_archive"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-uploaded-qr-code-logos",
      "summary": "This workflow provides a way to list all custom images previously uploaded to LinQR's storage and optionally delete specific ones to manage storage or remove outdated assets.",
      "description": "This workflow provides a way to list all custom images previously uploaded to LinQR's storage and optionally delete specific ones to manage storage or remove outdated assets.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-all-logos",
          "description": "Retrieves a list of metadata for all images currently hosted in LinQR storage, including their unique identifiers.",
          "operationId": "imageListAll_images_get",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "image_metadata_list": "$response.body#/0/image_metadata_list"
          }
        },
        {
          "stepId": "delete-specific-logo",
          "description": "Deletes a specific image from LinQR storage using its unique identifier. This ID can be obtained from the `list-all-logos` step.",
          "operationId": "imageDelete_images__id__delete",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.list-all-logos.outputs.image_metadata_list.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code": "$response.body#/status_code"
          }
        }
      ],
      "outputs": {
        "image_metadata_list": "$steps.list-all-logos.outputs.image_metadata_list",
        "status_code": "$steps.delete-specific-logo.outputs.status_code"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
