{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/discord.com/main/10/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "get-authenticated-user-details",
      "summary": "Retrieves the profile, guilds, and connections for the currently authenticated user.",
      "description": "Retrieves the profile, guilds, and connections for the currently authenticated user.",
      "inputs": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string"
          },
          "after": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "with_counts": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-my-user-info",
          "description": "Get the profile information for the current user.",
          "operationId": "get_my_user",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user_id": "$response.body",
            "username": "$response.body",
            "discriminator": "$response.body",
            "avatar": "$response.body",
            "email": "$response.body",
            "verified": "$response.body",
            "locale": "$response.body",
            "mfa_enabled": "$response.body"
          }
        },
        {
          "stepId": "list-my-guilds",
          "description": "List the guilds the current user is a member of.",
          "operationId": "list_my_guilds",
          "parameters": [
            {
              "name": "before",
              "in": "query",
              "value": "$inputs.before"
            },
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "with_counts",
              "in": "query",
              "value": "$inputs.with_counts"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "guilds_array": "$response.body"
          }
        },
        {
          "stepId": "list-my-connections",
          "description": "List the connected third-party accounts for the current user.",
          "operationId": "list_my_connections",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connections_array": "$response.body"
          }
        }
      ],
      "outputs": {
        "user_id": "$steps.get-my-user-info.outputs.user_id",
        "username": "$steps.get-my-user-info.outputs.username",
        "discriminator": "$steps.get-my-user-info.outputs.discriminator",
        "avatar": "$steps.get-my-user-info.outputs.avatar",
        "email": "$steps.get-my-user-info.outputs.email",
        "verified": "$steps.get-my-user-info.outputs.verified",
        "locale": "$steps.get-my-user-info.outputs.locale",
        "mfa_enabled": "$steps.get-my-user-info.outputs.mfa_enabled",
        "guilds_array": "$steps.list-my-guilds.outputs.guilds_array",
        "connections_array": "$steps.list-my-connections.outputs.connections_array"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "register-and-configure-guild-application-command",
      "summary": "Creates a new application command within a specific guild and sets its permissions.",
      "description": "Creates a new application command within a specific guild and sets its permissions.",
      "inputs": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string"
          },
          "guild_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "command_id": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-guild-command",
          "description": "Create a new command specific to a guild for an application.",
          "operationId": "create_guild_application_command",
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "value": "$inputs.application_id"
            },
            {
              "name": "guild_id",
              "in": "path",
              "value": "$inputs.guild_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "command_id": "$response.body",
            "application_id": "$response.body",
            "guild_id": "$response.body",
            "command_details": "$response.body"
          }
        },
        {
          "stepId": "set-command-permissions",
          "description": "Set the permissions for the newly created guild command.",
          "operationId": "set_guild_application_command_permissions",
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "value": "$steps.create-guild-command.outputs.application_id"
            },
            {
              "name": "guild_id",
              "in": "path",
              "value": "$steps.create-guild-command.outputs.guild_id"
            },
            {
              "name": "command_id",
              "in": "path",
              "value": "$steps.create-guild-command.outputs.command_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "application_id": "$steps.create-guild-command.outputs.application_id",
              "guild_id": "$steps.create-guild-command.outputs.guild_id",
              "command_id": "$steps.create-guild-command.outputs.command_id",
              "permissions": "$inputs.permissions"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "permissions_response": "$response.body"
          }
        }
      ],
      "outputs": {
        "command_id": "$steps.create-guild-command.outputs.command_id",
        "application_id": "$steps.create-guild-command.outputs.application_id",
        "guild_id": "$steps.create-guild-command.outputs.guild_id",
        "command_details": "$steps.create-guild-command.outputs.command_details",
        "permissions_response": "$steps.set-command-permissions.outputs.permissions_response"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-role-and-assign-to-member",
      "summary": "Defines a new role within a guild and then assigns that role to a specific guild member.",
      "description": "Defines a new role within a guild and then assigns that role to a specific guild member.",
      "inputs": {
        "type": "object",
        "properties": {
          "guild_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "hoist": {
            "type": "string"
          },
          "mentionable": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "unicode_emoji": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "role_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-new-guild-role",
          "description": "Create a new role in the specified guild.",
          "operationId": "create_guild_role",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$inputs.guild_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name",
              "permissions": "$inputs.permissions",
              "color": "$inputs.color",
              "hoist": "$inputs.hoist",
              "mentionable": "$inputs.mentionable",
              "icon": "$inputs.icon",
              "unicode_emoji": "$inputs.unicode_emoji"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "role_id": "$response.body",
            "guild_id": "$response.body",
            "role_details": "$response.body"
          }
        },
        {
          "stepId": "assign-role-to-member",
          "description": "Assign the newly created role to a specific user in the guild.",
          "operationId": "add_guild_member_role",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$steps.create-new-guild-role.outputs.guild_id"
            },
            {
              "name": "user_id",
              "in": "path",
              "value": "$inputs.user_id"
            },
            {
              "name": "role_id",
              "in": "path",
              "value": "$steps.create-new-guild-role.outputs.role_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "assignment_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "role_id": "$steps.create-new-guild-role.outputs.role_id",
        "guild_id": "$steps.create-new-guild-role.outputs.guild_id",
        "role_details": "$steps.create-new-guild-role.outputs.role_details",
        "assignment_status": "$steps.assign-role-to-member.outputs.assignment_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "interact-with-a-message",
      "summary": "Retrieves a specific message, adds a reaction from the current user, and then lists users who added that reaction.",
      "description": "Retrieves a specific message, adds a reaction from the current user, and then lists users who added that reaction.",
      "inputs": {
        "type": "object",
        "properties": {
          "channel_id": {
            "type": "string"
          },
          "message_id": {
            "type": "string"
          },
          "emoji_name": {
            "type": "string"
          },
          "after": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-target-message",
          "description": "Retrieve the details of a specific message.",
          "operationId": "get_message",
          "parameters": [
            {
              "name": "channel_id",
              "in": "path",
              "value": "$inputs.channel_id"
            },
            {
              "name": "message_id",
              "in": "path",
              "value": "$inputs.message_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message_details": "$response.body",
            "channel_id": "$response.body.channel_id",
            "message_id": "$response.body.id"
          }
        },
        {
          "stepId": "add-my-reaction",
          "description": "Add the current user's reaction to the message.",
          "operationId": "add_my_message_reaction",
          "parameters": [
            {
              "name": "channel_id",
              "in": "path",
              "value": "$steps.get-target-message.outputs.channel_id"
            },
            {
              "name": "message_id",
              "in": "path",
              "value": "$steps.get-target-message.outputs.message_id"
            },
            {
              "name": "emoji_name",
              "in": "path",
              "value": "$inputs.emoji_name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "reaction_add_status": "$response.body"
          }
        },
        {
          "stepId": "list-emoji-reactors",
          "description": "List users who reacted with the specified emoji.",
          "operationId": "list_message_reactions_by_emoji",
          "parameters": [
            {
              "name": "channel_id",
              "in": "path",
              "value": "$inputs.channel_id"
            },
            {
              "name": "message_id",
              "in": "path",
              "value": "$inputs.message_id"
            },
            {
              "name": "emoji_name",
              "in": "path",
              "value": "$inputs.emoji_name"
            },
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "reacting_users_array": "$response.body"
          }
        }
      ],
      "outputs": {
        "message_details": "$steps.get-target-message.outputs.message_details",
        "channel_id": "$steps.get-target-message.outputs.channel_id",
        "message_id": "$steps.get-target-message.outputs.message_id",
        "reaction_add_status": "$steps.add-my-reaction.outputs.reaction_add_status",
        "reacting_users_array": "$steps.list-emoji-reactors.outputs.reacting_users_array"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-send-webhook-message",
      "summary": "Creates a webhook in a specified channel and then uses it to send a message.",
      "description": "Creates a webhook in a specified channel and then uses it to send a message.",
      "inputs": {
        "type": "object",
        "properties": {
          "channel_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "webhook_id": {
            "type": "string"
          },
          "webhook_token": {
            "type": "string"
          },
          "wait": {
            "type": "string"
          },
          "thread_id": {
            "type": "string"
          },
          "with_components": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-channel-webhook",
          "description": "Create a new webhook for a specific channel.",
          "operationId": "create_webhook",
          "parameters": [
            {
              "name": "channel_id",
              "in": "path",
              "value": "$inputs.channel_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_id": "$response.body",
            "webhook_token": "$response.body",
            "channel_id": "$response.body",
            "webhook_details": "$response.body"
          }
        },
        {
          "stepId": "execute-created-webhook",
          "description": "Send a message using the newly created webhook.",
          "operationId": "execute_webhook",
          "parameters": [
            {
              "name": "webhook_id",
              "in": "path",
              "value": "$steps.create-channel-webhook.outputs.webhook_id"
            },
            {
              "name": "webhook_token",
              "in": "path",
              "value": "$steps.create-channel-webhook.outputs.webhook_token"
            },
            {
              "name": "wait",
              "in": "query",
              "value": "$inputs.wait"
            },
            {
              "name": "thread_id",
              "in": "query",
              "value": "$inputs.thread_id"
            },
            {
              "name": "with_components",
              "in": "query",
              "value": "$inputs.with_components"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "webhook_id": "$steps.create-channel-webhook.outputs.webhook_id",
              "webhook_token": "$steps.create-channel-webhook.outputs.webhook_token"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message_response": "$response.body"
          }
        }
      ],
      "outputs": {
        "webhook_id": "$steps.create-channel-webhook.outputs.webhook_id",
        "webhook_token": "$steps.create-channel-webhook.outputs.webhook_token",
        "channel_id": "$steps.create-channel-webhook.outputs.channel_id",
        "webhook_details": "$steps.create-channel-webhook.outputs.webhook_details",
        "message_response": "$steps.execute-created-webhook.outputs.message_response"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-thread-membership",
      "summary": "Creates a thread from a message, lists its members, and adds a new member to the thread.",
      "description": "Creates a thread from a message, lists its members, and adds a new member to the thread.",
      "inputs": {
        "type": "object",
        "properties": {
          "channel_id": {
            "type": "string"
          },
          "message_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "with_member": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "after": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-thread",
          "description": "Create a new thread starting from a specific message.",
          "operationId": "create_thread_from_message",
          "parameters": [
            {
              "name": "channel_id",
              "in": "path",
              "value": "$inputs.channel_id"
            },
            {
              "name": "message_id",
              "in": "path",
              "value": "$inputs.message_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "thread_id": "$response.body",
            "thread_details": "$response.body"
          }
        },
        {
          "stepId": "list-thread-members",
          "description": "List the members currently in the thread.",
          "operationId": "list_thread_members",
          "parameters": [
            {
              "name": "channel_id",
              "in": "path",
              "value": "$steps.create-thread.outputs.thread_id"
            },
            {
              "name": "with_member",
              "in": "query",
              "value": "$inputs.with_member"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "members_array": "$response.body"
          }
        },
        {
          "stepId": "add-member-to-thread",
          "description": "Add a specific user to the thread.",
          "operationId": "add_thread_member",
          "parameters": [
            {
              "name": "channel_id",
              "in": "path",
              "value": "$steps.create-thread.outputs.thread_id"
            },
            {
              "name": "user_id",
              "in": "path",
              "value": "$inputs.user_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "add_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "thread_id": "$steps.create-thread.outputs.thread_id",
        "thread_details": "$steps.create-thread.outputs.thread_details",
        "members_array": "$steps.list-thread-members.outputs.members_array",
        "add_status": "$steps.add-member-to-thread.outputs.add_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "moderate-guild-member-ban",
      "summary": "Bans a specific user from a guild and optionally verifies the ban.",
      "description": "Bans a specific user from a guild and optionally verifies the ban.",
      "inputs": {
        "type": "object",
        "properties": {
          "guild_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "delete_message_seconds": {
            "type": "string"
          },
          "delete_message_days": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "ban-user",
          "description": "Ban a user from the specified guild.",
          "operationId": "ban_user_from_guild",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$inputs.guild_id"
            },
            {
              "name": "user_id",
              "in": "path",
              "value": "$inputs.user_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "delete_message_seconds": "$inputs.delete_message_seconds",
              "delete_message_days": "$inputs.delete_message_days"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ban_status": "$response.body"
          }
        },
        {
          "stepId": "get-ban-details",
          "description": "Retrieve details about the ban for the specified user.",
          "operationId": "get_guild_ban",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$inputs.guild_id"
            },
            {
              "name": "user_id",
              "in": "path",
              "value": "$inputs.user_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ban_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "ban_status": "$steps.ban-user.outputs.ban_status",
        "ban_details": "$steps.get-ban-details.outputs.ban_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-guild-auto-moderation-rule",
      "summary": "Creates an auto-moderation rule for a guild and then retrieves its details.",
      "description": "Creates an auto-moderation rule for a guild and then retrieves its details.",
      "inputs": {
        "type": "object",
        "properties": {
          "guild_id": {
            "type": "string"
          },
          "create-automod-rule_body": {
            "type": "object"
          },
          "rule_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-automod-rule",
          "description": "Create a new auto-moderation rule.",
          "operationId": "create_auto_moderation_rule",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$inputs.guild_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-automod-rule_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "rule_id": "$response.body",
            "guild_id": "$response.body",
            "rule_details": "$response.body"
          }
        },
        {
          "stepId": "get-automod-rule",
          "description": "Retrieve the details of the newly created auto-moderation rule.",
          "operationId": "get_auto_moderation_rule",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$steps.create-automod-rule.outputs.guild_id"
            },
            {
              "name": "rule_id",
              "in": "path",
              "value": "$steps.create-automod-rule.outputs.rule_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "retrieved_rule_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "rule_id": "$steps.create-automod-rule.outputs.rule_id",
        "guild_id": "$steps.create-automod-rule.outputs.guild_id",
        "rule_details": "$steps.create-automod-rule.outputs.rule_details",
        "retrieved_rule_details": "$steps.get-automod-rule.outputs.retrieved_rule_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-guild-scheduled-event",
      "summary": "Creates a scheduled event for a guild, lists the users interested, and then retrieves the event details.",
      "description": "Creates a scheduled event for a guild, lists the users interested, and then retrieves the event details.",
      "inputs": {
        "type": "object",
        "properties": {
          "guild_id": {
            "type": "string"
          },
          "create-scheduled-event_body": {
            "type": "object"
          },
          "guild_scheduled_event_id": {
            "type": "string"
          },
          "with_member": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "before": {
            "type": "string"
          },
          "after": {
            "type": "string"
          },
          "with_user_count": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-scheduled-event",
          "description": "Create a new scheduled event in the guild.",
          "operationId": "create_guild_scheduled_event",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$inputs.guild_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-scheduled-event_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "guild_scheduled_event_id": "$response.body",
            "guild_id": "$response.body",
            "event_details": "$response.body"
          }
        },
        {
          "stepId": "list-event-users",
          "description": "List users who have indicated interest in the event.",
          "operationId": "list_guild_scheduled_event_users",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$steps.create-scheduled-event.outputs.guild_id"
            },
            {
              "name": "guild_scheduled_event_id",
              "in": "path",
              "value": "$steps.create-scheduled-event.outputs.guild_scheduled_event_id"
            },
            {
              "name": "with_member",
              "in": "query",
              "value": "$inputs.with_member"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "before",
              "in": "query",
              "value": "$inputs.before"
            },
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "users_array": "$response.body"
          }
        },
        {
          "stepId": "get-scheduled-event",
          "description": "Retrieve the details of the created scheduled event.",
          "operationId": "get_guild_scheduled_event",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$steps.create-scheduled-event.outputs.guild_id"
            },
            {
              "name": "guild_scheduled_event_id",
              "in": "path",
              "value": "$steps.create-scheduled-event.outputs.guild_scheduled_event_id"
            },
            {
              "name": "with_user_count",
              "in": "query",
              "value": "$inputs.with_user_count"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "retrieved_event_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "guild_scheduled_event_id": "$steps.create-scheduled-event.outputs.guild_scheduled_event_id",
        "guild_id": "$steps.create-scheduled-event.outputs.guild_id",
        "event_details": "$steps.create-scheduled-event.outputs.event_details",
        "users_array": "$steps.list-event-users.outputs.users_array",
        "retrieved_event_details": "$steps.get-scheduled-event.outputs.retrieved_event_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-guild-from-template",
      "summary": "Retrieves details about a guild template and then uses it to create a new guild.",
      "description": "Retrieves details about a guild template and then uses it to create a new guild.",
      "inputs": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-template-details",
          "description": "Get details of a specific guild template using its code.",
          "operationId": "get_guild_template",
          "parameters": [
            {
              "name": "code",
              "in": "path",
              "value": "$inputs.code"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "template_details": "$response.body",
            "code": "$response.body"
          }
        },
        {
          "stepId": "create-guild-using-template",
          "description": "Create a new guild based on the retrieved template.",
          "operationId": "create_guild_from_template",
          "parameters": [
            {
              "name": "code",
              "in": "path",
              "value": "$steps.get-template-details.outputs.code"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "code": "$steps.get-template-details.outputs.code",
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "new_guild_details": "$response.body",
            "guild_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "template_details": "$steps.get-template-details.outputs.template_details",
        "code": "$steps.get-template-details.outputs.code",
        "new_guild_details": "$steps.create-guild-using-template.outputs.new_guild_details",
        "guild_id": "$steps.create-guild-using-template.outputs.guild_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-application-role-connection",
      "summary": "Updates the metadata schema for an application's role connections and then updates a specific user's connection data based on that schema.",
      "description": "Updates the metadata schema for an application's role connections and then updates a specific user's connection data based on that schema.",
      "inputs": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string"
          },
          "update-role-connection-metadata_body": {
            "type": "object"
          },
          "platform_name": {
            "type": "string"
          },
          "platform_username": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "update-role-connection-metadata",
          "description": "Define or update the metadata schema for application role connections.",
          "operationId": "update_application_role_connections_metadata",
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "value": "$inputs.application_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-role-connection-metadata_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_metadata_schema": "$response.body"
          }
        },
        {
          "stepId": "update-user-role-connection",
          "description": "Update the connected role metadata for the authenticated user for this application.",
          "operationId": "update_application_user_role_connection",
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "value": "$inputs.application_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "platform_name": "$inputs.platform_name",
              "platform_username": "$inputs.platform_username",
              "metadata": "$inputs.metadata"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user_connection_response": "$response.body"
          }
        }
      ],
      "outputs": {
        "updated_metadata_schema": "$steps.update-role-connection-metadata.outputs.updated_metadata_schema",
        "user_connection_response": "$steps.update-user-role-connection.outputs.user_connection_response"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "start-and-manage-stage-event",
      "summary": "Creates a new stage instance in a channel, likely for an event, and then updates its topic.",
      "description": "Creates a new stage instance in a channel, likely for an event, and then updates its topic.",
      "inputs": {
        "type": "object",
        "properties": {
          "topic": {
            "type": "string"
          },
          "channel_id": {
            "type": "string"
          },
          "privacy_level": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-stage",
          "description": "Create a new stage instance in a specified stage channel.",
          "operationId": "create_stage_instance",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "topic": "$inputs.topic",
              "channel_id": "$inputs.channel_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "stage_instance_details": "$response.body",
            "channel_id": "$response.body"
          }
        },
        {
          "stepId": "update-stage-topic",
          "description": "Update the topic of the created stage instance.",
          "operationId": "update_stage_instance",
          "parameters": [
            {
              "name": "channel_id",
              "in": "path",
              "value": "$steps.create-stage.outputs.channel_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "channel_id": "$steps.create-stage.outputs.channel_id",
              "topic": "$inputs.topic",
              "privacy_level": "$inputs.privacy_level"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_stage_instance_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "stage_instance_details": "$steps.create-stage.outputs.stage_instance_details",
        "channel_id": "$steps.create-stage.outputs.channel_id",
        "updated_stage_instance_details": "$steps.update-stage-topic.outputs.updated_stage_instance_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-application-entitlements",
      "summary": "Creates a test entitlement for a user/SKU, lists entitlements for that SKU, and then consumes the created entitlement.",
      "description": "Creates a test entitlement for a user/SKU, lists entitlements for that SKU, and then consumes the created entitlement.",
      "inputs": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string"
          },
          "sku_id": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "owner_type": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "sku_ids": {
            "type": "string"
          },
          "guild_id": {
            "type": "string"
          },
          "before": {
            "type": "string"
          },
          "after": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "exclude_ended": {
            "type": "string"
          },
          "exclude_deleted": {
            "type": "string"
          },
          "only_active": {
            "type": "string"
          },
          "entitlement_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-test-entitlement",
          "description": "Create a test entitlement for a specific SKU and user/guild.",
          "operationId": "create_entitlement",
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "value": "$inputs.application_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "sku_id": "$inputs.sku_id",
              "owner_id": "$inputs.owner_id",
              "owner_type": "$inputs.owner_type"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "entitlement_id": "$response.body",
            "application_id": "$response.body",
            "sku_id": "$response.body",
            "entitlement_details": "$response.body"
          }
        },
        {
          "stepId": "list-sku-entitlements",
          "description": "List entitlements for the application, filtered by the specific SKU.",
          "operationId": "get_entitlements",
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "value": "$steps.create-test-entitlement.outputs.application_id"
            },
            {
              "name": "user_id",
              "in": "query",
              "value": "$inputs.user_id"
            },
            {
              "name": "sku_ids",
              "in": "query",
              "value": "$steps.create-test-entitlement.outputs.sku_id"
            },
            {
              "name": "guild_id",
              "in": "query",
              "value": "$inputs.guild_id"
            },
            {
              "name": "before",
              "in": "query",
              "value": "$inputs.before"
            },
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "exclude_ended",
              "in": "query",
              "value": "$inputs.exclude_ended"
            },
            {
              "name": "exclude_deleted",
              "in": "query",
              "value": "$inputs.exclude_deleted"
            },
            {
              "name": "only_active",
              "in": "query",
              "value": "$inputs.only_active"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "entitlements_array": "$response.body"
          }
        },
        {
          "stepId": "consume-created-entitlement",
          "description": "Mark the created entitlement as consumed.",
          "operationId": "consume_entitlement",
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "value": "$steps.create-test-entitlement.outputs.application_id"
            },
            {
              "name": "entitlement_id",
              "in": "path",
              "value": "$steps.create-test-entitlement.outputs.entitlement_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "consume_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "entitlement_id": "$steps.create-test-entitlement.outputs.entitlement_id",
        "application_id": "$steps.create-test-entitlement.outputs.application_id",
        "sku_id": "$steps.create-test-entitlement.outputs.sku_id",
        "entitlement_details": "$steps.create-test-entitlement.outputs.entitlement_details",
        "entitlements_array": "$steps.list-sku-entitlements.outputs.entitlements_array",
        "consume_status": "$steps.consume-created-entitlement.outputs.consume_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-restrict-guild-emoji",
      "summary": "Creates a new custom emoji for a guild and then updates it to restrict its usage to specific roles.",
      "description": "Creates a new custom emoji for a guild and then updates it to restrict its usage to specific roles.",
      "inputs": {
        "type": "object",
        "properties": {
          "guild_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "emoji_id": {
            "type": "string"
          },
          "roles": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-guild-custom-emoji",
          "description": "Upload a new custom emoji to the guild.",
          "operationId": "create_guild_emoji",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$inputs.guild_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name",
              "image": "$inputs.image"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "emoji_id": "$response.body",
            "guild_id": "$response.body",
            "emoji_details": "$response.body"
          }
        },
        {
          "stepId": "update-emoji-roles",
          "description": "Update the created emoji, specifically setting the roles that can use it.",
          "operationId": "update_guild_emoji",
          "parameters": [
            {
              "name": "guild_id",
              "in": "path",
              "value": "$steps.create-guild-custom-emoji.outputs.guild_id"
            },
            {
              "name": "emoji_id",
              "in": "path",
              "value": "$steps.create-guild-custom-emoji.outputs.emoji_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "guild_id": "$steps.create-guild-custom-emoji.outputs.guild_id",
              "emoji_id": "$steps.create-guild-custom-emoji.outputs.emoji_id",
              "name": "$inputs.name",
              "roles": "$inputs.roles"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_emoji_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "emoji_id": "$steps.create-guild-custom-emoji.outputs.emoji_id",
        "guild_id": "$steps.create-guild-custom-emoji.outputs.guild_id",
        "emoji_details": "$steps.create-guild-custom-emoji.outputs.emoji_details",
        "updated_emoji_details": "$steps.update-emoji-roles.outputs.updated_emoji_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}