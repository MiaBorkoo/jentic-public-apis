{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/twilio.com/twilio_ip_messaging_v2/1.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "initial-ip-messaging-service-setup",
      "summary": "This workflow provisions a new Twilio IP Messaging Service and configures its essential default roles for managing user permissions and channel creation behavior. This is a foundational step for any IP Messaging application.",
      "description": "This workflow provisions a new Twilio IP Messaging Service and configures its essential default roles for managing user permissions and channel creation behavior. This is a foundational step for any IP Messaging application.",
      "inputs": {
        "type": "object",
        "properties": {
          "FriendlyName": {
            "type": "string"
          },
          "ServiceSid": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Permission": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-service",
          "description": "Creates a new IP Messaging Service, which acts as a container for all messaging-related resources like channels, users, and roles.",
          "operationId": "CreateService",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-default-service-role",
          "description": "Defines a default role for users interacting with the service itself, setting their permissions at the service level.",
          "operationId": "CreateRole",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-service.outputs.sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-service.outputs.sid",
              "FriendlyName": "$inputs.FriendlyName",
              "Type": "$inputs.Type",
              "Permission": "$inputs.Permission"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-default-channel-role",
          "description": "Defines a default role for members within channels, specifying their permissions for channel-specific actions like sending messages or editing attributes.",
          "operationId": "CreateRole",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-service.outputs.sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-service.outputs.sid",
              "FriendlyName": "$inputs.FriendlyName",
              "Type": "$inputs.Type",
              "Permission": "$inputs.Permission"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-default-channel-creator-role",
          "description": "Defines a default role for users who create new channels, granting them specific permissions related to channel creation and initial management.",
          "operationId": "CreateRole",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-service.outputs.sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-service.outputs.sid",
              "FriendlyName": "$inputs.FriendlyName",
              "Type": "$inputs.Type",
              "Permission": "$inputs.Permission"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "update-service-with-roles",
          "description": "Updates the newly created service to assign the defined default roles, ensuring proper permission inheritance for users and channels.",
          "operationId": "UpdateService",
          "parameters": [
            {
              "name": "Sid",
              "in": "path",
              "value": "$steps.create-service.outputs.sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Sid": "$steps.create-service.outputs.sid",
              "DefaultServiceRoleSid": "$steps.create-default-service-role.outputs.sid",
              "DefaultChannelRoleSid": "$steps.create-default-channel-role.outputs.sid",
              "DefaultChannelCreatorRoleSid": "$steps.create-default-channel-creator-role.outputs.sid"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.update-service-with-roles.outputs.sid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-populate-a-chat-channel",
      "summary": "This workflow enables the creation of a new chat channel, adding a user as a member, and then sending a message within that channel, simulating a basic chat interaction.",
      "description": "This workflow enables the creation of a new chat channel, adding a user as a member, and then sending a message within that channel, simulating a basic chat interaction.",
      "inputs": {
        "type": "object",
        "properties": {
          "FriendlyName": {
            "type": "string"
          },
          "ServiceSid": {
            "type": "string"
          },
          "X-Twilio-Webhook-Enabled": {
            "type": "string"
          },
          "Identity": {
            "type": "string"
          },
          "UniqueName": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "ChannelSid": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-service-for-channel",
          "description": "Creates an IP Messaging Service to host the chat channel. This step can be skipped if a ServiceSid is already known.",
          "operationId": "CreateService",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-user-for-channel",
          "description": "Registers a new user within the messaging service. This user will be added to the channel.",
          "operationId": "CreateUser",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-service-for-channel.outputs.sid"
            },
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-service-for-channel.outputs.sid",
              "Identity": "$inputs.Identity"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "identity": "$response.body#/identity"
          }
        },
        {
          "stepId": "create-channel",
          "description": "Creates a new chat channel (e.g., public or private) where users can exchange messages.",
          "operationId": "CreateChannel",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-service-for-channel.outputs.sid"
            },
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-service-for-channel.outputs.sid",
              "FriendlyName": "$inputs.FriendlyName",
              "UniqueName": "$inputs.UniqueName",
              "Type": "$inputs.Type"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "add-member-to-channel",
          "description": "Adds the previously created user as a member to the newly created channel, allowing them to participate in the conversation.",
          "operationId": "CreateMember",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-service-for-channel.outputs.sid"
            },
            {
              "name": "ChannelSid",
              "in": "path",
              "value": "$steps.create-channel.outputs.sid"
            },
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-service-for-channel.outputs.sid",
              "ChannelSid": "$steps.create-channel.outputs.sid",
              "Identity": "$steps.create-user-for-channel.outputs.identity"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "send-message-to-channel",
          "description": "Sends a text message from the user to the channel, demonstrating a basic chat interaction.",
          "operationId": "CreateMessage",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-service-for-channel.outputs.sid"
            },
            {
              "name": "ChannelSid",
              "in": "path",
              "value": "$steps.create-channel.outputs.sid"
            },
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-service-for-channel.outputs.sid",
              "ChannelSid": "$steps.create-channel.outputs.sid",
              "From": "$steps.create-user-for-channel.outputs.identity",
              "Body": "$inputs.Body"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.send-message-to-channel.outputs.sid",
        "identity": "$steps.create-user-for-channel.outputs.identity"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-user-channel-preferences",
      "summary": "This workflow allows an administrator or the user themselves to view and update their notification preferences and message consumption status for specific channels they are part of.",
      "description": "This workflow allows an administrator or the user themselves to view and update their notification preferences and message consumption status for specific channels they are part of.",
      "inputs": {
        "type": "object",
        "properties": {
          "ServiceSid": {
            "type": "string"
          },
          "UserSid": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "ChannelSid": {
            "type": "string"
          },
          "NotificationLevel": {
            "type": "string"
          },
          "LastConsumedMessageIndex": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-user-channels",
          "description": "Retrieves a list of all channels a specific user is associated with within a service.",
          "operationId": "ListUserChannel",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "UserSid",
              "in": "path",
              "value": "$inputs.UserSid"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "channels": "$response.body#/channels"
          }
        },
        {
          "stepId": "fetch-specific-user-channel",
          "description": "Fetches detailed information about a user's specific channel membership, including their notification level and last consumed message index.",
          "operationId": "FetchUserChannel",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.list-user-channels.outputs.channels.service_sid"
            },
            {
              "name": "UserSid",
              "in": "path",
              "value": "$steps.list-user-channels.outputs.channels.user_sid"
            },
            {
              "name": "ChannelSid",
              "in": "path",
              "value": "$steps.list-user-channels.outputs.channels.channel_sid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "channel_sid": "$response.body#/channel_sid",
            "user_sid": "$response.body#/user_sid",
            "notification_level": "$response.body#/notification_level",
            "last_consumed_message_index": "$response.body#/last_consumed_message_index"
          }
        },
        {
          "stepId": "update-user-channel-preferences",
          "description": "Updates a user's notification level (e.g., 'muted' or 'default') or their last consumed message index for a specific channel.",
          "operationId": "UpdateUserChannel",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "UserSid",
              "in": "path",
              "value": "$steps.fetch-specific-user-channel.outputs.user_sid"
            },
            {
              "name": "ChannelSid",
              "in": "path",
              "value": "$steps.fetch-specific-user-channel.outputs.channel_sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "UserSid": "$steps.fetch-specific-user-channel.outputs.user_sid",
              "ChannelSid": "$steps.fetch-specific-user-channel.outputs.channel_sid",
              "NotificationLevel": "$inputs.NotificationLevel",
              "LastConsumedMessageIndex": "$inputs.LastConsumedMessageIndex"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "notification_level": "$response.body#/notification_level"
          }
        }
      ],
      "outputs": {
        "channels": "$steps.list-user-channels.outputs.channels",
        "channel_sid": "$steps.fetch-specific-user-channel.outputs.channel_sid",
        "user_sid": "$steps.fetch-specific-user-channel.outputs.user_sid",
        "notification_level": "$steps.update-user-channel-preferences.outputs.notification_level",
        "last_consumed_message_index": "$steps.fetch-specific-user-channel.outputs.last_consumed_message_index",
        "sid": "$steps.update-user-channel-preferences.outputs.sid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-channel-webhooks-for-event-notifications",
      "summary": "This workflow demonstrates how to set up webhooks for a specific chat channel to receive automated notifications about channel events, such as new messages or member changes, enabling real-time integrations.",
      "description": "This workflow demonstrates how to set up webhooks for a specific chat channel to receive automated notifications about channel events, such as new messages or member changes, enabling real-time integrations.",
      "inputs": {
        "type": "object",
        "properties": {
          "FriendlyName": {
            "type": "string"
          },
          "ServiceSid": {
            "type": "string"
          },
          "X-Twilio-Webhook-Enabled": {
            "type": "string"
          },
          "UniqueName": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "ChannelSid": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-service-for-webhook",
          "description": "Creates an IP Messaging Service to contain the channel and its webhooks. This step can be skipped if a ServiceSid is already known.",
          "operationId": "CreateService",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-channel-for-webhook",
          "description": "Creates a new chat channel where the webhooks will be configured.",
          "operationId": "CreateChannel",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-service-for-webhook.outputs.sid"
            },
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-service-for-webhook.outputs.sid",
              "FriendlyName": "$inputs.FriendlyName",
              "UniqueName": "$inputs.UniqueName",
              "Type": "$inputs.Type"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-channel-webhook",
          "description": "Creates a new webhook for the channel, specifying its type (e.g., 'webhook', 'trigger', 'studio') and configuration details like the URL and event filters.",
          "operationId": "CreateChannelWebhook",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$steps.create-channel-for-webhook.outputs.sid"
            },
            {
              "name": "ChannelSid",
              "in": "path",
              "value": "$steps.create-channel-for-webhook.outputs.sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ServiceSid": "$steps.create-channel-for-webhook.outputs.sid",
              "ChannelSid": "$steps.create-channel-for-webhook.outputs.sid",
              "Type": "$inputs.Type"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "list-channel-webhooks",
          "description": "Retrieves a list of all webhooks configured for the specified channel, allowing verification of the newly created webhook.",
          "operationId": "ListChannelWebhook",
          "parameters": [
            {
              "name": "ServiceSid",
              "in": "path",
              "value": "$inputs.ServiceSid"
            },
            {
              "name": "ChannelSid",
              "in": "path",
              "value": "$inputs.ChannelSid"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhooks": "$response.body#/webhooks"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.create-channel-webhook.outputs.sid",
        "webhooks": "$steps.list-channel-webhooks.outputs.webhooks"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}