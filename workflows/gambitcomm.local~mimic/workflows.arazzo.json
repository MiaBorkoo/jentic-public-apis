{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/gambitcomm.local/mimic/21.00/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "mimic-daemon-health-and-configuration-overview",
      "summary": "This workflow provides a comprehensive overview of the MIMIC daemon's operational status, including its version, connected clients, loaded configuration file, and network interfaces. It's valuable for administrators to quickly assess the health and current setup of the simulation environment.",
      "description": "This workflow provides a comprehensive overview of the MIMIC daemon's operational status, including its version, connected clients, loaded configuration file, and network interfaces. It's valuable for administrators to quickly assess the health and current setup of the simulation environment.",
      "steps": [
        {
          "stepId": "get-daemon-version",
          "description": "Retrieves the version of the MIMIC command interface.",
          "operationId": "get_version",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "daemon_version": "$response.body#/daemon_version"
          }
        },
        {
          "stepId": "get-connected-clients",
          "description": "Retrieves the number of clients currently connected to the daemon.",
          "operationId": "get_clients",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connected_clients_count": "$response.body#/connected_clients_count"
          }
        },
        {
          "stepId": "get-loaded-config-file",
          "description": "Retrieves the currently loaded lab configuration file for the particular user.",
          "operationId": "get_cfgfile",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "loaded_config_file": "$response.body#/loaded_config_file"
          }
        },
        {
          "stepId": "get-daemon-network-address",
          "description": "Retrieves the network address of the host where the MIMIC simulator is running.",
          "operationId": "get_netaddr",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "host_network_address": "$response.body#/host_network_address"
          }
        },
        {
          "stepId": "get-daemon-supported-protocols",
          "description": "Retrieves the set of protocols supported by the Simulator.",
          "operationId": "get_daemon_protocols",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "supported_protocols": "$response.body#/supported_protocols"
          }
        }
      ],
      "outputs": {
        "daemon_version": "$steps.get-daemon-version.outputs.daemon_version",
        "connected_clients_count": "$steps.get-connected-clients.outputs.connected_clients_count",
        "loaded_config_file": "$steps.get-loaded-config-file.outputs.loaded_config_file",
        "host_network_address": "$steps.get-daemon-network-address.outputs.host_network_address",
        "supported_protocols": "$steps.get-daemon-supported-protocols.outputs.supported_protocols"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-lab-configuration-files",
      "summary": "This workflow enables users to load a specific lab configuration file, check if changes have occurred, and then save the current configuration to a new or existing file. This is essential for managing different simulation scenarios and ensuring persistence.",
      "description": "This workflow enables users to load a specific lab configuration file, check if changes have occurred, and then save the current configuration to a new or existing file. This is essential for managing different simulation scenarios and ensuring persistence.",
      "inputs": {
        "type": "object",
        "properties": {
          "cfgFile": {
            "type": "string"
          },
          "firstAgentNum": {
            "type": "string"
          },
          "lastAgentNum": {
            "type": "string"
          },
          "startAgentNum": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "load-lab-configuration",
          "description": "Loads agents from a specified configuration file into the current simulation.",
          "operationId": "cfg_load",
          "parameters": [
            {
              "name": "cfgFile",
              "in": "path",
              "value": "$inputs.cfgFile"
            },
            {
              "name": "firstAgentNum",
              "in": "path",
              "value": "$inputs.firstAgentNum"
            },
            {
              "name": "lastAgentNum",
              "in": "path",
              "value": "$inputs.lastAgentNum"
            },
            {
              "name": "startAgentNum",
              "in": "path",
              "value": "$inputs.startAgentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "check-config-file-changed",
          "description": "Checks if the currently loaded agent configuration file has changed since the last query.",
          "operationId": "get_cfg_file_changed",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "config_changed_indicator": "$response.body#/config_changed_indicator"
          }
        },
        {
          "stepId": "save-lab-configuration-as",
          "description": "Saves the current lab configuration to a specified file for a range of agents.",
          "operationId": "cfg_saveas",
          "parameters": [
            {
              "name": "cfgFile",
              "in": "path",
              "value": "$inputs.cfgFile"
            },
            {
              "name": "firstAgentNum",
              "in": "path",
              "value": "$inputs.firstAgentNum"
            },
            {
              "name": "lastAgentNum",
              "in": "path",
              "value": "$inputs.lastAgentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "flush-global-persistent-objects",
          "description": "Flushes all global objects that need to be made persistent to disk, checkpointing the daemon's state.",
          "operationId": "store_save",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        }
      ],
      "outputs": {
        "status_message": "$steps.flush-global-persistent-objects.outputs.status_message",
        "config_changed_indicator": "$steps.check-config-file-changed.outputs.config_changed_indicator"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "browse-and-modify-agent-mib-values",
      "summary": "This workflow allows an API consumer to interact with the simulated agent's MIB (Management Information Base). It enables browsing MIB objects and their instances, retrieving the current value of a specific MIB variable, and then updating that value, which is crucial for dynamic simulation scenarios.",
      "description": "This workflow allows an API consumer to interact with the simulated agent's MIB (Management Information Base). It enables browsing MIB objects and their instances, retrieving the current value of a specific MIB variable, and then updating that value, which is crucial for dynamic simulation scenarios.",
      "inputs": {
        "type": "object",
        "properties": {
          "agentNum": {
            "type": "string"
          },
          "OID": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          },
          "variable": {
            "type": "string"
          },
          "set-mib-variable-value_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-mib-objects",
          "description": "Displays the MIB objects below a specified OID, similar to listing a directory.",
          "operationId": "get_objects",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "OID",
              "in": "path",
              "value": "$inputs.OID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "mib_objects": "$response.body#/0/mib_objects"
          }
        },
        {
          "stepId": "get-mib-object-instances",
          "description": "Displays the MIB object instances for a specified object, enabling MIB browsing.",
          "operationId": "get_instances",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "object",
              "in": "path",
              "value": "$inputs.object"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "object_instances": "$response.body#/0/object_instances"
          }
        },
        {
          "stepId": "get-mib-variable-value",
          "description": "Retrieves the current value of a specific variable within the agent's MIB value space.",
          "operationId": "get_value",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "object",
              "in": "path",
              "value": "$inputs.object"
            },
            {
              "name": "instance",
              "in": "path",
              "value": "$inputs.instance"
            },
            {
              "name": "variable",
              "in": "path",
              "value": "$inputs.variable"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "variable_value": "$response.body#/variable_value"
          }
        },
        {
          "stepId": "set-mib-variable-value",
          "description": "Sets a new value for a specific variable in the agent's MIB value space.",
          "operationId": "set_value",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "object",
              "in": "path",
              "value": "$inputs.object"
            },
            {
              "name": "instance",
              "in": "path",
              "value": "$inputs.instance"
            },
            {
              "name": "variable",
              "in": "path",
              "value": "$inputs.variable"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.set-mib-variable-value_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "verify-updated-mib-value",
          "description": "Retrieves the value again to confirm the successful update.",
          "operationId": "get_value",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "object",
              "in": "path",
              "value": "$inputs.object"
            },
            {
              "name": "instance",
              "in": "path",
              "value": "$inputs.instance"
            },
            {
              "name": "variable",
              "in": "path",
              "value": "$inputs.variable"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_variable_value": "$response.body#/updated_variable_value"
          }
        }
      ],
      "outputs": {
        "mib_objects": "$steps.list-mib-objects.outputs.mib_objects",
        "object_instances": "$steps.get-mib-object-instances.outputs.object_instances",
        "variable_value": "$steps.get-mib-variable-value.outputs.variable_value",
        "status_message": "$steps.set-mib-variable-value.outputs.status_message",
        "updated_variable_value": "$steps.verify-updated-mib-value.outputs.updated_variable_value"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-configure-and-start-a-basic-agent",
      "summary": "This workflow allows users to provision a new simulated agent, assign it a primary IP address, configure its basic SNMP community strings, load specific MIBs for simulation, and then start the agent to bring it online. This is a fundamental process for setting up network simulations.",
      "description": "This workflow allows users to provision a new simulated agent, assign it a primary IP address, configure its basic SNMP community strings, load specific MIBs for simulation, and then start the agent to bring it online. This is a fundamental process for setting up network simulations.",
      "inputs": {
        "type": "object",
        "properties": {
          "agentNum": {
            "type": "string"
          },
          "IP": {
            "type": "string"
          },
          "add-new-agent_body": {
            "type": "object"
          },
          "read": {
            "type": "string"
          },
          "write": {
            "type": "string"
          },
          "set-agent-mibs_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "add-new-agent",
          "description": "Adds a new agent instance with a specified IP address.",
          "operationId": "new",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "IP",
              "in": "path",
              "value": "$inputs.IP"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.add-new-agent_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "set-agent-read-community",
          "description": "Sets the SNMP read community string for the agent.",
          "operationId": "set_read_community",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "read",
              "in": "path",
              "value": "$inputs.read"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "set-agent-write-community",
          "description": "Sets the SNMP write community string for the agent.",
          "operationId": "set_write_community",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "write",
              "in": "path",
              "value": "$inputs.write"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "set-agent-mibs",
          "description": "Configures the set of MIBs, simulations, and scenarios for the agent.",
          "operationId": "set_mibs",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.set-agent-mibs_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "start-agent",
          "description": "Starts the configured agent, making it active in the simulation.",
          "operationId": "start",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "get-agent-state",
          "description": "Retrieves the current running state of the agent to confirm startup.",
          "operationId": "get_agent_state",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "agent_state": "$response.body#/agent_state"
          }
        }
      ],
      "outputs": {
        "status_message": "$steps.start-agent.outputs.status_message",
        "agent_state": "$steps.get-agent-state.outputs.agent_state"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-and-monitor-dhcp-agent-traffic",
      "summary": "This workflow demonstrates how to configure specific DHCP parameters for a simulated agent, enable traffic tracing for debugging, and then retrieve its DHCP-related statistics to monitor its performance and interactions.",
      "description": "This workflow demonstrates how to configure specific DHCP parameters for a simulated agent, enable traffic tracing for debugging, and then retrieve its DHCP-related statistics to monitor its performance and interactions.",
      "inputs": {
        "type": "object",
        "properties": {
          "agentNum": {
            "type": "string"
          },
          "argument": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "enableOrNot": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-dhcp-arguments",
          "description": "Retrieves the argument structure for DHCP configuration, useful for understanding available parameters.",
          "operationId": "protocol_dhcp_get_args",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dhcp_args": "$response.body#/dhcp_args"
          }
        },
        {
          "stepId": "set-dhcp-configuration",
          "description": "Sets a specific DHCP configuration parameter for the agent (e.g., hardware address, class ID).",
          "operationId": "protocol_dhcp_set_config",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "argument",
              "in": "path",
              "value": "$inputs.argument"
            },
            {
              "name": "value",
              "in": "path",
              "value": "$inputs.value"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "enable-dhcp-tracing",
          "description": "Enables or disables DHCP traffic tracing for the agent.",
          "operationId": "protocol_dhcp_set_trace",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "enableOrNot",
              "in": "path",
              "value": "$inputs.enableOrNot"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "get-dhcp-statistics-headers",
          "description": "Retrieves the headers for the DHCP statistics fields.",
          "operationId": "protocol_dhcp_get_stats_hdr",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "stats_headers": "$response.body#/0/stats_headers"
          }
        },
        {
          "stepId": "get-dhcp-statistics",
          "description": "Retrieves the current DHCP statistics for the agent.",
          "operationId": "protocol_dhcp_get_statistics",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dhcp_statistics": "$response.body#/0/dhcp_statistics"
          }
        }
      ],
      "outputs": {
        "dhcp_args": "$steps.get-dhcp-arguments.outputs.dhcp_args",
        "status_message": "$steps.enable-dhcp-tracing.outputs.status_message",
        "stats_headers": "$steps.get-dhcp-statistics-headers.outputs.stats_headers",
        "dhcp_statistics": "$steps.get-dhcp-statistics.outputs.dhcp_statistics"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-agent-specific-ip-aliases",
      "summary": "This workflow demonstrates how to manage additional IP addresses (aliases) for a simulated agent. It covers listing existing aliases, adding a new one, starting it, and verifying its operational status, allowing for complex network configurations.",
      "description": "This workflow demonstrates how to manage additional IP addresses (aliases) for a simulated agent. It covers listing existing aliases, adding a new one, starting it, and verifying its operational status, allowing for complex network configurations.",
      "inputs": {
        "type": "object",
        "properties": {
          "agentNum": {
            "type": "string"
          },
          "IP": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "mask": {
            "type": "string"
          },
          "interface": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-agent-ip-aliases",
          "description": "Lists all additional IP aliases configured for a specific agent.",
          "operationId": "list_ipaliases",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ip_aliases": "$response.body#/0/ip_aliases"
          }
        },
        {
          "stepId": "add-new-ip-alias",
          "description": "Adds a new IP alias to the specified agent.",
          "operationId": "add_ipalias",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "IP",
              "in": "path",
              "value": "$inputs.IP"
            },
            {
              "name": "port",
              "in": "path",
              "value": "$inputs.port"
            },
            {
              "name": "mask",
              "in": "path",
              "value": "$inputs.mask"
            },
            {
              "name": "interface",
              "in": "path",
              "value": "$inputs.interface"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "start-ip-alias",
          "description": "Starts an existing IP alias for the agent.",
          "operationId": "start_ipalias",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "IP",
              "in": "path",
              "value": "$inputs.IP"
            },
            {
              "name": "port",
              "in": "path",
              "value": "$inputs.port"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "check-ip-alias-status",
          "description": "Returns the operational status (up/down) of an existing IP alias.",
          "operationId": "status_ipalias",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "IP",
              "in": "path",
              "value": "$inputs.IP"
            },
            {
              "name": "port",
              "in": "path",
              "value": "$inputs.port"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ip_alias_status": "$response.body#/ip_alias_status"
          }
        }
      ],
      "outputs": {
        "ip_aliases": "$steps.list-agent-ip-aliases.outputs.ip_aliases",
        "status_message": "$steps.start-ip-alias.outputs.status_message",
        "ip_alias_status": "$steps.check-ip-alias-status.outputs.ip_alias_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "simulate-tftp-file-transfer-download",
      "summary": "This workflow simulates a TFTP client agent initiating a file download from a specified server. It involves creating a TFTP read session, configuring the target server and source file, starting the transfer, and monitoring its progress.",
      "description": "This workflow simulates a TFTP client agent initiating a file download from a specified server. It involves creating a TFTP read session, configuring the target server and source file, starting the transfer, and monitoring its progress.",
      "inputs": {
        "type": "object",
        "properties": {
          "agentNum": {
            "type": "string"
          },
          "srcfile": {
            "type": "string"
          },
          "sessionID": {
            "type": "string"
          },
          "parameter": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-tftp-read-session",
          "description": "Creates a TFTP read session to download a file from a server, returning a session ID.",
          "operationId": "protocol_tftp_session_read",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "srcfile",
              "in": "path",
              "value": "$inputs.srcfile"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sessionID": "$response.body#/0/sessionID"
          }
        },
        {
          "stepId": "set-tftp-session-server",
          "description": "Sets the target server address for the TFTP session.",
          "operationId": "protocol_tftp_session_set_parameter",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "sessionID",
              "in": "path",
              "value": "$inputs.sessionID"
            },
            {
              "name": "parameter",
              "in": "path",
              "value": "$inputs.parameter"
            },
            {
              "name": "value",
              "in": "path",
              "value": "$inputs.value"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "start-tftp-session",
          "description": "Starts the TFTP file transfer (download or upload) for the specified session.",
          "operationId": "protocol_tftp_session_start",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "sessionID",
              "in": "path",
              "value": "$inputs.sessionID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "get-tftp-session-status",
          "description": "Checks the current status of the TFTP session, including running state and bytes transferred.",
          "operationId": "protocol_tftp_session_status",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "sessionID",
              "in": "path",
              "value": "$inputs.sessionID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "session_status": "$response.body#/session_status"
          }
        },
        {
          "stepId": "stop-tftp-session",
          "description": "Stops the ongoing TFTP file transfer session.",
          "operationId": "protocol_tftp_session_stop",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "sessionID",
              "in": "path",
              "value": "$inputs.sessionID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        }
      ],
      "outputs": {
        "sessionID": "$steps.create-tftp-read-session.outputs.sessionID",
        "status_message": "$steps.stop-tftp-session.outputs.status_message",
        "session_status": "$steps.get-tftp-session-status.outputs.session_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-and-send-syslog-messages",
      "summary": "This workflow enables a simulated agent to send SYSLOG messages to a specified server. It involves configuring the SYSLOG server details, setting message attributes like hostname and timestamp, sending a message with a defined priority, and then retrieving SYSLOG statistics to verify message transmission.",
      "description": "This workflow enables a simulated agent to send SYSLOG messages to a specified server. It involves configuring the SYSLOG server details, setting message attributes like hostname and timestamp, sending a message with a defined priority, and then retrieving SYSLOG statistics to verify message transmission.",
      "inputs": {
        "type": "object",
        "properties": {
          "agentNum": {
            "type": "string"
          },
          "argument": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "attr": {
            "type": "string"
          },
          "pri": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "set-syslog-server-port",
          "description": "Sets the SYSLOG server port for the agent.",
          "operationId": "protocol_syslog_set_config",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "argument",
              "in": "path",
              "value": "$inputs.argument"
            },
            {
              "name": "value",
              "in": "path",
              "value": "$inputs.value"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "set-syslog-hostname",
          "description": "Sets the hostname attribute for outgoing SYSLOG messages.",
          "operationId": "protocol_syslog_set_attr",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "attr",
              "in": "path",
              "value": "$inputs.attr"
            },
            {
              "name": "value",
              "in": "path",
              "value": "$inputs.value"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "set-syslog-timestamp",
          "description": "Sets the timestamp format for outgoing SYSLOG messages.",
          "operationId": "protocol_syslog_set_attr",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "attr",
              "in": "path",
              "value": "$inputs.attr"
            },
            {
              "name": "value",
              "in": "path",
              "value": "$inputs.value"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "send-syslog-message",
          "description": "Sends a SYSLOG message with a specified priority and message content.",
          "operationId": "protocol_syslog_send",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "pri",
              "in": "path",
              "value": "$inputs.pri"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "message": "$inputs.message"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/status_message"
          }
        },
        {
          "stepId": "get-syslog-statistics",
          "description": "Retrieves the SYSLOG statistics for the agent to confirm message transmission.",
          "operationId": "protocol_syslog_get_statistics",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "syslog_statistics": "$response.body#/0/syslog_statistics"
          }
        }
      ],
      "outputs": {
        "status_message": "$steps.send-syslog-message.outputs.status_message",
        "syslog_statistics": "$steps.get-syslog-statistics.outputs.syslog_statistics"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "mqtt-client-connection-and-message-publishing",
      "summary": "This workflow simulates an MQTT client agent connecting to a broker, configuring its connection parameters (client ID, credentials, will message), and then publishing a message to a topic. It concludes by gracefully disconnecting the client.",
      "description": "This workflow simulates an MQTT client agent connecting to a broker, configuring its connection parameters (client ID, credentials, will message), and then publishing a message to a topic. It concludes by gracefully disconnecting the client.",
      "inputs": {
        "type": "object",
        "properties": {
          "agentNum": {
            "type": "string"
          },
          "brokerAddr": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "clientID": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "msgNum": {
            "type": "string"
          },
          "attr": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "set-mqtt-broker-config",
          "description": "Configures the MQTT client's broker address, port, client ID, username, and password.",
          "operationId": "protocol_mqtt_client_set_broker",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "brokerAddr",
              "in": "path",
              "value": "$inputs.brokerAddr"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_info": "$response.body#/0/status_info"
          }
        },
        {
          "stepId": "set-mqtt-broker-config",
          "description": "Configures the MQTT client's broker address, port, client ID, username, and password.",
          "operationId": "protocol_mqtt_client_set_port",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "port",
              "in": "path",
              "value": "$inputs.port"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_info": "$response.body#/0/status_info"
          }
        },
        {
          "stepId": "set-mqtt-broker-config",
          "description": "Configures the MQTT client's broker address, port, client ID, username, and password.",
          "operationId": "protocol_mqtt_client_set_clientid",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "clientID",
              "in": "path",
              "value": "$inputs.clientID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_info": "$response.body#/0/status_info"
          }
        },
        {
          "stepId": "set-mqtt-broker-config",
          "description": "Configures the MQTT client's broker address, port, client ID, username, and password.",
          "operationId": "protocol_mqtt_client_set_username",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "username",
              "in": "path",
              "value": "$inputs.username"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_info": "$response.body#/0/status_info"
          }
        },
        {
          "stepId": "set-mqtt-broker-config",
          "description": "Configures the MQTT client's broker address, port, client ID, username, and password.",
          "operationId": "protocol_mqtt_client_set_password",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "password",
              "in": "path",
              "value": "$inputs.password"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_info": "$response.body#/0/status_info"
          }
        },
        {
          "stepId": "set-mqtt-will-message",
          "description": "Sets the MQTT client's 'will' topic and message, sent upon unexpected disconnection.",
          "operationId": "protocol_mqtt_client_set_willtopic",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "topic",
              "in": "path",
              "value": "$inputs.topic"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_info": "$response.body#/0/status_info"
          }
        },
        {
          "stepId": "set-mqtt-will-message",
          "description": "Sets the MQTT client's 'will' topic and message, sent upon unexpected disconnection.",
          "operationId": "protocol_mqtt_client_set_willmsg",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "msg",
              "in": "path",
              "value": "$inputs.msg"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_info": "$response.body#/0/status_info"
          }
        },
        {
          "stepId": "connect-mqtt-client",
          "description": "Initiates the MQTT client's TCP session and connection to the broker.",
          "operationId": "protocol_mqtt_client_runtime_connect",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/0/status_message"
          }
        },
        {
          "stepId": "configure-and-publish-message",
          "description": "Configures a specific message (e.g., topic, payload) and triggers its publication by setting its count.",
          "operationId": "protocol_mqtt_client_message_set",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            },
            {
              "name": "msgNum",
              "in": "path",
              "value": "$inputs.msgNum"
            },
            {
              "name": "attr",
              "in": "path",
              "value": "$inputs.attr"
            },
            {
              "name": "value",
              "in": "path",
              "value": "$inputs.value"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/0/status_message"
          }
        },
        {
          "stepId": "get-mqtt-message-cardinality",
          "description": "Retrieves the number of current messages configured for the agent, indicating if the message was processed.",
          "operationId": "protocol_mqtt_client_message_card",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message_cardinality": "$response.body#/0/message_cardinality"
          }
        },
        {
          "stepId": "disconnect-mqtt-client",
          "description": "Gracefully disconnects the MQTT client's TCP session from the broker.",
          "operationId": "protocol_mqtt_client_runtime_disconnect",
          "parameters": [
            {
              "name": "agentNum",
              "in": "path",
              "value": "$inputs.agentNum"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_message": "$response.body#/0/status_message"
          }
        }
      ],
      "outputs": {
        "status_info": "$steps.set-mqtt-will-message.outputs.status_info",
        "status_message": "$steps.disconnect-mqtt-client.outputs.status_message",
        "message_cardinality": "$steps.get-mqtt-message-cardinality.outputs.message_cardinality"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
