{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/probely.com/main/1.2.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "run-scan-and-get-results",
      "summary": "Find a specific target, initiate a vulnerability scan, monitor its progress, and retrieve the findings once completed. This is the primary workflow for using Probely.",
      "description": "Find a specific target, initiate a vulnerability scan, monitor its progress, and retrieve the findings once completed. This is the primary workflow for using Probely.",
      "inputs": {
        "type": "object",
        "properties": {
          "exclude": {
            "type": "string"
          },
          "exclude_team": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_id_404_validation": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "label_logical_operator": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "ordering": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "risk": {
            "type": "string"
          },
          "scan_profile": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "unlimited": {
            "type": "string"
          },
          "verified": {
            "type": "string"
          },
          "ignore_blackout_period": {
            "type": "string"
          },
          "target_id": {
            "type": "string"
          },
          "assignee": {
            "type": "string"
          },
          "changed_after": {
            "type": "string"
          },
          "changed_before": {
            "type": "string"
          },
          "lastfound_after": {
            "type": "string"
          },
          "lastfound_before": {
            "type": "string"
          },
          "new": {
            "type": "string"
          },
          "scan": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-targets",
          "description": "Retrieve a list of configured targets to find the ID of the target to scan.",
          "operationId": "targets_list",
          "parameters": [
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "exclude_team",
              "in": "query",
              "value": "$inputs.exclude_team"
            },
            {
              "name": "id",
              "in": "query",
              "value": "$inputs.id"
            },
            {
              "name": "is_id_404_validation",
              "in": "query",
              "value": "$inputs.is_id_404_validation"
            },
            {
              "name": "label",
              "in": "query",
              "value": "$inputs.label"
            },
            {
              "name": "label_logical_operator",
              "in": "query",
              "value": "$inputs.label_logical_operator"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "risk",
              "in": "query",
              "value": "$inputs.risk"
            },
            {
              "name": "scan_profile",
              "in": "query",
              "value": "$inputs.scan_profile"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "team",
              "in": "query",
              "value": "$inputs.team"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "unlimited",
              "in": "query",
              "value": "$inputs.unlimited"
            },
            {
              "name": "verified",
              "in": "query",
              "value": "$inputs.verified"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "targets_list": "$response.body"
          }
        },
        {
          "stepId": "start-scan",
          "description": "Initiate a new vulnerability scan for the selected target.",
          "operationId": "targets_scan_now_create",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "target_id": "$steps.list-targets.outputs.targets_list.results[0].id",
              "ignore_blackout_period": "$inputs.ignore_blackout_period",
              "scan_profile": "$inputs.scan_profile"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "scan_id": "$response.body",
            "scan_status": "$response.body",
            "target_id_from_scan": "$response.body"
          }
        },
        {
          "stepId": "get-scan-status",
          "description": "Periodically check the status of the initiated scan until it is completed. (Requires polling mechanism by the client).",
          "operationId": "targets_scans_retrieve",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.start-scan.outputs.target_id_from_scan"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "scan_details": "$response.body",
            "scan_status": "$response.body"
          }
        },
        {
          "stepId": "list-target-findings",
          "description": "Retrieve the list of vulnerability findings identified in the completed scan for the target.",
          "operationId": "targets_findings_list",
          "parameters": [
            {
              "name": "assignee",
              "in": "query",
              "value": "$inputs.assignee"
            },
            {
              "name": "changed_after",
              "in": "query",
              "value": "$inputs.changed_after"
            },
            {
              "name": "changed_before",
              "in": "query",
              "value": "$inputs.changed_before"
            },
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "label",
              "in": "query",
              "value": "$inputs.label"
            },
            {
              "name": "label_logical_operator",
              "in": "query",
              "value": "$inputs.label_logical_operator"
            },
            {
              "name": "lastfound_after",
              "in": "query",
              "value": "$inputs.lastfound_after"
            },
            {
              "name": "lastfound_before",
              "in": "query",
              "value": "$inputs.lastfound_before"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "new",
              "in": "query",
              "value": "$inputs.new"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "scan",
              "in": "query",
              "value": "$inputs.scan"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "severity",
              "in": "query",
              "value": "$inputs.severity"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.get-scan-status.outputs.scan_details.target.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "findings_list": "$response.body"
          }
        }
      ],
      "outputs": {
        "targets_list": "$steps.list-targets.outputs.targets_list",
        "scan_id": "$steps.start-scan.outputs.scan_id",
        "scan_status": "$steps.get-scan-status.outputs.scan_status",
        "target_id_from_scan": "$steps.start-scan.outputs.target_id_from_scan",
        "scan_details": "$steps.get-scan-status.outputs.scan_details",
        "findings_list": "$steps.list-target-findings.outputs.findings_list"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "triage-and-retest-findings",
      "summary": "Review findings for a target, update their status (e.g., accept risk, mark as invalid), assign them, and trigger a retest for specific findings.",
      "description": "Review findings for a target, update their status (e.g., accept risk, mark as invalid), assign them, and trigger a retest for specific findings.",
      "inputs": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "string"
          },
          "changed_after": {
            "type": "string"
          },
          "changed_before": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_id_404_validation": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "label_logical_operator": {
            "type": "string"
          },
          "lastfound_after": {
            "type": "string"
          },
          "lastfound_before": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "new": {
            "type": "string"
          },
          "ordering": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "scan": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "target_label": {
            "type": "string"
          },
          "target_label_logical_operator": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "labels": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "target_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-findings-for-triage",
          "description": "List findings across the account, potentially filtering by target, severity, or state.",
          "operationId": "findings_list",
          "parameters": [
            {
              "name": "assignee",
              "in": "query",
              "value": "$inputs.assignee"
            },
            {
              "name": "changed_after",
              "in": "query",
              "value": "$inputs.changed_after"
            },
            {
              "name": "changed_before",
              "in": "query",
              "value": "$inputs.changed_before"
            },
            {
              "name": "id",
              "in": "query",
              "value": "$inputs.id"
            },
            {
              "name": "is_id_404_validation",
              "in": "query",
              "value": "$inputs.is_id_404_validation"
            },
            {
              "name": "label",
              "in": "query",
              "value": "$inputs.label"
            },
            {
              "name": "label_logical_operator",
              "in": "query",
              "value": "$inputs.label_logical_operator"
            },
            {
              "name": "lastfound_after",
              "in": "query",
              "value": "$inputs.lastfound_after"
            },
            {
              "name": "lastfound_before",
              "in": "query",
              "value": "$inputs.lastfound_before"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "new",
              "in": "query",
              "value": "$inputs.new"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "scan",
              "in": "query",
              "value": "$inputs.scan"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "severity",
              "in": "query",
              "value": "$inputs.severity"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "target",
              "in": "query",
              "value": "$inputs.target"
            },
            {
              "name": "target_label",
              "in": "query",
              "value": "$inputs.target_label"
            },
            {
              "name": "target_label_logical_operator",
              "in": "query",
              "value": "$inputs.target_label_logical_operator"
            },
            {
              "name": "team",
              "in": "query",
              "value": "$inputs.team"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "findings_list": "$response.body"
          }
        },
        {
          "stepId": "update-finding",
          "description": "Update the state, severity, or assignee of a specific finding.",
          "operationId": "findings_partial_update",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "finding_id": "$steps.list-findings-for-triage.outputs.findings_list.results[0].id",
              "labels": "$inputs.labels",
              "state": "$inputs.state",
              "severity": "$inputs.severity",
              "comment": "$inputs.comment"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_finding_details": "$response.body"
          }
        },
        {
          "stepId": "retest-specific-finding",
          "description": "Initiate a retest scan specifically for a single finding to verify if it has been fixed.",
          "operationId": "targets_findings_retest_create",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.update-finding.outputs.updated_finding_details.target.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "retest_scan_details": "$response.body"
          }
        },
        {
          "stepId": "check-retest-scan-status",
          "description": "Check the status of the retest scan. (Requires polling).",
          "operationId": "targets_scans_retrieve",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.retest-specific-finding.outputs.retest_scan_details.target.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "scan_status": "$response.body"
          }
        },
        {
          "stepId": "get-finding-after-retest",
          "description": "Retrieve the finding again after the retest scan completes to check if its state has changed (e.g., to 'fixed').",
          "operationId": "targets_findings_retrieve",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.retest-specific-finding.outputs.retest_scan_details.target.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "final_finding_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "findings_list": "$steps.list-findings-for-triage.outputs.findings_list",
        "updated_finding_details": "$steps.update-finding.outputs.updated_finding_details",
        "retest_scan_details": "$steps.retest-specific-finding.outputs.retest_scan_details",
        "scan_status": "$steps.check-retest-scan-status.outputs.scan_status",
        "final_finding_details": "$steps.get-finding-after-retest.outputs.final_finding_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "schedule-a-recurring-scan",
      "summary": "Configure a target to be scanned automatically on a recurring schedule (e.g., weekly, monthly).",
      "description": "Configure a target to be scanned automatically on a recurring schedule (e.g., weekly, monthly).",
      "inputs": {
        "type": "object",
        "properties": {
          "exclude": {
            "type": "string"
          },
          "exclude_team": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_id_404_validation": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "label_logical_operator": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "ordering": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "risk": {
            "type": "string"
          },
          "scan_profile": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "unlimited": {
            "type": "string"
          },
          "verified": {
            "type": "string"
          },
          "archived": {
            "type": "string"
          },
          "builtin": {
            "type": "string"
          },
          "target_id": {
            "type": "string"
          },
          "date_time": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-targets-for-scheduling",
          "description": "Retrieve a list of targets to select one for scheduled scanning.",
          "operationId": "targets_list",
          "parameters": [
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "exclude_team",
              "in": "query",
              "value": "$inputs.exclude_team"
            },
            {
              "name": "id",
              "in": "query",
              "value": "$inputs.id"
            },
            {
              "name": "is_id_404_validation",
              "in": "query",
              "value": "$inputs.is_id_404_validation"
            },
            {
              "name": "label",
              "in": "query",
              "value": "$inputs.label"
            },
            {
              "name": "label_logical_operator",
              "in": "query",
              "value": "$inputs.label_logical_operator"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "risk",
              "in": "query",
              "value": "$inputs.risk"
            },
            {
              "name": "scan_profile",
              "in": "query",
              "value": "$inputs.scan_profile"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "team",
              "in": "query",
              "value": "$inputs.team"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "unlimited",
              "in": "query",
              "value": "$inputs.unlimited"
            },
            {
              "name": "verified",
              "in": "query",
              "value": "$inputs.verified"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "targets_list": "$response.body"
          }
        },
        {
          "stepId": "list-scan-profiles",
          "description": "Retrieve available scan profiles to choose one for the scheduled scan.",
          "operationId": "scan_profiles_list",
          "parameters": [
            {
              "name": "archived",
              "in": "query",
              "value": "$inputs.archived"
            },
            {
              "name": "builtin",
              "in": "query",
              "value": "$inputs.builtin"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "verified",
              "in": "query",
              "value": "$inputs.verified"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "scan_profiles_list": "$response.body"
          }
        },
        {
          "stepId": "create-scheduled-scan",
          "description": "Create a new scheduled scan configuration for the selected target.",
          "operationId": "targets_scheduledscans_create",
          "parameters": [
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.list-targets-for-scheduling.outputs.targets_list.results[0].id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "target_id": "$steps.list-targets-for-scheduling.outputs.targets_list.results[0].id",
              "scan_profile_id": "$steps.list-scan-profiles.outputs.scan_profiles_list.results[0].id",
              "date_time": "$inputs.date_time"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "scheduled_scan_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "targets_list": "$steps.list-targets-for-scheduling.outputs.targets_list",
        "scan_profiles_list": "$steps.list-scan-profiles.outputs.scan_profiles_list",
        "scheduled_scan_details": "$steps.create-scheduled-scan.outputs.scheduled_scan_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "generate-and-download-scan-report",
      "summary": "Generate a PDF or DOCX report for a specific completed scan.",
      "description": "Generate a PDF or DOCX report for a specific completed scan.",
      "inputs": {
        "type": "object",
        "properties": {
          "exclude": {
            "type": "string"
          },
          "exclude_team": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_id_404_validation": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "label_logical_operator": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "ordering": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "risk": {
            "type": "string"
          },
          "scan_profile": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "unlimited": {
            "type": "string"
          },
          "verified": {
            "type": "string"
          },
          "completed__gt": {
            "type": "string"
          },
          "completed__gte": {
            "type": "string"
          },
          "completed__lt": {
            "type": "string"
          },
          "completed__lte": {
            "type": "string"
          },
          "partial": {
            "type": "string"
          },
          "started__gt": {
            "type": "string"
          },
          "started__gte": {
            "type": "string"
          },
          "started__lt": {
            "type": "string"
          },
          "started__lte": {
            "type": "string"
          },
          "started_after": {
            "type": "string"
          },
          "started_before": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "target_id": {
            "type": "string"
          },
          "warning": {
            "type": "string"
          },
          "report_type": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-targets-for-report",
          "description": "List targets to find the ID of the target for which to generate a report.",
          "operationId": "targets_list",
          "parameters": [
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "exclude_team",
              "in": "query",
              "value": "$inputs.exclude_team"
            },
            {
              "name": "id",
              "in": "query",
              "value": "$inputs.id"
            },
            {
              "name": "is_id_404_validation",
              "in": "query",
              "value": "$inputs.is_id_404_validation"
            },
            {
              "name": "label",
              "in": "query",
              "value": "$inputs.label"
            },
            {
              "name": "label_logical_operator",
              "in": "query",
              "value": "$inputs.label_logical_operator"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "risk",
              "in": "query",
              "value": "$inputs.risk"
            },
            {
              "name": "scan_profile",
              "in": "query",
              "value": "$inputs.scan_profile"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "team",
              "in": "query",
              "value": "$inputs.team"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "unlimited",
              "in": "query",
              "value": "$inputs.unlimited"
            },
            {
              "name": "verified",
              "in": "query",
              "value": "$inputs.verified"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "targets_list": "$response.body"
          }
        },
        {
          "stepId": "list-scans-for-report",
          "description": "List completed scans for the selected target to choose one for the report.",
          "operationId": "targets_scans_list",
          "parameters": [
            {
              "name": "completed__gt",
              "in": "query",
              "value": "$inputs.completed__gt"
            },
            {
              "name": "completed__gte",
              "in": "query",
              "value": "$inputs.completed__gte"
            },
            {
              "name": "completed__lt",
              "in": "query",
              "value": "$inputs.completed__lt"
            },
            {
              "name": "completed__lte",
              "in": "query",
              "value": "$inputs.completed__lte"
            },
            {
              "name": "label",
              "in": "query",
              "value": "$inputs.label"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "partial",
              "in": "query",
              "value": "$inputs.partial"
            },
            {
              "name": "scan_profile",
              "in": "query",
              "value": "$inputs.scan_profile"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "started__gt",
              "in": "query",
              "value": "$inputs.started__gt"
            },
            {
              "name": "started__gte",
              "in": "query",
              "value": "$inputs.started__gte"
            },
            {
              "name": "started__lt",
              "in": "query",
              "value": "$inputs.started__lt"
            },
            {
              "name": "started__lte",
              "in": "query",
              "value": "$inputs.started__lte"
            },
            {
              "name": "started_after",
              "in": "query",
              "value": "$inputs.started_after"
            },
            {
              "name": "started_before",
              "in": "query",
              "value": "$inputs.started_before"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "target",
              "in": "query",
              "value": "$inputs.target"
            },
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.list-targets-for-report.outputs.targets_list.results[0].id"
            },
            {
              "name": "team",
              "in": "query",
              "value": "$inputs.team"
            },
            {
              "name": "warning",
              "in": "query",
              "value": "$inputs.warning"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "scans_list": "$response.body"
          }
        },
        {
          "stepId": "download-scan-report",
          "description": "Download the report file for the selected scan.",
          "operationId": "targets_scans_report_retrieve",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "report_type",
              "in": "query",
              "value": "$inputs.report_type"
            },
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.list-scans-for-report.outputs.scans_list.results[0].target.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "report_file": "$response.body"
          }
        }
      ],
      "outputs": {
        "targets_list": "$steps.list-targets-for-report.outputs.targets_list",
        "scans_list": "$steps.list-scans-for-report.outputs.scans_list",
        "report_file": "$steps.download-scan-report.outputs.report_file"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "generate-filtered-findings-report",
      "summary": "Generate a custom report containing findings based on specific filter criteria (e.g., severity, state, target labels) and download it.",
      "description": "Generate a custom report containing findings based on specific filter criteria (e.g., severity, state, target labels) and download it.",
      "inputs": {
        "type": "object",
        "properties": {
          "generate-report-request_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "generate-report-request",
          "description": "Submit a request to generate a report based on specified finding filters.",
          "operationId": "report_create",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.generate-report-request_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "report_request_id": "$response.body",
            "report_request_details": "$response.body"
          }
        },
        {
          "stepId": "check-report-status",
          "description": "Check the generation status of the requested report. (Requires polling).",
          "operationId": "report_status_retrieve",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "report_status": "$response.body"
          }
        },
        {
          "stepId": "download-generated-report",
          "description": "Download the generated report file once its status is complete.",
          "operationId": "report_download_retrieve",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "report_file": "$response.body"
          }
        }
      ],
      "outputs": {
        "report_request_id": "$steps.generate-report-request.outputs.report_request_id",
        "report_request_details": "$steps.generate-report-request.outputs.report_request_details",
        "report_status": "$steps.check-report-status.outputs.report_status",
        "report_file": "$steps.download-generated-report.outputs.report_file"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-api-user-and-roles",
      "summary": "Create a dedicated API user for automation/integration purposes and assign specific roles to control its permissions.",
      "description": "Create a dedicated API user for automation/integration purposes and assign specific roles to control its permissions.",
      "inputs": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "assignable_to": {
            "type": "string"
          },
          "custom": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "ordering": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-api-user",
          "description": "Create a new API user.",
          "operationId": "api_users_create",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "labels": "$inputs.labels",
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "api_user_id": "$response.body",
            "api_key": "$response.body",
            "api_user_details": "$response.body"
          }
        },
        {
          "stepId": "list-available-roles",
          "description": "List available roles that can be assigned.",
          "operationId": "roles_list",
          "parameters": [
            {
              "name": "assignable_to",
              "in": "query",
              "value": "$inputs.assignable_to"
            },
            {
              "name": "custom",
              "in": "query",
              "value": "$inputs.custom"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "roles_list": "$response.body"
          }
        },
        {
          "stepId": "assign-role-to-api-user",
          "description": "Assign a specific role (e.g., Developer, SecOps) to the newly created API user, potentially scoped to the account, a team, or a target.",
          "operationId": "api_user_roles_create",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "user_id": "$steps.create-api-user.outputs.api_user_id",
              "role_id": "$steps.list-available-roles.outputs.roles_list.results[0].id",
              "scope": "$inputs.scope"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user_role_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "api_user_id": "$steps.create-api-user.outputs.api_user_id",
        "api_key": "$steps.create-api-user.outputs.api_key",
        "api_user_details": "$steps.create-api-user.outputs.api_user_details",
        "roles_list": "$steps.list-available-roles.outputs.roles_list",
        "user_role_details": "$steps.assign-role-to-api-user.outputs.user_role_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-target-with-login-sequence",
      "summary": "Set up authentication for a target that requires a complex, multi-step login process by creating and associating a login sequence.",
      "description": "Set up authentication for a target that requires a complex, multi-step login process by creating and associating a login sequence.",
      "inputs": {
        "type": "object",
        "properties": {
          "exclude": {
            "type": "string"
          },
          "exclude_team": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_id_404_validation": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "label_logical_operator": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "ordering": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "risk": {
            "type": "string"
          },
          "scan_profile": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "unlimited": {
            "type": "string"
          },
          "verified": {
            "type": "string"
          },
          "include": {
            "type": "string"
          },
          "target_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-targets-for-sequence",
          "description": "Retrieve the list of targets to select the one needing a login sequence.",
          "operationId": "targets_list",
          "parameters": [
            {
              "name": "exclude",
              "in": "query",
              "value": "$inputs.exclude"
            },
            {
              "name": "exclude_team",
              "in": "query",
              "value": "$inputs.exclude_team"
            },
            {
              "name": "id",
              "in": "query",
              "value": "$inputs.id"
            },
            {
              "name": "is_id_404_validation",
              "in": "query",
              "value": "$inputs.is_id_404_validation"
            },
            {
              "name": "label",
              "in": "query",
              "value": "$inputs.label"
            },
            {
              "name": "label_logical_operator",
              "in": "query",
              "value": "$inputs.label_logical_operator"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "risk",
              "in": "query",
              "value": "$inputs.risk"
            },
            {
              "name": "scan_profile",
              "in": "query",
              "value": "$inputs.scan_profile"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "team",
              "in": "query",
              "value": "$inputs.team"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "unlimited",
              "in": "query",
              "value": "$inputs.unlimited"
            },
            {
              "name": "verified",
              "in": "query",
              "value": "$inputs.verified"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "targets_list": "$response.body"
          }
        },
        {
          "stepId": "create-login-sequence",
          "description": "Create a new sequence of type 'login' for the target, providing the recorded steps (content is typically JSON from Probely Recorder).",
          "operationId": "targets_sequences_create",
          "parameters": [
            {
              "name": "include",
              "in": "query",
              "value": "$inputs.include"
            },
            {
              "name": "target_id",
              "in": "path",
              "value": "$steps.list-targets-for-sequence.outputs.targets_list.results[0].id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "target_id": "$steps.list-targets-for-sequence.outputs.targets_list.results[0].id",
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sequence_details": "$response.body"
          }
        },
        {
          "stepId": "enable-sequence-login-on-target",
          "description": "Update the target's site settings to enable login via sequence.",
          "operationId": "targets_partial_update",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "target_id": "$steps.list-targets-for-sequence.outputs.targets_list.results[0].id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_target_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "targets_list": "$steps.list-targets-for-sequence.outputs.targets_list",
        "sequence_details": "$steps.create-login-sequence.outputs.sequence_details",
        "updated_target_details": "$steps.enable-sequence-login-on-target.outputs.updated_target_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "discover-asset-and-create-target",
      "summary": "Identify a potentially scannable asset through the discovery feature and then create a formal target from it to enable scanning.",
      "description": "Identify a potentially scannable asset through the discovery feature and then create a formal target from it to enable scanning.",
      "inputs": {
        "type": "object",
        "properties": {
          "has_target": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "label_logical_operator": {
            "type": "string"
          },
          "length": {
            "type": "string"
          },
          "ordering": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "owner_logical_operator": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "risk": {
            "type": "string"
          },
          "score": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "technology": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_create_and_scan": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-discovered-assets",
          "description": "List assets found by the discovery feature, potentially filtering for those without an existing target.",
          "operationId": "discovery_assets_list",
          "parameters": [
            {
              "name": "has_target",
              "in": "query",
              "value": "$inputs.has_target"
            },
            {
              "name": "label",
              "in": "query",
              "value": "$inputs.label"
            },
            {
              "name": "label_logical_operator",
              "in": "query",
              "value": "$inputs.label_logical_operator"
            },
            {
              "name": "length",
              "in": "query",
              "value": "$inputs.length"
            },
            {
              "name": "ordering",
              "in": "query",
              "value": "$inputs.ordering"
            },
            {
              "name": "owner",
              "in": "query",
              "value": "$inputs.owner"
            },
            {
              "name": "owner_logical_operator",
              "in": "query",
              "value": "$inputs.owner_logical_operator"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "risk",
              "in": "query",
              "value": "$inputs.risk"
            },
            {
              "name": "score",
              "in": "query",
              "value": "$inputs.score"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "source",
              "in": "query",
              "value": "$inputs.source"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "technology",
              "in": "query",
              "value": "$inputs.technology"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "discovered_assets_list": "$response.body"
          }
        },
        {
          "stepId": "create-target-from-discovered-asset",
          "description": "Create a new target based on the details of a selected discovered asset.",
          "operationId": "discovery_assets_create_target_create",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "discovery_asset_id": "$steps.list-discovered-assets.outputs.discovered_assets_list.results[0].id",
              "is_create_and_scan": "$inputs.is_create_and_scan"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "created_target_details": "$response.body",
            "scan_details_if_started": "$response.body"
          }
        }
      ],
      "outputs": {
        "discovered_assets_list": "$steps.list-discovered-assets.outputs.discovered_assets_list",
        "created_target_details": "$steps.create-target-from-discovered-asset.outputs.created_target_details",
        "scan_details_if_started": "$steps.create-target-from-discovered-asset.outputs.scan_details_if_started"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}