{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/stream-io-api.com/main/v166.1.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "basic-chat-interaction",
      "summary": "Creates or retrieves a channel, sends a message to it, and marks the message as read by the user.",
      "description": "Creates or retrieves a channel, sends a message to it, and marks the message as read by the user.",
      "inputs": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "get-or-create-channel_body": {
            "type": "object"
          },
          "send-message_body": {
            "type": "object"
          },
          "mark-read_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-or-create-channel",
          "description": "Retrieves an existing channel or creates a new one based on type and ID, optionally setting initial members and data.",
          "operationId": "GetOrCreateChannel",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "value": "$inputs.type"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.get-or-create-channel_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "channel.id": "$response.body",
            "channel.cid": "$response.body",
            "channel.type": "$response.body",
            "members": "$response.body",
            "messages": "$response.body"
          }
        },
        {
          "stepId": "send-message",
          "description": "Sends a new message to the specified channel.",
          "operationId": "SendMessage",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "value": "$inputs.type"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-message_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message.id": "$response.body"
          }
        },
        {
          "stepId": "mark-read",
          "description": "Marks the channel as read up to the specified message for the user.",
          "operationId": "MarkRead",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "value": "$inputs.type"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.mark-read_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "event": "$response.body"
          }
        }
      ],
      "outputs": {
        "channel.id": "$steps.get-or-create-channel.outputs.channel.id",
        "channel.cid": "$steps.get-or-create-channel.outputs.channel.cid",
        "channel.type": "$steps.get-or-create-channel.outputs.channel.type",
        "members": "$steps.get-or-create-channel.outputs.members",
        "messages": "$steps.get-or-create-channel.outputs.messages",
        "message.id": "$steps.send-message.outputs.message.id",
        "event": "$steps.mark-read.outputs.event"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "thread-creation-and-retrieval",
      "summary": "Sends a parent message, sends a reply to create a thread, retrieves the replies for the parent message, and then retrieves the full thread state.",
      "description": "Sends a parent message, sends a reply to create a thread, retrieves the replies for the parent message, and then retrieves the full thread state.",
      "inputs": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "send-parent-message_body": {
            "type": "object"
          },
          "send-reply-message_body": {
            "type": "object"
          },
          "parent_id": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "id_gte": {
            "type": "string"
          },
          "id_gt": {
            "type": "string"
          },
          "id_lte": {
            "type": "string"
          },
          "id_lt": {
            "type": "string"
          },
          "created_at_after_or_equal": {
            "type": "string"
          },
          "created_at_after": {
            "type": "string"
          },
          "created_at_before_or_equal": {
            "type": "string"
          },
          "created_at_before": {
            "type": "string"
          },
          "id_around": {
            "type": "string"
          },
          "created_at_around": {
            "type": "string"
          },
          "message_id": {
            "type": "string"
          },
          "reply_limit": {
            "type": "string"
          },
          "participant_limit": {
            "type": "string"
          },
          "member_limit": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "send-parent-message",
          "description": "Sends the initial message that will start the thread.",
          "operationId": "SendMessage",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "value": "$inputs.type"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-parent-message_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message.id": "$response.body",
            "channel.type": "$response.body",
            "channel.id": "$response.body"
          }
        },
        {
          "stepId": "send-reply-message",
          "description": "Sends a reply message, referencing the parent message ID.",
          "operationId": "SendMessage",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "value": "$inputs.type"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-reply-message_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message.id": "$response.body"
          }
        },
        {
          "stepId": "get-message-replies",
          "description": "Retrieves the list of replies for the parent message.",
          "operationId": "GetReplies",
          "parameters": [
            {
              "name": "parent_id",
              "in": "path",
              "value": "$inputs.parent_id"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "id_gte",
              "in": "query",
              "value": "$inputs.id_gte"
            },
            {
              "name": "id_gt",
              "in": "query",
              "value": "$inputs.id_gt"
            },
            {
              "name": "id_lte",
              "in": "query",
              "value": "$inputs.id_lte"
            },
            {
              "name": "id_lt",
              "in": "query",
              "value": "$inputs.id_lt"
            },
            {
              "name": "created_at_after_or_equal",
              "in": "query",
              "value": "$inputs.created_at_after_or_equal"
            },
            {
              "name": "created_at_after",
              "in": "query",
              "value": "$inputs.created_at_after"
            },
            {
              "name": "created_at_before_or_equal",
              "in": "query",
              "value": "$inputs.created_at_before_or_equal"
            },
            {
              "name": "created_at_before",
              "in": "query",
              "value": "$inputs.created_at_before"
            },
            {
              "name": "id_around",
              "in": "query",
              "value": "$inputs.id_around"
            },
            {
              "name": "created_at_around",
              "in": "query",
              "value": "$inputs.created_at_around"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "messages": "$response.body"
          }
        },
        {
          "stepId": "get-thread-state",
          "description": "Retrieves the full state of the thread, including participants and latest replies.",
          "operationId": "GetThread",
          "parameters": [
            {
              "name": "message_id",
              "in": "path",
              "value": "$inputs.message_id"
            },
            {
              "name": "reply_limit",
              "in": "query",
              "value": "$inputs.reply_limit"
            },
            {
              "name": "participant_limit",
              "in": "query",
              "value": "$inputs.participant_limit"
            },
            {
              "name": "member_limit",
              "in": "query",
              "value": "$inputs.member_limit"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "thread": "$response.body"
          }
        }
      ],
      "outputs": {
        "message.id": "$steps.send-reply-message.outputs.message.id",
        "channel.type": "$steps.send-parent-message.outputs.channel.type",
        "channel.id": "$steps.send-parent-message.outputs.channel.id",
        "messages": "$steps.get-message-replies.outputs.messages",
        "thread": "$steps.get-thread-state.outputs.thread"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "poll-creation-and-voting",
      "summary": "Creates a new poll, sends it in a channel message, allows a user to vote, and then queries the votes for that poll.",
      "description": "Creates a new poll, sends it in a channel message, allows a user to vote, and then queries the votes for that poll.",
      "inputs": {
        "type": "object",
        "properties": {
          "create-poll_body": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "send-message-with-poll_body": {
            "type": "object"
          },
          "message_id": {
            "type": "string"
          },
          "poll_id": {
            "type": "string"
          },
          "cast-poll-vote_body": {
            "type": "object"
          },
          "user_id": {
            "type": "string"
          },
          "query-poll-votes_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-poll",
          "description": "Creates a new poll with specified options and settings.",
          "operationId": "CreatePoll",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-poll_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "poll.id": "$response.body"
          }
        },
        {
          "stepId": "send-message-with-poll",
          "description": "Sends a message to a channel, attaching the created poll using its ID.",
          "operationId": "SendMessage",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "value": "$inputs.type"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-message-with-poll_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message.id": "$response.body"
          }
        },
        {
          "stepId": "cast-poll-vote",
          "description": "Allows a user to cast a vote on a specific option within the poll.",
          "operationId": "CastPollVote",
          "parameters": [
            {
              "name": "message_id",
              "in": "path",
              "value": "$inputs.message_id"
            },
            {
              "name": "poll_id",
              "in": "path",
              "value": "$inputs.poll_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.cast-poll-vote_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "vote": "$response.body"
          }
        },
        {
          "stepId": "query-poll-votes",
          "description": "Queries the votes cast for the specified poll.",
          "operationId": "QueryPollVotes",
          "parameters": [
            {
              "name": "poll_id",
              "in": "path",
              "value": "$inputs.poll_id"
            },
            {
              "name": "user_id",
              "in": "query",
              "value": "$inputs.user_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.query-poll-votes_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "votes": "$response.body"
          }
        }
      ],
      "outputs": {
        "poll.id": "$steps.create-poll.outputs.poll.id",
        "message.id": "$steps.send-message-with-poll.outputs.message.id",
        "vote": "$steps.cast-poll-vote.outputs.vote",
        "votes": "$steps.query-poll-votes.outputs.votes"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "user-onboarding-and-device-registration",
      "summary": "Creates or updates a user, registers a device for them, and lists their registered devices.",
      "description": "Creates or updates a user, registers a device for them, and lists their registered devices.",
      "inputs": {
        "type": "object",
        "properties": {
          "upsert-user_body": {
            "type": "object"
          },
          "register-user-device_body": {
            "type": "object"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upsert-user",
          "description": "Creates a new user or updates an existing one.",
          "operationId": "UpdateUsers",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.upsert-user_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "users.{user_id}.id": "$response.body"
          }
        },
        {
          "stepId": "register-user-device",
          "description": "Registers a new device (e.g., phone) for the user.",
          "operationId": "CreateDevice",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.register-user-device_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Response": "$response.body"
          }
        },
        {
          "stepId": "list-user-devices",
          "description": "Retrieves the list of devices registered for the user.",
          "operationId": "ListDevices",
          "parameters": [
            {
              "name": "user_id",
              "in": "query",
              "value": "$inputs.user_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "devices": "$response.body"
          }
        }
      ],
      "outputs": {
        "users.{user_id}.id": "$steps.upsert-user.outputs.users.{user_id}.id",
        "Response": "$steps.register-user-device.outputs.Response",
        "devices": "$steps.list-user-devices.outputs.devices"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "message-reaction-workflow",
      "summary": "Sends a message, adds a reaction to it, and then retrieves all reactions for that message.",
      "description": "Sends a message, adds a reaction to it, and then retrieves all reactions for that message.",
      "inputs": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "send-message-for-reaction_body": {
            "type": "object"
          },
          "send-reaction_body": {
            "type": "object"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "send-message-for-reaction",
          "description": "Sends a new message to a channel.",
          "operationId": "SendMessage",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "value": "$inputs.type"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-message-for-reaction_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message.id": "$response.body"
          }
        },
        {
          "stepId": "send-reaction",
          "description": "Adds a reaction to the previously sent message.",
          "operationId": "SendReaction",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-reaction_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "reaction.type": "$response.body",
            "message": "$response.body"
          }
        },
        {
          "stepId": "get-reactions",
          "description": "Retrieves the list of reactions for the message.",
          "operationId": "GetReactions",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "reactions": "$response.body"
          }
        }
      ],
      "outputs": {
        "message.id": "$steps.send-message-for-reaction.outputs.message.id",
        "reaction.type": "$steps.send-reaction.outputs.reaction.type",
        "message": "$steps.send-reaction.outputs.message",
        "reactions": "$steps.get-reactions.outputs.reactions"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "user-moderation-ban-and-check",
      "summary": "Finds a user, bans them from the application or a specific channel, and then queries the banned user list to confirm the ban.",
      "description": "Finds a user, bans them from the application or a specific channel, and then queries the banned user list to confirm the ban.",
      "inputs": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "string"
          },
          "ban-user_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-user-to-ban",
          "description": "Queries users based on filter conditions to find the target user ID.",
          "operationId": "QueryUsers",
          "parameters": [
            {
              "name": "payload",
              "in": "query",
              "value": "$inputs.payload"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "users[].id": "$response.body"
          }
        },
        {
          "stepId": "ban-user",
          "description": "Bans the target user, optionally specifying a channel, reason, and timeout.",
          "operationId": "Ban",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.ban-user_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Response": "$response.body"
          }
        },
        {
          "stepId": "check-ban-status",
          "description": "Queries the list of banned users, filtering for the previously banned user to confirm their status.",
          "operationId": "QueryBannedUsers",
          "parameters": [
            {
              "name": "payload",
              "in": "query",
              "value": "$inputs.payload"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "bans": "$response.body"
          }
        }
      ],
      "outputs": {
        "users[].id": "$steps.find-user-to-ban.outputs.users[].id",
        "Response": "$steps.ban-user.outputs.Response",
        "bans": "$steps.check-ban-status.outputs.bans"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "push-notification-setup-and-test",
      "summary": "Configures a push provider (e.g., APN, Firebase), registers a device for a user with that provider, and sends a test push notification.",
      "description": "Configures a push provider (e.g., APN, Firebase), registers a device for a user with that provider, and sends a test push notification.",
      "inputs": {
        "type": "object",
        "properties": {
          "upsert-push-provider_body": {
            "type": "object"
          },
          "create-device_body": {
            "type": "object"
          },
          "check-push-configuration_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "upsert-push-provider",
          "description": "Creates or updates a push provider configuration (e.g., Firebase credentials).",
          "operationId": "UpsertPushProvider",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.upsert-push-provider_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "push_provider.name": "$response.body",
            "push_provider.type": "$response.body"
          }
        },
        {
          "stepId": "create-device",
          "description": "Registers a new device for a specific user, associating it with the configured push provider.",
          "operationId": "CreateDevice",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-device_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Response": "$response.body"
          }
        },
        {
          "stepId": "check-push-configuration",
          "description": "Sends a test push notification to the specified user/device to verify the push setup.",
          "operationId": "CheckPush",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.check-push-configuration_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "device_errors": "$response.body",
            "general_errors": "$response.body",
            "rendered_message": "$response.body"
          }
        }
      ],
      "outputs": {
        "push_provider.name": "$steps.upsert-push-provider.outputs.push_provider.name",
        "push_provider.type": "$steps.upsert-push-provider.outputs.push_provider.type",
        "Response": "$steps.create-device.outputs.Response",
        "device_errors": "$steps.check-push-configuration.outputs.device_errors",
        "general_errors": "$steps.check-push-configuration.outputs.general_errors",
        "rendered_message": "$steps.check-push-configuration.outputs.rendered_message"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "message-flagging-and-review",
      "summary": "Sends a message, flags it for moderation, and then queries the message flags list to review.",
      "description": "Sends a message, flags it for moderation, and then queries the message flags list to review.",
      "inputs": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "send-message-to-flag_body": {
            "type": "object"
          },
          "flag-message_body": {
            "type": "object"
          },
          "payload": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "send-message-to-flag",
          "description": "Sends a message that needs to be flagged.",
          "operationId": "SendMessage",
          "parameters": [
            {
              "name": "type",
              "in": "path",
              "value": "$inputs.type"
            },
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-message-to-flag_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "message.id": "$response.body"
          }
        },
        {
          "stepId": "flag-message",
          "description": "Flags the previously sent message, optionally providing a reason.",
          "operationId": "Flag",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.flag-message_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flag": "$response.body"
          }
        },
        {
          "stepId": "query-message-flags",
          "description": "Queries the list of flagged messages, potentially filtering to find the specific flag.",
          "operationId": "QueryMessageFlags",
          "parameters": [
            {
              "name": "payload",
              "in": "query",
              "value": "$inputs.payload"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flags": "$response.body"
          }
        }
      ],
      "outputs": {
        "message.id": "$steps.send-message-to-flag.outputs.message.id",
        "flag": "$steps.flag-message.outputs.flag",
        "flags": "$steps.query-message-flags.outputs.flags"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "apply-blocklist-to-channel-type",
      "summary": "Creates a new blocklist and then updates a specific channel type to use this blocklist for moderation.",
      "description": "Creates a new blocklist and then updates a specific channel type to use this blocklist for moderation.",
      "inputs": {
        "type": "object",
        "properties": {
          "create-blocklist_body": {
            "type": "object"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-blocklist",
          "description": "Creates a new blocklist with a specified name and list of words.",
          "operationId": "CreateBlockList",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-blocklist_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "blocklist.name": "$response.body"
          }
        },
        {
          "stepId": "get-channel-type-info",
          "description": "Retrieves the current configuration of the channel type to be updated.",
          "operationId": "GetChannelType",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "name": "$response.body",
            "permissions": "$response.body",
            "grants": "$response.body"
          }
        },
        {
          "stepId": "update-channel-type-with-blocklist",
          "description": "Updates the channel type configuration to apply the created blocklist.",
          "operationId": "UpdateChannelType",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.get-channel-type-info.outputs.name"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$steps.get-channel-type-info.outputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "name": "$response.body",
            "blocklist": "$response.body",
            "blocklist_behavior": "$response.body"
          }
        }
      ],
      "outputs": {
        "blocklist.name": "$steps.create-blocklist.outputs.blocklist.name",
        "name": "$steps.update-channel-type-with-blocklist.outputs.name",
        "permissions": "$steps.get-channel-type-info.outputs.permissions",
        "grants": "$steps.get-channel-type-info.outputs.grants",
        "blocklist": "$steps.update-channel-type-with-blocklist.outputs.blocklist",
        "blocklist_behavior": "$steps.update-channel-type-with-blocklist.outputs.blocklist_behavior"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "export-user-data-and-check-status",
      "summary": "Initiates an asynchronous export for specified users' data and then checks the status of the export task.",
      "description": "Initiates an asynchronous export for specified users' data and then checks the status of the export task.",
      "inputs": {
        "type": "object",
        "properties": {
          "export-users-data_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "export-users-data",
          "description": "Starts an asynchronous task to export data for a list of user IDs.",
          "operationId": "ExportUsers",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.export-users-data_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "task_id": "$response.body"
          }
        },
        {
          "stepId": "get-export-task-status",
          "description": "Retrieves the status of the export task using the task ID obtained from the previous step. This might need to be polled.",
          "operationId": "GetTask",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.export-users-data.outputs.task_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body",
            "result.url": "$response.body",
            "error": "$response.body"
          }
        }
      ],
      "outputs": {
        "task_id": "$steps.export-users-data.outputs.task_id",
        "status": "$steps.get-export-task-status.outputs.status",
        "result.url": "$steps.get-export-task-status.outputs.result.url",
        "error": "$steps.get-export-task-status.outputs.error"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}