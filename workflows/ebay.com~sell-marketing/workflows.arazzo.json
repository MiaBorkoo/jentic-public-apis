{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/ebay.com/sell-marketing/v1.22.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "create-and-manage-cps-promoted-listings-campaign-listing-ids",
      "summary": "Creates a Cost Per Sale (CPS) Promoted Listings campaign, adds listings to it using their eBay Listing IDs, retrieves the campaign details, and then fetches the ads within that campaign.",
      "description": "Creates a Cost Per Sale (CPS) Promoted Listings campaign, adds listings to it using their eBay Listing IDs, retrieves the campaign details, and then fetches the ads within that campaign.",
      "inputs": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string"
          },
          "create-cps-campaign_body": {
            "type": "object"
          },
          "campaign_id": {
            "type": "string"
          },
          "add-listings-to-cps-campaign_body": {
            "type": "object"
          },
          "ad_group_ids": {
            "type": "string"
          },
          "ad_status": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "listing_ids": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-cps-campaign",
          "description": "Create a new Cost Per Sale (CPS) Promoted Listings campaign.",
          "operationId": "createCampaign",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-cps-campaign_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Location header (contains campaign URI with campaignId)": "$response.body"
          }
        },
        {
          "stepId": "add-listings-to-cps-campaign",
          "description": "Add multiple listings to the newly created CPS campaign using their Listing IDs and set bid percentages.",
          "operationId": "bulkCreateAdsByListingId",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.add-listings-to-cps-campaign_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "BulkAdResponse (contains status for each ad creation attempt)": "$response.body"
          }
        },
        {
          "stepId": "get-cps-campaign-details",
          "description": "Retrieve the details of the created CPS campaign.",
          "operationId": "getCampaign",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Campaign (details like status, budget, criterion)": "$response.body"
          }
        },
        {
          "stepId": "get-cps-campaign-ads",
          "description": "Retrieve the ads associated with the CPS campaign.",
          "operationId": "getAds",
          "parameters": [
            {
              "name": "ad_group_ids",
              "in": "query",
              "value": "$inputs.ad_group_ids"
            },
            {
              "name": "ad_status",
              "in": "query",
              "value": "$inputs.ad_status"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "listing_ids",
              "in": "query",
              "value": "$inputs.listing_ids"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "AdPagedCollectionResponse (list of ads with their details)": "$response.body"
          }
        }
      ],
      "outputs": {
        "Location header (contains campaign URI with campaignId)": "$steps.create-cps-campaign.outputs.Location header (contains campaign URI with campaignId)",
        "BulkAdResponse (contains status for each ad creation attempt)": "$steps.add-listings-to-cps-campaign.outputs.BulkAdResponse (contains status for each ad creation attempt)",
        "Campaign (details like status, budget, criterion)": "$steps.get-cps-campaign-details.outputs.Campaign (details like status, budget, criterion)",
        "AdPagedCollectionResponse (list of ads with their details)": "$steps.get-cps-campaign-ads.outputs.AdPagedCollectionResponse (list of ads with their details)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "generate-and-download-promoted-listings-performance-report",
      "summary": "Creates a task to generate a performance report for Promoted Listings campaigns, checks the task status, and downloads the report when ready.",
      "description": "Creates a task to generate a performance report for Promoted Listings campaigns, checks the task status, and downloads the report when ready.",
      "inputs": {
        "type": "object",
        "properties": {
          "funding_model": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "create-report-task_body": {
            "type": "object"
          },
          "report_task_id": {
            "type": "string"
          },
          "report_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-report-metadata",
          "description": "Retrieve metadata about available report types, dimensions, and metrics to help configure the report task.",
          "operationId": "getReportMetadata",
          "parameters": [
            {
              "name": "funding_model",
              "in": "query",
              "value": "$inputs.funding_model"
            },
            {
              "name": "channel",
              "in": "query",
              "value": "$inputs.channel"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ReportMetadatas (details on available reports)": "$response.body"
          }
        },
        {
          "stepId": "create-report-task",
          "description": "Create a task to generate a specific Promoted Listings report (e.g., Campaign Performance).",
          "operationId": "createReportTask",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-report-task_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Location header (contains report task URI with report_task_id)": "$response.body"
          }
        },
        {
          "stepId": "get-report-task-status",
          "description": "Check the status of the report generation task. Poll this endpoint until status is SUCCESS.",
          "operationId": "getReportTask",
          "parameters": [
            {
              "name": "report_task_id",
              "in": "path",
              "value": "$inputs.report_task_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ReportTask (contains reportTaskStatus, reportHref when complete)": "$response.body"
          }
        },
        {
          "stepId": "download-report",
          "description": "Download the generated report file using the report ID obtained from the completed task.",
          "operationId": "getReport",
          "parameters": [
            {
              "name": "report_id",
              "in": "path",
              "value": "$inputs.report_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Report file (text/tab-separated-values)": "$response.body"
          }
        }
      ],
      "outputs": {
        "ReportMetadatas (details on available reports)": "$steps.get-report-metadata.outputs.ReportMetadatas (details on available reports)",
        "Location header (contains report task URI with report_task_id)": "$steps.create-report-task.outputs.Location header (contains report task URI with report_task_id)",
        "ReportTask (contains reportTaskStatus, reportHref when complete)": "$steps.get-report-task-status.outputs.ReportTask (contains reportTaskStatus, reportHref when complete)",
        "Report file (text/tab-separated-values)": "$steps.download-report.outputs.Report file (text/tab-separated-values)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-manage-cps-promoted-listings-campaign-inventory-references",
      "summary": "Creates a Cost Per Sale (CPS) Promoted Listings campaign, adds listings managed via the Inventory API using inventory references, retrieves the campaign details, and then fetches the ads within that campaign using inventory references.",
      "description": "Creates a Cost Per Sale (CPS) Promoted Listings campaign, adds listings managed via the Inventory API using inventory references, retrieves the campaign details, and then fetches the ads within that campaign using inventory references.",
      "inputs": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string"
          },
          "create-cps-inv-campaign_body": {
            "type": "object"
          },
          "campaign_id": {
            "type": "string"
          },
          "add-inventory-items-to-cps-campaign_body": {
            "type": "object"
          },
          "inventory_reference_id": {
            "type": "string"
          },
          "inventory_reference_type": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-cps-inv-campaign",
          "description": "Create a new Cost Per Sale (CPS) Promoted Listings campaign.",
          "operationId": "createCampaign",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-cps-inv-campaign_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Location header (contains campaign URI with campaignId)": "$response.body"
          }
        },
        {
          "stepId": "add-inventory-items-to-cps-campaign",
          "description": "Add multiple listings managed by Inventory API to the CPS campaign using their inventory reference IDs and types, setting bid percentages.",
          "operationId": "bulkCreateAdsByInventoryReference",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.add-inventory-items-to-cps-campaign_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "BulkCreateAdsByInventoryReferenceResponse (contains status for each ad creation attempt)": "$response.body"
          }
        },
        {
          "stepId": "get-cps-inv-campaign-details",
          "description": "Retrieve the details of the created CPS campaign.",
          "operationId": "getCampaign",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Campaign (details like status, budget, criterion)": "$response.body"
          }
        },
        {
          "stepId": "get-cps-campaign-ads-by-inventory",
          "description": "Retrieve ads associated with the CPS campaign using a specific inventory reference.",
          "operationId": "getAdsByInventoryReference",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "inventory_reference_id",
              "in": "query",
              "value": "$inputs.inventory_reference_id"
            },
            {
              "name": "inventory_reference_type",
              "in": "query",
              "value": "$inputs.inventory_reference_type"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Ads (list of ads matching the inventory reference)": "$response.body"
          }
        }
      ],
      "outputs": {
        "Location header (contains campaign URI with campaignId)": "$steps.create-cps-inv-campaign.outputs.Location header (contains campaign URI with campaignId)",
        "BulkCreateAdsByInventoryReferenceResponse (contains status for each ad creation attempt)": "$steps.add-inventory-items-to-cps-campaign.outputs.BulkCreateAdsByInventoryReferenceResponse (contains status for each ad creation attempt)",
        "Campaign (details like status, budget, criterion)": "$steps.get-cps-inv-campaign-details.outputs.Campaign (details like status, budget, criterion)",
        "Ads (list of ads matching the inventory reference)": "$steps.get-cps-campaign-ads-by-inventory.outputs.Ads (list of ads matching the inventory reference)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-manage-cpc-promoted-listings-campaign",
      "summary": "Creates a Cost Per Click (CPC) Promoted Listings campaign, creates an ad group, suggests and adds keywords, suggests bids, and adds listings to the ad group.",
      "description": "Creates a Cost Per Click (CPC) Promoted Listings campaign, creates an ad group, suggests and adds keywords, suggests bids, and adds listings to the ad group.",
      "inputs": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string"
          },
          "create-cpc-campaign_body": {
            "type": "object"
          },
          "campaign_id": {
            "type": "string"
          },
          "create-ad-group_body": {
            "type": "object"
          },
          "ad_group_id": {
            "type": "string"
          },
          "suggest-keywords_body": {
            "type": "object"
          },
          "add-keywords-to-ad-group_body": {
            "type": "object"
          },
          "suggest-keyword-bids_body": {
            "type": "object"
          },
          "add-listings-to-cpc-ad-group_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-cpc-campaign",
          "description": "Create a new Cost Per Click (CPC) Promoted Listings campaign with a daily budget.",
          "operationId": "createCampaign",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-cpc-campaign_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Location header (contains campaign URI with campaignId)": "$response.body"
          }
        },
        {
          "stepId": "create-ad-group",
          "description": "Create an ad group within the CPC campaign, setting a default bid.",
          "operationId": "createAdGroup",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-ad-group_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Location header (contains ad group URI with adGroupId)": "$response.body"
          }
        },
        {
          "stepId": "suggest-keywords",
          "description": "Suggest keywords relevant to the listings intended for the ad group.",
          "operationId": "suggestKeywords",
          "parameters": [
            {
              "name": "ad_group_id",
              "in": "path",
              "value": "$inputs.ad_group_id"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.suggest-keywords_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "TargetedKeywordsPagedCollection (list of suggested keywords)": "$response.body"
          }
        },
        {
          "stepId": "add-keywords-to-ad-group",
          "description": "Add suggested or custom keywords in bulk to the ad group.",
          "operationId": "bulkCreateKeyword",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.add-keywords-to-ad-group_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "BulkCreateKeywordResponse (status for each keyword creation)": "$response.body"
          }
        },
        {
          "stepId": "suggest-keyword-bids",
          "description": "Suggest bids for the newly added keywords.",
          "operationId": "suggestBids",
          "parameters": [
            {
              "name": "ad_group_id",
              "in": "path",
              "value": "$inputs.ad_group_id"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.suggest-keyword-bids_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "TargetedBidsPagedCollection (list of suggested bids)": "$response.body"
          }
        },
        {
          "stepId": "add-listings-to-cpc-ad-group",
          "description": "Add multiple listings to the ad group within the CPC campaign.",
          "operationId": "bulkCreateAdsByListingId",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.add-listings-to-cpc-ad-group_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "BulkAdResponse (contains status for each ad creation attempt)": "$response.body"
          }
        }
      ],
      "outputs": {
        "Location header (contains campaign URI with campaignId)": "$steps.create-cpc-campaign.outputs.Location header (contains campaign URI with campaignId)",
        "Location header (contains ad group URI with adGroupId)": "$steps.create-ad-group.outputs.Location header (contains ad group URI with adGroupId)",
        "TargetedKeywordsPagedCollection (list of suggested keywords)": "$steps.suggest-keywords.outputs.TargetedKeywordsPagedCollection (list of suggested keywords)",
        "BulkCreateKeywordResponse (status for each keyword creation)": "$steps.add-keywords-to-ad-group.outputs.BulkCreateKeywordResponse (status for each keyword creation)",
        "TargetedBidsPagedCollection (list of suggested bids)": "$steps.suggest-keyword-bids.outputs.TargetedBidsPagedCollection (list of suggested bids)",
        "BulkAdResponse (contains status for each ad creation attempt)": "$steps.add-listings-to-cpc-ad-group.outputs.BulkAdResponse (contains status for each ad creation attempt)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "optimize-cpc-campaign-keywords",
      "summary": "Retrieves existing CPC campaigns and ad groups, gets current keywords, suggests new bids based on performance or market trends, and updates keyword bids.",
      "description": "Retrieves existing CPC campaigns and ad groups, gets current keywords, suggests new bids based on performance or market trends, and updates keyword bids.",
      "inputs": {
        "type": "object",
        "properties": {
          "campaign_name": {
            "type": "string"
          },
          "campaign_status": {
            "type": "string"
          },
          "campaign_targeting_types": {
            "type": "string"
          },
          "channels": {
            "type": "string"
          },
          "end_date_range": {
            "type": "string"
          },
          "funding_strategy": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "start_date_range": {
            "type": "string"
          },
          "ad_group_status": {
            "type": "string"
          },
          "campaign_id": {
            "type": "string"
          },
          "ad_group_ids": {
            "type": "string"
          },
          "keyword_status": {
            "type": "string"
          },
          "ad_group_id": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "suggest-new-keyword-bids_body": {
            "type": "object"
          },
          "update-keyword-bids_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-cpc-campaigns",
          "description": "Retrieve a list of existing CPC campaigns.",
          "operationId": "getCampaigns",
          "parameters": [
            {
              "name": "campaign_name",
              "in": "query",
              "value": "$inputs.campaign_name"
            },
            {
              "name": "campaign_status",
              "in": "query",
              "value": "$inputs.campaign_status"
            },
            {
              "name": "campaign_targeting_types",
              "in": "query",
              "value": "$inputs.campaign_targeting_types"
            },
            {
              "name": "channels",
              "in": "query",
              "value": "$inputs.channels"
            },
            {
              "name": "end_date_range",
              "in": "query",
              "value": "$inputs.end_date_range"
            },
            {
              "name": "funding_strategy",
              "in": "query",
              "value": "$inputs.funding_strategy"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "start_date_range",
              "in": "query",
              "value": "$inputs.start_date_range"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "CampaignPagedCollectionResponse (list of campaigns with campaignId)": "$response.body"
          }
        },
        {
          "stepId": "get-campaign-ad-groups",
          "description": "Retrieve ad groups for a specific CPC campaign.",
          "operationId": "getAdGroups",
          "parameters": [
            {
              "name": "ad_group_status",
              "in": "query",
              "value": "$inputs.ad_group_status"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "AdGroupPagedCollectionResponse (list of ad groups with adGroupId)": "$response.body"
          }
        },
        {
          "stepId": "get-ad-group-keywords",
          "description": "Retrieve keywords for specific ad groups within the campaign.",
          "operationId": "getKeywords",
          "parameters": [
            {
              "name": "ad_group_ids",
              "in": "query",
              "value": "$inputs.ad_group_ids"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "keyword_status",
              "in": "query",
              "value": "$inputs.keyword_status"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "KeywordPagedCollectionResponse (list of keywords with keywordId, keywordText, matchType, current bid)": "$response.body"
          }
        },
        {
          "stepId": "suggest-new-keyword-bids",
          "description": "Suggest new bids for existing keywords based on current market data.",
          "operationId": "suggestBids",
          "parameters": [
            {
              "name": "ad_group_id",
              "in": "path",
              "value": "$inputs.ad_group_id"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.suggest-new-keyword-bids_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "TargetedBidsPagedCollection (list of suggested bids)": "$response.body"
          }
        },
        {
          "stepId": "update-keyword-bids",
          "description": "Update the bids for multiple keywords within the campaign based on suggestions or seller strategy.",
          "operationId": "bulkUpdateKeyword",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-keyword-bids_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "BulkUpdateKeywordResponse (status for each keyword update)": "$response.body"
          }
        }
      ],
      "outputs": {
        "CampaignPagedCollectionResponse (list of campaigns with campaignId)": "$steps.find-cpc-campaigns.outputs.CampaignPagedCollectionResponse (list of campaigns with campaignId)",
        "AdGroupPagedCollectionResponse (list of ad groups with adGroupId)": "$steps.get-campaign-ad-groups.outputs.AdGroupPagedCollectionResponse (list of ad groups with adGroupId)",
        "KeywordPagedCollectionResponse (list of keywords with keywordId, keywordText, matchType, current bid)": "$steps.get-ad-group-keywords.outputs.KeywordPagedCollectionResponse (list of keywords with keywordId, keywordText, matchType, current bid)",
        "TargetedBidsPagedCollection (list of suggested bids)": "$steps.suggest-new-keyword-bids.outputs.TargetedBidsPagedCollection (list of suggested bids)",
        "BulkUpdateKeywordResponse (status for each keyword update)": "$steps.update-keyword-bids.outputs.BulkUpdateKeywordResponse (status for each keyword update)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-manage-item-price-markdown-discount",
      "summary": "Creates an item price markdown discount, retrieves its details, gets the listings included in it, and potentially updates its end date.",
      "description": "Creates an item price markdown discount, retrieves its details, gets the listings included in it, and potentially updates its end date.",
      "inputs": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string"
          },
          "create-markdown-discount_body": {
            "type": "object"
          },
          "promotion_id": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "update-markdown-discount-enddate_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-markdown-discount",
          "description": "Create a new item price markdown discount (e.g., 20% off selected items).",
          "operationId": "createItemPriceMarkdownPromotion",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-markdown-discount_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Location header (contains promotion URI with promotion_id)": "$response.body"
          }
        },
        {
          "stepId": "get-markdown-discount",
          "description": "Retrieve the details of the created markdown discount.",
          "operationId": "getItemPriceMarkdownPromotion",
          "parameters": [
            {
              "name": "promotion_id",
              "in": "path",
              "value": "$inputs.promotion_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ItemPriceMarkdown (full discount details)": "$response.body"
          }
        },
        {
          "stepId": "get-markdown-discount-listings",
          "description": "Retrieve the set of listings currently included in the markdown discount.",
          "operationId": "getListingSet",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "promotion_id",
              "in": "path",
              "value": "$inputs.promotion_id"
            },
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ItemsPagedCollection (list of listings in the discount)": "$response.body"
          }
        },
        {
          "stepId": "update-markdown-discount-enddate",
          "description": "Update the end date of the markdown discount (requires resubmitting all original fields).",
          "operationId": "updateItemPriceMarkdownPromotion",
          "parameters": [
            {
              "name": "promotion_id",
              "in": "path",
              "value": "$inputs.promotion_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-markdown-discount-enddate_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "BaseResponse or 204 No Content": "$response.body"
          }
        }
      ],
      "outputs": {
        "Location header (contains promotion URI with promotion_id)": "$steps.create-markdown-discount.outputs.Location header (contains promotion URI with promotion_id)",
        "ItemPriceMarkdown (full discount details)": "$steps.get-markdown-discount.outputs.ItemPriceMarkdown (full discount details)",
        "ItemsPagedCollection (list of listings in the discount)": "$steps.get-markdown-discount-listings.outputs.ItemsPagedCollection (list of listings in the discount)",
        "BaseResponse or 204 No Content": "$steps.update-markdown-discount-enddate.outputs.BaseResponse or 204 No Content"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-manage-threshold-item-discount-eg-buy-2-get-10-off",
      "summary": "Creates a threshold item discount (e.g., order discount), retrieves its details, gets associated listings, and demonstrates pausing/resuming the discount.",
      "description": "Creates a threshold item discount (e.g., order discount), retrieves its details, gets associated listings, and demonstrates pausing/resuming the discount.",
      "inputs": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string"
          },
          "create-threshold-discount_body": {
            "type": "object"
          },
          "promotion_id": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-threshold-discount",
          "description": "Create a new threshold discount (e.g., Spend $50 get 10% off).",
          "operationId": "createItemPromotion",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-threshold-discount_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "Location header (contains promotion URI with promotion_id)": "$response.body"
          }
        },
        {
          "stepId": "get-threshold-discount",
          "description": "Retrieve the details of the created threshold discount.",
          "operationId": "getItemPromotion",
          "parameters": [
            {
              "name": "promotion_id",
              "in": "path",
              "value": "$inputs.promotion_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ItemPromotionResponse (full discount details)": "$response.body"
          }
        },
        {
          "stepId": "get-threshold-discount-listings",
          "description": "Retrieve the set of listings currently included in the threshold discount.",
          "operationId": "getListingSet",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "promotion_id",
              "in": "path",
              "value": "$inputs.promotion_id"
            },
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ItemsPagedCollection (list of listings in the discount)": "$response.body"
          }
        },
        {
          "stepId": "pause-threshold-discount",
          "description": "Pause the running threshold discount.",
          "operationId": "pausePromotion",
          "parameters": [
            {
              "name": "promotion_id",
              "in": "path",
              "value": "$inputs.promotion_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "204 No Content": "$response.body"
          }
        },
        {
          "stepId": "resume-threshold-discount",
          "description": "Resume the previously paused threshold discount.",
          "operationId": "resumePromotion",
          "parameters": [
            {
              "name": "promotion_id",
              "in": "path",
              "value": "$inputs.promotion_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "204 No Content": "$response.body"
          }
        }
      ],
      "outputs": {
        "Location header (contains promotion URI with promotion_id)": "$steps.create-threshold-discount.outputs.Location header (contains promotion URI with promotion_id)",
        "ItemPromotionResponse (full discount details)": "$steps.get-threshold-discount.outputs.ItemPromotionResponse (full discount details)",
        "ItemsPagedCollection (list of listings in the discount)": "$steps.get-threshold-discount-listings.outputs.ItemsPagedCollection (list of listings in the discount)",
        "204 No Content": "$steps.resume-threshold-discount.outputs.204 No Content"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-negative-keywords-for-cpc-campaign",
      "summary": "Finds a CPC campaign and ad group, adds negative keywords to prevent ads from showing on irrelevant searches, and retrieves the list of negative keywords.",
      "description": "Finds a CPC campaign and ad group, adds negative keywords to prevent ads from showing on irrelevant searches, and retrieves the list of negative keywords.",
      "inputs": {
        "type": "object",
        "properties": {
          "campaign_name": {
            "type": "string"
          },
          "campaign_status": {
            "type": "string"
          },
          "campaign_targeting_types": {
            "type": "string"
          },
          "channels": {
            "type": "string"
          },
          "end_date_range": {
            "type": "string"
          },
          "funding_strategy": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "start_date_range": {
            "type": "string"
          },
          "ad_group_status": {
            "type": "string"
          },
          "campaign_id": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "add-negative-keywords_body": {
            "type": "object"
          },
          "ad_group_ids": {
            "type": "string"
          },
          "campaign_ids": {
            "type": "string"
          },
          "negative_keyword_status": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-target-cpc-campaign",
          "description": "Retrieve a list of existing CPC campaigns to find the target campaign.",
          "operationId": "getCampaigns",
          "parameters": [
            {
              "name": "campaign_name",
              "in": "query",
              "value": "$inputs.campaign_name"
            },
            {
              "name": "campaign_status",
              "in": "query",
              "value": "$inputs.campaign_status"
            },
            {
              "name": "campaign_targeting_types",
              "in": "query",
              "value": "$inputs.campaign_targeting_types"
            },
            {
              "name": "channels",
              "in": "query",
              "value": "$inputs.channels"
            },
            {
              "name": "end_date_range",
              "in": "query",
              "value": "$inputs.end_date_range"
            },
            {
              "name": "funding_strategy",
              "in": "query",
              "value": "$inputs.funding_strategy"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "start_date_range",
              "in": "query",
              "value": "$inputs.start_date_range"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "CampaignPagedCollectionResponse (list of campaigns with campaignId)": "$response.body"
          }
        },
        {
          "stepId": "get-target-ad-group",
          "description": "Retrieve ad groups for the target CPC campaign.",
          "operationId": "getAdGroups",
          "parameters": [
            {
              "name": "ad_group_status",
              "in": "query",
              "value": "$inputs.ad_group_status"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "AdGroupPagedCollectionResponse (list of ad groups with adGroupId)": "$response.body"
          }
        },
        {
          "stepId": "add-negative-keywords",
          "description": "Add negative keywords in bulk to the specified ad group.",
          "operationId": "bulkCreateNegativeKeyword",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.add-negative-keywords_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "BulkCreateNegativeKeywordResponse (status for each negative keyword creation)": "$response.body"
          }
        },
        {
          "stepId": "retrieve-negative-keywords",
          "description": "Retrieve the list of negative keywords associated with the campaign or specific ad groups.",
          "operationId": "getNegativeKeywords",
          "parameters": [
            {
              "name": "ad_group_ids",
              "in": "query",
              "value": "$inputs.ad_group_ids"
            },
            {
              "name": "campaign_ids",
              "in": "query",
              "value": "$inputs.campaign_ids"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "negative_keyword_status",
              "in": "query",
              "value": "$inputs.negative_keyword_status"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "NegativeKeywordPagedCollectionResponse (list of negative keywords)": "$response.body"
          }
        }
      ],
      "outputs": {
        "CampaignPagedCollectionResponse (list of campaigns with campaignId)": "$steps.find-target-cpc-campaign.outputs.CampaignPagedCollectionResponse (list of campaigns with campaignId)",
        "AdGroupPagedCollectionResponse (list of ad groups with adGroupId)": "$steps.get-target-ad-group.outputs.AdGroupPagedCollectionResponse (list of ad groups with adGroupId)",
        "BulkCreateNegativeKeywordResponse (status for each negative keyword creation)": "$steps.add-negative-keywords.outputs.BulkCreateNegativeKeywordResponse (status for each negative keyword creation)",
        "NegativeKeywordPagedCollectionResponse (list of negative keywords)": "$steps.retrieve-negative-keywords.outputs.NegativeKeywordPagedCollectionResponse (list of negative keywords)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-manage-store-email-campaign",
      "summary": "Finds available audiences, creates a new email campaign (e.g., Welcome or Item Showcase), retrieves its details, previews the email content, and potentially updates it.",
      "description": "Finds available audiences, creates a new email campaign (e.g., Welcome or Item Showcase), retrieves its details, previews the email content, and potentially updates it.",
      "inputs": {
        "type": "object",
        "properties": {
          "emailCampaignType": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "X-EBAY-C-MARKETPLACE-ID": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "create-email-campaign_body": {
            "type": "object"
          },
          "email_campaign_id": {
            "type": "string"
          },
          "update-email-campaign_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-available-audiences",
          "description": "Retrieve available audience types and codes for a specific email campaign type.",
          "operationId": "getAudiences",
          "parameters": [
            {
              "name": "emailCampaignType",
              "in": "query",
              "value": "$inputs.emailCampaignType"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "GetEmailCampaignAudiencesResponse (list of audiences with codes)": "$response.body"
          }
        },
        {
          "stepId": "create-email-campaign",
          "description": "Create a new email campaign targeting specific audiences, potentially featuring specific items or discounts.",
          "operationId": "createEmailCampaign",
          "parameters": [
            {
              "name": "X-EBAY-C-MARKETPLACE-ID",
              "in": "header",
              "value": "$inputs.X-EBAY-C-MARKETPLACE-ID"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-email-campaign_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "CreateEmailCampaignResponse (emailCampaignId, emailCampaignStatus)": "$response.body"
          }
        },
        {
          "stepId": "get-email-campaign-details",
          "description": "Retrieve the full details of the created email campaign.",
          "operationId": "getEmailCampaign",
          "parameters": [
            {
              "name": "email_campaign_id",
              "in": "path",
              "value": "$inputs.email_campaign_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "GetEmailCampaignResponse (full campaign details)": "$response.body"
          }
        },
        {
          "stepId": "preview-email-campaign",
          "description": "Get an HTML preview of the email content for the campaign.",
          "operationId": "getEmailPreview",
          "parameters": [
            {
              "name": "email_campaign_id",
              "in": "path",
              "value": "$inputs.email_campaign_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "GetEmailPreviewResponse (HTML content)": "$response.body"
          }
        },
        {
          "stepId": "update-email-campaign",
          "description": "Update customizable fields of the email campaign, such as subject, message, or item selection.",
          "operationId": "updateEmailCampaign",
          "parameters": [
            {
              "name": "email_campaign_id",
              "in": "path",
              "value": "$inputs.email_campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-email-campaign_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "UpdateEmailCampaignResponse (emailCampaignId, emailCampaignStatus)": "$response.body"
          }
        }
      ],
      "outputs": {
        "GetEmailCampaignAudiencesResponse (list of audiences with codes)": "$steps.find-available-audiences.outputs.GetEmailCampaignAudiencesResponse (list of audiences with codes)",
        "CreateEmailCampaignResponse (emailCampaignId, emailCampaignStatus)": "$steps.create-email-campaign.outputs.CreateEmailCampaignResponse (emailCampaignId, emailCampaignStatus)",
        "GetEmailCampaignResponse (full campaign details)": "$steps.get-email-campaign-details.outputs.GetEmailCampaignResponse (full campaign details)",
        "GetEmailPreviewResponse (HTML content)": "$steps.preview-email-campaign.outputs.GetEmailPreviewResponse (HTML content)",
        "UpdateEmailCampaignResponse (emailCampaignId, emailCampaignStatus)": "$steps.update-email-campaign.outputs.UpdateEmailCampaignResponse (emailCampaignId, emailCampaignStatus)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "adjust-bids-for-cps-campaign-ads-listing-ids",
      "summary": "Find existing CPS campaigns, retrieve their ads, and then update the bid percentages for specific ads identified by Listing IDs.",
      "description": "Find existing CPS campaigns, retrieve their ads, and then update the bid percentages for specific ads identified by Listing IDs.",
      "inputs": {
        "type": "object",
        "properties": {
          "campaign_name": {
            "type": "string"
          },
          "campaign_status": {
            "type": "string"
          },
          "campaign_targeting_types": {
            "type": "string"
          },
          "channels": {
            "type": "string"
          },
          "end_date_range": {
            "type": "string"
          },
          "funding_strategy": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "start_date_range": {
            "type": "string"
          },
          "ad_group_ids": {
            "type": "string"
          },
          "ad_status": {
            "type": "string"
          },
          "campaign_id": {
            "type": "string"
          },
          "listing_ids": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "update-cps-ad-bids-by-listing_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-cps-campaigns",
          "description": "Retrieve a list of existing CPS campaigns, potentially filtering by status or name.",
          "operationId": "getCampaigns",
          "parameters": [
            {
              "name": "campaign_name",
              "in": "query",
              "value": "$inputs.campaign_name"
            },
            {
              "name": "campaign_status",
              "in": "query",
              "value": "$inputs.campaign_status"
            },
            {
              "name": "campaign_targeting_types",
              "in": "query",
              "value": "$inputs.campaign_targeting_types"
            },
            {
              "name": "channels",
              "in": "query",
              "value": "$inputs.channels"
            },
            {
              "name": "end_date_range",
              "in": "query",
              "value": "$inputs.end_date_range"
            },
            {
              "name": "funding_strategy",
              "in": "query",
              "value": "$inputs.funding_strategy"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "start_date_range",
              "in": "query",
              "value": "$inputs.start_date_range"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "CampaignPagedCollectionResponse (list of campaigns with campaignId)": "$response.body"
          }
        },
        {
          "stepId": "get-ads-for-cps-campaign",
          "description": "Retrieve ads associated with a specific CPS campaign.",
          "operationId": "getAds",
          "parameters": [
            {
              "name": "ad_group_ids",
              "in": "query",
              "value": "$inputs.ad_group_ids"
            },
            {
              "name": "ad_status",
              "in": "query",
              "value": "$inputs.ad_status"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "listing_ids",
              "in": "query",
              "value": "$inputs.listing_ids"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "AdPagedCollectionResponse (list of ads with adId, listingId, current bidPercentage)": "$response.body"
          }
        },
        {
          "stepId": "update-cps-ad-bids-by-listing",
          "description": "Update the bid percentages for multiple ads within the selected CPS campaign using their Listing IDs.",
          "operationId": "bulkUpdateAdsBidByListingId",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$inputs.campaign_id"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "value": "$inputs.Content-Type"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-cps-ad-bids-by-listing_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "BulkAdUpdateResponse (contains status for each ad bid update attempt)": "$response.body"
          }
        }
      ],
      "outputs": {
        "CampaignPagedCollectionResponse (list of campaigns with campaignId)": "$steps.find-cps-campaigns.outputs.CampaignPagedCollectionResponse (list of campaigns with campaignId)",
        "AdPagedCollectionResponse (list of ads with adId, listingId, current bidPercentage)": "$steps.get-ads-for-cps-campaign.outputs.AdPagedCollectionResponse (list of ads with adId, listingId, current bidPercentage)",
        "BulkAdUpdateResponse (contains status for each ad bid update attempt)": "$steps.update-cps-ad-bids-by-listing.outputs.BulkAdUpdateResponse (contains status for each ad bid update attempt)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "monitor-discount-performance",
      "summary": "Retrieves a summary report of all discounts for a marketplace and then gets detailed reports for individual discounts.",
      "description": "Retrieves a summary report of all discounts for a marketplace and then gets detailed reports for individual discounts.",
      "inputs": {
        "type": "object",
        "properties": {
          "marketplace_id": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "promotion_status": {
            "type": "string"
          },
          "promotion_type": {
            "type": "string"
          },
          "q": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-discount-summary",
          "description": "Get a summary report of overall discount performance for a specific marketplace.",
          "operationId": "getPromotionSummaryReport",
          "parameters": [
            {
              "name": "marketplace_id",
              "in": "query",
              "value": "$inputs.marketplace_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "SummaryReportResponse (baseSale, promotionSale, percentageSalesLift, etc.)": "$response.body"
          }
        },
        {
          "stepId": "get-detailed-discount-reports",
          "description": "Get detailed performance reports for individual discounts, filterable by status or type.",
          "operationId": "getPromotionReports",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "marketplace_id",
              "in": "query",
              "value": "$inputs.marketplace_id"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "promotion_status",
              "in": "query",
              "value": "$inputs.promotion_status"
            },
            {
              "name": "promotion_type",
              "in": "query",
              "value": "$inputs.promotion_type"
            },
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "PromotionsReportPagedCollection (list of PromotionReportDetail)": "$response.body"
          }
        }
      ],
      "outputs": {
        "SummaryReportResponse (baseSale, promotionSale, percentageSalesLift, etc.)": "$steps.get-discount-summary.outputs.SummaryReportResponse (baseSale, promotionSale, percentageSalesLift, etc.)",
        "PromotionsReportPagedCollection (list of PromotionReportDetail)": "$steps.get-detailed-discount-reports.outputs.PromotionsReportPagedCollection (list of PromotionReportDetail)"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}