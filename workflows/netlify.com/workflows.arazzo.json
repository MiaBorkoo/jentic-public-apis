{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/netlify.com/main/2.36.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "oauth-ticket-authentication",
      "summary": "Guides a user through the OAuth ticket flow to obtain an access token for API authentication.",
      "description": "Guides a user through the OAuth ticket flow to obtain an access token for API authentication.",
      "inputs": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "ticket_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-auth-ticket",
          "description": "Creates an authorization ticket for the OAuth flow.",
          "operationId": "createTicket",
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "value": "$inputs.client_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ticket_id": "$response.body",
            "authorized": "$response.body"
          }
        },
        {
          "stepId": "check-auth-ticket",
          "description": "Checks the status of the authorization ticket after user interaction.",
          "operationId": "showTicket",
          "parameters": [
            {
              "name": "ticket_id",
              "in": "path",
              "value": "$steps.create-auth-ticket.outputs.ticket_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ticket_id": "$response.body",
            "authorized": "$response.body"
          }
        },
        {
          "stepId": "exchange-ticket-for-token",
          "description": "Exchanges an authorized ticket for an API access token.",
          "operationId": "exchangeTicket",
          "parameters": [
            {
              "name": "ticket_id",
              "in": "path",
              "value": "$steps.check-auth-ticket.outputs.ticket_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "access_token": "$response.body",
            "user_id": "$response.body",
            "user_email": "$response.body"
          }
        }
      ],
      "outputs": {
        "ticket_id": "$steps.check-auth-ticket.outputs.ticket_id",
        "authorized": "$steps.check-auth-ticket.outputs.authorized",
        "access_token": "$steps.exchange-ticket-for-token.outputs.access_token",
        "user_id": "$steps.exchange-ticket-for-token.outputs.user_id",
        "user_email": "$steps.exchange-ticket-for-token.outputs.user_email"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manual-file-deployment",
      "summary": "Performs a manual deployment by creating a deploy record and uploading individual files and functions.",
      "description": "Performs a manual deployment by creating a deploy record and uploading individual files and functions.",
      "inputs": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string"
          },
          "deploy-previews": {
            "type": "string"
          },
          "production": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "latest-published": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "deploy_id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "runtime": {
            "type": "string"
          },
          "invocation_mode": {
            "type": "string"
          },
          "timeout": {
            "type": "string"
          },
          "X-Nf-Retry-Count": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-site-deploy",
          "description": "Creates a new deploy record for a site, specifying files and functions to be uploaded.",
          "operationId": "createSiteDeploy",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            },
            {
              "name": "deploy-previews",
              "in": "query",
              "value": "$inputs.deploy-previews"
            },
            {
              "name": "production",
              "in": "query",
              "value": "$inputs.production"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "branch",
              "in": "query",
              "value": "$inputs.branch"
            },
            {
              "name": "latest-published",
              "in": "query",
              "value": "$inputs.latest-published"
            },
            {
              "name": "title",
              "in": "query",
              "value": "$inputs.title"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "branch": "$inputs.branch"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deploy_id": "$response.body",
            "required_files": "$response.body",
            "required_functions": "$response.body",
            "state": "$response.body"
          }
        },
        {
          "stepId": "upload-deploy-file",
          "description": "Uploads a single file required for the deploy. Repeat this step for all required files.",
          "operationId": "uploadDeployFile",
          "parameters": [
            {
              "name": "deploy_id",
              "in": "path",
              "value": "$steps.create-site-deploy.outputs.deploy_id"
            },
            {
              "name": "path",
              "in": "path",
              "value": "$inputs.path"
            },
            {
              "name": "size",
              "in": "query",
              "value": "$inputs.size"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "deploy_id": "$steps.create-site-deploy.outputs.deploy_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_id": "$response.body",
            "file_path": "$response.body",
            "file_sha": "$response.body"
          }
        },
        {
          "stepId": "upload-deploy-function",
          "description": "Uploads a single function required for the deploy. Repeat this step for all required functions.",
          "operationId": "uploadDeployFunction",
          "parameters": [
            {
              "name": "deploy_id",
              "in": "path",
              "value": "$steps.create-site-deploy.outputs.deploy_id"
            },
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            },
            {
              "name": "runtime",
              "in": "query",
              "value": "$inputs.runtime"
            },
            {
              "name": "invocation_mode",
              "in": "query",
              "value": "$inputs.invocation_mode"
            },
            {
              "name": "timeout",
              "in": "query",
              "value": "$inputs.timeout"
            },
            {
              "name": "size",
              "in": "query",
              "value": "$inputs.size"
            },
            {
              "name": "X-Nf-Retry-Count",
              "in": "header",
              "value": "$inputs.X-Nf-Retry-Count"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "deploy_id": "$steps.create-site-deploy.outputs.deploy_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "function_id": "$response.body",
            "function_name": "$response.body",
            "function_sha": "$response.body"
          }
        },
        {
          "stepId": "check-deploy-status",
          "description": "Checks the status of the deploy after uploading files/functions.",
          "operationId": "getDeploy",
          "parameters": [
            {
              "name": "deploy_id",
              "in": "path",
              "value": "$steps.create-site-deploy.outputs.deploy_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deploy_state": "$response.body",
            "deploy_url": "$response.body",
            "ssl_url": "$response.body"
          }
        }
      ],
      "outputs": {
        "deploy_id": "$steps.create-site-deploy.outputs.deploy_id",
        "required_files": "$steps.create-site-deploy.outputs.required_files",
        "required_functions": "$steps.create-site-deploy.outputs.required_functions",
        "state": "$steps.create-site-deploy.outputs.state",
        "file_id": "$steps.upload-deploy-file.outputs.file_id",
        "file_path": "$steps.upload-deploy-file.outputs.file_path",
        "file_sha": "$steps.upload-deploy-file.outputs.file_sha",
        "function_id": "$steps.upload-deploy-function.outputs.function_id",
        "function_name": "$steps.upload-deploy-function.outputs.function_name",
        "function_sha": "$steps.upload-deploy-function.outputs.function_sha",
        "deploy_state": "$steps.check-deploy-status.outputs.deploy_state",
        "deploy_url": "$steps.check-deploy-status.outputs.deploy_url",
        "ssl_url": "$steps.check-deploy-status.outputs.ssl_url"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-configure-new-site",
      "summary": "Creates a new Netlify site within a specified account, configures its environment variables, and optionally provisions an SSL certificate.",
      "description": "Creates a new Netlify site within a specified account, configures its environment variables, and optionally provisions an SSL certificate.",
      "inputs": {
        "type": "object",
        "properties": {
          "configure_dns": {
            "type": "string"
          },
          "account_slug": {
            "type": "string"
          },
          "create-site_body": {
            "type": "object"
          },
          "account_id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "certificate": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "ca_certificates": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-site",
          "description": "Creates a new site within the specified account (team).",
          "operationId": "createSiteInTeam",
          "parameters": [
            {
              "name": "configure_dns",
              "in": "query",
              "value": "$inputs.configure_dns"
            },
            {
              "name": "account_slug",
              "in": "path",
              "value": "$inputs.account_slug"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-site_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "site_id": "$response.body",
            "account_id": "$response.body",
            "deploy_url": "$response.body",
            "ssl_url": "$response.body",
            "admin_url": "$response.body"
          }
        },
        {
          "stepId": "add-site-env-vars",
          "description": "Adds environment variables specifically for the newly created site.",
          "operationId": "createEnvVars",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "value": "$steps.create-site.outputs.account_id"
            },
            {
              "name": "site_id",
              "in": "query",
              "value": "$steps.create-site.outputs.site_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "account_id": "$steps.create-site.outputs.account_id",
              "site_id": "$steps.create-site.outputs.site_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "envVar_array": "$response.body"
          }
        },
        {
          "stepId": "provision-ssl-certificate",
          "description": "Provisions a Let's Encrypt SSL certificate for the site.",
          "operationId": "provisionSiteTLSCertificate",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$steps.create-site.outputs.site_id"
            },
            {
              "name": "certificate",
              "in": "query",
              "value": "$inputs.certificate"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "ca_certificates",
              "in": "query",
              "value": "$inputs.ca_certificates"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sniCertificate_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "site_id": "$steps.create-site.outputs.site_id",
        "account_id": "$steps.create-site.outputs.account_id",
        "deploy_url": "$steps.create-site.outputs.deploy_url",
        "ssl_url": "$steps.create-site.outputs.ssl_url",
        "admin_url": "$steps.create-site.outputs.admin_url",
        "envVar_array": "$steps.add-site-env-vars.outputs.envVar_array",
        "sniCertificate_details": "$steps.provision-ssl-certificate.outputs.sniCertificate_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-site-environment-variables",
      "summary": "Retrieves site information to get the account ID, then creates, updates, and deletes environment variables for that specific site.",
      "description": "Retrieves site information to get the account ID, then creates, updates, and deletes environment variables for that specific site.",
      "inputs": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string"
          },
          "feature_flags": {
            "type": "string"
          },
          "account_id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-site-info",
          "description": "Retrieve site details, including the associated account ID.",
          "operationId": "getSite",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            },
            {
              "name": "feature_flags",
              "in": "query",
              "value": "$inputs.feature_flags"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "site_id": "$response.body",
            "account_id": "$response.body"
          }
        },
        {
          "stepId": "create-site-env-var",
          "description": "Creates a new environment variable scoped to the site.",
          "operationId": "createEnvVars",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "value": "$steps.get-site-info.outputs.account_id"
            },
            {
              "name": "site_id",
              "in": "query",
              "value": "$steps.get-site-info.outputs.site_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "account_id": "$steps.get-site-info.outputs.account_id",
              "site_id": "$steps.get-site-info.outputs.site_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "created_envVar_array": "$response.body"
          }
        },
        {
          "stepId": "update-site-env-var-value",
          "description": "Updates the value of an existing environment variable for a specific context (e.g., production) on the site.",
          "operationId": "setEnvVarValue",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "value": "$steps.get-site-info.outputs.account_id"
            },
            {
              "name": "key",
              "in": "path",
              "value": "$steps.create-site-env-var.outputs.created_envVar_array.key"
            },
            {
              "name": "site_id",
              "in": "query",
              "value": "$steps.get-site-info.outputs.site_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "account_id": "$steps.get-site-info.outputs.account_id",
              "site_id": "$steps.get-site-info.outputs.site_id",
              "key": "$steps.create-site-env-var.outputs.created_envVar_array[0].key"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_envVar": "$response.body"
          }
        },
        {
          "stepId": "delete-site-env-var",
          "description": "Deletes an environment variable entirely from the site.",
          "operationId": "deleteEnvVar",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "value": "$steps.get-site-info.outputs.account_id"
            },
            {
              "name": "key",
              "in": "path",
              "value": "$steps.create-site-env-var.outputs.created_envVar_array.key"
            },
            {
              "name": "site_id",
              "in": "query",
              "value": "$steps.get-site-info.outputs.site_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code": "$response.body"
          }
        }
      ],
      "outputs": {
        "site_id": "$steps.get-site-info.outputs.site_id",
        "account_id": "$steps.get-site-info.outputs.account_id",
        "created_envVar_array": "$steps.create-site-env-var.outputs.created_envVar_array",
        "updated_envVar": "$steps.update-site-env-var-value.outputs.updated_envVar",
        "status_code": "$steps.delete-site-env-var.outputs.status_code"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "rollback-to-previous-deploy",
      "summary": "Identifies a previous successful deploy for a site and restores it as the current live version.",
      "description": "Identifies a previous successful deploy for a site and restores it as the current live version.",
      "inputs": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string"
          },
          "deploy-previews": {
            "type": "string"
          },
          "production": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "latest-published": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "per_page": {
            "type": "string"
          },
          "deploy_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-site-deploys",
          "description": "Lists previous deploys for the site to identify a target for rollback.",
          "operationId": "listSiteDeploys",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            },
            {
              "name": "deploy-previews",
              "in": "query",
              "value": "$inputs.deploy-previews"
            },
            {
              "name": "production",
              "in": "query",
              "value": "$inputs.production"
            },
            {
              "name": "state",
              "in": "query",
              "value": "$inputs.state"
            },
            {
              "name": "branch",
              "in": "query",
              "value": "$inputs.branch"
            },
            {
              "name": "latest-published",
              "in": "query",
              "value": "$inputs.latest-published"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "per_page",
              "in": "query",
              "value": "$inputs.per_page"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deploys_array": "$response.body"
          }
        },
        {
          "stepId": "restore-site-deploy",
          "description": "Restores a specific previous deploy, making it the live version.",
          "operationId": "restoreSiteDeploy",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$steps.list-site-deploys.outputs.deploys_array.site_id"
            },
            {
              "name": "deploy_id",
              "in": "path",
              "value": "$steps.list-site-deploys.outputs.deploys_array.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "new_deploy_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "deploys_array": "$steps.list-site-deploys.outputs.deploys_array",
        "new_deploy_details": "$steps.restore-site-deploy.outputs.new_deploy_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "trigger-build-via-hook-and-monitor",
      "summary": "Creates a build hook for a site, triggers it (externally), and then monitors the resulting build status.",
      "description": "Creates a build hook for a site, triggers it (externally), and then monitors the resulting build status.",
      "inputs": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string"
          },
          "create-build-hook_body": {
            "type": "object"
          },
          "page": {
            "type": "string"
          },
          "per_page": {
            "type": "string"
          },
          "build_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-build-hook",
          "description": "Creates a new build hook for a specific site and branch.",
          "operationId": "createSiteBuildHook",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-build-hook_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "hook_id": "$response.body",
            "hook_url": "$response.body",
            "hook_title": "$response.body"
          }
        },
        {
          "stepId": "list-site-builds",
          "description": "Lists builds for the site, typically polled after triggering the hook externally.",
          "operationId": "listSiteBuilds",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "per_page",
              "in": "query",
              "value": "$inputs.per_page"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "builds_array": "$response.body"
          }
        },
        {
          "stepId": "get-specific-build",
          "description": "Retrieves the details of a specific build identified from the list.",
          "operationId": "getSiteBuild",
          "parameters": [
            {
              "name": "build_id",
              "in": "path",
              "value": "$steps.list-site-builds.outputs.builds_array.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "build_details": "$response.body",
            "build_state": "$response.body",
            "build_error": "$response.body"
          }
        }
      ],
      "outputs": {
        "hook_id": "$steps.create-build-hook.outputs.hook_id",
        "hook_url": "$steps.create-build-hook.outputs.hook_url",
        "hook_title": "$steps.create-build-hook.outputs.hook_title",
        "builds_array": "$steps.list-site-builds.outputs.builds_array",
        "build_details": "$steps.get-specific-build.outputs.build_details",
        "build_state": "$steps.get-specific-build.outputs.build_state",
        "build_error": "$steps.get-specific-build.outputs.build_error"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-dns-records",
      "summary": "Creates a DNS zone (if needed, though creation endpoint provided), lists its records, adds a new record, and deletes an existing record.",
      "description": "Creates a DNS zone (if needed, though creation endpoint provided), lists its records, adds a new record, and deletes an existing record.",
      "inputs": {
        "type": "object",
        "properties": {
          "zone_id": {
            "type": "string"
          },
          "dns_record_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-dns-zone",
          "description": "Retrieves details for a specific DNS zone.",
          "operationId": "getDnsZone",
          "parameters": [
            {
              "name": "zone_id",
              "in": "path",
              "value": "$inputs.zone_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "zone_details": "$response.body",
            "zone_id": "$response.body"
          }
        },
        {
          "stepId": "list-dns-records",
          "description": "Lists all DNS records within the specified zone.",
          "operationId": "getDnsRecords",
          "parameters": [
            {
              "name": "zone_id",
              "in": "path",
              "value": "$steps.get-dns-zone.outputs.zone_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "dns_records_array": "$response.body"
          }
        },
        {
          "stepId": "create-dns-record",
          "description": "Creates a new DNS record within the zone.",
          "operationId": "createDnsRecord",
          "parameters": [
            {
              "name": "zone_id",
              "in": "path",
              "value": "$steps.get-dns-zone.outputs.zone_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "zone_id": "$steps.get-dns-zone.outputs.zone_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "new_dns_record": "$response.body"
          }
        },
        {
          "stepId": "delete-dns-record",
          "description": "Deletes a specific DNS record from the zone.",
          "operationId": "deleteDnsRecord",
          "parameters": [
            {
              "name": "zone_id",
              "in": "path",
              "value": "$steps.get-dns-zone.outputs.zone_id"
            },
            {
              "name": "dns_record_id",
              "in": "path",
              "value": "$steps.list-dns-records.outputs.dns_records_array.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code": "$response.body"
          }
        }
      ],
      "outputs": {
        "zone_details": "$steps.get-dns-zone.outputs.zone_details",
        "zone_id": "$steps.get-dns-zone.outputs.zone_id",
        "dns_records_array": "$steps.list-dns-records.outputs.dns_records_array",
        "new_dns_record": "$steps.create-dns-record.outputs.new_dns_record",
        "status_code": "$steps.delete-dns-record.outputs.status_code"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "setup-and-manage-ab-test-split-test",
      "summary": "Creates a new split test (A/B test) for different branches on a site, enables it, checks its status, and optionally disables it.",
      "description": "Creates a new split test (A/B test) for different branches on a site, enables it, checks its status, and optionally disables it.",
      "inputs": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string"
          },
          "create-split-test_body": {
            "type": "object"
          },
          "split_test_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-split-test",
          "description": "Defines and creates a new split test based on branch traffic allocation.",
          "operationId": "createSplitTest",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-split-test_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "split_test_id": "$response.body",
            "split_test_details": "$response.body"
          }
        },
        {
          "stepId": "enable-split-test",
          "description": "Activates the created split test, making it live.",
          "operationId": "enableSplitTest",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            },
            {
              "name": "split_test_id",
              "in": "path",
              "value": "$steps.create-split-test.outputs.split_test_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code": "$response.body"
          }
        },
        {
          "stepId": "get-split-test-status",
          "description": "Retrieves the current configuration and status of the split test.",
          "operationId": "getSplitTest",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            },
            {
              "name": "split_test_id",
              "in": "path",
              "value": "$steps.create-split-test.outputs.split_test_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "split_test_details": "$response.body",
            "active_status": "$response.body"
          }
        },
        {
          "stepId": "disable-split-test",
          "description": "Deactivates the split test, stopping the traffic splitting.",
          "operationId": "disableSplitTest",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            },
            {
              "name": "split_test_id",
              "in": "path",
              "value": "$steps.create-split-test.outputs.split_test_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code": "$response.body"
          }
        }
      ],
      "outputs": {
        "split_test_id": "$steps.create-split-test.outputs.split_test_id",
        "split_test_details": "$steps.get-split-test-status.outputs.split_test_details",
        "status_code": "$steps.disable-split-test.outputs.status_code",
        "active_status": "$steps.get-split-test-status.outputs.active_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "retrieve-form-submissions-for-a-site",
      "summary": "Finds the forms associated with a site and retrieves the submissions for a specific form.",
      "description": "Finds the forms associated with a site and retrieves the submissions for a specific form.",
      "inputs": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string"
          },
          "form_id": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "per_page": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-site-forms",
          "description": "Lists all forms detected for a given site.",
          "operationId": "listSiteForms",
          "parameters": [
            {
              "name": "site_id",
              "in": "path",
              "value": "$inputs.site_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "forms_array": "$response.body"
          }
        },
        {
          "stepId": "list-form-submissions",
          "description": "Retrieves submissions for a specific form identified in the previous step.",
          "operationId": "listFormSubmissions",
          "parameters": [
            {
              "name": "form_id",
              "in": "path",
              "value": "$steps.list-site-forms.outputs.forms_array.id"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "per_page",
              "in": "query",
              "value": "$inputs.per_page"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "submissions_array": "$response.body"
          }
        }
      ],
      "outputs": {
        "forms_array": "$steps.list-site-forms.outputs.forms_array",
        "submissions_array": "$steps.list-form-submissions.outputs.submissions_array"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}