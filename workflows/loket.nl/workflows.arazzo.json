{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/loket.nl/main/V2/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "employee-onboarding-from-concept",
      "summary": "This workflow facilitates the complete process of onboarding a new employee, starting from a preliminary 'concept employee' record and culminating in their full activation within the Loket.nl system. It includes creating the initial record, optionally updating it with more details, and finally promoting it to an active employee.",
      "description": "This workflow facilitates the complete process of onboarding a new employee, starting from a preliminary 'concept employee' record and culminating in their full activation within the Loket.nl system. It includes creating the initial record, optionally updating it with more details, and finally promoting it to an active employee.",
      "inputs": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string"
          },
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "uniqueName": {
            "type": "string"
          },
          "employeeData": {
            "type": "string"
          },
          "employmentData": {
            "type": "string"
          },
          "workingHoursData": {
            "type": "string"
          },
          "wageData": {
            "type": "string"
          },
          "organizationalEntityData": {
            "type": "string"
          },
          "socialSecurityData": {
            "type": "string"
          },
          "fiscalData": {
            "type": "string"
          },
          "otherPayrollVariablesData": {
            "type": "string"
          },
          "conceptEmployeeId": {
            "type": "string"
          },
          "X-ValidateOnly": {
            "type": "string"
          },
          "employeeId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-concept-employee",
          "description": "Creates a preliminary employee record (concept employee) with initial data. This allows for partial data entry before full employee creation.",
          "operationId": "PostConceptEmployeeByEmployerId",
          "parameters": [
            {
              "name": "employerId",
              "in": "path",
              "value": "$inputs.employerId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "uniqueName": "$inputs.uniqueName",
              "employeeData": "$inputs.employeeData",
              "employmentData": "$inputs.employmentData",
              "workingHoursData": "$inputs.workingHoursData",
              "wageData": "$inputs.wageData",
              "organizationalEntityData": "$inputs.organizationalEntityData",
              "socialSecurityData": "$inputs.socialSecurityData",
              "fiscalData": "$inputs.fiscalData",
              "otherPayrollVariablesData": "$inputs.otherPayrollVariablesData"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "conceptEmployeeId": "$response.body#/conceptEmployeeId"
          }
        },
        {
          "stepId": "update-concept-employee-details",
          "description": "Updates the details of an existing concept employee record. This step is optional if all necessary data was provided during creation.",
          "operationId": "PutConceptEmployeeByConceptEmployeeId",
          "parameters": [
            {
              "name": "conceptEmployeeId",
              "in": "path",
              "value": "$steps.create-concept-employee.outputs.conceptEmployeeId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "conceptEmployeeId": "$steps.create-concept-employee.outputs.conceptEmployeeId",
              "uniqueName": "$inputs.uniqueName",
              "employeeData": "$inputs.employeeData",
              "employmentData": "$inputs.employmentData",
              "workingHoursData": "$inputs.workingHoursData",
              "wageData": "$inputs.wageData",
              "organizationalEntityData": "$inputs.organizationalEntityData",
              "socialSecurityData": "$inputs.socialSecurityData",
              "fiscalData": "$inputs.fiscalData",
              "otherPayrollVariablesData": "$inputs.otherPayrollVariablesData"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "conceptEmployeeId": "$response.body#/conceptEmployeeId"
          }
        },
        {
          "stepId": "convert-concept-to-active-employee",
          "description": "Promotes a concept employee to an active employee, performing necessary validations and creating full employee and employment records.",
          "operationId": "PatchConvertToEmployeeByConceptEmployeeId",
          "parameters": [
            {
              "name": "conceptEmployeeId",
              "in": "path",
              "value": "$steps.update-concept-employee-details.outputs.conceptEmployeeId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "X-ValidateOnly",
              "in": "header",
              "value": "$inputs.X-ValidateOnly"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "employeeId": "$response.body#/employeeId",
            "employmentId": "$response.body#/employmentId"
          }
        },
        {
          "stepId": "get-employee-details",
          "description": "Retrieves the full details of the newly activated employee to confirm successful onboarding.",
          "operationId": "GetEmployeeByEmployeeId",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "value": "$steps.convert-concept-to-active-employee.outputs.employeeId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "employeeNumber": "$response.body#/employeeNumber",
            "personalDetails": "$response.body#/personalDetails",
            "contactInformation": "$response.body#/contactInformation",
            "identityDocument": "$response.body#/identityDocument",
            "travel": "$response.body#/travel",
            "address": "$response.body#/address",
            "deviatingPostalAddress": "$response.body#/deviatingPostalAddress",
            "exclusionFromAbsenceStatus": "$response.body#/exclusionFromAbsenceStatus",
            "statusEmployeeSelfService": "$response.body#/statusEmployeeSelfService",
            "revokeEmployeeSelfServiceAccessOn": "$response.body#/revokeEmployeeSelfServiceAccessOn"
          }
        }
      ],
      "outputs": {
        "conceptEmployeeId": "$steps.update-concept-employee-details.outputs.conceptEmployeeId",
        "employeeId": "$steps.convert-concept-to-active-employee.outputs.employeeId",
        "employmentId": "$steps.convert-concept-to-active-employee.outputs.employmentId",
        "id": "$steps.get-employee-details.outputs.id",
        "employeeNumber": "$steps.get-employee-details.outputs.employeeNumber",
        "personalDetails": "$steps.get-employee-details.outputs.personalDetails",
        "contactInformation": "$steps.get-employee-details.outputs.contactInformation",
        "identityDocument": "$steps.get-employee-details.outputs.identityDocument",
        "travel": "$steps.get-employee-details.outputs.travel",
        "address": "$steps.get-employee-details.outputs.address",
        "deviatingPostalAddress": "$steps.get-employee-details.outputs.deviatingPostalAddress",
        "exclusionFromAbsenceStatus": "$steps.get-employee-details.outputs.exclusionFromAbsenceStatus",
        "statusEmployeeSelfService": "$steps.get-employee-details.outputs.statusEmployeeSelfService",
        "revokeEmployeeSelfServiceAccessOn": "$steps.get-employee-details.outputs.revokeEmployeeSelfServiceAccessOn"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-employee-leave-requests",
      "summary": "This workflow covers the process of an employee requesting leave and the subsequent review and approval/rejection by an authorized party.",
      "description": "This workflow covers the process of an employee requesting leave and the subsequent review and approval/rejection by an authorized party.",
      "inputs": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "employerId": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "orderBy": {
            "type": "string"
          },
          "pageNumber": {
            "type": "string"
          },
          "pageSize": {
            "type": "string"
          },
          "employmentId": {
            "type": "string"
          },
          "numberOfUnits": {
            "type": "string"
          },
          "isAccrual": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "commentEmployee": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-available-leave-types",
          "description": "Retrieves a list of all available leave types for a given employer, which can be used when creating a leave request.",
          "operationId": "GetLeaveTypesByEmployerId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "employerId",
              "in": "path",
              "value": "$inputs.employerId"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "leaveTypes": "$response.body#/leaveTypes"
          }
        },
        {
          "stepId": "create-leave-request",
          "description": "Allows an employee to submit a new leave request for a specific employment.",
          "operationId": "PostLeaveRequestByEmploymentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "leaveType": "$steps.get-available-leave-types.outputs.leaveTypes[0].leaveType.key",
              "numberOfUnits": "$inputs.numberOfUnits",
              "isAccrual": "$inputs.isAccrual",
              "startDate": "$inputs.startDate",
              "endDate": "$inputs.endDate",
              "commentEmployee": "$inputs.commentEmployee"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "leaveRequestId": "$response.body#/leaveRequestId"
          }
        },
        {
          "stepId": "review-leave-request",
          "description": "Changes the status of one or more leave requests (e.g., accept, reject, or revoke) based on review.",
          "operationId": "PatchLeaveRequestsByLeaveRequestIds",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "leaveRequestPatch": "$steps.get-pending-leave-requests.outputs.pendingLeaveRequests"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "request_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "leaveTypes": "$steps.get-available-leave-types.outputs.leaveTypes",
        "leaveRequestId": "$steps.create-leave-request.outputs.leaveRequestId",
        "request_data": "$steps.review-leave-request.outputs.request_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-variable-payroll-data",
      "summary": "This workflow focuses on the process of inputting and managing variable payroll data for employees within specific payroll periods, which is crucial for accurate salary calculations.",
      "description": "This workflow focuses on the process of inputting and managing variable payroll data for employees within specific payroll periods, which is crucial for accurate salary calculations.",
      "inputs": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "payrollAdministrationId": {
            "type": "string"
          },
          "employmentId": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "orderBy": {
            "type": "string"
          },
          "pageNumber": {
            "type": "string"
          },
          "pageSize": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "shift": {
            "type": "string"
          },
          "payslipType": {
            "type": "string"
          },
          "payslipText": {
            "type": "string"
          },
          "distributionUnit": {
            "type": "string"
          },
          "costCenter": {
            "type": "string"
          },
          "costUnit": {
            "type": "string"
          },
          "processingMethod": {
            "type": "string"
          },
          "payrollComponents": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-payroll-periods",
          "description": "Retrieves a list of all available payroll periods for a given payroll administration.",
          "operationId": "GetPayrollPeriodsByPayrollAdministrationId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "payrollAdministrationId",
              "in": "path",
              "value": "$inputs.payrollAdministrationId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "payrollPeriods": "$response.body#/payrollPeriods"
          }
        },
        {
          "stepId": "update-individual-payroll-period-data",
          "description": "Inserts or updates payroll period data for a single employee's employment.",
          "operationId": "PatchPayrollPeriodDataByEmploymentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "payrollPeriod": "$steps.get-payroll-periods.outputs.payrollPeriods[0].payrollPeriod",
              "id": "$inputs.id",
              "shift": "$inputs.shift",
              "payslipType": "$inputs.payslipType",
              "payslipText": "$inputs.payslipText",
              "distributionUnit": "$inputs.distributionUnit",
              "costCenter": "$inputs.costCenter",
              "costUnit": "$inputs.costUnit",
              "processingMethod": "$inputs.processingMethod",
              "payrollComponents": "$inputs.payrollComponents"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "data_data": "$response.body"
          }
        },
        {
          "stepId": "get-current-payroll-period-data",
          "description": "Retrieves the currently recorded payroll period data for a specific employment to verify entries.",
          "operationId": "GetPayrollPeriodDataByEmploymentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "payrollPeriod": "$response.body#/payrollPeriod",
            "shift": "$response.body#/shift",
            "payslipType": "$response.body#/payslipType",
            "payslipText": "$response.body#/payslipText",
            "distributionUnit": "$response.body#/distributionUnit",
            "costCenter": "$response.body#/costCenter",
            "costUnit": "$response.body#/costUnit",
            "payrollComponents": "$response.body#/payrollComponents"
          }
        }
      ],
      "outputs": {
        "payrollPeriods": "$steps.get-payroll-periods.outputs.payrollPeriods",
        "data_data": "$steps.update-individual-payroll-period-data.outputs.data_data",
        "id": "$steps.get-current-payroll-period-data.outputs.id",
        "payrollPeriod": "$steps.get-current-payroll-period-data.outputs.payrollPeriod",
        "shift": "$steps.get-current-payroll-period-data.outputs.shift",
        "payslipType": "$steps.get-current-payroll-period-data.outputs.payslipType",
        "payslipText": "$steps.get-current-payroll-period-data.outputs.payslipText",
        "distributionUnit": "$steps.get-current-payroll-period-data.outputs.distributionUnit",
        "costCenter": "$steps.get-current-payroll-period-data.outputs.costCenter",
        "costUnit": "$steps.get-current-payroll-period-data.outputs.costUnit",
        "payrollComponents": "$steps.get-current-payroll-period-data.outputs.payrollComponents"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "document-generation-and-e-signature",
      "summary": "This workflow automates the process of generating documents from templates for employees, storing them in their dossier, and initiating an electronic signature process.",
      "description": "This workflow automates the process of generating documents from templates for employees, storing them in their dossier, and initiating an electronic signature process.",
      "inputs": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string"
          },
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "orderBy": {
            "type": "string"
          },
          "pageNumber": {
            "type": "string"
          },
          "pageSize": {
            "type": "string"
          },
          "employmentId": {
            "type": "string"
          },
          "documentId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "year": {
            "type": "string"
          },
          "attribute": {
            "type": "string"
          },
          "dateOfAlert": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "templateEmployerId": {
            "type": "string"
          },
          "referenceDate": {
            "type": "string"
          },
          "initiate-document-signature_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-document-templates",
          "description": "Retrieves a list of available document templates for an employer.",
          "operationId": "GetDocumentTemplatesByEmployerId",
          "parameters": [
            {
              "name": "employerId",
              "in": "path",
              "value": "$inputs.employerId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "templates": "$response.body#/templates"
          }
        },
        {
          "stepId": "generate-document-preview",
          "description": "Generates a preview of a document based on a template and employee data, without saving it.",
          "operationId": "PostGenerateDocumentPreviewByEmploymentIdAndDocumentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "documentId",
              "in": "path",
              "value": "$steps.get-document-templates.outputs.templates.qwoaterDocumentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "documentId": "$steps.get-document-templates.outputs.templates[0].qwoaterDocumentId",
              "description": "$inputs.description",
              "year": "$inputs.year",
              "attribute": "$inputs.attribute",
              "dateOfAlert": "$inputs.dateOfAlert",
              "filename": "$inputs.filename",
              "templateEmployerId": "$inputs.templateEmployerId",
              "referenceDate": "$inputs.referenceDate"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_content": "$response.body#/file_content"
          }
        },
        {
          "stepId": "generate-and-store-document",
          "description": "Generates a document from a template, populates it with employee data, and stores it in the employee's dossier.",
          "operationId": "PostGenerateDocumentByEmploymentIdAndDocumentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "documentId",
              "in": "path",
              "value": "$steps.get-document-templates.outputs.templates.qwoaterDocumentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "documentId": "$steps.get-document-templates.outputs.templates[0].qwoaterDocumentId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "document_data": "$response.body"
          }
        },
        {
          "stepId": "initiate-document-signature",
          "description": "Initiates an electronic signature request for a document stored in the employee's dossier.",
          "operationId": "PostInitiateSignatureByEmploymentIdAndDocumentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "documentId",
              "in": "path",
              "value": "$inputs.documentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": "$inputs.initiate-document-signature_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "signDocumentStatusObject": "$response.body#/signDocumentStatusObject"
          }
        },
        {
          "stepId": "get-signature-status",
          "description": "Retrieves the current status of a document's signature process.",
          "operationId": "GetSignatureByEmploymentIdAndDocumentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "documentId",
              "in": "path",
              "value": "$inputs.documentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "signatureStatusObject": "$response.body#/signatureStatusObject"
          }
        }
      ],
      "outputs": {
        "templates": "$steps.get-document-templates.outputs.templates",
        "file_content": "$steps.generate-document-preview.outputs.file_content",
        "document_data": "$steps.generate-and-store-document.outputs.document_data",
        "signDocumentStatusObject": "$steps.initiate-document-signature.outputs.signDocumentStatusObject",
        "signatureStatusObject": "$steps.get-signature-status.outputs.signatureStatusObject"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "payroll-results-reporting",
      "summary": "This workflow focuses on retrieving various payroll-related reports and data for analysis and compliance, including detailed payroll run results and official wage sheets.",
      "description": "This workflow focuses on retrieving various payroll-related reports and data for analysis and compliance, including detailed payroll run results and official wage sheets.",
      "inputs": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string"
          },
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "orderBy": {
            "type": "string"
          },
          "pageNumber": {
            "type": "string"
          },
          "pageSize": {
            "type": "string"
          },
          "payrollAdministrationId": {
            "type": "string"
          },
          "payrollrunId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-payroll-administrations",
          "description": "Lists all payroll administrations for a given employer.",
          "operationId": "GetPayrollAdministrationsByEmployerId",
          "parameters": [
            {
              "name": "employerId",
              "in": "path",
              "value": "$inputs.employerId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "payrollAdministrations": "$response.body#/payrollAdministrations"
          }
        },
        {
          "stepId": "get-payroll-runs",
          "description": "Retrieves a list of all payroll runs for a specific payroll administration.",
          "operationId": "GetPayrollRunsByPayrollAdministrationId",
          "parameters": [
            {
              "name": "payrollAdministrationId",
              "in": "path",
              "value": "$steps.get-payroll-administrations.outputs.payrollAdministrations.id"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "payrollRuns": "$response.body#/payrollRuns"
          }
        },
        {
          "stepId": "get-payroll-run-results",
          "description": "Fetches detailed payroll results for a specific payroll run, including data per employment.",
          "operationId": "GetPayrollRunResultsByPayrollRunId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "payrollrunId",
              "in": "path",
              "value": "$steps.get-payroll-runs.outputs.payrollRuns.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "payrollRunResults": "$response.body#/payrollRunResults"
          }
        },
        {
          "stepId": "download-wage-sheets",
          "description": "Downloads the official wage sheets for a payroll run in PDF or XLSX format.",
          "operationId": "GetWageSheetsByPayrollRunId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "payrollrunId",
              "in": "path",
              "value": "$steps.get-payroll-runs.outputs.payrollRuns.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_content": "$response.body#/file_content"
          }
        },
        {
          "stepId": "download-payroll-control-register",
          "description": "Downloads the payroll control register report for a specific payroll run.",
          "operationId": "GetPayrollControlRegisterByPayrollRunId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "payrollrunId",
              "in": "path",
              "value": "$steps.get-payroll-runs.outputs.payrollRuns.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_content": "$response.body#/file_content"
          }
        }
      ],
      "outputs": {
        "payrollAdministrations": "$steps.get-payroll-administrations.outputs.payrollAdministrations",
        "payrollRuns": "$steps.get-payroll-runs.outputs.payrollRuns",
        "payrollRunResults": "$steps.get-payroll-run-results.outputs.payrollRunResults",
        "file_content": "$steps.download-payroll-control-register.outputs.file_content"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "end-to-end-payroll-processing",
      "summary": "This workflow outlines the sequence of steps for performing a payroll run, from checking the process overview to initiating the run, monitoring its status, approving it, and finally generating relevant reports and tax returns.",
      "description": "This workflow outlines the sequence of steps for performing a payroll run, from checking the process overview to initiating the run, monitoring its status, approving it, and finally generating relevant reports and tax returns.",
      "inputs": {
        "type": "object",
        "properties": {
          "payrollAdministrationId": {
            "type": "string"
          },
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "payrollPeriodIdStart": {
            "type": "string"
          },
          "payrollPeriodIdEnd": {
            "type": "string"
          },
          "payrollrunId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-payroll-process-overview",
          "description": "Retrieves the current status and possible actions for payroll, journal, and tax return processes for a given payroll administration and period.",
          "operationId": "GetPayrollProcessOverviewByPayrollAdministrationId",
          "parameters": [
            {
              "name": "payrollAdministrationId",
              "in": "path",
              "value": "$inputs.payrollAdministrationId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "payrollPeriodIdStart",
              "in": "query",
              "value": "$inputs.payrollPeriodIdStart"
            },
            {
              "name": "payrollPeriodIdEnd",
              "in": "query",
              "value": "$inputs.payrollPeriodIdEnd"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "payrollProcessOverview": "$response.body#/payrollProcessOverview"
          }
        },
        {
          "stepId": "initiate-payroll-run",
          "description": "Initiates the payroll calculation process for a specified payroll administration and period.",
          "operationId": "PostInitiatePayrollRunByPayrollAdministrationId",
          "parameters": [
            {
              "name": "payrollAdministrationId",
              "in": "path",
              "value": "$steps.get-payroll-process-overview.outputs.payrollProcessOverview.payrollPeriod.payrollPeriodId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "payrollAdministrationId": "$steps.get-payroll-process-overview.outputs.payrollProcessOverview[0].payrollPeriod.payrollPeriodId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "payrollRunId": "$response.body#/payrollRunId"
          }
        },
        {
          "stepId": "get-payroll-run-status",
          "description": "Checks the current status of a specific payroll run to monitor its progress.",
          "operationId": "GetPayrollRunByPayrollRunId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "payrollrunId",
              "in": "path",
              "value": "$steps.initiate-payroll-run.outputs.payrollRunId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "payrollRunStatus": "$response.body#/payrollRunStatus"
          }
        },
        {
          "stepId": "approve-payroll-run",
          "description": "Approves one or more payroll runs, finalizing the payroll calculation and making results available.",
          "operationId": "PatchPayrollrunsByPayrollRunIds",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "payrollrunStatusPatch": "$steps.initiate-payroll-run.outputs.payrollRunId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "run_data": "$response.body"
          }
        },
        {
          "stepId": "download-payslips",
          "description": "Downloads the payslips generated by a specific payroll run as a PDF file for distribution.",
          "operationId": "GetPayslipsByPayrollRunId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "payrollrunId",
              "in": "path",
              "value": "$steps.initiate-payroll-run.outputs.payrollRunId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_content": "$response.body#/file_content"
          }
        },
        {
          "stepId": "initiate-payroll-tax-return",
          "description": "Initiates the creation of a payroll tax return for a given payroll administration and period, a necessary step for tax compliance.",
          "operationId": "PostInitiatePayrollTaxReturnByPayrollAdministrationId",
          "parameters": [
            {
              "name": "payrollAdministrationId",
              "in": "path",
              "value": "$steps.get-payroll-process-overview.outputs.payrollProcessOverview.payrollPeriod.payrollPeriodId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2024-09-23",
            "payload": {
              "payrollAdministrationId": "$steps.get-payroll-process-overview.outputs.payrollProcessOverview[0].payrollPeriod.payrollPeriodId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "payrollTaxReturnId": "$response.body#/payrollTaxReturnId"
          }
        },
        {
          "stepId": "approve-payroll-tax-return",
          "description": "Approves one or more payroll tax returns, making them ready for submission to tax authorities.",
          "operationId": "PatchPayrollTaxReturnsByPayrollTaxReturnIds",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "payrollTaxReturnPatch": "$steps.initiate-payroll-tax-return.outputs.payrollTaxReturnId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "return_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "payrollProcessOverview": "$steps.get-payroll-process-overview.outputs.payrollProcessOverview",
        "payrollRunId": "$steps.initiate-payroll-run.outputs.payrollRunId",
        "payrollRunStatus": "$steps.get-payroll-run-status.outputs.payrollRunStatus",
        "run_data": "$steps.approve-payroll-run.outputs.run_data",
        "file_content": "$steps.download-payslips.outputs.file_content",
        "payrollTaxReturnId": "$steps.initiate-payroll-tax-return.outputs.payrollTaxReturnId",
        "return_data": "$steps.approve-payroll-tax-return.outputs.return_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "employee-document-management",
      "summary": "This workflow covers the lifecycle of managing documents within an employee's digital dossier, including uploading, retrieving, updating metadata, and downloading the actual files.",
      "description": "This workflow covers the lifecycle of managing documents within an employee's digital dossier, including uploading, retrieving, updating metadata, and downloading the actual files.",
      "inputs": {
        "type": "object",
        "properties": {
          "employmentId": {
            "type": "string"
          },
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "upload-employee-document_body": {
            "type": "object"
          },
          "filter": {
            "type": "string"
          },
          "orderBy": {
            "type": "string"
          },
          "pageNumber": {
            "type": "string"
          },
          "pageSize": {
            "type": "string"
          },
          "documentId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "year": {
            "type": "string"
          },
          "attribute": {
            "type": "string"
          },
          "dateOfAlert": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-employee-document",
          "description": "Uploads a new document to a specific employee's employment dossier.",
          "operationId": "PostDocumentByEmploymentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": "$inputs.upload-employee-document_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "document_data": "$response.body"
          }
        },
        {
          "stepId": "get-employee-documents",
          "description": "Retrieves a list of all documents stored in an employee's employment dossier.",
          "operationId": "GetDocumentsByEmploymentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$inputs.employmentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "documents": "$response.body#/documents"
          }
        },
        {
          "stepId": "update-employee-document-details",
          "description": "Modifies the metadata (e.g., description, category) of an existing document in the employee dossier.",
          "operationId": "PutDocumentByEmploymentIdAndDocumentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$steps.get-employee-documents.outputs.documents.employmentId"
            },
            {
              "name": "documentId",
              "in": "path",
              "value": "$steps.get-employee-documents.outputs.documents.qwoaterDocumentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "employmentId": "$steps.get-employee-documents.outputs.documents[0].employmentId",
              "documentId": "$steps.get-employee-documents.outputs.documents[0].qwoaterDocumentId",
              "description": "$inputs.description",
              "category": "$inputs.category",
              "year": "$inputs.year",
              "attribute": "$inputs.attribute",
              "dateOfAlert": "$inputs.dateOfAlert"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "details_data": "$response.body"
          }
        },
        {
          "stepId": "download-employee-document",
          "description": "Downloads the actual file content of a specific document from the employee dossier.",
          "operationId": "GetDocumentByEmploymentIdAndDocumentId",
          "parameters": [
            {
              "name": "employmentId",
              "in": "path",
              "value": "$steps.get-employee-documents.outputs.documents.employmentId"
            },
            {
              "name": "documentId",
              "in": "path",
              "value": "$steps.get-employee-documents.outputs.documents.qwoaterDocumentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_content": "$response.body#/file_content"
          }
        }
      ],
      "outputs": {
        "document_data": "$steps.upload-employee-document.outputs.document_data",
        "documents": "$steps.get-employee-documents.outputs.documents",
        "details_data": "$steps.update-employee-document-details.outputs.details_data",
        "file_content": "$steps.download-employee-document.outputs.file_content"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "provider-user-management",
      "summary": "This workflow describes how to manage user accounts at the provider level, including listing existing users, creating new ones, updating their details, and managing their access to the Loket.nl platform.",
      "description": "This workflow describes how to manage user accounts at the provider level, including listing existing users, creating new ones, updating their details, and managing their access to the Loket.nl platform.",
      "inputs": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "orderBy": {
            "type": "string"
          },
          "pageNumber": {
            "type": "string"
          },
          "pageSize": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "loginMethod": {
            "type": "string"
          },
          "personalDetails": {
            "type": "string"
          },
          "contactInformation": {
            "type": "string"
          },
          "hasAccessToPayrollingTestData": {
            "type": "string"
          },
          "azureActiveDirectory": {
            "type": "string"
          },
          "ssoAccount": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userSpecifiedRole": {
            "type": "string"
          },
          "userCustomSpecifiedRole": {
            "type": "string"
          },
          "accessStatus": {
            "type": "string"
          },
          "hasMultiFactorAuthentication": {
            "type": "string"
          },
          "twoFactorAuthenticationRequired": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "hasIntegrations": {
            "type": "string"
          },
          "hasConnectedApplications": {
            "type": "string"
          },
          "hasAuthorisationsOnUserLevel": {
            "type": "string"
          },
          "dateTimeLastLogin": {
            "type": "string"
          },
          "dateTimeCreation": {
            "type": "string"
          },
          "authorisationSet": {
            "type": "string"
          },
          "action": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-provider-details",
          "description": "Retrieves details of the provider associated with the current user.",
          "operationId": "GetProvidersByUser",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "providerId": "$response.body#/providerId"
          }
        },
        {
          "stepId": "list-provider-users",
          "description": "Fetches a list of all users associated with a specific provider.",
          "operationId": "GetProviderUsersByProviderId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "providerId",
              "in": "path",
              "value": "$steps.get-provider-details.outputs.providerId"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "providerUsers": "$response.body#/providerUsers"
          }
        },
        {
          "stepId": "create-provider-user",
          "description": "Creates a new provider-level user account.",
          "operationId": "PostProviderUserByProviderId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "providerId",
              "in": "path",
              "value": "$steps.get-provider-details.outputs.providerId"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "providerId": "$steps.get-provider-details.outputs.providerId",
              "loginMethod": "$inputs.loginMethod",
              "personalDetails": "$inputs.personalDetails",
              "contactInformation": "$inputs.contactInformation",
              "hasAccessToPayrollingTestData": "$inputs.hasAccessToPayrollingTestData",
              "azureActiveDirectory": "$inputs.azureActiveDirectory",
              "ssoAccount": "$inputs.ssoAccount"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "userId": "$response.body#/userId"
          }
        },
        {
          "stepId": "update-provider-user-details",
          "description": "Updates the personal and contact information for an existing provider user.",
          "operationId": "PutProviderUserByUserId",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "value": "$steps.create-provider-user.outputs.userId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "userId": "$steps.create-provider-user.outputs.userId",
              "loginMethod": "$inputs.loginMethod",
              "personalDetails": "$inputs.personalDetails",
              "contactInformation": "$inputs.contactInformation",
              "userSpecifiedRole": "$inputs.userSpecifiedRole",
              "userCustomSpecifiedRole": "$inputs.userCustomSpecifiedRole",
              "accessStatus": "$inputs.accessStatus",
              "hasMultiFactorAuthentication": "$inputs.hasMultiFactorAuthentication",
              "twoFactorAuthenticationRequired": "$inputs.twoFactorAuthenticationRequired",
              "azureActiveDirectory": "$inputs.azureActiveDirectory",
              "userName": "$inputs.userName",
              "hasIntegrations": "$inputs.hasIntegrations",
              "hasConnectedApplications": "$inputs.hasConnectedApplications",
              "hasAuthorisationsOnUserLevel": "$inputs.hasAuthorisationsOnUserLevel",
              "dateTimeLastLogin": "$inputs.dateTimeLastLogin",
              "dateTimeCreation": "$inputs.dateTimeCreation",
              "authorisationSet": "$inputs.authorisationSet"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "details_data": "$response.body"
          }
        },
        {
          "stepId": "manage-provider-user-access",
          "description": "Modifies a provider user's access status to the Loket.nl platform (e.g., revoke or reinstate access).",
          "operationId": "PatchManageProviderUserLoketAccessByUserId",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "value": "$steps.create-provider-user.outputs.userId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "userId": "$steps.create-provider-user.outputs.userId",
              "action": "$inputs.action"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "access_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "providerId": "$steps.get-provider-details.outputs.providerId",
        "providerUsers": "$steps.list-provider-users.outputs.providerUsers",
        "userId": "$steps.create-provider-user.outputs.userId",
        "details_data": "$steps.update-provider-user-details.outputs.details_data",
        "access_data": "$steps.manage-provider-user-access.outputs.access_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-employer-organizational-structure-departments",
      "summary": "This workflow allows for the management of organizational departments within an employer's structure, including listing existing departments, creating new ones, and updating their details.",
      "description": "This workflow allows for the management of organizational departments within an employer's structure, including listing existing departments, creating new ones, and updating their details.",
      "inputs": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string"
          },
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "orderBy": {
            "type": "string"
          },
          "pageNumber": {
            "type": "string"
          },
          "pageSize": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subDepartmentOf": {
            "type": "string"
          },
          "emailLeaveRequest": {
            "type": "string"
          },
          "departmentId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-employer-details",
          "description": "Retrieves basic details of an employer, necessary to get the employer ID for subsequent operations.",
          "operationId": "GetEmployerByEmployerId",
          "parameters": [
            {
              "name": "employerId",
              "in": "path",
              "value": "$inputs.employerId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "employerId": "$response.body#/employerId"
          }
        },
        {
          "stepId": "list-employer-departments",
          "description": "Fetches a list of all departments configured for a specific employer.",
          "operationId": "GetDepartmentsByEmployerId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "employerId",
              "in": "path",
              "value": "$steps.get-employer-details.outputs.employerId"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "departments": "$response.body#/departments"
          }
        },
        {
          "stepId": "create-new-department",
          "description": "Creates a new department under the specified employer.",
          "operationId": "PostDepartmentByEmployerId",
          "parameters": [
            {
              "name": "employerId",
              "in": "path",
              "value": "$steps.get-employer-details.outputs.employerId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "employerId": "$steps.get-employer-details.outputs.employerId",
              "code": "$inputs.code",
              "description": "$inputs.description",
              "subDepartmentOf": "$inputs.subDepartmentOf",
              "emailLeaveRequest": "$inputs.emailLeaveRequest"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "departmentId": "$response.body#/departmentId"
          }
        },
        {
          "stepId": "update-department-details",
          "description": "Modifies the details of an existing department.",
          "operationId": "PutDepartmentByDepartmentId",
          "parameters": [
            {
              "name": "departmentId",
              "in": "path",
              "value": "$steps.create-new-department.outputs.departmentId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "departmentId": "$steps.create-new-department.outputs.departmentId",
              "description": "$inputs.description",
              "subDepartmentOf": "$inputs.subDepartmentOf",
              "emailLeaveRequest": "$inputs.emailLeaveRequest"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "details_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "employerId": "$steps.get-employer-details.outputs.employerId",
        "departments": "$steps.list-employer-departments.outputs.departments",
        "departmentId": "$steps.create-new-department.outputs.departmentId",
        "details_data": "$steps.update-department-details.outputs.details_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "employee-self-service-access-management",
      "summary": "This workflow provides the functionality to manage an employee's access to the self-service portal (Werknemerloket), including checking their current status and enabling/disabling access.",
      "description": "This workflow provides the functionality to manage an employee's access to the self-service portal (Werknemerloket), including checking their current status and enabling/disabling access.",
      "inputs": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string"
          },
          "Authorization": {
            "type": "string"
          },
          "Accept": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "orderBy": {
            "type": "string"
          },
          "pageNumber": {
            "type": "string"
          },
          "pageSize": {
            "type": "string"
          },
          "X-ReportInput": {
            "type": "string"
          },
          "employeeId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-employees-for-employer",
          "description": "Retrieves a list of all employees for a given employer.",
          "operationId": "GetEmployeesByEmployerId",
          "parameters": [
            {
              "name": "employerId",
              "in": "path",
              "value": "$inputs.employerId"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            },
            {
              "name": "X-ReportInput",
              "in": "header",
              "value": "$inputs.X-ReportInput"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "employees": "$response.body#/employees"
          }
        },
        {
          "stepId": "get-employee-self-service-status",
          "description": "Checks the current self-service access status for a specific employee.",
          "operationId": "GetEmployeeSelfServiceByEmployeeId",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "value": "$steps.get-employees-for-employer.outputs.employees.id"
            },
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "orderBy",
              "in": "query",
              "value": "$inputs.orderBy"
            },
            {
              "name": "pageNumber",
              "in": "query",
              "value": "$inputs.pageNumber"
            },
            {
              "name": "pageSize",
              "in": "query",
              "value": "$inputs.pageSize"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "essStatus": "$response.body#/essStatus",
            "hasTwoFactorAuthentication": "$response.body#/hasTwoFactorAuthentication"
          }
        },
        {
          "stepId": "update-employee-self-service-access",
          "description": "Modifies the self-service access status for one or more employees (e.g., send invite, revoke access).",
          "operationId": "PatchEmployeeSelfServiceAccessByEmployeeId",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "Accept",
              "in": "header",
              "value": "$inputs.Accept"
            }
          ],
          "requestBody": {
            "contentType": "application/json;version=2018-01-01",
            "payload": {
              "employeeSelfServicePatch": "$steps.get-employees-for-employer.outputs.employees"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "access_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "employees": "$steps.get-employees-for-employer.outputs.employees",
        "essStatus": "$steps.get-employee-self-service-status.outputs.essStatus",
        "hasTwoFactorAuthentication": "$steps.get-employee-self-service-status.outputs.hasTwoFactorAuthentication",
        "access_data": "$steps.update-employee-self-service-access.outputs.access_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
