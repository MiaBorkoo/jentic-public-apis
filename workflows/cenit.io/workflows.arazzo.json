{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/cenit.io/main/v1/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "create-complete-outbound-data-flow-event-triggered",
      "summary": "Sets up a full integration flow where changes to an internal data type trigger a data transformation and an outbound API call to an external system via a configured connection.",
      "description": "Sets up a full integration flow where changes to an internal data type trigger a data transformation and an outbound API call to an external system via a configured connection.",
      "steps": [
        {
          "stepId": "create-namespace",
          "description": "Create a namespace to organize integration components.",
          "operationPath": "openapi_source#/paths/~1setup~1namespace~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "namespace_id": "$response.body"
          }
        },
        {
          "stepId": "create-source-data-type",
          "description": "Define the structure (JSON Schema) of the source data that will trigger the flow.",
          "operationPath": "openapi_source#/paths/~1setup~1data_type~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "source_data_type_id": "$response.body"
          }
        },
        {
          "stepId": "create-target-data-type",
          "description": "Define the structure (JSON Schema) expected by the target external system.",
          "operationPath": "openapi_source#/paths/~1setup~1data_type~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "target_data_type_id": "$response.body"
          }
        },
        {
          "stepId": "create-export-translator",
          "description": "Create a translator to transform data from the source format to the target format for export.",
          "operationPath": "openapi_source#/paths/~1setup~1translator~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "translator_id": "$response.body"
          }
        },
        {
          "stepId": "create-connection",
          "description": "Configure the connection details (URL, authentication) for the external system.",
          "operationPath": "openapi_source#/paths/~1setup~1connection/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connection_id": "$response.body"
          }
        },
        {
          "stepId": "create-webhook",
          "description": "Define the specific API endpoint (path, method, parameters) on the external system to be called.",
          "operationPath": "openapi_source#/paths/~1setup~1webhook~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_id": "$response.body"
          }
        },
        {
          "stepId": "create-connection-role",
          "description": "Group the connection and webhook together to define an outbound action.",
          "operationPath": "openapi_source#/paths/~1setup~1connection_role/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connection_role_id": "$response.body"
          }
        },
        {
          "stepId": "create-data-event-observer",
          "description": "Create an observer that triggers when the source data type is created or updated.",
          "operationPath": "openapi_source#/paths/~1setup~1observer~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "observer_id": "$response.body"
          }
        },
        {
          "stepId": "create-outbound-flow",
          "description": "Define the flow that connects the data event trigger, translator, and connection role to orchestrate the outbound data process.",
          "operationPath": "openapi_source#/paths/~1setup~1flow~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flow_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "namespace_id": "$steps.create-namespace.outputs.namespace_id",
        "source_data_type_id": "$steps.create-source-data-type.outputs.source_data_type_id",
        "target_data_type_id": "$steps.create-target-data-type.outputs.target_data_type_id",
        "translator_id": "$steps.create-export-translator.outputs.translator_id",
        "connection_id": "$steps.create-connection.outputs.connection_id",
        "webhook_id": "$steps.create-webhook.outputs.webhook_id",
        "connection_role_id": "$steps.create-connection-role.outputs.connection_role_id",
        "observer_id": "$steps.create-data-event-observer.outputs.observer_id",
        "flow_id": "$steps.create-outbound-flow.outputs.flow_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-complete-inbound-data-flow-webhook-triggered",
      "summary": "Sets up an integration flow where Cenit IO receives data via a webhook, transforms it using a translator, and processes/stores it according to a defined target data type.",
      "description": "Sets up an integration flow where Cenit IO receives data via a webhook, transforms it using a translator, and processes/stores it according to a defined target data type.",
      "steps": [
        {
          "stepId": "create-namespace",
          "description": "Create a namespace to organize integration components.",
          "operationPath": "openapi_source#/paths/~1setup~1namespace~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "namespace_id": "$response.body"
          }
        },
        {
          "stepId": "create-source-data-type",
          "description": "Define the structure (JSON Schema) of the data expected to be received via the webhook.",
          "operationPath": "openapi_source#/paths/~1setup~1data_type~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "source_data_type_id": "$response.body"
          }
        },
        {
          "stepId": "create-target-data-type",
          "description": "Define the internal structure (JSON Schema) to which the incoming data will be transformed.",
          "operationPath": "openapi_source#/paths/~1setup~1data_type~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "target_data_type_id": "$response.body"
          }
        },
        {
          "stepId": "create-import-translator",
          "description": "Create a translator to transform data from the incoming source format to the internal target format.",
          "operationPath": "openapi_source#/paths/~1setup~1translator~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "translator_id": "$response.body"
          }
        },
        {
          "stepId": "create-trigger-webhook",
          "description": "Define the webhook endpoint within Cenit IO that external systems will call to send data.",
          "operationPath": "openapi_source#/paths/~1setup~1webhook~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_id": "$response.body"
          }
        },
        {
          "stepId": "create-inbound-flow",
          "description": "Define the flow that connects the webhook trigger, translator, and target data type to orchestrate the inbound data process.",
          "operationPath": "openapi_source#/paths/~1setup~1flow~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flow_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "namespace_id": "$steps.create-namespace.outputs.namespace_id",
        "source_data_type_id": "$steps.create-source-data-type.outputs.source_data_type_id",
        "target_data_type_id": "$steps.create-target-data-type.outputs.target_data_type_id",
        "translator_id": "$steps.create-import-translator.outputs.translator_id",
        "webhook_id": "$steps.create-trigger-webhook.outputs.webhook_id",
        "flow_id": "$steps.create-inbound-flow.outputs.flow_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-scheduled-task-with-transformationexport",
      "summary": "Sets up a scheduled task that runs periodically, potentially transforms data using a translator, and optionally sends the result to an external system.",
      "description": "Sets up a scheduled task that runs periodically, potentially transforms data using a translator, and optionally sends the result to an external system.",
      "steps": [
        {
          "stepId": "create-namespace",
          "description": "Create a namespace.",
          "operationPath": "openapi_source#/paths/~1setup~1namespace~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "namespace_id": "$response.body"
          }
        },
        {
          "stepId": "create-source-data-type",
          "description": "Define source data structure (optional, if transformation needed).",
          "operationPath": "openapi_source#/paths/~1setup~1data_type~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "source_data_type_id": "$response.body"
          }
        },
        {
          "stepId": "create-target-data-type",
          "description": "Define target data structure (optional, if transformation needed).",
          "operationPath": "openapi_source#/paths/~1setup~1data_type~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "target_data_type_id": "$response.body"
          }
        },
        {
          "stepId": "create-translator",
          "description": "Create a translator (optional, if transformation needed).",
          "operationPath": "openapi_source#/paths/~1setup~1translator~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "translator_id": "$response.body"
          }
        },
        {
          "stepId": "create-connection",
          "description": "Configure connection to external system (optional, if exporting).",
          "operationPath": "openapi_source#/paths/~1setup~1connection/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connection_id": "$response.body"
          }
        },
        {
          "stepId": "create-webhook",
          "description": "Define external API endpoint (optional, if exporting).",
          "operationPath": "openapi_source#/paths/~1setup~1webhook~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_id": "$response.body"
          }
        },
        {
          "stepId": "create-connection-role",
          "description": "Group connection and webhook (optional, if exporting).",
          "operationPath": "openapi_source#/paths/~1setup~1connection_role/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connection_role_id": "$response.body"
          }
        },
        {
          "stepId": "create-scheduler",
          "description": "Define the schedule (e.g., cron expression) for the task.",
          "operationPath": "openapi_source#/paths/~1setup~1scheduler~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "scheduler_id": "$response.body"
          }
        },
        {
          "stepId": "create-scheduled-flow",
          "description": "Define the flow triggered by the scheduler, linking translator and connection role if needed.",
          "operationPath": "openapi_source#/paths/~1setup~1flow~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flow_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "namespace_id": "$steps.create-namespace.outputs.namespace_id",
        "source_data_type_id": "$steps.create-source-data-type.outputs.source_data_type_id",
        "target_data_type_id": "$steps.create-target-data-type.outputs.target_data_type_id",
        "translator_id": "$steps.create-translator.outputs.translator_id",
        "connection_id": "$steps.create-connection.outputs.connection_id",
        "webhook_id": "$steps.create-webhook.outputs.webhook_id",
        "connection_role_id": "$steps.create-connection-role.outputs.connection_role_id",
        "scheduler_id": "$steps.create-scheduler.outputs.scheduler_id",
        "flow_id": "$steps.create-scheduled-flow.outputs.flow_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "setup-basic-integration-components",
      "summary": "Configures the foundational elements needed for building integration flows: a namespace for organization, data types to define structures, and a translator for data manipulation logic.",
      "description": "Configures the foundational elements needed for building integration flows: a namespace for organization, data types to define structures, and a translator for data manipulation logic.",
      "steps": [
        {
          "stepId": "create-namespace",
          "description": "Create a namespace to logically group related integration artifacts.",
          "operationPath": "openapi_source#/paths/~1setup~1namespace~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "namespace_id": "$response.body"
          }
        },
        {
          "stepId": "create-source-data-type",
          "description": "Define the JSON schema for a source data structure within the created namespace.",
          "operationPath": "openapi_source#/paths/~1setup~1data_type~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "source_data_type_id": "$response.body"
          }
        },
        {
          "stepId": "create-target-data-type",
          "description": "Define the JSON schema for a target data structure within the created namespace.",
          "operationPath": "openapi_source#/paths/~1setup~1data_type~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "target_data_type_id": "$response.body"
          }
        },
        {
          "stepId": "create-translator",
          "description": "Define the transformation logic (e.g., Ruby, Liquid) between the source and target data types.",
          "operationPath": "openapi_source#/paths/~1setup~1translator~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "translator_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "namespace_id": "$steps.create-namespace.outputs.namespace_id",
        "source_data_type_id": "$steps.create-source-data-type.outputs.source_data_type_id",
        "target_data_type_id": "$steps.create-target-data-type.outputs.target_data_type_id",
        "translator_id": "$steps.create-translator.outputs.translator_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-outbound-api-call-endpoint",
      "summary": "Sets up the configuration required to call a specific endpoint on an external system, including the connection details, the specific webhook action, and grouping them with a connection role.",
      "description": "Sets up the configuration required to call a specific endpoint on an external system, including the connection details, the specific webhook action, and grouping them with a connection role.",
      "steps": [
        {
          "stepId": "create-namespace",
          "description": "Create a namespace for organizing connection artifacts.",
          "operationPath": "openapi_source#/paths/~1setup~1namespace~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "namespace_id": "$response.body"
          }
        },
        {
          "stepId": "create-connection",
          "description": "Define the connection parameters (URL, authentication) for the target external system.",
          "operationPath": "openapi_source#/paths/~1setup~1connection/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connection_id": "$response.body"
          }
        },
        {
          "stepId": "create-webhook",
          "description": "Define the specific API call details (path, method, headers, parameters) for the action on the external system.",
          "operationPath": "openapi_source#/paths/~1setup~1webhook~1/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_id": "$response.body"
          }
        },
        {
          "stepId": "create-connection-role",
          "description": "Create a role that associates the defined connection with the specific webhook action.",
          "operationPath": "openapi_source#/paths/~1setup~1connection_role/post",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "connection_role_id": "$response.body"
          }
        }
      ],
      "outputs": {
        "namespace_id": "$steps.create-namespace.outputs.namespace_id",
        "connection_id": "$steps.create-connection.outputs.connection_id",
        "webhook_id": "$steps.create-webhook.outputs.webhook_id",
        "connection_role_id": "$steps.create-connection-role.outputs.connection_role_id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}