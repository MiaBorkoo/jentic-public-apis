{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/tfl.gov.uk/main/v1/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "plan-a-public-transport-journey",
      "summary": "Allows users to find the best routes between two locations using various transport modes, optionally filtering by preferred modes.",
      "description": "Allows users to find the best routes between two locations using various transport modes, optionally filtering by preferred modes.",
      "inputs": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "via": {
            "type": "string"
          },
          "nationalSearch": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "timeIs": {
            "type": "string"
          },
          "journeyPreference": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "accessibilityPreference": {
            "type": "string"
          },
          "fromName": {
            "type": "string"
          },
          "toName": {
            "type": "string"
          },
          "viaName": {
            "type": "string"
          },
          "maxTransferMinutes": {
            "type": "string"
          },
          "maxWalkingMinutes": {
            "type": "string"
          },
          "walkingSpeed": {
            "type": "string"
          },
          "cyclePreference": {
            "type": "string"
          },
          "adjustment": {
            "type": "string"
          },
          "bikeProficiency": {
            "type": "string"
          },
          "alternativeCycle": {
            "type": "string"
          },
          "alternativeWalking": {
            "type": "string"
          },
          "applyHtmlMarkup": {
            "type": "string"
          },
          "useMultiModalCall": {
            "type": "string"
          },
          "walkingOptimization": {
            "type": "string"
          },
          "taxiOnlyTrip": {
            "type": "string"
          },
          "routeBetweenEntrances": {
            "type": "string"
          },
          "useRealTimeLiveArrivals": {
            "type": "string"
          },
          "calcOneDirection": {
            "type": "string"
          },
          "includeAlternativeRoutes": {
            "type": "string"
          },
          "overrideMultiModalScenario": {
            "type": "string"
          },
          "combineTransferLegs": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-journey-modes",
          "description": "Retrieves a list of all available journey planner modes (e.g., tube, bus, DLR) that can be used for journey planning.",
          "operationId": "Journey_Meta",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "available-modes": "$response.body#/0/available-modes"
          }
        },
        {
          "stepId": "plan-journey",
          "description": "Performs a journey planning search from a specified origin to a destination, with options for date, time, preferences, and transport modes.",
          "operationId": "Journey_JourneyResults",
          "parameters": [
            {
              "name": "from",
              "in": "path",
              "value": "$inputs.from"
            },
            {
              "name": "to",
              "in": "path",
              "value": "$inputs.to"
            },
            {
              "name": "via",
              "in": "query",
              "value": "$inputs.via"
            },
            {
              "name": "nationalSearch",
              "in": "query",
              "value": "$inputs.nationalSearch"
            },
            {
              "name": "date",
              "in": "query",
              "value": "$inputs.date"
            },
            {
              "name": "time",
              "in": "query",
              "value": "$inputs.time"
            },
            {
              "name": "timeIs",
              "in": "query",
              "value": "$inputs.timeIs"
            },
            {
              "name": "journeyPreference",
              "in": "query",
              "value": "$inputs.journeyPreference"
            },
            {
              "name": "mode",
              "in": "query",
              "value": "$steps.get-journey-modes.outputs.available-modes"
            },
            {
              "name": "accessibilityPreference",
              "in": "query",
              "value": "$inputs.accessibilityPreference"
            },
            {
              "name": "fromName",
              "in": "query",
              "value": "$inputs.fromName"
            },
            {
              "name": "toName",
              "in": "query",
              "value": "$inputs.toName"
            },
            {
              "name": "viaName",
              "in": "query",
              "value": "$inputs.viaName"
            },
            {
              "name": "maxTransferMinutes",
              "in": "query",
              "value": "$inputs.maxTransferMinutes"
            },
            {
              "name": "maxWalkingMinutes",
              "in": "query",
              "value": "$inputs.maxWalkingMinutes"
            },
            {
              "name": "walkingSpeed",
              "in": "query",
              "value": "$inputs.walkingSpeed"
            },
            {
              "name": "cyclePreference",
              "in": "query",
              "value": "$inputs.cyclePreference"
            },
            {
              "name": "adjustment",
              "in": "query",
              "value": "$inputs.adjustment"
            },
            {
              "name": "bikeProficiency",
              "in": "query",
              "value": "$inputs.bikeProficiency"
            },
            {
              "name": "alternativeCycle",
              "in": "query",
              "value": "$inputs.alternativeCycle"
            },
            {
              "name": "alternativeWalking",
              "in": "query",
              "value": "$inputs.alternativeWalking"
            },
            {
              "name": "applyHtmlMarkup",
              "in": "query",
              "value": "$inputs.applyHtmlMarkup"
            },
            {
              "name": "useMultiModalCall",
              "in": "query",
              "value": "$inputs.useMultiModalCall"
            },
            {
              "name": "walkingOptimization",
              "in": "query",
              "value": "$inputs.walkingOptimization"
            },
            {
              "name": "taxiOnlyTrip",
              "in": "query",
              "value": "$inputs.taxiOnlyTrip"
            },
            {
              "name": "routeBetweenEntrances",
              "in": "query",
              "value": "$inputs.routeBetweenEntrances"
            },
            {
              "name": "useRealTimeLiveArrivals",
              "in": "query",
              "value": "$inputs.useRealTimeLiveArrivals"
            },
            {
              "name": "calcOneDirection",
              "in": "query",
              "value": "$inputs.calcOneDirection"
            },
            {
              "name": "includeAlternativeRoutes",
              "in": "query",
              "value": "$inputs.includeAlternativeRoutes"
            },
            {
              "name": "overrideMultiModalScenario",
              "in": "query",
              "value": "$inputs.overrideMultiModalScenario"
            },
            {
              "name": "combineTransferLegs",
              "in": "query",
              "value": "$inputs.combineTransferLegs"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "journey-itinerary": "$response.body#/journey-itinerary"
          }
        }
      ],
      "outputs": {
        "available-modes": "$steps.get-journey-modes.outputs.available-modes",
        "journey-itinerary": "$steps.plan-journey.outputs.journey-itinerary"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "search-for-stationstop-and-get-detailed-info",
      "summary": "Enables users to search for a specific station or bus stop by name or code and retrieve comprehensive details, including live arrivals and nearby facilities.",
      "description": "Enables users to search for a specific station or bus stop by name or code and retrieve comprehensive details, including live arrivals and nearby facilities.",
      "inputs": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "modes": {
            "type": "string"
          },
          "faresOnly": {
            "type": "string"
          },
          "maxResults": {
            "type": "string"
          },
          "lines": {
            "type": "string"
          },
          "includeHubs": {
            "type": "string"
          },
          "tflOperatedNationalRailStationsOnly": {
            "type": "string"
          },
          "ids": {
            "type": "string"
          },
          "includeCrowdingData": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "stopPointId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-stop-point",
          "description": "Searches for public transport stop points by their common name or 5-digit Countdown Bus Stop Code.",
          "operationId": "StopPoint_Search",
          "parameters": [
            {
              "name": "query",
              "in": "path",
              "value": "$inputs.query"
            },
            {
              "name": "modes",
              "in": "query",
              "value": "$inputs.modes"
            },
            {
              "name": "faresOnly",
              "in": "query",
              "value": "$inputs.faresOnly"
            },
            {
              "name": "maxResults",
              "in": "query",
              "value": "$inputs.maxResults"
            },
            {
              "name": "lines",
              "in": "query",
              "value": "$inputs.lines"
            },
            {
              "name": "includeHubs",
              "in": "query",
              "value": "$inputs.includeHubs"
            },
            {
              "name": "tflOperatedNationalRailStationsOnly",
              "in": "query",
              "value": "$inputs.tflOperatedNationalRailStationsOnly"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "stop-point-search-results": "$response.body#/stop-point-search-results"
          }
        },
        {
          "stepId": "get-stop-point-details",
          "description": "Retrieves detailed information for one or more specific stop points using their IDs.",
          "operationId": "StopPoint_Get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.search-stop-point.outputs.stop-point-search-results.matches[0].id"
            },
            {
              "name": "includeCrowdingData",
              "in": "query",
              "value": "$inputs.includeCrowdingData"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "stop-point-details": "$response.body#/0/stop-point-details"
          }
        },
        {
          "stepId": "get-stop-point-arrivals",
          "description": "Gets the list of real-time arrival predictions for the selected stop point.",
          "operationId": "StopPoint_Arrivals",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-stop-point-details.outputs.stop-point-details.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "stop-point-predictions": "$response.body#/0/stop-point-predictions"
          }
        },
        {
          "stepId": "get-nearby-car-parks",
          "description": "Retrieves a list of car parks associated with the selected stop point.",
          "operationId": "StopPoint_GetCarParksById",
          "parameters": [
            {
              "name": "stopPointId",
              "in": "path",
              "value": "$steps.get-stop-point-details.outputs.stop-point-details.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "car-parks": "$response.body#/0/car-parks"
          }
        },
        {
          "stepId": "get-nearby-taxi-ranks",
          "description": "Retrieves a list of taxi ranks associated with the selected stop point.",
          "operationId": "StopPoint_GetTaxiRanksByIds",
          "parameters": [
            {
              "name": "stopPointId",
              "in": "path",
              "value": "$steps.get-stop-point-details.outputs.stop-point-details.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "taxi-ranks": "$response.body#/0/taxi-ranks"
          }
        }
      ],
      "outputs": {
        "stop-point-search-results": "$steps.search-stop-point.outputs.stop-point-search-results",
        "stop-point-details": "$steps.get-stop-point-details.outputs.stop-point-details",
        "stop-point-predictions": "$steps.get-stop-point-arrivals.outputs.stop-point-predictions",
        "car-parks": "$steps.get-nearby-car-parks.outputs.car-parks",
        "taxi-ranks": "$steps.get-nearby-taxi-ranks.outputs.taxi-ranks"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "check-live-public-transport-status-and-disruptions",
      "summary": "Enables users to check the current operational status and any disruptions affecting specific transport lines or modes (e.g., Tube, DLR, Overground).",
      "description": "Enables users to check the current operational status and any disruptions affecting specific transport lines or modes (e.g., Tube, DLR, Overground).",
      "inputs": {
        "type": "object",
        "properties": {
          "modes": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "severityLevel": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-line-modes",
          "description": "Retrieves a list of all valid transport modes for which line status information is available.",
          "operationId": "Line_MetaModes",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "line-modes": "$response.body#/0/line-modes"
          }
        },
        {
          "stepId": "get-line-status-by-mode",
          "description": "Gets the current line status (e.g., 'Good Service', 'Minor Delays') for all lines operating under the specified transport modes.",
          "operationId": "Line_StatusByMode",
          "parameters": [
            {
              "name": "modes",
              "in": "path",
              "value": "$steps.get-line-modes.outputs.line-modes"
            },
            {
              "name": "detail",
              "in": "query",
              "value": "$inputs.detail"
            },
            {
              "name": "severityLevel",
              "in": "query",
              "value": "$inputs.severityLevel"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "line-statuses": "$response.body#/0/lineStatuses"
          }
        },
        {
          "stepId": "get-line-disruptions-by-mode",
          "description": "Retrieves details of any disruptions affecting lines for the specified transport modes.",
          "operationId": "Line_DisruptionByMode",
          "parameters": [
            {
              "name": "modes",
              "in": "path",
              "value": "$steps.get-line-modes.outputs.line-modes"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "line-disruptions": "$response.body#/0/line-disruptions"
          }
        }
      ],
      "outputs": {
        "line-modes": "$steps.get-line-modes.outputs.line-modes",
        "line-statuses": "$steps.get-line-status-by-mode.outputs.line-statuses",
        "line-disruptions": "$steps.get-line-disruptions-by-mode.outputs.line-disruptions"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "find-nearby-transport-stops-and-check-live-arrivals",
      "summary": "Allows users to discover public transport stops within a specified geographical area and view real-time arrival predictions for vehicles at those stops.",
      "description": "Allows users to discover public transport stops within a specified geographical area and view real-time arrival predictions for vehicles at those stops.",
      "inputs": {
        "type": "object",
        "properties": {
          "stopTypes": {
            "type": "string"
          },
          "radius": {
            "type": "string"
          },
          "useStopPointHierarchy": {
            "type": "string"
          },
          "modes": {
            "type": "string"
          },
          "categories": {
            "type": "string"
          },
          "returnLines": {
            "type": "string"
          },
          "location.lat": {
            "type": "string"
          },
          "location.lon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-nearby-stop-points",
          "description": "Finds public transport stop points within a given radius of a latitude/longitude, filtered by stop types and modes.",
          "operationId": "StopPoint_GetByGeoPoint",
          "parameters": [
            {
              "name": "stopTypes",
              "in": "query",
              "value": "$inputs.stopTypes"
            },
            {
              "name": "radius",
              "in": "query",
              "value": "$inputs.radius"
            },
            {
              "name": "useStopPointHierarchy",
              "in": "query",
              "value": "$inputs.useStopPointHierarchy"
            },
            {
              "name": "modes",
              "in": "query",
              "value": "$inputs.modes"
            },
            {
              "name": "categories",
              "in": "query",
              "value": "$inputs.categories"
            },
            {
              "name": "returnLines",
              "in": "query",
              "value": "$inputs.returnLines"
            },
            {
              "name": "location.lat",
              "in": "query",
              "value": "$inputs.location.lat"
            },
            {
              "name": "location.lon",
              "in": "query",
              "value": "$inputs.location.lon"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "nearby-stop-points-response": "$response.body#/nearby-stop-points-response"
          }
        },
        {
          "stepId": "get-stop-point-arrivals",
          "description": "Retrieves the list of real-time arrival predictions for all vehicles at a specific stop point.",
          "operationId": "StopPoint_Arrivals",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-nearby-stop-points.outputs.nearby-stop-points-response.stopPoints[0].id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "stop-point-predictions": "$response.body#/0/stop-point-predictions"
          }
        }
      ],
      "outputs": {
        "nearby-stop-points-response": "$steps.get-nearby-stop-points.outputs.nearby-stop-points-response",
        "stop-point-predictions": "$steps.get-stop-point-arrivals.outputs.stop-point-predictions"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "find-and-monitor-bike-point-availability",
      "summary": "Helps users locate nearby bike hire stations and check their real-time bike and dock availability to plan their cycle journeys.",
      "description": "Helps users locate nearby bike hire stations and check their real-time bike and dock availability to plan their cycle journeys.",
      "inputs": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-all-bike-points",
          "description": "Retrieves a list of all bike point locations across the network, including basic status information like number of bikes and docks.",
          "operationId": "BikePoint_GetAll",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "all-bike-points": "$response.body#/0/all-bike-points"
          }
        },
        {
          "stepId": "get-bike-point-occupancy",
          "description": "Gets the real-time occupancy data (available bikes and empty docks) for specific bike points identified by their IDs.",
          "operationId": "Occupancy_GetBikePointsOccupancies",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.get-all-bike-points.outputs.all-bike-points.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "bike-point-occupancies": "$response.body#/0/bike-point-occupancies"
          }
        }
      ],
      "outputs": {
        "all-bike-points": "$steps.get-all-bike-points.outputs.all-bike-points",
        "bike-point-occupancies": "$steps.get-bike-point-occupancy.outputs.bike-point-occupancies"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "check-road-traffic-status-and-disruptions",
      "summary": "Allows users to check the current traffic status and any active disruptions on specific roads managed by TfL.",
      "description": "Allows users to check the current traffic status and any active disruptions on specific roads managed by TfL.",
      "inputs": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "string"
          },
          "dateRangeNullable.startDate": {
            "type": "string"
          },
          "dateRangeNullable.endDate": {
            "type": "string"
          },
          "stripContent": {
            "type": "string"
          },
          "severities": {
            "type": "string"
          },
          "categories": {
            "type": "string"
          },
          "closures": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-all-roads",
          "description": "Retrieves a list of all roads managed by Transport for London.",
          "operationId": "Road_Get",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "all-roads": "$response.body#/0/all-roads"
          }
        },
        {
          "stepId": "get-road-status",
          "description": "Gets the aggregated traffic status for specified road identifiers.",
          "operationId": "Road_Status",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.get-all-roads.outputs.all-roads.id"
            },
            {
              "name": "dateRangeNullable.startDate",
              "in": "query",
              "value": "$inputs.dateRangeNullable.startDate"
            },
            {
              "name": "dateRangeNullable.endDate",
              "in": "query",
              "value": "$inputs.dateRangeNullable.endDate"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "road-statuses": "$response.body#/0/road-statuses"
          }
        },
        {
          "stepId": "get-road-disruptions",
          "description": "Retrieves active disruptions for specified road identifiers, with optional filtering by severity or category.",
          "operationId": "Road_Disruption",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.get-all-roads.outputs.all-roads.id"
            },
            {
              "name": "stripContent",
              "in": "query",
              "value": "$inputs.stripContent"
            },
            {
              "name": "severities",
              "in": "query",
              "value": "$inputs.severities"
            },
            {
              "name": "categories",
              "in": "query",
              "value": "$inputs.categories"
            },
            {
              "name": "closures",
              "in": "query",
              "value": "$inputs.closures"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "road-disruptions": "$response.body#/0/roadDisruptionLines"
          }
        }
      ],
      "outputs": {
        "all-roads": "$steps.get-all-roads.outputs.all-roads",
        "road-statuses": "$steps.get-road-status.outputs.road-statuses",
        "road-disruptions": "$steps.get-road-disruptions.outputs.road-disruptions"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}