{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/apideck.com/issue-tracking/10.14.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "create-and-assign-ticket",
      "summary": "Finds a relevant collection (project/repository), identifies a user within that collection, and then creates a new ticket assigned to that user.",
      "description": "Finds a relevant collection (project/repository), identifies a user within that collection, and then creates a new ticket assigned to that user.",
      "inputs": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string"
          },
          "x-apideck-consumer-id": {
            "type": "string"
          },
          "x-apideck-app-id": {
            "type": "string"
          },
          "x-apideck-service-id": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "pass_through": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-collections",
          "description": "Retrieve a list of available collections to determine where to create the ticket.",
          "operationId": "collectionsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collections": "$response.body"
          }
        },
        {
          "stepId": "list-users-in-collection",
          "description": "Retrieve a list of users associated with the selected collection to find a potential assignee.",
          "operationId": "collectionUsersAll",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.list-collections.outputs.collections.data[0].id"
            },
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "users": "$response.body"
          }
        },
        {
          "stepId": "create-assigned-ticket",
          "description": "Create a new ticket within the selected collection and assign it to the chosen user.",
          "operationId": "collectionTicketsAdd",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.list-collections.outputs.collections.data[0].id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "collection_id": "$steps.list-collections.outputs.collections.data[0].id",
              "assignee_id": "$steps.list-users-in-collection.outputs.users.data[0].id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ticket_id": "$response.body",
            "creation_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "collections": "$steps.list-collections.outputs.collections",
        "users": "$steps.list-users-in-collection.outputs.users",
        "ticket_id": "$steps.create-assigned-ticket.outputs.ticket_id",
        "creation_status": "$steps.create-assigned-ticket.outputs.creation_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "view-ticket-details-and-add-comment",
      "summary": "Allows a user to find a specific ticket within a collection, view its details and existing comments, and then add a new comment.",
      "description": "Allows a user to find a specific ticket within a collection, view its details and existing comments, and then add a new comment.",
      "inputs": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string"
          },
          "x-apideck-consumer-id": {
            "type": "string"
          },
          "x-apideck-app-id": {
            "type": "string"
          },
          "x-apideck-service-id": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "pass_through": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "ticket_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-collection",
          "description": "List collections to select the relevant one.",
          "operationId": "collectionsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collections": "$response.body"
          }
        },
        {
          "stepId": "find-ticket-in-collection",
          "description": "List tickets within the selected collection, potentially using filters to find the specific ticket.",
          "operationId": "collectionTicketsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.find-collection.outputs.collections.data[0].id"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tickets": "$response.body"
          }
        },
        {
          "stepId": "get-ticket-details",
          "description": "Retrieve the full details of the selected ticket.",
          "operationId": "collectionTicketsOne",
          "parameters": [
            {
              "name": "ticket_id",
              "in": "path",
              "value": "$steps.find-ticket-in-collection.outputs.tickets.data[0].id"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.find-collection.outputs.collections.data[0].id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ticket_details": "$response.body"
          }
        },
        {
          "stepId": "list-ticket-comments",
          "description": "Retrieve all existing comments for the selected ticket.",
          "operationId": "collectionTicketCommentsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.find-collection.outputs.collections.data[0].id"
            },
            {
              "name": "ticket_id",
              "in": "path",
              "value": "$steps.find-ticket-in-collection.outputs.tickets.data[0].id"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "comments": "$response.body"
          }
        },
        {
          "stepId": "add-ticket-comment",
          "description": "Add a new comment to the selected ticket.",
          "operationId": "collectionTicketCommentsAdd",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.find-collection.outputs.collections.data[0].id"
            },
            {
              "name": "ticket_id",
              "in": "path",
              "value": "$steps.find-ticket-in-collection.outputs.tickets.data[0].id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "collection_id": "$steps.find-collection.outputs.collections.data[0].id",
              "ticket_id": "$steps.find-ticket-in-collection.outputs.tickets.data[0].id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "new_comment_id": "$response.body",
            "creation_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "collections": "$steps.find-collection.outputs.collections",
        "tickets": "$steps.find-ticket-in-collection.outputs.tickets",
        "ticket_details": "$steps.get-ticket-details.outputs.ticket_details",
        "comments": "$steps.list-ticket-comments.outputs.comments",
        "new_comment_id": "$steps.add-ticket-comment.outputs.new_comment_id",
        "creation_status": "$steps.add-ticket-comment.outputs.creation_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "update-ticket-status-or-priority",
      "summary": "Finds a specific ticket and updates its status (e.g., 'open' to 'in_progress') or priority (e.g., 'normal' to 'high').",
      "description": "Finds a specific ticket and updates its status (e.g., 'open' to 'in_progress') or priority (e.g., 'normal' to 'high').",
      "inputs": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string"
          },
          "x-apideck-consumer-id": {
            "type": "string"
          },
          "x-apideck-app-id": {
            "type": "string"
          },
          "x-apideck-service-id": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "pass_through": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "ticket_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "select-collection",
          "description": "List collections to choose the one containing the ticket.",
          "operationId": "collectionsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collections": "$response.body"
          }
        },
        {
          "stepId": "select-ticket",
          "description": "List tickets in the collection to identify the one to update.",
          "operationId": "collectionTicketsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.select-collection.outputs.collections.data[0].id"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tickets": "$response.body"
          }
        },
        {
          "stepId": "update-ticket-info",
          "description": "Update the status or priority of the selected ticket.",
          "operationId": "collectionTicketsUpdate",
          "parameters": [
            {
              "name": "ticket_id",
              "in": "path",
              "value": "$steps.select-ticket.outputs.tickets.data[0].id"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.select-collection.outputs.collections.data[0].id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "collection_id": "$steps.select-collection.outputs.collections.data[0].id",
              "ticket_id": "$steps.select-ticket.outputs.tickets.data[0].id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_ticket_id": "$response.body",
            "update_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "collections": "$steps.select-collection.outputs.collections",
        "tickets": "$steps.select-ticket.outputs.tickets",
        "updated_ticket_id": "$steps.update-ticket-info.outputs.updated_ticket_id",
        "update_status": "$steps.update-ticket-info.outputs.update_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "find-tickets-assigned-to-a-specific-user",
      "summary": "Identifies a user within a specific collection and then retrieves all tickets currently assigned to that user.",
      "description": "Identifies a user within a specific collection and then retrieves all tickets currently assigned to that user.",
      "inputs": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string"
          },
          "x-apideck-consumer-id": {
            "type": "string"
          },
          "x-apideck-app-id": {
            "type": "string"
          },
          "x-apideck-service-id": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "pass_through": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "pick-collection",
          "description": "List collections to select the relevant project/repository.",
          "operationId": "collectionsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collections": "$response.body"
          }
        },
        {
          "stepId": "pick-user",
          "description": "List users within the selected collection to identify the target assignee.",
          "operationId": "collectionUsersAll",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.pick-collection.outputs.collections.data[0].id"
            },
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "users": "$response.body"
          }
        },
        {
          "stepId": "list-tickets-by-assignee",
          "description": "Retrieve tickets from the collection, filtered by the selected assignee's ID.",
          "operationId": "collectionTicketsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.pick-collection.outputs.collections.data[0].id"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "assigned_tickets": "$response.body"
          }
        }
      ],
      "outputs": {
        "collections": "$steps.pick-collection.outputs.collections",
        "users": "$steps.pick-user.outputs.users",
        "assigned_tickets": "$steps.list-tickets-by-assignee.outputs.assigned_tickets"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "tag-an-existing-ticket",
      "summary": "Finds an existing ticket, lists available tags for its collection, and updates the ticket by adding one or more tags.",
      "description": "Finds an existing ticket, lists available tags for its collection, and updates the ticket by adding one or more tags.",
      "inputs": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string"
          },
          "x-apideck-consumer-id": {
            "type": "string"
          },
          "x-apideck-app-id": {
            "type": "string"
          },
          "x-apideck-service-id": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "pass_through": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "ticket_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "choose-collection",
          "description": "List collections to select the relevant one.",
          "operationId": "collectionsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "collections": "$response.body"
          }
        },
        {
          "stepId": "choose-ticket",
          "description": "List tickets in the collection to identify the one to tag.",
          "operationId": "collectionTicketsAll",
          "parameters": [
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.choose-collection.outputs.collections.data[0].id"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tickets": "$response.body"
          }
        },
        {
          "stepId": "list-available-tags",
          "description": "Retrieve the list of tags available within the collection.",
          "operationId": "collectionTagsAll",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.choose-collection.outputs.collections.data[0].id"
            },
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "pass_through",
              "in": "query",
              "value": "$inputs.pass_through"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tags": "$response.body"
          }
        },
        {
          "stepId": "apply-tags-to-ticket",
          "description": "Update the selected ticket, adding the chosen tag(s) to its list of tags.",
          "operationId": "collectionTicketsUpdate",
          "parameters": [
            {
              "name": "ticket_id",
              "in": "path",
              "value": "$steps.choose-ticket.outputs.tickets.data[0].id"
            },
            {
              "name": "x-apideck-consumer-id",
              "in": "header",
              "value": "$inputs.x-apideck-consumer-id"
            },
            {
              "name": "x-apideck-app-id",
              "in": "header",
              "value": "$inputs.x-apideck-app-id"
            },
            {
              "name": "x-apideck-service-id",
              "in": "header",
              "value": "$inputs.x-apideck-service-id"
            },
            {
              "name": "raw",
              "in": "query",
              "value": "$inputs.raw"
            },
            {
              "name": "collection_id",
              "in": "path",
              "value": "$steps.choose-collection.outputs.collections.data[0].id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "collection_id": "$steps.choose-collection.outputs.collections.data[0].id",
              "ticket_id": "$steps.choose-ticket.outputs.tickets.data[0].id",
              "tags": "$steps.list-available-tags.outputs.tags.data"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_ticket_id": "$response.body",
            "update_status": "$response.body"
          }
        }
      ],
      "outputs": {
        "collections": "$steps.choose-collection.outputs.collections",
        "tickets": "$steps.choose-ticket.outputs.tickets",
        "tags": "$steps.list-available-tags.outputs.tags",
        "updated_ticket_id": "$steps.apply-tags-to-ticket.outputs.updated_ticket_id",
        "update_status": "$steps.apply-tags-to-ticket.outputs.update_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}