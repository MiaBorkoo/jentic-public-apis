{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/betfair.com/main/1.0.1423/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "subscribe-to-real-time-market-data",
      "summary": "After authenticating, subscribes to real-time updates for specific markets based on filtering criteria. This allows receiving live price changes, traded volumes, and market status updates.",
      "description": "After authenticating, subscribes to real-time updates for specific markets based on filtering criteria. This allows receiving live price changes, traded volumes, and market status updates.",
      "inputs": {
        "type": "object",
        "properties": {
          "send-authentication_body": {
            "type": "object"
          },
          "send-market-subscription_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "send-authentication",
          "description": "Sends an AuthenticationMessage over the socket connection.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-authentication_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        },
        {
          "stepId": "send-market-subscription",
          "description": "Sends a MarketSubscriptionMessage to define the markets and data fields to receive updates for. Requires a successful prior authentication on the same connection.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-market-subscription_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        }
      ],
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "subscribe-to-real-time-order-updates",
      "summary": "After authenticating, subscribes to real-time updates for the user's own orders. This allows receiving notifications about order placement, matching, cancellation, and settlement.",
      "description": "After authenticating, subscribes to real-time updates for the user's own orders. This allows receiving notifications about order placement, matching, cancellation, and settlement.",
      "inputs": {
        "type": "object",
        "properties": {
          "send-authentication_body": {
            "type": "object"
          },
          "send-order-subscription_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "send-authentication",
          "description": "Sends an AuthenticationMessage over the socket connection.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-authentication_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        },
        {
          "stepId": "send-order-subscription",
          "description": "Sends an OrderSubscriptionMessage to receive updates about the authenticated user's orders. Requires a successful prior authentication on the same connection.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-order-subscription_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        }
      ],
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "resume-market-data-stream-after-disconnect",
      "summary": "Re-establishes a connection and resubscribes to market data after a disconnection, using previously received clock tokens to resume the stream from the point of interruption.",
      "description": "Re-establishes a connection and resubscribes to market data after a disconnection, using previously received clock tokens to resume the stream from the point of interruption.",
      "inputs": {
        "type": "object",
        "properties": {
          "re-authenticate_body": {
            "type": "object"
          },
          "send-market-resubscription_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "re-authenticate",
          "description": "Sends an AuthenticationMessage over a new socket connection after a previous disconnection.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.re-authenticate_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        },
        {
          "stepId": "send-market-resubscription",
          "description": "Sends a MarketSubscriptionMessage including the 'initialClk' and last received 'clk' tokens to resume the data stream efficiently.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-market-resubscription_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        }
      ],
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "resume-order-data-stream-after-disconnect",
      "summary": "Re-establishes a connection and resubscribes to order data after a disconnection, using previously received clock tokens to resume the stream from the point of interruption.",
      "description": "Re-establishes a connection and resubscribes to order data after a disconnection, using previously received clock tokens to resume the stream from the point of interruption.",
      "inputs": {
        "type": "object",
        "properties": {
          "re-authenticate_body": {
            "type": "object"
          },
          "send-order-resubscription_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "re-authenticate",
          "description": "Sends an AuthenticationMessage over a new socket connection after a previous disconnection.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.re-authenticate_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        },
        {
          "stepId": "send-order-resubscription",
          "description": "Sends an OrderSubscriptionMessage including the 'initialClk' and last received 'clk' tokens to resume the data stream efficiently.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-order-resubscription_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        }
      ],
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "maintain-active-stream-with-heartbeat",
      "summary": "Periodically sends Heartbeat messages to keep the socket connection alive and prevent timeouts, ensuring continuous data streaming.",
      "description": "Periodically sends Heartbeat messages to keep the socket connection alive and prevent timeouts, ensuring continuous data streaming.",
      "inputs": {
        "type": "object",
        "properties": {
          "send-authentication_body": {
            "type": "object"
          },
          "subscribe-to-data_body": {
            "type": "object"
          },
          "send-heartbeat_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "send-authentication",
          "description": "Sends an AuthenticationMessage over the socket connection.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-authentication_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        },
        {
          "stepId": "subscribe-to-data",
          "description": "Sends a MarketSubscriptionMessage or OrderSubscriptionMessage to start receiving data.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.subscribe-to-data_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        },
        {
          "stepId": "send-heartbeat",
          "description": "Sends a HeartbeatMessage periodically based on the negotiated heartbeat interval to keep the connection active.",
          "operationPath": "openapi_source#/paths/~1request/post",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.send-heartbeat_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ]
        }
      ],
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}