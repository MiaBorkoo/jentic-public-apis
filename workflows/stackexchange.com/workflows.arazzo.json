{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/stackexchange.com/main/2.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "explore-question-context",
      "summary": "Retrieve a specific question, its answers, comments, and related questions to understand its full context.",
      "description": "Retrieve a specific question, its answers, comments, and related questions to understand its full context.",
      "inputs": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "string"
          },
          "order": {
            "type": "string"
          },
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "fromdate": {
            "type": "string"
          },
          "todate": {
            "type": "string"
          },
          "pagesize": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "site": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-question-details",
          "description": "Fetch details for a specific question ID.",
          "operationPath": "openapi_source#/paths/~1questions~1{ids}/get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$inputs.ids"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questions": "$response.body"
          }
        },
        {
          "stepId": "get-question-answers",
          "description": "Fetch the answers posted for the specified question.",
          "operationPath": "openapi_source#/paths/~1questions~1{ids}~1answers/get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.get-question-details.outputs.questions.question_id"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "answers": "$response.body"
          }
        },
        {
          "stepId": "get-question-comments",
          "description": "Fetch the comments posted on the specified question.",
          "operationPath": "openapi_source#/paths/~1questions~1{ids}~1comments/get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.get-question-details.outputs.questions.question_id"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "comments": "$response.body"
          }
        },
        {
          "stepId": "get-related-questions",
          "description": "Fetch questions considered related to the specified question.",
          "operationPath": "openapi_source#/paths/~1questions~1{ids}~1related/get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.get-question-details.outputs.questions.question_id"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questions": "$response.body"
          }
        }
      ],
      "outputs": {
        "questions": "$steps.get-related-questions.outputs.questions",
        "answers": "$steps.get-question-answers.outputs.answers",
        "comments": "$steps.get-question-comments.outputs.comments"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "get-authenticated-user-activity-overview",
      "summary": "Retrieve the profile, questions, answers, badges, and recent reputation changes for the authenticated user.",
      "description": "Retrieve the profile, questions, answers, badges, and recent reputation changes for the authenticated user.",
      "inputs": {
        "type": "object",
        "properties": {
          "order": {
            "type": "string"
          },
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "fromdate": {
            "type": "string"
          },
          "todate": {
            "type": "string"
          },
          "pagesize": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "site": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-my-profile",
          "description": "Get the authenticated user's profile details.",
          "operationPath": "openapi_source#/paths/~1me/get",
          "parameters": [
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "user": "$response.body"
          }
        },
        {
          "stepId": "get-my-questions",
          "description": "Get questions asked by the authenticated user.",
          "operationPath": "openapi_source#/paths/~1me~1questions/get",
          "parameters": [
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questions": "$response.body"
          }
        },
        {
          "stepId": "get-my-answers",
          "description": "Get answers posted by the authenticated user.",
          "operationPath": "openapi_source#/paths/~1me~1answers/get",
          "parameters": [
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "answers": "$response.body"
          }
        },
        {
          "stepId": "get-my-badges",
          "description": "Get badges earned by the authenticated user.",
          "operationPath": "openapi_source#/paths/~1me~1badges/get",
          "parameters": [
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "badges": "$response.body"
          }
        },
        {
          "stepId": "get-my-reputation-changes",
          "description": "Get recent reputation changes for the authenticated user.",
          "operationPath": "openapi_source#/paths/~1me~1reputation/get",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "reputation_changes": "$response.body"
          }
        }
      ],
      "outputs": {
        "user": "$steps.get-my-profile.outputs.user",
        "questions": "$steps.get-my-questions.outputs.questions",
        "answers": "$steps.get-my-answers.outputs.answers",
        "badges": "$steps.get-my-badges.outputs.badges",
        "reputation_changes": "$steps.get-my-reputation-changes.outputs.reputation_changes"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "find-questions-by-tag-and-explore",
      "summary": "Search for questions using specific tags, then retrieve the full details and answers for the found questions.",
      "description": "Search for questions using specific tags, then retrieve the full details and answers for the found questions.",
      "inputs": {
        "type": "object",
        "properties": {
          "tagged": {
            "type": "string"
          },
          "order": {
            "type": "string"
          },
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "fromdate": {
            "type": "string"
          },
          "todate": {
            "type": "string"
          },
          "pagesize": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "site": {
            "type": "string"
          },
          "intitle": {
            "type": "string"
          },
          "nottagged": {
            "type": "string"
          },
          "ids": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-questions-by-tag",
          "description": "Search for questions containing at least one of the specified tags.",
          "operationPath": "openapi_source#/paths/~1search/get",
          "parameters": [
            {
              "name": "tagged",
              "in": "query",
              "value": "$inputs.tagged"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            },
            {
              "name": "intitle",
              "in": "query",
              "value": "$inputs.intitle"
            },
            {
              "name": "nottagged",
              "in": "query",
              "value": "$inputs.nottagged"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questions": "$response.body"
          }
        },
        {
          "stepId": "get-found-question-details",
          "description": "Retrieve full details for the questions found in the search.",
          "operationPath": "openapi_source#/paths/~1questions~1{ids}/get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.search-questions-by-tag.outputs.questions.question_id"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questions": "$response.body"
          }
        },
        {
          "stepId": "get-found-question-answers",
          "description": "Retrieve answers for the questions found in the search.",
          "operationPath": "openapi_source#/paths/~1questions~1{ids}~1answers/get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$steps.search-questions-by-tag.outputs.questions.question_id"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "answers": "$response.body"
          }
        }
      ],
      "outputs": {
        "questions": "$steps.get-found-question-details.outputs.questions",
        "answers": "$steps.get-found-question-answers.outputs.answers"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "check-authenticated-user-notifications",
      "summary": "Check for unread notifications and inbox items for the authenticated user.",
      "description": "Check for unread notifications and inbox items for the authenticated user.",
      "inputs": {
        "type": "object",
        "properties": {
          "pagesize": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "site": {
            "type": "string"
          },
          "since": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-my-unread-notifications",
          "description": "Retrieve unread notifications for the authenticated user.",
          "operationPath": "openapi_source#/paths/~1me~1notifications~1unread/get",
          "parameters": [
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "notifications": "$response.body"
          }
        },
        {
          "stepId": "get-my-unread-inbox-items",
          "description": "Retrieve unread inbox items for the authenticated user.",
          "operationPath": "openapi_source#/paths/~1me~1inbox~1unread/get",
          "parameters": [
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            },
            {
              "name": "since",
              "in": "query",
              "value": "$inputs.since"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "inbox_items": "$response.body"
          }
        }
      ],
      "outputs": {
        "notifications": "$steps.get-my-unread-notifications.outputs.notifications",
        "inbox_items": "$steps.get-my-unread-inbox-items.outputs.inbox_items"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "analyze-user-expertise-in-specific-tags",
      "summary": "Retrieve a user's profile and their top questions and answers within a specific set of tags.",
      "description": "Retrieve a user's profile and their top questions and answers within a specific set of tags.",
      "inputs": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "string"
          },
          "order": {
            "type": "string"
          },
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "fromdate": {
            "type": "string"
          },
          "todate": {
            "type": "string"
          },
          "pagesize": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "site": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-user-profile",
          "description": "Get profile details for a specific user.",
          "operationPath": "openapi_source#/paths/~1users~1{ids}/get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$inputs.ids"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "users": "$response.body"
          }
        },
        {
          "stepId": "get-user-top-answers-in-tags",
          "description": "Get the user's top-scoring answers within the specified tags.",
          "operationPath": "openapi_source#/paths/~1users~1{id}~1tags~1{tags}~1top-answers/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-user-profile.outputs.users.user_id"
            },
            {
              "name": "tags",
              "in": "path",
              "value": "$inputs.tags"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "answers": "$response.body"
          }
        },
        {
          "stepId": "get-user-top-questions-in-tags",
          "description": "Get the user's top-scoring questions within the specified tags.",
          "operationPath": "openapi_source#/paths/~1users~1{id}~1tags~1{tags}~1top-questions/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-user-profile.outputs.users.user_id"
            },
            {
              "name": "tags",
              "in": "path",
              "value": "$inputs.tags"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questions": "$response.body"
          }
        }
      ],
      "outputs": {
        "users": "$steps.get-user-profile.outputs.users",
        "answers": "$steps.get-user-top-answers-in-tags.outputs.answers",
        "questions": "$steps.get-user-top-questions-in-tags.outputs.questions"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "explore-tag-details",
      "summary": "Retrieve detailed information about specific tags, including their wikis, related tags, and frequently asked questions.",
      "description": "Retrieve detailed information about specific tags, including their wikis, related tags, and frequently asked questions.",
      "inputs": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "string"
          },
          "order": {
            "type": "string"
          },
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "fromdate": {
            "type": "string"
          },
          "todate": {
            "type": "string"
          },
          "pagesize": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "site": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-tags-info",
          "description": "Get detailed information for a set of tags.",
          "operationPath": "openapi_source#/paths/~1tags~1{tags}~1info/get",
          "parameters": [
            {
              "name": "tags",
              "in": "path",
              "value": "$inputs.tags"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tags": "$response.body"
          }
        },
        {
          "stepId": "get-tags-wikis",
          "description": "Get the wikis associated with the specified tags.",
          "operationPath": "openapi_source#/paths/~1tags~1{tags}~1wikis/get",
          "parameters": [
            {
              "name": "tags",
              "in": "path",
              "value": "$steps.get-tags-info.outputs.tags.name"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tag_wikis": "$response.body"
          }
        },
        {
          "stepId": "get-related-tags",
          "description": "Find tags that are commonly used together with the specified tags.",
          "operationPath": "openapi_source#/paths/~1tags~1{tags}~1related/get",
          "parameters": [
            {
              "name": "tags",
              "in": "path",
              "value": "$steps.get-tags-info.outputs.tags.name"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tags": "$response.body"
          }
        },
        {
          "stepId": "get-tags-faq",
          "description": "Get frequently asked questions associated with the specified tags.",
          "operationPath": "openapi_source#/paths/~1tags~1{tags}~1faq/get",
          "parameters": [
            {
              "name": "tags",
              "in": "path",
              "value": "$steps.get-tags-info.outputs.tags.name"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questions": "$response.body"
          }
        }
      ],
      "outputs": {
        "tags": "$steps.get-related-tags.outputs.tags",
        "tag_wikis": "$steps.get-tags-wikis.outputs.tag_wikis",
        "questions": "$steps.get-tags-faq.outputs.questions"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "comment-on-a-post",
      "summary": "Allows an authenticated user to add a comment to a specific post (question or answer). Requires write access.",
      "description": "Allows an authenticated user to add a comment to a specific post (question or answer). Requires write access.",
      "inputs": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "string"
          },
          "order": {
            "type": "string"
          },
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "fromdate": {
            "type": "string"
          },
          "todate": {
            "type": "string"
          },
          "pagesize": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "site": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "preview": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-target-post",
          "description": "Retrieve the post to comment on (to confirm existence and get ID).",
          "operationPath": "openapi_source#/paths/~1posts~1{ids}/get",
          "parameters": [
            {
              "name": "ids",
              "in": "path",
              "value": "$inputs.ids"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "min",
              "in": "query",
              "value": "$inputs.min"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fromdate",
              "in": "query",
              "value": "$inputs.fromdate"
            },
            {
              "name": "todate",
              "in": "query",
              "value": "$inputs.todate"
            },
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "posts": "$response.body"
          }
        },
        {
          "stepId": "add-comment-to-post",
          "description": "Add a new comment to the specified post.",
          "operationPath": "openapi_source#/paths/~1posts~1{id}~1comments~1add/post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-target-post.outputs.posts.post_id"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "site",
              "in": "query",
              "value": "$inputs.site"
            },
            {
              "name": "body",
              "in": "query",
              "value": "$inputs.body"
            },
            {
              "name": "preview",
              "in": "query",
              "value": "$inputs.preview"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "created_comment": "$response.body"
          }
        }
      ],
      "outputs": {
        "posts": "$steps.get-target-post.outputs.posts",
        "created_comment": "$steps.add-comment-to-post.outputs.created_comment"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "discover-stack-exchange-sites",
      "summary": "Retrieve the list of all Stack Exchange sites and then get detailed information about a specific site.",
      "description": "Retrieve the list of all Stack Exchange sites and then get detailed information about a specific site.",
      "inputs": {
        "type": "object",
        "properties": {
          "pagesize": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "site": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-all-sites",
          "description": "Get a list of all sites in the Stack Exchange network.",
          "operationPath": "openapi_source#/paths/~1sites/get",
          "parameters": [
            {
              "name": "pagesize",
              "in": "query",
              "value": "$inputs.pagesize"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sites": "$response.body"
          }
        },
        {
          "stepId": "get-specific-site-info",
          "description": "Get detailed statistics and information about a specific site.",
          "operationPath": "openapi_source#/paths/~1info/get",
          "parameters": [
            {
              "name": "site",
              "in": "query",
              "value": "$steps.list-all-sites.outputs.sites.api_site_parameter"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "info_object": "$response.body"
          }
        }
      ],
      "outputs": {
        "sites": "$steps.list-all-sites.outputs.sites",
        "info_object": "$steps.get-specific-site-info.outputs.info_object"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}