{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/opto22.com/pac/R1.0a/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "monitor-and-control-analog-output",
      "summary": "Allows a user to first discover all available analog output points, then read the current engineering unit (EU) value of a specific analog output, and finally set a new EU value for that output. This is useful for adjusting process parameters or controlling analog actuators in an industrial setting.",
      "description": "Allows a user to first discover all available analog output points, then read the current engineering unit (EU) value of a specific analog output, and finally set a new EU value for that output. This is useful for adjusting process parameters or controlling analog actuators in an industrial setting.",
      "inputs": {
        "type": "object",
        "properties": {
          "ioName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-analog-outputs",
          "description": "Returns the name and engineering units (EU) for all analog output points in the strategy.",
          "operationId": "readAnalogOutputs",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "analogOutputs": "$response.body#/0/analogOutputs"
          }
        },
        {
          "stepId": "read-analog-output-value",
          "description": "Reads the current value in engineering units (EU) of the specified analog output.",
          "operationId": "readAnalogOutputEu",
          "parameters": [
            {
              "name": "ioName",
              "in": "path",
              "value": "$steps.list-analog-outputs.outputs.analogOutputs.name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "set-analog-output-value",
          "description": "Sets a new value for the specified analog output point.",
          "operationId": "writeAnalogOutputEu",
          "parameters": [
            {
              "name": "ioName",
              "in": "path",
              "value": "$steps.list-analog-outputs.outputs.analogOutputs.name"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "ioName": "$steps.list-analog-outputs.outputs.analogOutputs[0].name",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "analogOutputs": "$steps.list-analog-outputs.outputs.analogOutputs",
        "value": "$steps.read-analog-output-value.outputs.value",
        "value_data": "$steps.set-analog-output-value.outputs.value_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "monitor-and-control-digital-output",
      "summary": "Enables a user to discover all digital output points, read the current state (on/off) of a specific digital output, and then set its state. This is commonly used for controlling binary devices like pumps, lights, or valves in an industrial automation system.",
      "description": "Enables a user to discover all digital output points, read the current state (on/off) of a specific digital output, and then set its state. This is commonly used for controlling binary devices like pumps, lights, or valves in an industrial automation system.",
      "inputs": {
        "type": "object",
        "properties": {
          "ioName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-digital-outputs",
          "description": "Returns the name and state (true = on, false = off) of all digital output points in the strategy.",
          "operationId": "readDigitalOutputs",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "digitalOutputs": "$response.body#/0/digitalOutputs"
          }
        },
        {
          "stepId": "read-digital-output-state",
          "description": "Reads the current state (true = on, false = off) of the specified digital output point.",
          "operationId": "readDigitalOutputState",
          "parameters": [
            {
              "name": "ioName",
              "in": "path",
              "value": "$steps.list-digital-outputs.outputs.digitalOutputs.name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "set-digital-output-state",
          "description": "Sets a new state (true = on, false = off) for the specified digital output point.",
          "operationId": "writeDigitalOutputState",
          "parameters": [
            {
              "name": "ioName",
              "in": "path",
              "value": "$steps.list-digital-outputs.outputs.digitalOutputs.name"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "ioName": "$steps.list-digital-outputs.outputs.digitalOutputs[0].name",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "state_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "digitalOutputs": "$steps.list-digital-outputs.outputs.digitalOutputs",
        "value": "$steps.read-digital-output-state.outputs.value",
        "state_data": "$steps.set-digital-output-state.outputs.state_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "comprehensive-controller-status-check",
      "summary": "Retrieves detailed information about the PAC controller's hardware, firmware, and the currently loaded control strategy, including its name, version, and running charts. This workflow is essential for initial system diagnostics and verifying the operational state of the controller.",
      "description": "Retrieves detailed information about the PAC controller's hardware, firmware, and the currently loaded control strategy, including its name, version, and running charts. This workflow is essential for initial system diagnostics and verifying the operational state of the controller.",
      "steps": [
        {
          "stepId": "get-device-details",
          "description": "Returns controller's type, firmware version, MAC addresses, and uptime.",
          "operationId": "readDeviceDetails",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "controllerType": "$response.body#/controllerType",
            "firmwareDate": "$response.body#/firmwareDate",
            "firmwareTime": "$response.body#/firmwareTime",
            "firmwareVersion": "$response.body#/firmwareVersion",
            "mac1": "$response.body#/mac1",
            "mac2": "$response.body#/mac2",
            "upTimeSeconds": "$response.body#/upTimeSeconds"
          }
        },
        {
          "stepId": "get-strategy-details",
          "description": "Returns the name, date, time, and CRC of the strategy currently in the controller, and the number of charts currently running.",
          "operationId": "readStrategyDetails",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "crc": "$response.body#/crc",
            "date": "$response.body#/date",
            "runningCharts": "$response.body#/runningCharts",
            "strategyName": "$response.body#/strategyName",
            "time": "$response.body#/time"
          }
        }
      ],
      "outputs": {
        "controllerType": "$steps.get-device-details.outputs.controllerType",
        "firmwareDate": "$steps.get-device-details.outputs.firmwareDate",
        "firmwareTime": "$steps.get-device-details.outputs.firmwareTime",
        "firmwareVersion": "$steps.get-device-details.outputs.firmwareVersion",
        "mac1": "$steps.get-device-details.outputs.mac1",
        "mac2": "$steps.get-device-details.outputs.mac2",
        "upTimeSeconds": "$steps.get-device-details.outputs.upTimeSeconds",
        "crc": "$steps.get-strategy-details.outputs.crc",
        "date": "$steps.get-strategy-details.outputs.date",
        "runningCharts": "$steps.get-strategy-details.outputs.runningCharts",
        "strategyName": "$steps.get-strategy-details.outputs.strategyName",
        "time": "$steps.get-strategy-details.outputs.time"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "read-and-update-integer32-variable",
      "summary": "Allows a user to discover all integer32 variables, read the current value of a specific integer32 variable, and then update it with a new value. This is useful for managing counters, status codes, or other integer-based process data within the PAC controller's strategy.",
      "description": "Allows a user to discover all integer32 variables, read the current value of a specific integer32 variable, and then update it with a new value. This is useful for managing counters, status codes, or other integer-based process data within the PAC controller's strategy.",
      "inputs": {
        "type": "object",
        "properties": {
          "int32Name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-int32-variables",
          "description": "Returns the name and value of all integer32 variables in the strategy.",
          "operationId": "readInt32Vars",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "int32Variables": "$response.body#/0/int32Variables"
          }
        },
        {
          "stepId": "read-int32-variable-value",
          "description": "Reads the current value of the specified integer32 variable.",
          "operationId": "readInt32Var",
          "parameters": [
            {
              "name": "int32Name",
              "in": "path",
              "value": "$steps.list-int32-variables.outputs.int32Variables.name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "update-int32-variable-value",
          "description": "Sets a new value for the specified integer32 variable.",
          "operationId": "writeInt32Var",
          "parameters": [
            {
              "name": "int32Name",
              "in": "path",
              "value": "$steps.list-int32-variables.outputs.int32Variables.name"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "int32Name": "$steps.list-int32-variables.outputs.int32Variables[0].name",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "int32Variables": "$steps.list-int32-variables.outputs.int32Variables",
        "value": "$steps.read-int32-variable-value.outputs.value",
        "value_data": "$steps.update-int32-variable-value.outputs.value_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-string-table-elements",
      "summary": "Allows a user to discover all string tables, read a specific element from a chosen table, and then update that element with a new string value. This is useful for managing configuration data, messages, or other text-based information stored in arrays within the PAC controller's strategy.",
      "description": "Allows a user to discover all string tables, read a specific element from a chosen table, and then update that element with a new string value. This is useful for managing configuration data, messages, or other text-based information stored in arrays within the PAC controller's strategy.",
      "inputs": {
        "type": "object",
        "properties": {
          "tableName": {
            "type": "string"
          },
          "index": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-string-tables",
          "description": "Returns an array of the name and length of all the string tables in the strategy.",
          "operationId": "readStringTables",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "stringTables": "$response.body#/0/stringTables"
          }
        },
        {
          "stepId": "read-string-table-element",
          "description": "Reads the value of a specified element from a string table.",
          "operationId": "readStringTableElement",
          "parameters": [
            {
              "name": "tableName",
              "in": "path",
              "value": "$steps.list-string-tables.outputs.stringTables.name"
            },
            {
              "name": "index",
              "in": "path",
              "value": "$inputs.index"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "write-string-table-element",
          "description": "Writes a new value to a specified element in a string table.",
          "operationId": "writeStringTableElement",
          "parameters": [
            {
              "name": "tableName",
              "in": "path",
              "value": "$steps.list-string-tables.outputs.stringTables.name"
            },
            {
              "name": "index",
              "in": "path",
              "value": "$inputs.index"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "tableName": "$steps.list-string-tables.outputs.stringTables[0].name",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "element_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "stringTables": "$steps.list-string-tables.outputs.stringTables",
        "value": "$steps.read-string-table-element.outputs.value",
        "element_data": "$steps.write-string-table-element.outputs.element_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}