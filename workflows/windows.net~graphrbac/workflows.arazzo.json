{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/windows.net/graphrbac/1.6/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "user-account-lifecycle-and-group-membership-check",
      "summary": "This workflow covers the full lifecycle of a user account, from creation and updates to checking their group memberships and eventual deletion. It's fundamental for identity management within the directory.",
      "description": "This workflow covers the full lifecycle of a user account, from creation and updates to checking their group memberships and eventual deletion. It's fundamental for identity management within the directory.",
      "inputs": {
        "type": "object",
        "properties": {
          "api-version": {
            "type": "string"
          },
          "tenantID": {
            "type": "string"
          },
          "accountEnabled": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "passwordProfile": {
            "type": "string"
          },
          "userPrincipalName": {
            "type": "string"
          },
          "mailNickname": {
            "type": "string"
          },
          "upnOrObjectId": {
            "type": "string"
          },
          "update-user-details_body": {
            "type": "object"
          },
          "objectId": {
            "type": "string"
          },
          "securityEnabledOnly": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-user",
          "description": "Creates a new user account.",
          "operationId": "Users_Create",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "accountEnabled": "$inputs.accountEnabled",
              "displayName": "$inputs.displayName",
              "passwordProfile": "$inputs.passwordProfile",
              "userPrincipalName": "$inputs.userPrincipalName",
              "mailNickname": "$inputs.mailNickname"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId",
            "userPrincipalName": "$response.body#/userPrincipalName"
          }
        },
        {
          "stepId": "get-user-details",
          "description": "Retrieves detailed information for the created user.",
          "operationId": "Users_Get",
          "parameters": [
            {
              "name": "upnOrObjectId",
              "in": "path",
              "value": "$inputs.upnOrObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId",
            "userPrincipalName": "$response.body#/userPrincipalName",
            "displayName": "$response.body#/displayName"
          }
        },
        {
          "stepId": "update-user-details",
          "description": "Updates specific properties of the user account.",
          "operationId": "Users_Update",
          "parameters": [
            {
              "name": "upnOrObjectId",
              "in": "path",
              "value": "$inputs.upnOrObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-user-details_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "get-user-member-groups",
          "description": "Gets a collection of object IDs of groups of which the user is a member.",
          "operationId": "Users_GetMemberGroups",
          "parameters": [
            {
              "name": "objectId",
              "in": "path",
              "value": "$inputs.objectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "securityEnabledOnly": "$inputs.securityEnabledOnly"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "delete-user",
          "description": "Deletes the user account from the directory.",
          "operationId": "Users_Delete",
          "parameters": [
            {
              "name": "upnOrObjectId",
              "in": "path",
              "value": "$inputs.upnOrObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        }
      ],
      "outputs": {
        "objectId": "$steps.get-user-details.outputs.objectId",
        "userPrincipalName": "$steps.get-user-details.outputs.userPrincipalName",
        "displayName": "$steps.get-user-details.outputs.displayName",
        "status": "$steps.delete-user.outputs.status",
        "value": "$steps.get-user-member-groups.outputs.value"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-application-with-owners-and-credentials",
      "summary": "This workflow allows an administrator to create a new application, assign owners to it, manage its key and password credentials, list its owners, and eventually delete it. This is crucial for setting up and maintaining applications within the directory.",
      "description": "This workflow allows an administrator to create a new application, assign owners to it, manage its key and password credentials, list its owners, and eventually delete it. This is crucial for setting up and maintaining applications within the directory.",
      "inputs": {
        "type": "object",
        "properties": {
          "api-version": {
            "type": "string"
          },
          "tenantID": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "applicationObjectId": {
            "type": "string"
          },
          "add-application-owner_body": {
            "type": "object"
          },
          "update-application-key-credentials_body": {
            "type": "object"
          },
          "update-application-password-credentials_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-application",
          "description": "Creates a new application in the directory.",
          "operationId": "Applications_Create",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "displayName": "$inputs.displayName"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId",
            "appId": "$response.body#/appId"
          }
        },
        {
          "stepId": "add-application-owner",
          "description": "Adds an owner (e.g., a user or group) to the newly created application.",
          "operationId": "Applications_AddOwner",
          "parameters": [
            {
              "name": "applicationObjectId",
              "in": "path",
              "value": "$inputs.applicationObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.add-application-owner_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "update-application-key-credentials",
          "description": "Updates the key credentials associated with the application.",
          "operationId": "Applications_UpdateKeyCredentials",
          "parameters": [
            {
              "name": "applicationObjectId",
              "in": "path",
              "value": "$inputs.applicationObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-application-key-credentials_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "update-application-password-credentials",
          "description": "Updates the password credentials associated with the application.",
          "operationId": "Applications_UpdatePasswordCredentials",
          "parameters": [
            {
              "name": "applicationObjectId",
              "in": "path",
              "value": "$inputs.applicationObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.update-application-password-credentials_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "list-application-owners",
          "description": "Retrieves a list of all owners assigned to the application.",
          "operationId": "Applications_ListOwners",
          "parameters": [
            {
              "name": "applicationObjectId",
              "in": "path",
              "value": "$inputs.applicationObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "delete-application",
          "description": "Deletes the application from the directory.",
          "operationId": "Applications_Delete",
          "parameters": [
            {
              "name": "applicationObjectId",
              "in": "path",
              "value": "$inputs.applicationObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        }
      ],
      "outputs": {
        "objectId": "$steps.create-application.outputs.objectId",
        "appId": "$steps.create-application.outputs.appId",
        "status": "$steps.delete-application.outputs.status",
        "value": "$steps.list-application-owners.outputs.value"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "comprehensive-group-management",
      "summary": "This workflow enables the creation and comprehensive management of security groups, including adding and removing members, checking membership, and retrieving group details. This is essential for managing access control and user permissions within the directory.",
      "description": "This workflow enables the creation and comprehensive management of security groups, including adding and removing members, checking membership, and retrieving group details. This is essential for managing access control and user permissions within the directory.",
      "inputs": {
        "type": "object",
        "properties": {
          "api-version": {
            "type": "string"
          },
          "tenantID": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "mailEnabled": {
            "type": "string"
          },
          "mailNickname": {
            "type": "string"
          },
          "securityEnabled": {
            "type": "string"
          },
          "accountEnabled": {
            "type": "string"
          },
          "passwordProfile": {
            "type": "string"
          },
          "userPrincipalName": {
            "type": "string"
          },
          "groupObjectId": {
            "type": "string"
          },
          "add-group-member_body": {
            "type": "object"
          },
          "objectId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "memberId": {
            "type": "string"
          },
          "memberObjectId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-group",
          "description": "Creates a new security group in the directory.",
          "operationId": "Groups_Create",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "displayName": "$inputs.displayName",
              "mailEnabled": "$inputs.mailEnabled",
              "mailNickname": "$inputs.mailNickname",
              "securityEnabled": "$inputs.securityEnabled"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId"
          }
        },
        {
          "stepId": "create-user-for-membership",
          "description": "Creates a user to be added as a member to the group (example dependency).",
          "operationId": "Users_Create",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "accountEnabled": "$inputs.accountEnabled",
              "displayName": "$inputs.displayName",
              "passwordProfile": "$inputs.passwordProfile",
              "userPrincipalName": "$inputs.userPrincipalName",
              "mailNickname": "$inputs.mailNickname"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId",
            "userPrincipalName": "$response.body#/userPrincipalName"
          }
        },
        {
          "stepId": "add-group-member",
          "description": "Adds a member (e.g., a user) to the created group.",
          "operationId": "Groups_AddMember",
          "parameters": [
            {
              "name": "groupObjectId",
              "in": "path",
              "value": "$inputs.groupObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.add-group-member_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "list-group-members",
          "description": "Retrieves all members of the group.",
          "operationId": "Groups_GetGroupMembers",
          "parameters": [
            {
              "name": "objectId",
              "in": "path",
              "value": "$inputs.objectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "check-group-membership",
          "description": "Checks if a specific user is a direct or transitive member of the group.",
          "operationId": "Groups_IsMemberOf",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "groupId": "$inputs.groupId",
              "memberId": "$inputs.memberId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "remove-group-member",
          "description": "Removes a member from the group.",
          "operationId": "Groups_RemoveMember",
          "parameters": [
            {
              "name": "groupObjectId",
              "in": "path",
              "value": "$inputs.groupObjectId"
            },
            {
              "name": "memberObjectId",
              "in": "path",
              "value": "$inputs.memberObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "delete-group",
          "description": "Deletes the group from the directory.",
          "operationId": "Groups_Delete",
          "parameters": [
            {
              "name": "objectId",
              "in": "path",
              "value": "$inputs.objectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        }
      ],
      "outputs": {
        "objectId": "$steps.create-user-for-membership.outputs.objectId",
        "userPrincipalName": "$steps.create-user-for-membership.outputs.userPrincipalName",
        "status": "$steps.delete-group.outputs.status",
        "value": "$steps.check-group-membership.outputs.value"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "service-principal-and-oauth2-permission-grant-management",
      "summary": "This workflow allows for the creation of a service principal and then managing its OAuth2 permissions, which is a common scenario for enabling applications to access resources securely and controlling their access.",
      "description": "This workflow allows for the creation of a service principal and then managing its OAuth2 permissions, which is a common scenario for enabling applications to access resources securely and controlling their access.",
      "inputs": {
        "type": "object",
        "properties": {
          "api-version": {
            "type": "string"
          },
          "tenantID": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "applicationID": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "consentType": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "$filter": {
            "type": "string"
          },
          "objectId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-service-principal",
          "description": "Creates a new service principal in the directory.",
          "operationId": "ServicePrincipals_Create",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "appId": "$inputs.appId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId",
            "appId": "$response.body#/appId"
          }
        },
        {
          "stepId": "get-service-principal-id-by-app-id",
          "description": "Retrieves the object ID of the service principal using its application ID.",
          "operationId": "Applications_GetServicePrincipalsIdByAppId",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            },
            {
              "name": "applicationID",
              "in": "path",
              "value": "$inputs.applicationID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "create-oauth2-permission-grant",
          "description": "Grants OAuth2 permissions for the created service principal to access a resource.",
          "operationId": "OAuth2PermissionGrant_Create",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "clientId": "$inputs.clientId",
              "consentType": "$inputs.consentType",
              "resourceId": "$inputs.resourceId",
              "scope": "$inputs.scope"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId"
          }
        },
        {
          "stepId": "list-oauth2-permission-grants",
          "description": "Queries and lists existing OAuth2 permission grants, potentially filtered by the service principal.",
          "operationId": "OAuth2PermissionGrant_List",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "value": "$inputs.$filter"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "delete-oauth2-permission-grant",
          "description": "Deletes a specific OAuth2 permission grant.",
          "operationId": "OAuth2PermissionGrant_Delete",
          "parameters": [
            {
              "name": "objectId",
              "in": "path",
              "value": "$inputs.objectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        }
      ],
      "outputs": {
        "objectId": "$steps.create-oauth2-permission-grant.outputs.objectId",
        "appId": "$steps.create-service-principal.outputs.appId",
        "value": "$steps.list-oauth2-permission-grants.outputs.value",
        "status": "$steps.delete-oauth2-permission-grant.outputs.status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "audit-users-owned-objects",
      "summary": "This workflow allows an administrator to identify all directory objects (applications, groups, service principals) owned by the currently signed-in user, and then retrieve detailed information about those objects. This is useful for auditing and access review purposes.",
      "description": "This workflow allows an administrator to identify all directory objects (applications, groups, service principals) owned by the currently signed-in user, and then retrieve detailed information about those objects. This is useful for auditing and access review purposes.",
      "inputs": {
        "type": "object",
        "properties": {
          "api-version": {
            "type": "string"
          },
          "tenantID": {
            "type": "string"
          },
          "includeDirectoryObjectReferences": {
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          },
          "types": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-signed-in-user-details",
          "description": "Retrieves the details for the currently logged-in user.",
          "operationId": "SignedInUser_Get",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId",
            "displayName": "$response.body#/displayName"
          }
        },
        {
          "stepId": "list-owned-objects-by-signed-in-user",
          "description": "Gets the list of directory objects that are owned by the signed-in user.",
          "operationId": "SignedInUser_ListOwnedObjects",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "get-objects-by-ids",
          "description": "Retrieves detailed information for the objects identified as owned by the user.",
          "operationId": "Objects_GetObjectsByObjectIds",
          "parameters": [
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "includeDirectoryObjectReferences": "$inputs.includeDirectoryObjectReferences",
              "objectIds": "$inputs.objectIds",
              "types": "$inputs.types"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        }
      ],
      "outputs": {
        "objectId": "$steps.get-signed-in-user-details.outputs.objectId",
        "displayName": "$steps.get-signed-in-user-details.outputs.displayName",
        "value": "$steps.get-objects-by-ids.outputs.value"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "recover-deleted-application",
      "summary": "This workflow allows an administrator to list recently soft-deleted applications and then either restore a specific one or hard-delete it permanently, providing a recovery and cleanup mechanism for accidental deletions.",
      "description": "This workflow allows an administrator to list recently soft-deleted applications and then either restore a specific one or hard-delete it permanently, providing a recovery and cleanup mechanism for accidental deletions.",
      "inputs": {
        "type": "object",
        "properties": {
          "$filter": {
            "type": "string"
          },
          "api-version": {
            "type": "string"
          },
          "tenantID": {
            "type": "string"
          },
          "objectId": {
            "type": "string"
          },
          "applicationObjectId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-deleted-applications",
          "description": "Gets a list of applications that have been soft-deleted from the directory.",
          "operationId": "DeletedApplications_List",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "value": "$inputs.$filter"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "restore-deleted-application",
          "description": "Restores a specific soft-deleted application, making it active again.",
          "operationId": "DeletedApplications_Restore",
          "parameters": [
            {
              "name": "objectId",
              "in": "path",
              "value": "$inputs.objectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "objectId": "$response.body#/objectId",
            "appId": "$response.body#/appId"
          }
        },
        {
          "stepId": "hard-delete-application",
          "description": "Permanently deletes a soft-deleted application, making it unrecoverable.",
          "operationId": "DeletedApplications_HardDelete",
          "parameters": [
            {
              "name": "applicationObjectId",
              "in": "path",
              "value": "$inputs.applicationObjectId"
            },
            {
              "name": "api-version",
              "in": "query",
              "value": "$inputs.api-version"
            },
            {
              "name": "tenantID",
              "in": "path",
              "value": "$inputs.tenantID"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status"
          }
        }
      ],
      "outputs": {
        "value": "$steps.list-deleted-applications.outputs.value",
        "objectId": "$steps.restore-deleted-application.outputs.objectId",
        "appId": "$steps.restore-deleted-application.outputs.appId",
        "status": "$steps.hard-delete-application.outputs.status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}