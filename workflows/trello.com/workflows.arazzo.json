{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/trello.com/main/1.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "create-and-configure-trello-board",
      "summary": "This workflow allows a user to create a new Trello board, add essential lists (To Do, Doing, Done), define custom labels, and invite members, setting up a complete project space.",
      "description": "This workflow allows a user to create a new Trello board, add essential lists (To Do, Doing, Done), define custom labels, and invite members, setting up a complete project space.",
      "inputs": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "idOrganization": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "prefs/permissionLevel": {
            "type": "string"
          },
          "idBoard": {
            "type": "string"
          },
          "pos": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-board",
          "description": "Creates a new Trello board with a specified name, description, and initial permissions.",
          "operationId": "addBoards",
          "parameters": [
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "desc": "$inputs.desc",
              "idOrganization": "$inputs.idOrganization",
              "name": "$inputs.name",
              "prefs/permissionLevel": "$inputs.prefs/permissionLevel"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-todo-list",
          "description": "Adds a 'To Do' list to the newly created board.",
          "operationId": "addBoardsListsByIdBoard",
          "parameters": [
            {
              "name": "idBoard",
              "in": "path",
              "value": "$steps.create-board.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idBoard": "$steps.create-board.outputs.id",
              "name": "$inputs.name",
              "pos": "$inputs.pos"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-doing-list",
          "description": "Adds a 'Doing' list to the board.",
          "operationId": "addBoardsListsByIdBoard",
          "parameters": [
            {
              "name": "idBoard",
              "in": "path",
              "value": "$steps.create-board.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idBoard": "$steps.create-board.outputs.id",
              "name": "$inputs.name",
              "pos": "$inputs.pos"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-done-list",
          "description": "Adds a 'Done' list to the board.",
          "operationId": "addBoardsListsByIdBoard",
          "parameters": [
            {
              "name": "idBoard",
              "in": "path",
              "value": "$steps.create-board.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idBoard": "$steps.create-board.outputs.id",
              "name": "$inputs.name",
              "pos": "$inputs.pos"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-high-priority-label",
          "description": "Adds a 'High Priority' label with a specific color to the board.",
          "operationId": "addBoardsLabelsByIdBoard",
          "parameters": [
            {
              "name": "idBoard",
              "in": "path",
              "value": "$steps.create-board.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idBoard": "$steps.create-board.outputs.id",
              "color": "$inputs.color",
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-board-member-by-email",
          "description": "Invites a new member to the board by their email address and sets their membership type.",
          "operationId": "updateBoardsMembersByIdBoard",
          "parameters": [
            {
              "name": "idBoard",
              "in": "path",
              "value": "$steps.create-board.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idBoard": "$steps.create-board.outputs.id",
              "email": "$inputs.email",
              "fullName": "$inputs.fullName",
              "type": "$inputs.type"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "email_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "id": "$steps.add-high-priority-label.outputs.id",
        "email_data": "$steps.add-board-member-by-email.outputs.email_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-card-details-and-progress",
      "summary": "This workflow demonstrates how to create a new card, enrich it with details like description, due date, and a checklist, and then track its progress by completing checklist items and adding comments, finally archiving it.",
      "description": "This workflow demonstrates how to create a new card, enrich it with details like description, due date, and a checklist, and then track its progress by completing checklist items and adding comments, finally archiving it.",
      "inputs": {
        "type": "object",
        "properties": {
          "idBoard": {
            "type": "string"
          },
          "cards": {
            "type": "string"
          },
          "card_fields": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "idCard": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "idChecklist": {
            "type": "string"
          },
          "idCheckItem": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-board-lists",
          "description": "Retrieves all lists on a specified board to find a target list for the new card.",
          "operationId": "getBoardsListsByIdBoard",
          "parameters": [
            {
              "name": "idBoard",
              "in": "path",
              "value": "$inputs.idBoard"
            },
            {
              "name": "cards",
              "in": "query",
              "value": "$inputs.cards"
            },
            {
              "name": "card_fields",
              "in": "query",
              "value": "$inputs.card_fields"
            },
            {
              "name": "filter",
              "in": "query",
              "value": "$inputs.filter"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "lists": "$response.body#/lists"
          }
        },
        {
          "stepId": "create-card",
          "description": "Creates a new card in a specific list on the board.",
          "operationId": "addCards",
          "parameters": [
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idList": "$steps.get-board-lists.outputs.lists[0].id",
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "update-card-description",
          "description": "Adds or updates the description of the card.",
          "operationId": "updateCardsDescByIdCard",
          "parameters": [
            {
              "name": "idCard",
              "in": "path",
              "value": "$steps.create-card.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idCard": "$steps.create-card.outputs.id",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "description_data": "$response.body"
          }
        },
        {
          "stepId": "set-card-due-date",
          "description": "Sets a due date for the card.",
          "operationId": "updateCardsDueByIdCard",
          "parameters": [
            {
              "name": "idCard",
              "in": "path",
              "value": "$steps.create-card.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idCard": "$steps.create-card.outputs.id",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "date_data": "$response.body"
          }
        },
        {
          "stepId": "add-card-checklist",
          "description": "Adds a new checklist to the card.",
          "operationId": "addCardsChecklistsByIdCard",
          "parameters": [
            {
              "name": "idCard",
              "in": "path",
              "value": "$steps.create-card.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idCard": "$steps.create-card.outputs.id",
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-checklist-item",
          "description": "Adds an item to the checklist.",
          "operationId": "addCardsChecklistCheckItemByIdCardByIdChecklist",
          "parameters": [
            {
              "name": "idCard",
              "in": "path",
              "value": "$steps.create-card.outputs.id"
            },
            {
              "name": "idChecklist",
              "in": "path",
              "value": "$steps.add-card-checklist.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idCard": "$steps.create-card.outputs.id",
              "idChecklist": "$steps.add-card-checklist.outputs.id",
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "complete-checklist-item",
          "description": "Marks a checklist item as complete.",
          "operationId": "updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem",
          "parameters": [
            {
              "name": "idCard",
              "in": "path",
              "value": "$steps.create-card.outputs.id"
            },
            {
              "name": "idChecklist",
              "in": "path",
              "value": "$steps.add-card-checklist.outputs.id"
            },
            {
              "name": "idCheckItem",
              "in": "path",
              "value": "$steps.add-checklist-item.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idCard": "$steps.create-card.outputs.id",
              "idChecklist": "$steps.add-card-checklist.outputs.id",
              "idCheckItem": "$steps.add-checklist-item.outputs.id",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "item_data": "$response.body"
          }
        },
        {
          "stepId": "add-card-comment",
          "description": "Adds a comment to the card's activity feed.",
          "operationId": "addCardsActionsCommentsByIdCard",
          "parameters": [
            {
              "name": "idCard",
              "in": "path",
              "value": "$steps.create-card.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idCard": "$steps.create-card.outputs.id",
              "text": "$inputs.text"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "comment_data": "$response.body"
          }
        },
        {
          "stepId": "archive-card",
          "description": "Archives the card, marking it as closed.",
          "operationId": "updateCardsClosedByIdCard",
          "parameters": [
            {
              "name": "idCard",
              "in": "path",
              "value": "$steps.create-card.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idCard": "$steps.create-card.outputs.id",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "card_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "lists": "$steps.get-board-lists.outputs.lists",
        "id": "$steps.add-checklist-item.outputs.id",
        "description_data": "$steps.update-card-description.outputs.description_data",
        "date_data": "$steps.set-card-due-date.outputs.date_data",
        "item_data": "$steps.complete-checklist-item.outputs.item_data",
        "comment_data": "$steps.add-card-comment.outputs.comment_data",
        "card_data": "$steps.archive-card.outputs.card_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "update-user-profile-and-preferences",
      "summary": "This workflow allows a user to retrieve their current profile details, update their full name and bio, upload a new avatar, and adjust personal preferences like color blind mode.",
      "description": "This workflow allows a user to retrieve their current profile details, update their full name and bio, upload a new avatar, and adjust personal preferences like color blind mode.",
      "inputs": {
        "type": "object",
        "properties": {
          "idMember": {
            "type": "string"
          },
          "actions": {
            "type": "string"
          },
          "actions_entities": {
            "type": "string"
          },
          "actions_display": {
            "type": "string"
          },
          "actions_limit": {
            "type": "string"
          },
          "action_fields": {
            "type": "string"
          },
          "action_since": {
            "type": "string"
          },
          "action_before": {
            "type": "string"
          },
          "cards": {
            "type": "string"
          },
          "card_fields": {
            "type": "string"
          },
          "card_members": {
            "type": "string"
          },
          "card_member_fields": {
            "type": "string"
          },
          "card_attachments": {
            "type": "string"
          },
          "card_attachment_fields": {
            "type": "string"
          },
          "card_stickers": {
            "type": "string"
          },
          "boards": {
            "type": "string"
          },
          "board_fields": {
            "type": "string"
          },
          "board_actions": {
            "type": "string"
          },
          "board_actions_entities": {
            "type": "string"
          },
          "board_actions_display": {
            "type": "string"
          },
          "board_actions_format": {
            "type": "string"
          },
          "board_actions_since": {
            "type": "string"
          },
          "board_actions_limit": {
            "type": "string"
          },
          "board_action_fields": {
            "type": "string"
          },
          "board_lists": {
            "type": "string"
          },
          "board_memberships": {
            "type": "string"
          },
          "board_organization": {
            "type": "string"
          },
          "board_organization_fields": {
            "type": "string"
          },
          "boardsInvited": {
            "type": "string"
          },
          "boardsInvited_fields": {
            "type": "string"
          },
          "boardStars": {
            "type": "string"
          },
          "savedSearches": {
            "type": "string"
          },
          "organizations": {
            "type": "string"
          },
          "organization_fields": {
            "type": "string"
          },
          "organization_paid_account": {
            "type": "string"
          },
          "organizationsInvited": {
            "type": "string"
          },
          "organizationsInvited_fields": {
            "type": "string"
          },
          "notifications": {
            "type": "string"
          },
          "notifications_entities": {
            "type": "string"
          },
          "notifications_display": {
            "type": "string"
          },
          "notifications_limit": {
            "type": "string"
          },
          "notification_fields": {
            "type": "string"
          },
          "notification_memberCreator": {
            "type": "string"
          },
          "notification_memberCreator_fields": {
            "type": "string"
          },
          "notification_before": {
            "type": "string"
          },
          "notification_since": {
            "type": "string"
          },
          "tokens": {
            "type": "string"
          },
          "paid_account": {
            "type": "string"
          },
          "boardBackgrounds": {
            "type": "string"
          },
          "customBoardBackgrounds": {
            "type": "string"
          },
          "customStickers": {
            "type": "string"
          },
          "customEmoji": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "file": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-my-profile",
          "description": "Retrieves the current user's profile information. Use 'me' as the idMember to get the authenticated user's profile.",
          "operationId": "getMembersByIdMember",
          "parameters": [
            {
              "name": "idMember",
              "in": "path",
              "value": "$inputs.idMember"
            },
            {
              "name": "actions",
              "in": "query",
              "value": "$inputs.actions"
            },
            {
              "name": "actions_entities",
              "in": "query",
              "value": "$inputs.actions_entities"
            },
            {
              "name": "actions_display",
              "in": "query",
              "value": "$inputs.actions_display"
            },
            {
              "name": "actions_limit",
              "in": "query",
              "value": "$inputs.actions_limit"
            },
            {
              "name": "action_fields",
              "in": "query",
              "value": "$inputs.action_fields"
            },
            {
              "name": "action_since",
              "in": "query",
              "value": "$inputs.action_since"
            },
            {
              "name": "action_before",
              "in": "query",
              "value": "$inputs.action_before"
            },
            {
              "name": "cards",
              "in": "query",
              "value": "$inputs.cards"
            },
            {
              "name": "card_fields",
              "in": "query",
              "value": "$inputs.card_fields"
            },
            {
              "name": "card_members",
              "in": "query",
              "value": "$inputs.card_members"
            },
            {
              "name": "card_member_fields",
              "in": "query",
              "value": "$inputs.card_member_fields"
            },
            {
              "name": "card_attachments",
              "in": "query",
              "value": "$inputs.card_attachments"
            },
            {
              "name": "card_attachment_fields",
              "in": "query",
              "value": "$inputs.card_attachment_fields"
            },
            {
              "name": "card_stickers",
              "in": "query",
              "value": "$inputs.card_stickers"
            },
            {
              "name": "boards",
              "in": "query",
              "value": "$inputs.boards"
            },
            {
              "name": "board_fields",
              "in": "query",
              "value": "$inputs.board_fields"
            },
            {
              "name": "board_actions",
              "in": "query",
              "value": "$inputs.board_actions"
            },
            {
              "name": "board_actions_entities",
              "in": "query",
              "value": "$inputs.board_actions_entities"
            },
            {
              "name": "board_actions_display",
              "in": "query",
              "value": "$inputs.board_actions_display"
            },
            {
              "name": "board_actions_format",
              "in": "query",
              "value": "$inputs.board_actions_format"
            },
            {
              "name": "board_actions_since",
              "in": "query",
              "value": "$inputs.board_actions_since"
            },
            {
              "name": "board_actions_limit",
              "in": "query",
              "value": "$inputs.board_actions_limit"
            },
            {
              "name": "board_action_fields",
              "in": "query",
              "value": "$inputs.board_action_fields"
            },
            {
              "name": "board_lists",
              "in": "query",
              "value": "$inputs.board_lists"
            },
            {
              "name": "board_memberships",
              "in": "query",
              "value": "$inputs.board_memberships"
            },
            {
              "name": "board_organization",
              "in": "query",
              "value": "$inputs.board_organization"
            },
            {
              "name": "board_organization_fields",
              "in": "query",
              "value": "$inputs.board_organization_fields"
            },
            {
              "name": "boardsInvited",
              "in": "query",
              "value": "$inputs.boardsInvited"
            },
            {
              "name": "boardsInvited_fields",
              "in": "query",
              "value": "$inputs.boardsInvited_fields"
            },
            {
              "name": "boardStars",
              "in": "query",
              "value": "$inputs.boardStars"
            },
            {
              "name": "savedSearches",
              "in": "query",
              "value": "$inputs.savedSearches"
            },
            {
              "name": "organizations",
              "in": "query",
              "value": "$inputs.organizations"
            },
            {
              "name": "organization_fields",
              "in": "query",
              "value": "$inputs.organization_fields"
            },
            {
              "name": "organization_paid_account",
              "in": "query",
              "value": "$inputs.organization_paid_account"
            },
            {
              "name": "organizationsInvited",
              "in": "query",
              "value": "$inputs.organizationsInvited"
            },
            {
              "name": "organizationsInvited_fields",
              "in": "query",
              "value": "$inputs.organizationsInvited_fields"
            },
            {
              "name": "notifications",
              "in": "query",
              "value": "$inputs.notifications"
            },
            {
              "name": "notifications_entities",
              "in": "query",
              "value": "$inputs.notifications_entities"
            },
            {
              "name": "notifications_display",
              "in": "query",
              "value": "$inputs.notifications_display"
            },
            {
              "name": "notifications_limit",
              "in": "query",
              "value": "$inputs.notifications_limit"
            },
            {
              "name": "notification_fields",
              "in": "query",
              "value": "$inputs.notification_fields"
            },
            {
              "name": "notification_memberCreator",
              "in": "query",
              "value": "$inputs.notification_memberCreator"
            },
            {
              "name": "notification_memberCreator_fields",
              "in": "query",
              "value": "$inputs.notification_memberCreator_fields"
            },
            {
              "name": "notification_before",
              "in": "query",
              "value": "$inputs.notification_before"
            },
            {
              "name": "notification_since",
              "in": "query",
              "value": "$inputs.notification_since"
            },
            {
              "name": "tokens",
              "in": "query",
              "value": "$inputs.tokens"
            },
            {
              "name": "paid_account",
              "in": "query",
              "value": "$inputs.paid_account"
            },
            {
              "name": "boardBackgrounds",
              "in": "query",
              "value": "$inputs.boardBackgrounds"
            },
            {
              "name": "customBoardBackgrounds",
              "in": "query",
              "value": "$inputs.customBoardBackgrounds"
            },
            {
              "name": "customStickers",
              "in": "query",
              "value": "$inputs.customStickers"
            },
            {
              "name": "customEmoji",
              "in": "query",
              "value": "$inputs.customEmoji"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "fullName": "$response.body#/fullName",
            "bio": "$response.body#/bio",
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "update-full-name",
          "description": "Updates the user's full name.",
          "operationId": "updateMembersFullNameByIdMember",
          "parameters": [
            {
              "name": "idMember",
              "in": "path",
              "value": "$steps.get-my-profile.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idMember": "$steps.get-my-profile.outputs.id",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "name_data": "$response.body"
          }
        },
        {
          "stepId": "update-bio",
          "description": "Updates the user's biography.",
          "operationId": "updateMembersBioByIdMember",
          "parameters": [
            {
              "name": "idMember",
              "in": "path",
              "value": "$steps.get-my-profile.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idMember": "$steps.get-my-profile.outputs.id",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "bio_data": "$response.body"
          }
        },
        {
          "stepId": "upload-avatar",
          "description": "Uploads a new avatar image for the user.",
          "operationId": "addMembersAvatarByIdMember",
          "parameters": [
            {
              "name": "idMember",
              "in": "path",
              "value": "$steps.get-my-profile.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idMember": "$steps.get-my-profile.outputs.id",
              "file": "$inputs.file"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "avatar_data": "$response.body"
          }
        },
        {
          "stepId": "toggle-color-blind-mode",
          "description": "Toggles the color blind mode preference for the user.",
          "operationId": "updateMembersPrefsColorBlindByIdMember",
          "parameters": [
            {
              "name": "idMember",
              "in": "path",
              "value": "$steps.get-my-profile.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idMember": "$steps.get-my-profile.outputs.id",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "mode_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "fullName": "$steps.get-my-profile.outputs.fullName",
        "bio": "$steps.get-my-profile.outputs.bio",
        "id": "$steps.get-my-profile.outputs.id",
        "name_data": "$steps.update-full-name.outputs.name_data",
        "bio_data": "$steps.update-bio.outputs.bio_data",
        "avatar_data": "$steps.upload-avatar.outputs.avatar_data",
        "mode_data": "$steps.toggle-color-blind-mode.outputs.mode_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-board-webhooks",
      "summary": "This workflow demonstrates how to create a webhook to monitor changes on a specific Trello board, retrieve its details, and then delete it when no longer needed.",
      "description": "This workflow demonstrates how to create a webhook to monitor changes on a specific Trello board, retrieve its details, and then delete it when no longer needed.",
      "inputs": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "active": {
            "type": "string"
          },
          "callbackURL": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "idModel": {
            "type": "string"
          },
          "idWebhook": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-board-webhook",
          "description": "Creates a new webhook to listen for events on a Trello board.",
          "operationId": "addWebhooks",
          "parameters": [
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "active": "$inputs.active",
              "callbackURL": "$inputs.callbackURL",
              "description": "$inputs.description",
              "idModel": "$inputs.idModel"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "get-webhook-details",
          "description": "Retrieves details of the created webhook.",
          "operationId": "getWebhooksByIdWebhook",
          "parameters": [
            {
              "name": "idWebhook",
              "in": "path",
              "value": "$steps.create-board-webhook.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "active": "$response.body#/active",
            "callbackURL": "$response.body#/callbackURL"
          }
        },
        {
          "stepId": "deactivate-webhook",
          "description": "Deactivates the webhook to temporarily stop receiving notifications.",
          "operationId": "updateWebhooksActiveByIdWebhook",
          "parameters": [
            {
              "name": "idWebhook",
              "in": "path",
              "value": "$steps.create-board-webhook.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "idWebhook": "$steps.create-board-webhook.outputs.id",
              "value": "$inputs.value"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_data": "$response.body"
          }
        },
        {
          "stepId": "delete-webhook",
          "description": "Deletes the webhook when it is no longer needed.",
          "operationId": "deleteWebhooksByIdWebhook",
          "parameters": [
            {
              "name": "idWebhook",
              "in": "path",
              "value": "$steps.create-board-webhook.outputs.id"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "webhook_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "id": "$steps.get-webhook-details.outputs.id",
        "active": "$steps.get-webhook-details.outputs.active",
        "callbackURL": "$steps.get-webhook-details.outputs.callbackURL",
        "webhook_data": "$steps.delete-webhook.outputs.webhook_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "global-search-for-trello-items",
      "summary": "This workflow allows a user to perform a global search across their Trello data, specifically finding relevant cards, boards, and members based on a query.",
      "description": "This workflow allows a user to perform a global search across their Trello data, specifically finding relevant cards, boards, and members based on a query.",
      "inputs": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "idBoards": {
            "type": "string"
          },
          "idOrganizations": {
            "type": "string"
          },
          "idCards": {
            "type": "string"
          },
          "modelTypes": {
            "type": "string"
          },
          "board_fields": {
            "type": "string"
          },
          "boards_limit": {
            "type": "string"
          },
          "card_fields": {
            "type": "string"
          },
          "cards_limit": {
            "type": "string"
          },
          "cards_page": {
            "type": "string"
          },
          "card_board": {
            "type": "string"
          },
          "card_list": {
            "type": "string"
          },
          "card_members": {
            "type": "string"
          },
          "card_stickers": {
            "type": "string"
          },
          "card_attachments": {
            "type": "string"
          },
          "organization_fields": {
            "type": "string"
          },
          "organizations_limit": {
            "type": "string"
          },
          "member_fields": {
            "type": "string"
          },
          "members_limit": {
            "type": "string"
          },
          "partial": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "idBoard": {
            "type": "string"
          },
          "idOrganization": {
            "type": "string"
          },
          "onlyOrgMembers": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-all-models",
          "description": "Searches for various Trello entities (boards, cards, members, organizations, actions) based on a query string.",
          "operationId": "getSearch",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "value": "$inputs.query"
            },
            {
              "name": "idBoards",
              "in": "query",
              "value": "$inputs.idBoards"
            },
            {
              "name": "idOrganizations",
              "in": "query",
              "value": "$inputs.idOrganizations"
            },
            {
              "name": "idCards",
              "in": "query",
              "value": "$inputs.idCards"
            },
            {
              "name": "modelTypes",
              "in": "query",
              "value": "$inputs.modelTypes"
            },
            {
              "name": "board_fields",
              "in": "query",
              "value": "$inputs.board_fields"
            },
            {
              "name": "boards_limit",
              "in": "query",
              "value": "$inputs.boards_limit"
            },
            {
              "name": "card_fields",
              "in": "query",
              "value": "$inputs.card_fields"
            },
            {
              "name": "cards_limit",
              "in": "query",
              "value": "$inputs.cards_limit"
            },
            {
              "name": "cards_page",
              "in": "query",
              "value": "$inputs.cards_page"
            },
            {
              "name": "card_board",
              "in": "query",
              "value": "$inputs.card_board"
            },
            {
              "name": "card_list",
              "in": "query",
              "value": "$inputs.card_list"
            },
            {
              "name": "card_members",
              "in": "query",
              "value": "$inputs.card_members"
            },
            {
              "name": "card_stickers",
              "in": "query",
              "value": "$inputs.card_stickers"
            },
            {
              "name": "card_attachments",
              "in": "query",
              "value": "$inputs.card_attachments"
            },
            {
              "name": "organization_fields",
              "in": "query",
              "value": "$inputs.organization_fields"
            },
            {
              "name": "organizations_limit",
              "in": "query",
              "value": "$inputs.organizations_limit"
            },
            {
              "name": "member_fields",
              "in": "query",
              "value": "$inputs.member_fields"
            },
            {
              "name": "members_limit",
              "in": "query",
              "value": "$inputs.members_limit"
            },
            {
              "name": "partial",
              "in": "query",
              "value": "$inputs.partial"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "cards": "$response.body#/cards",
            "members": "$response.body#/members",
            "boards": "$response.body#/boards"
          }
        },
        {
          "stepId": "search-members-specifically",
          "description": "Searches specifically for members, optionally filtering by a board or organization.",
          "operationId": "getSearchMembers",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "value": "$inputs.query"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "idBoard",
              "in": "query",
              "value": "$inputs.idBoard"
            },
            {
              "name": "idOrganization",
              "in": "query",
              "value": "$inputs.idOrganization"
            },
            {
              "name": "onlyOrgMembers",
              "in": "query",
              "value": "$inputs.onlyOrgMembers"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "token",
              "in": "query",
              "value": "$inputs.token"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "members": "$response.body#/members"
          }
        }
      ],
      "outputs": {
        "cards": "$steps.search-all-models.outputs.cards",
        "members": "$steps.search-members-specifically.outputs.members",
        "boards": "$steps.search-all-models.outputs.boards"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}