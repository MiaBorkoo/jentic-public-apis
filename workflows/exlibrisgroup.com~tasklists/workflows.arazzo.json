{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/exlibrisgroup.com/tasklists/1.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "process-pending-printouts-bulk",
      "summary": "Retrieves a list of pending printouts based on specified criteria (e.g., for a specific printer or letter type) and then marks them all as printed. Useful for automating print queue management after physical printing.",
      "description": "Retrieves a list of pending printouts based on specified criteria (e.g., for a specific printer or letter type) and then marks them all as printed. Useful for automating print queue management after physical printing.",
      "inputs": {
        "type": "object",
        "properties": {
          "letter": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "printer_id": {
            "type": "string"
          },
          "printed_by": {
            "type": "string"
          },
          "printout_id": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "op": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-pending-printouts",
          "description": "Retrieve a list of printouts with 'Pending' status, optionally filtered by printer or letter type.",
          "operationId": "get/almaws/v1/task-lists/printouts",
          "parameters": [
            {
              "name": "letter",
              "in": "query",
              "value": "$inputs.letter"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "printer_id",
              "in": "query",
              "value": "$inputs.printer_id"
            },
            {
              "name": "printed_by",
              "in": "query",
              "value": "$inputs.printed_by"
            },
            {
              "name": "printout_id",
              "in": "query",
              "value": "$inputs.printout_id"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "list_of_printouts": "$response.body"
          }
        },
        {
          "stepId": "mark-printouts-printed",
          "description": "Marks a batch of printouts as printed using the same filters as the retrieval step.",
          "operationId": "post/almaws/v1/task-lists/printouts",
          "parameters": [
            {
              "name": "letter",
              "in": "query",
              "value": "$inputs.letter"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "printer_id",
              "in": "query",
              "value": "$inputs.printer_id"
            },
            {
              "name": "printed_by",
              "in": "query",
              "value": "$inputs.printed_by"
            },
            {
              "name": "printout_id",
              "in": "query",
              "value": "$inputs.printout_id"
            },
            {
              "name": "op",
              "in": "query",
              "value": "$inputs.op"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_printouts_list": "$response.body"
          }
        }
      ],
      "outputs": {
        "list_of_printouts": "$steps.get-pending-printouts.outputs.list_of_printouts",
        "updated_printouts_list": "$steps.mark-printouts-printed.outputs.updated_printouts_list"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "generate-and-report-pick-list",
      "summary": "Retrieves a list of requested resources (pick list) for a specific library and circulation desk, sorted as needed. After staff physically retrieve the items, this workflow marks the entire retrieved list as 'reported' in the system.",
      "description": "Retrieves a list of requested resources (pick list) for a specific library and circulation desk, sorted as needed. After staff physically retrieve the items, this workflow marks the entire retrieved list as 'reported' in the system.",
      "inputs": {
        "type": "object",
        "properties": {
          "library": {
            "type": "string"
          },
          "circ_desk": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "order_by": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "pickup_inst": {
            "type": "string"
          },
          "reported": {
            "type": "string"
          },
          "printed": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "op": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-pick-list",
          "description": "Get the list of items to be picked from the shelf for a specific library/desk.",
          "operationId": "get/almaws/v1/task-lists/requested-resources",
          "parameters": [
            {
              "name": "library",
              "in": "query",
              "value": "$inputs.library"
            },
            {
              "name": "circ_desk",
              "in": "query",
              "value": "$inputs.circ_desk"
            },
            {
              "name": "location",
              "in": "query",
              "value": "$inputs.location"
            },
            {
              "name": "order_by",
              "in": "query",
              "value": "$inputs.order_by"
            },
            {
              "name": "direction",
              "in": "query",
              "value": "$inputs.direction"
            },
            {
              "name": "pickup_inst",
              "in": "query",
              "value": "$inputs.pickup_inst"
            },
            {
              "name": "reported",
              "in": "query",
              "value": "$inputs.reported"
            },
            {
              "name": "printed",
              "in": "query",
              "value": "$inputs.printed"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "list_of_requested_resources": "$response.body"
          }
        },
        {
          "stepId": "mark-pick-list-reported",
          "description": "Marks the retrieved pick list items as reported.",
          "operationId": "post/almaws/v1/task-lists/requested-resources",
          "parameters": [
            {
              "name": "library",
              "in": "query",
              "value": "$inputs.library"
            },
            {
              "name": "circ_desk",
              "in": "query",
              "value": "$inputs.circ_desk"
            },
            {
              "name": "op",
              "in": "query",
              "value": "$inputs.op"
            },
            {
              "name": "location",
              "in": "query",
              "value": "$inputs.location"
            },
            {
              "name": "pickup_inst",
              "in": "query",
              "value": "$inputs.pickup_inst"
            },
            {
              "name": "reported",
              "in": "query",
              "value": "$inputs.reported"
            },
            {
              "name": "printed",
              "in": "query",
              "value": "$inputs.printed"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_list_of_resources": "$response.body"
          }
        }
      ],
      "outputs": {
        "list_of_requested_resources": "$steps.get-pick-list.outputs.list_of_requested_resources",
        "updated_list_of_resources": "$steps.mark-pick-list-reported.outputs.updated_list_of_resources"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "api-key-verification",
      "summary": "Tests the provided API key for both read and write permissions against the Ex Libris Task Lists API.",
      "description": "Tests the provided API key for both read and write permissions against the Ex Libris Task Lists API.",
      "steps": [
        {
          "stepId": "test-read-access",
          "description": "Verify read access using the API key.",
          "operationId": "get/almaws/v1/task-lists/test",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "read_test_result": "$response.body"
          }
        },
        {
          "stepId": "test-write-access",
          "description": "Verify write access using the API key.",
          "operationId": "post/almaws/v1/task-lists/test",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "write_test_result": "$response.body"
          }
        }
      ],
      "outputs": {
        "read_test_result": "$steps.test-read-access.outputs.read_test_result",
        "write_test_result": "$steps.test-write-access.outputs.write_test_result"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "process-lending-requests-for-reporting",
      "summary": "Retrieves a list of lending requests based on specified filters (e.g., library, status, partner) and then marks those requests as 'reported'. This is useful for tracking processed interlibrary loan items.",
      "description": "Retrieves a list of lending requests based on specified filters (e.g., library, status, partner) and then marks those requests as 'reported'. This is useful for tracking processed interlibrary loan items.",
      "inputs": {
        "type": "object",
        "properties": {
          "library": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "printed": {
            "type": "string"
          },
          "reported": {
            "type": "string"
          },
          "partner": {
            "type": "string"
          },
          "requested_format": {
            "type": "string"
          },
          "supplied_format": {
            "type": "string"
          },
          "op": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-lending-requests",
          "description": "Retrieve lending requests based on library, status, partner, or other criteria.",
          "operationId": "get/almaws/v1/task-lists/rs/lending-requests",
          "parameters": [
            {
              "name": "library",
              "in": "query",
              "value": "$inputs.library"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "printed",
              "in": "query",
              "value": "$inputs.printed"
            },
            {
              "name": "reported",
              "in": "query",
              "value": "$inputs.reported"
            },
            {
              "name": "partner",
              "in": "query",
              "value": "$inputs.partner"
            },
            {
              "name": "requested_format",
              "in": "query",
              "value": "$inputs.requested_format"
            },
            {
              "name": "supplied_format",
              "in": "query",
              "value": "$inputs.supplied_format"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "list_of_lending_requests": "$response.body"
          }
        },
        {
          "stepId": "mark-lending-requests-reported",
          "description": "Marks the retrieved lending requests as reported using the same filters.",
          "operationId": "post/almaws/v1/task-lists/rs/lending-requests",
          "parameters": [
            {
              "name": "library",
              "in": "query",
              "value": "$inputs.library"
            },
            {
              "name": "op",
              "in": "query",
              "value": "$inputs.op"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "printed",
              "in": "query",
              "value": "$inputs.printed"
            },
            {
              "name": "reported",
              "in": "query",
              "value": "$inputs.reported"
            },
            {
              "name": "partner",
              "in": "query",
              "value": "$inputs.partner"
            },
            {
              "name": "requested_format",
              "in": "query",
              "value": "$inputs.requested_format"
            },
            {
              "name": "supplied_format",
              "in": "query",
              "value": "$inputs.supplied_format"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_list_of_lending_requests": "$response.body"
          }
        }
      ],
      "outputs": {
        "list_of_lending_requests": "$steps.get-lending-requests.outputs.list_of_lending_requests",
        "updated_list_of_lending_requests": "$steps.mark-lending-requests-reported.outputs.updated_list_of_lending_requests"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "check-and-cancel-specific-printout",
      "summary": "Retrieves the details of a specific printout job by its ID and then cancels it. Useful for handling exceptions or errors related to specific print jobs.",
      "description": "Retrieves the details of a specific printout job by its ID and then cancels it. Useful for handling exceptions or errors related to specific print jobs.",
      "inputs": {
        "type": "object",
        "properties": {
          "printout_id": {
            "type": "string"
          },
          "op": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-printout-details",
          "description": "Retrieve details for a single printout job.",
          "operationId": "get/almaws/v1/task-lists/printouts/{printout_id}",
          "parameters": [
            {
              "name": "printout_id",
              "in": "path",
              "value": "$inputs.printout_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "printout_details": "$response.body",
            "retrieved_printout_id": "$response.body"
          }
        },
        {
          "stepId": "cancel-printout",
          "description": "Marks the specified printout job as canceled.",
          "operationId": "post/almaws/v1/task-lists/printouts/{printout_id}",
          "parameters": [
            {
              "name": "printout_id",
              "in": "path",
              "value": "$steps.get-printout-details.outputs.retrieved_printout_id"
            },
            {
              "name": "op",
              "in": "query",
              "value": "$inputs.op"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_printout_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "printout_details": "$steps.get-printout-details.outputs.printout_details",
        "retrieved_printout_id": "$steps.get-printout-details.outputs.retrieved_printout_id",
        "updated_printout_details": "$steps.cancel-printout.outputs.updated_printout_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}