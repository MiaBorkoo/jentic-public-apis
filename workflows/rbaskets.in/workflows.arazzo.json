{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/rbaskets.in/main/1.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "create-and-inspect-basket",
      "summary": "Allows a user to create a new request basket, configure its basic settings, and then retrieve the requests collected by it. This is a core use case for the Request Baskets service, enabling users to set up a temporary or permanent endpoint for collecting and analyzing HTTP traffic.",
      "description": "Allows a user to create a new request basket, configure its basic settings, and then retrieve the requests collected by it. This is a core use case for the Request Baskets service, enabling users to set up a temporary or permanent endpoint for collecting and analyzing HTTP traffic.",
      "inputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "capacity": {
            "type": "string"
          },
          "expand_path": {
            "type": "string"
          },
          "forward_url": {
            "type": "string"
          },
          "insecure_tls": {
            "type": "string"
          },
          "proxy_response": {
            "type": "string"
          },
          "max": {
            "type": "string"
          },
          "skip": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-basket",
          "description": "Creates a new request basket with a specified name and initial configuration. Returns a unique token required for subsequent basket management operations.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}/post",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "capacity": "$inputs.capacity",
              "expand_path": "$inputs.expand_path",
              "forward_url": "$inputs.forward_url",
              "insecure_tls": "$inputs.insecure_tls",
              "proxy_response": "$inputs.proxy_response"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "token": "$response.body#/token"
          }
        },
        {
          "stepId": "get-collected-requests",
          "description": "Retrieves the collection of HTTP requests that have been sent to the newly created basket. This allows the user to inspect the collected data.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}~1requests/get",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "skip",
              "in": "query",
              "value": "$inputs.skip"
            },
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "in",
              "in": "query",
              "value": "$inputs.in"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "requests": "$response.body#/requests",
            "has_more": "$response.body#/has_more",
            "count": "$response.body#/count",
            "total_count": "$response.body#/total_count"
          }
        }
      ],
      "outputs": {
        "token": "$steps.create-basket.outputs.token",
        "requests": "$steps.get-collected-requests.outputs.requests",
        "has_more": "$steps.get-collected-requests.outputs.has_more",
        "count": "$steps.get-collected-requests.outputs.count",
        "total_count": "$steps.get-collected-requests.outputs.total_count"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-custom-basket-response",
      "summary": "Enables a user to define a custom HTTP response for a specific basket and HTTP method, allowing the basket to act as a mock server or provide specific feedback. This workflow includes creating a basket, setting a custom response, and then verifying that response configuration.",
      "description": "Enables a user to define a custom HTTP response for a specific basket and HTTP method, allowing the basket to act as a mock server or provide specific feedback. This workflow includes creating a basket, setting a custom response, and then verifying that response configuration.",
      "inputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "capacity": {
            "type": "string"
          },
          "expand_path": {
            "type": "string"
          },
          "forward_url": {
            "type": "string"
          },
          "insecure_tls": {
            "type": "string"
          },
          "proxy_response": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "headers": {
            "type": "string"
          },
          "is_template": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-basket-for-response-config",
          "description": "Creates a new request basket that will be configured with a custom response. This step provides the basket name and token for subsequent operations.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}/post",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "capacity": "$inputs.capacity",
              "expand_path": "$inputs.expand_path",
              "forward_url": "$inputs.forward_url",
              "insecure_tls": "$inputs.insecure_tls",
              "proxy_response": "$inputs.proxy_response"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "token": "$response.body#/token"
          }
        },
        {
          "stepId": "update-basket-response",
          "description": "Configures the HTTP response that the basket will return for a specific HTTP method (e.g., GET, POST). This allows for custom status codes, headers, and body content.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}~1responses~1{method}/put",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            },
            {
              "name": "method",
              "in": "path",
              "value": "$inputs.method"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "body": "$inputs.body",
              "headers": "$inputs.headers",
              "is_template": "$inputs.is_template",
              "status": "$inputs.status"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "response_data": "$response.body"
          }
        },
        {
          "stepId": "get-basket-response",
          "description": "Retrieves the currently configured response settings for a specific HTTP method of the basket, allowing the user to verify their configuration.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}~1responses~1{method}/get",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            },
            {
              "name": "method",
              "in": "path",
              "value": "$inputs.method"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "body": "$response.body#/body",
            "headers": "$response.body#/headers",
            "is_template": "$response.body#/is_template",
            "status": "$response.body#/status"
          }
        }
      ],
      "outputs": {
        "token": "$steps.create-basket-for-response-config.outputs.token",
        "response_data": "$steps.update-basket-response.outputs.response_data",
        "body": "$steps.get-basket-response.outputs.body",
        "headers": "$steps.get-basket-response.outputs.headers",
        "is_template": "$steps.get-basket-response.outputs.is_template",
        "status": "$steps.get-basket-response.outputs.status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "complete-temporary-basket-lifecycle",
      "summary": "A comprehensive workflow for creating a temporary request basket, using it to collect and inspect requests, and then cleaning it up by deleting the basket and all its data. This is ideal for testing or one-off data collection scenarios.",
      "description": "A comprehensive workflow for creating a temporary request basket, using it to collect and inspect requests, and then cleaning it up by deleting the basket and all its data. This is ideal for testing or one-off data collection scenarios.",
      "inputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "capacity": {
            "type": "string"
          },
          "expand_path": {
            "type": "string"
          },
          "forward_url": {
            "type": "string"
          },
          "insecure_tls": {
            "type": "string"
          },
          "proxy_response": {
            "type": "string"
          },
          "max": {
            "type": "string"
          },
          "skip": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-temp-basket",
          "description": "Creates a new, temporary request basket for collecting HTTP requests. The basket name and a management token are returned.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}/post",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "capacity": "$inputs.capacity",
              "expand_path": "$inputs.expand_path",
              "forward_url": "$inputs.forward_url",
              "insecure_tls": "$inputs.insecure_tls",
              "proxy_response": "$inputs.proxy_response"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "token": "$response.body#/token"
          }
        },
        {
          "stepId": "inspect-collected-requests",
          "description": "Retrieves the HTTP requests collected by the temporary basket, allowing the user to analyze the received data.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}~1requests/get",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            },
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "skip",
              "in": "query",
              "value": "$inputs.skip"
            },
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            },
            {
              "name": "in",
              "in": "query",
              "value": "$inputs.in"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "requests": "$response.body#/requests",
            "has_more": "$response.body#/has_more",
            "count": "$response.body#/count",
            "total_count": "$response.body#/total_count"
          }
        },
        {
          "stepId": "delete-temp-basket",
          "description": "Permanently deletes the temporary basket and all its collected requests, ensuring cleanup after use.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}/delete",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "basket_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "token": "$steps.create-temp-basket.outputs.token",
        "requests": "$steps.inspect-collected-requests.outputs.requests",
        "has_more": "$steps.inspect-collected-requests.outputs.has_more",
        "count": "$steps.inspect-collected-requests.outputs.count",
        "total_count": "$steps.inspect-collected-requests.outputs.total_count",
        "basket_data": "$steps.delete-temp-basket.outputs.basket_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-existing-basket-settings-and-data",
      "summary": "Provides a workflow for users to retrieve the current configuration of an existing basket, update its settings (e.g., forwarding URL, capacity), and clear all collected requests without deleting the basket itself, facilitating ongoing management.",
      "description": "Provides a workflow for users to retrieve the current configuration of an existing basket, update its settings (e.g., forwarding URL, capacity), and clear all collected requests without deleting the basket itself, facilitating ongoing management.",
      "inputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "capacity": {
            "type": "string"
          },
          "expand_path": {
            "type": "string"
          },
          "forward_url": {
            "type": "string"
          },
          "insecure_tls": {
            "type": "string"
          },
          "proxy_response": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-basket-settings",
          "description": "Retrieves the current configuration settings of an existing basket, such as its capacity, forwarding URL, and TLS settings.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}/get",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "capacity": "$response.body#/capacity",
            "expand_path": "$response.body#/expand_path",
            "forward_url": "$response.body#/forward_url",
            "insecure_tls": "$response.body#/insecure_tls",
            "proxy_response": "$response.body#/proxy_response"
          }
        },
        {
          "stepId": "update-basket-settings",
          "description": "Updates the configuration settings of an existing basket, allowing changes to its capacity, forwarding behavior, or other parameters.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}/put",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "capacity": "$inputs.capacity",
              "expand_path": "$inputs.expand_path",
              "forward_url": "$inputs.forward_url",
              "insecure_tls": "$inputs.insecure_tls",
              "proxy_response": "$inputs.proxy_response"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "settings_data": "$response.body"
          }
        },
        {
          "stepId": "clear-collected-requests",
          "description": "Deletes all HTTP requests currently collected by the basket, effectively clearing its history without removing the basket itself.",
          "operationPath": "openapi_source#/paths/~1api~1baskets~1{name}~1requests/delete",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$inputs.name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "requests_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "capacity": "$steps.get-basket-settings.outputs.capacity",
        "expand_path": "$steps.get-basket-settings.outputs.expand_path",
        "forward_url": "$steps.get-basket-settings.outputs.forward_url",
        "insecure_tls": "$steps.get-basket-settings.outputs.insecure_tls",
        "proxy_response": "$steps.get-basket-settings.outputs.proxy_response",
        "settings_data": "$steps.update-basket-settings.outputs.settings_data",
        "requests_data": "$steps.clear-collected-requests.outputs.requests_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "monitor-service-statistics",
      "summary": "An administrative workflow to retrieve overall service health, version information, and detailed statistics about baskets and collected requests, providing insights into system usage and performance.",
      "description": "An administrative workflow to retrieve overall service health, version information, and detailed statistics about baskets and collected requests, providing insights into system usage and performance.",
      "inputs": {
        "type": "object",
        "properties": {
          "max": {
            "type": "string"
          },
          "skip": {
            "type": "string"
          },
          "q": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-service-version",
          "description": "Retrieves the current version information of the Request Baskets service.",
          "operationPath": "openapi_source#/paths/~1api~1version/get",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "commit": "$response.body#/commit",
            "commit_short": "$response.body#/commit_short",
            "name": "$response.body#/name",
            "source_code": "$response.body#/source_code",
            "version": "$response.body#/version"
          }
        },
        {
          "stepId": "get-service-stats",
          "description": "Fetches comprehensive statistics about the Request Baskets service, including total baskets, collected requests, and top baskets by size or recent activity.",
          "operationPath": "openapi_source#/paths/~1api~1stats/get",
          "parameters": [
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "avg_basket_size": "$response.body#/avg_basket_size",
            "baskets_count": "$response.body#/baskets_count",
            "empty_baskets_count": "$response.body#/empty_baskets_count",
            "max_basket_size": "$response.body#/max_basket_size",
            "requests_count": "$response.body#/requests_count",
            "requests_total_count": "$response.body#/requests_total_count",
            "top_baskets_recent": "$response.body#/top_baskets_recent",
            "top_baskets_size": "$response.body#/top_baskets_size"
          }
        },
        {
          "stepId": "list-all-baskets",
          "description": "Retrieves a list of all basket names managed by the service, useful for administrative oversight.",
          "operationPath": "openapi_source#/paths/~1api~1baskets/get",
          "parameters": [
            {
              "name": "max",
              "in": "query",
              "value": "$inputs.max"
            },
            {
              "name": "skip",
              "in": "query",
              "value": "$inputs.skip"
            },
            {
              "name": "q",
              "in": "query",
              "value": "$inputs.q"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "names": "$response.body#/names",
            "has_more": "$response.body#/has_more",
            "count": "$response.body#/count"
          }
        }
      ],
      "outputs": {
        "commit": "$steps.get-service-version.outputs.commit",
        "commit_short": "$steps.get-service-version.outputs.commit_short",
        "name": "$steps.get-service-version.outputs.name",
        "source_code": "$steps.get-service-version.outputs.source_code",
        "version": "$steps.get-service-version.outputs.version",
        "avg_basket_size": "$steps.get-service-stats.outputs.avg_basket_size",
        "baskets_count": "$steps.get-service-stats.outputs.baskets_count",
        "empty_baskets_count": "$steps.get-service-stats.outputs.empty_baskets_count",
        "max_basket_size": "$steps.get-service-stats.outputs.max_basket_size",
        "requests_count": "$steps.get-service-stats.outputs.requests_count",
        "requests_total_count": "$steps.get-service-stats.outputs.requests_total_count",
        "top_baskets_recent": "$steps.get-service-stats.outputs.top_baskets_recent",
        "top_baskets_size": "$steps.get-service-stats.outputs.top_baskets_size",
        "names": "$steps.list-all-baskets.outputs.names",
        "has_more": "$steps.list-all-baskets.outputs.has_more",
        "count": "$steps.list-all-baskets.outputs.count"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}