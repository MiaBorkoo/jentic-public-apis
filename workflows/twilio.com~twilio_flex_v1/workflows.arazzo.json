{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/twilio.com/twilio_flex_v1/1.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "initiate-and-manage-customer-interaction",
      "summary": "This workflow allows an API consumer to programmatically initiate a new customer interaction (e.g., an outbound SMS or email), list the channels associated with it, add a new participant to a channel, and then update the channel's status (e.g., to close the interaction).",
      "description": "This workflow allows an API consumer to programmatically initiate a new customer interaction (e.g., an outbound SMS or email), list the channels associated with it, add a new participant to a channel, and then update the channel's status (e.g., to close the interaction).",
      "inputs": {
        "type": "object",
        "properties": {
          "Channel": {
            "type": "string"
          },
          "InteractionSid": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "ChannelSid": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "MediaProperties": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-interaction",
          "description": "Creates a new interaction, which serves as the container for communication channels and participants.",
          "operationId": "CreateInteraction",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Channel": "$inputs.Channel"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "list-interaction-channels",
          "description": "Retrieves a list of all communication channels associated with the newly created interaction.",
          "operationId": "ListInteractionChannel",
          "parameters": [
            {
              "name": "InteractionSid",
              "in": "path",
              "value": "$inputs.InteractionSid"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "channels": "$response.body#/channels"
          }
        },
        {
          "stepId": "add-channel-participant",
          "description": "Adds a new participant (e.g., an agent, customer, or external party) to a specific channel within the interaction.",
          "operationId": "CreateInteractionChannelParticipant",
          "parameters": [
            {
              "name": "InteractionSid",
              "in": "path",
              "value": "$inputs.InteractionSid"
            },
            {
              "name": "ChannelSid",
              "in": "path",
              "value": "$inputs.ChannelSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Type": "$inputs.Type",
              "MediaProperties": "$inputs.MediaProperties"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "update-channel-status",
          "description": "Updates the status of an interaction channel, for example, to 'closed' or 'inactive', indicating the end of the conversation on that channel.",
          "operationId": "UpdateInteractionChannel",
          "parameters": [
            {
              "name": "InteractionSid",
              "in": "path",
              "value": "$inputs.InteractionSid"
            },
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Status": "$inputs.Status"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.update-channel-status.outputs.sid",
        "channels": "$steps.list-interaction-channels.outputs.channels"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-and-deploy-custom-flex-plugin",
      "summary": "This workflow guides a developer or administrator through the process of creating a new custom Flex UI plugin, defining its version, bundling it into a configuration, and finally releasing that configuration to be deployed in the Flex environment.",
      "description": "This workflow guides a developer or administrator through the process of creating a new custom Flex UI plugin, defining its version, bundling it into a configuration, and finally releasing that configuration to be deployed in the Flex environment.",
      "inputs": {
        "type": "object",
        "properties": {
          "Flex-Metadata": {
            "type": "string"
          },
          "UniqueName": {
            "type": "string"
          },
          "PluginSid": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "PluginUrl": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ConfigurationId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-plugin",
          "description": "Registers a new custom plugin with a unique name and description.",
          "operationId": "CreatePlugin",
          "parameters": [
            {
              "name": "Flex-Metadata",
              "in": "header",
              "value": "$inputs.Flex-Metadata"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "UniqueName": "$inputs.UniqueName"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-plugin-version",
          "description": "Creates a new version for the plugin, specifying its URL, changelog, and privacy settings.",
          "operationId": "CreatePluginVersion",
          "parameters": [
            {
              "name": "PluginSid",
              "in": "path",
              "value": "$inputs.PluginSid"
            },
            {
              "name": "Flex-Metadata",
              "in": "header",
              "value": "$inputs.Flex-Metadata"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Version": "$inputs.Version",
              "PluginUrl": "$inputs.PluginUrl"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-plugin-configuration",
          "description": "Bundles one or more plugin versions into a named configuration, which can then be released.",
          "operationId": "CreatePluginConfiguration",
          "parameters": [
            {
              "name": "Flex-Metadata",
              "in": "header",
              "value": "$inputs.Flex-Metadata"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Name": "$inputs.Name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "create-plugin-release",
          "description": "Deploys a specific plugin configuration, making the included plugins active in the Flex UI.",
          "operationId": "CreatePluginRelease",
          "parameters": [
            {
              "name": "Flex-Metadata",
              "in": "header",
              "value": "$inputs.Flex-Metadata"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ConfigurationId": "$inputs.ConfigurationId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.create-plugin-release.outputs.sid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-quality-management-questionnaires",
      "summary": "This workflow enables administrators to define and organize the criteria used for assessing agent performance and conversation quality within Flex Insights, by creating categories, questions, and assembling them into questionnaires.",
      "description": "This workflow enables administrators to define and organize the criteria used for assessing agent performance and conversation quality within Flex Insights, by creating categories, questions, and assembling them into questionnaires.",
      "inputs": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "CategorySid": {
            "type": "string"
          },
          "Question": {
            "type": "string"
          },
          "AnswerSetId": {
            "type": "string"
          },
          "AllowNa": {
            "type": "string"
          },
          "IncludeInactive": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-question-category",
          "description": "Creates a new category to group related questions for quality assessments.",
          "operationId": "CreateInsightsQuestionnairesCategory",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Name": "$inputs.Name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "category_sid": "$response.body#/category_sid"
          }
        },
        {
          "stepId": "create-question",
          "description": "Creates a new question for assessments, associating it with a specific category and defining its answer set.",
          "operationId": "CreateInsightsQuestionnairesQuestion",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "CategorySid": "$inputs.CategorySid",
              "Question": "$inputs.Question",
              "AnswerSetId": "$inputs.AnswerSetId",
              "AllowNa": "$inputs.AllowNa"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "question_sid": "$response.body#/question_sid"
          }
        },
        {
          "stepId": "create-questionnaire",
          "description": "Assembles a new questionnaire by combining multiple questions, which can then be used for conversation assessments.",
          "operationId": "CreateInsightsQuestionnaires",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Name": "$inputs.Name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questionnaire_sid": "$response.body#/questionnaire_sid"
          }
        },
        {
          "stepId": "list-questionnaires",
          "description": "Retrieves a list of all created questionnaires, including their questions and associated categories, for verification or further use.",
          "operationId": "ListInsightsQuestionnaires",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "IncludeInactive",
              "in": "query",
              "value": "$inputs.IncludeInactive"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questionnaires": "$response.body#/questionnaires"
          }
        }
      ],
      "outputs": {
        "category_sid": "$steps.create-question-category.outputs.category_sid",
        "question_sid": "$steps.create-question.outputs.question_sid",
        "questionnaire_sid": "$steps.create-questionnaire.outputs.questionnaire_sid",
        "questionnaires": "$steps.list-questionnaires.outputs.questionnaires"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "perform-and-retrieve-conversation-assessments",
      "summary": "This workflow enables quality assurance teams to retrieve conversation details, apply predefined assessment criteria, add comments, and then retrieve the completed assessments and comments for review and analysis.",
      "description": "This workflow enables quality assurance teams to retrieve conversation details, apply predefined assessment criteria, add comments, and then retrieve the completed assessments and comments for review and analysis.",
      "inputs": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string"
          },
          "SegmentId": {
            "type": "string"
          },
          "ReservationId": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "IncludeInactive": {
            "type": "string"
          },
          "CategorySid": {
            "type": "string"
          },
          "CategoryName": {
            "type": "string"
          },
          "AgentId": {
            "type": "string"
          },
          "Offset": {
            "type": "string"
          },
          "MetricId": {
            "type": "string"
          },
          "MetricName": {
            "type": "string"
          },
          "AnswerText": {
            "type": "string"
          },
          "AnswerId": {
            "type": "string"
          },
          "QuestionnaireSid": {
            "type": "string"
          },
          "CategoryId": {
            "type": "string"
          },
          "Comment": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-segments",
          "description": "Retrieves a list of conversation segments, allowing identification of a specific segment and agent for assessment.",
          "operationId": "ListInsightsSegments",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "SegmentId",
              "in": "query",
              "value": "$inputs.SegmentId"
            },
            {
              "name": "ReservationId",
              "in": "query",
              "value": "$inputs.ReservationId"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "segments": "$response.body#/segments"
          }
        },
        {
          "stepId": "get-conversation-details",
          "description": "Fetches detailed information about a specific conversation, including segment offsets, which are crucial for precise assessment timing.",
          "operationId": "ListInsightsConversations",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "SegmentId",
              "in": "query",
              "value": "$inputs.SegmentId"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "conversations": "$response.body#/conversations"
          }
        },
        {
          "stepId": "list-questionnaires",
          "description": "Retrieves available questionnaires, questions, and their answer sets to be used for the assessment.",
          "operationId": "ListInsightsQuestionnaires",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "IncludeInactive",
              "in": "query",
              "value": "$inputs.IncludeInactive"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questionnaires": "$response.body#/questionnaires"
          }
        },
        {
          "stepId": "create-assessment",
          "description": "Records an assessment for a specific conversation segment, based on a selected question and answer from a questionnaire.",
          "operationId": "CreateInsightsAssessments",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "CategorySid": "$inputs.CategorySid",
              "CategoryName": "$inputs.CategoryName",
              "SegmentId": "$inputs.SegmentId",
              "AgentId": "$inputs.AgentId",
              "Offset": "$inputs.Offset",
              "MetricId": "$inputs.MetricId",
              "MetricName": "$inputs.MetricName",
              "AnswerText": "$inputs.AnswerText",
              "AnswerId": "$inputs.AnswerId",
              "QuestionnaireSid": "$inputs.QuestionnaireSid"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "assessment_sid": "$response.body#/assessment_sid"
          }
        },
        {
          "stepId": "create-comment-assessment",
          "description": "Adds a free-form comment as part of the assessment for a conversation segment.",
          "operationId": "CreateInsightsAssessmentsComment",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "CategoryId": "$inputs.CategoryId",
              "CategoryName": "$inputs.CategoryName",
              "Comment": "$inputs.Comment",
              "SegmentId": "$inputs.SegmentId",
              "AgentId": "$inputs.AgentId",
              "Offset": "$inputs.Offset"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "assessment_sid": "$response.body#/assessment_sid"
          }
        },
        {
          "stepId": "list-assessments",
          "description": "Retrieves all assessments previously made for a specific conversation segment.",
          "operationId": "ListInsightsAssessments",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "SegmentId",
              "in": "query",
              "value": "$inputs.SegmentId"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "assessments": "$response.body#/assessments"
          }
        },
        {
          "stepId": "list-comment-assessments",
          "description": "Retrieves all comment assessments previously made for a specific conversation segment.",
          "operationId": "ListInsightsAssessmentsComment",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "value": "$inputs.Authorization"
            },
            {
              "name": "SegmentId",
              "in": "query",
              "value": "$inputs.SegmentId"
            },
            {
              "name": "AgentId",
              "in": "query",
              "value": "$inputs.AgentId"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "comments": "$response.body#/comments"
          }
        }
      ],
      "outputs": {
        "segments": "$steps.list-segments.outputs.segments",
        "conversations": "$steps.get-conversation-details.outputs.conversations",
        "questionnaires": "$steps.list-questionnaires.outputs.questionnaires",
        "assessment_sid": "$steps.create-comment-assessment.outputs.assessment_sid",
        "assessments": "$steps.list-assessments.outputs.assessments",
        "comments": "$steps.list-comment-assessments.outputs.comments"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "initiate-interaction-and-invite-agent",
      "summary": "This workflow facilitates the creation of a new customer interaction and then programmatically invites an agent or a TaskQueue to handle the interaction, streamlining the routing process.",
      "description": "This workflow facilitates the creation of a new customer interaction and then programmatically invites an agent or a TaskQueue to handle the interaction, streamlining the routing process.",
      "inputs": {
        "type": "object",
        "properties": {
          "Channel": {
            "type": "string"
          },
          "InteractionSid": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "ChannelSid": {
            "type": "string"
          },
          "Routing": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-interaction",
          "description": "Creates a new interaction, which serves as the container for communication channels and participants.",
          "operationId": "CreateInteraction",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Channel": "$inputs.Channel"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "list-interaction-channels",
          "description": "Retrieves a list of all communication channels associated with the newly created interaction to identify the target channel for the agent invite.",
          "operationId": "ListInteractionChannel",
          "parameters": [
            {
              "name": "InteractionSid",
              "in": "path",
              "value": "$inputs.InteractionSid"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "channels": "$response.body#/channels"
          }
        },
        {
          "stepId": "invite-agent-to-channel",
          "description": "Invites an agent or a TaskQueue to the specified interaction channel, routing the interaction to the appropriate resource.",
          "operationId": "CreateInteractionChannelInvite",
          "parameters": [
            {
              "name": "InteractionSid",
              "in": "path",
              "value": "$inputs.InteractionSid"
            },
            {
              "name": "ChannelSid",
              "in": "path",
              "value": "$inputs.ChannelSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Routing": "$inputs.Routing"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.invite-agent-to-channel.outputs.sid",
        "channels": "$steps.list-interaction-channels.outputs.channels"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-manage-flex-flow-status",
      "summary": "This workflow enables the creation of a new Flex Flow, which defines how incoming communications are handled, and then allows for the immediate update of its enabled status, controlling whether it is active or inactive.",
      "description": "This workflow enables the creation of a new Flex Flow, which defines how incoming communications are handled, and then allows for the immediate update of its enabled status, controlling whether it is active or inactive.",
      "inputs": {
        "type": "object",
        "properties": {
          "FriendlyName": {
            "type": "string"
          },
          "ChatServiceSid": {
            "type": "string"
          },
          "ChannelType": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          },
          "ContactIdentity": {
            "type": "string"
          },
          "Enabled": {
            "type": "string"
          },
          "IntegrationType": {
            "type": "string"
          },
          "Integration.FlowSid": {
            "type": "string"
          },
          "Integration.Url": {
            "type": "string"
          },
          "Integration.WorkspaceSid": {
            "type": "string"
          },
          "Integration.WorkflowSid": {
            "type": "string"
          },
          "Integration.Channel": {
            "type": "string"
          },
          "Integration.Timeout": {
            "type": "string"
          },
          "Integration.Priority": {
            "type": "string"
          },
          "Integration.CreationOnMessage": {
            "type": "string"
          },
          "LongLived": {
            "type": "string"
          },
          "JanitorEnabled": {
            "type": "string"
          },
          "Integration.RetryCount": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-flex-flow",
          "description": "Creates a new Flex Flow with specified routing and channel type configurations.",
          "operationId": "CreateFlexFlow",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName",
              "ChatServiceSid": "$inputs.ChatServiceSid",
              "ChannelType": "$inputs.ChannelType"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "update-flex-flow-status",
          "description": "Updates the 'Enabled' status of an existing Flex Flow, activating or deactivating it.",
          "operationId": "UpdateFlexFlow",
          "parameters": [
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName",
              "ChatServiceSid": "$inputs.ChatServiceSid",
              "ChannelType": "$inputs.ChannelType",
              "ContactIdentity": "$inputs.ContactIdentity",
              "Enabled": "$inputs.Enabled",
              "IntegrationType": "$inputs.IntegrationType",
              "Integration.FlowSid": "$inputs.Integration.FlowSid",
              "Integration.Url": "$inputs.Integration.Url",
              "Integration.WorkspaceSid": "$inputs.Integration.WorkspaceSid",
              "Integration.WorkflowSid": "$inputs.Integration.WorkflowSid",
              "Integration.Channel": "$inputs.Integration.Channel",
              "Integration.Timeout": "$inputs.Integration.Timeout",
              "Integration.Priority": "$inputs.Integration.Priority",
              "Integration.CreationOnMessage": "$inputs.Integration.CreationOnMessage",
              "LongLived": "$inputs.LongLived",
              "JanitorEnabled": "$inputs.JanitorEnabled",
              "Integration.RetryCount": "$inputs.Integration.RetryCount"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flex.v1.flex_flow": "$response.body#/flex.v1.flex_flow"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.create-flex-flow.outputs.sid",
        "flex.v1.flex_flow": "$steps.update-flex-flow-status.outputs.flex.v1.flex_flow"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-retrieve-flex-chat-channel",
      "summary": "This workflow allows for the creation of a new chat channel within Twilio Flex, typically for web chat or SMS conversations, and then immediately retrieves its details to confirm successful creation and obtain channel properties.",
      "description": "This workflow allows for the creation of a new chat channel within Twilio Flex, typically for web chat or SMS conversations, and then immediately retrieves its details to confirm successful creation and obtain channel properties.",
      "inputs": {
        "type": "object",
        "properties": {
          "FriendlyName": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "FlexFlowSid": {
            "type": "string"
          },
          "Identity": {
            "type": "string"
          },
          "ChatUserFriendlyName": {
            "type": "string"
          },
          "ChatFriendlyName": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-flex-flows",
          "description": "Retrieves a list of available Flex Flows to identify the appropriate flow for the new chat channel.",
          "operationId": "ListFlexFlow",
          "parameters": [
            {
              "name": "FriendlyName",
              "in": "query",
              "value": "$inputs.FriendlyName"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flex_flows": "$response.body#/flex_flows"
          }
        },
        {
          "stepId": "create-chat-channel",
          "description": "Creates a new Flex chat channel, linking it to a specific Flex Flow and defining its participants and friendly names.",
          "operationId": "CreateChannel",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FlexFlowSid": "$inputs.FlexFlowSid",
              "Identity": "$inputs.Identity",
              "ChatUserFriendlyName": "$inputs.ChatUserFriendlyName",
              "ChatFriendlyName": "$inputs.ChatFriendlyName"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "fetch-chat-channel",
          "description": "Retrieves the detailed information of the newly created Flex chat channel.",
          "operationId": "FetchChannel",
          "parameters": [
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flex.v1.channel": "$response.body#/flex.v1.channel"
          }
        }
      ],
      "outputs": {
        "flex_flows": "$steps.list-flex-flows.outputs.flex_flows",
        "sid": "$steps.create-chat-channel.outputs.sid",
        "flex.v1.channel": "$steps.fetch-chat-channel.outputs.flex.v1.channel"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "archive-flex-plugin",
      "summary": "This workflow allows an administrator to list existing Flex plugins and then archive a specific plugin, effectively taking it out of active use without permanently deleting it.",
      "description": "This workflow allows an administrator to list existing Flex plugins and then archive a specific plugin, effectively taking it out of active use without permanently deleting it.",
      "inputs": {
        "type": "object",
        "properties": {
          "Flex-Metadata": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-plugins",
          "description": "Retrieves a list of all available Flex plugins to identify the one to be archived.",
          "operationId": "ListPlugin",
          "parameters": [
            {
              "name": "Flex-Metadata",
              "in": "header",
              "value": "$inputs.Flex-Metadata"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "plugins": "$response.body#/plugins"
          }
        },
        {
          "stepId": "archive-plugin",
          "description": "Archives a specific Flex plugin, marking it as inactive.",
          "operationId": "UpdatePluginArchive",
          "parameters": [
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            },
            {
              "name": "Flex-Metadata",
              "in": "header",
              "value": "$inputs.Flex-Metadata"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "plugins": "$steps.list-plugins.outputs.plugins",
        "sid": "$steps.archive-plugin.outputs.sid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "archive-flex-plugin-configuration",
      "summary": "This workflow enables an administrator to list existing Flex plugin configurations and then archive a specific configuration, preventing it from being released or used for new deployments.",
      "description": "This workflow enables an administrator to list existing Flex plugin configurations and then archive a specific configuration, preventing it from being released or used for new deployments.",
      "inputs": {
        "type": "object",
        "properties": {
          "Flex-Metadata": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-plugin-configurations",
          "description": "Retrieves a list of all existing Flex plugin configurations to identify the one to be archived.",
          "operationId": "ListPluginConfiguration",
          "parameters": [
            {
              "name": "Flex-Metadata",
              "in": "header",
              "value": "$inputs.Flex-Metadata"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "configurations": "$response.body#/configurations"
          }
        },
        {
          "stepId": "archive-plugin-configuration",
          "description": "Archives a specific Flex plugin configuration, making it inactive.",
          "operationId": "UpdatePluginConfigurationArchive",
          "parameters": [
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            },
            {
              "name": "Flex-Metadata",
              "in": "header",
              "value": "$inputs.Flex-Metadata"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "configurations": "$steps.list-plugin-configurations.outputs.configurations",
        "sid": "$steps.archive-plugin-configuration.outputs.sid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}