{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/surrey.ca/open511/0.1/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "filter-events-by-jurisdiction",
      "summary": "Allows a user to first discover the available jurisdictions and then retrieve real-time traffic obstruction events specifically for a chosen jurisdiction. This workflow is valuable for applications that need to present events geographically or by administrative boundaries, enabling users to focus on relevant areas.",
      "description": "Allows a user to first discover the available jurisdictions and then retrieve real-time traffic obstruction events specifically for a chosen jurisdiction. This workflow is valuable for applications that need to present events geographically or by administrative boundaries, enabling users to focus on relevant areas.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "jurisdiction": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "updated": {
            "type": "string"
          },
          "road_name": {
            "type": "string"
          },
          "area_id": {
            "type": "string"
          },
          "bbox": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-jurisdictions",
          "description": "Retrieves a list of all jurisdictions publishing data through this Open511 API implementation. The response is expected to contain jurisdiction IDs that can be used for filtering events.",
          "operationPath": "openapi_source#/paths/~1jurisdiction/get",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "jurisdictions_data": "$response.body#/jurisdictions_data"
          }
        },
        {
          "stepId": "get-events-by-jurisdiction",
          "description": "Retrieves real-time traffic obstruction events, filtered by a specific jurisdiction ID obtained from the 'get-jurisdictions' step. This allows for targeted queries of events within a known administrative boundary.",
          "operationPath": "openapi_source#/paths/~1events/get",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "severity",
              "in": "query",
              "value": "$inputs.severity"
            },
            {
              "name": "jurisdiction",
              "in": "query",
              "value": "$steps.get-jurisdictions.outputs.jurisdictions_data.id"
            },
            {
              "name": "event_type",
              "in": "query",
              "value": "$inputs.event_type"
            },
            {
              "name": "created",
              "in": "query",
              "value": "$inputs.created"
            },
            {
              "name": "updated",
              "in": "query",
              "value": "$inputs.updated"
            },
            {
              "name": "road_name",
              "in": "query",
              "value": "$inputs.road_name"
            },
            {
              "name": "area_id",
              "in": "query",
              "value": "$inputs.area_id"
            },
            {
              "name": "bbox",
              "in": "query",
              "value": "$inputs.bbox"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "events_list": "$response.body#/events_list"
          }
        }
      ],
      "outputs": {
        "jurisdictions_data": "$steps.get-jurisdictions.outputs.jurisdictions_data",
        "events_list": "$steps.get-events-by-jurisdiction.outputs.events_list"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "filter-events-by-area",
      "summary": "Enables a user to first identify defined geographical areas and then retrieve real-time traffic obstruction events occurring within a selected area. This workflow is crucial for location-aware applications or users interested in specific regions, allowing them to narrow down event searches to relevant geographical boundaries.",
      "description": "Enables a user to first identify defined geographical areas and then retrieve real-time traffic obstruction events occurring within a selected area. This workflow is crucial for location-aware applications or users interested in specific regions, allowing them to narrow down event searches to relevant geographical boundaries.",
      "inputs": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "jurisdiction": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "updated": {
            "type": "string"
          },
          "road_name": {
            "type": "string"
          },
          "area_id": {
            "type": "string"
          },
          "bbox": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-areas",
          "description": "Retrieves the geographical boundaries for all defined areas. The response is expected to contain area IDs that can be used for filtering events.",
          "operationPath": "openapi_source#/paths/~1areas/get",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "areas_data": "$response.body#/areas_data"
          }
        },
        {
          "stepId": "get-events-by-area",
          "description": "Retrieves real-time traffic obstruction events, filtered by a specific area ID obtained from the 'get-areas' step. This allows for targeted queries of events within a known geographical boundary.",
          "operationPath": "openapi_source#/paths/~1events/get",
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "severity",
              "in": "query",
              "value": "$inputs.severity"
            },
            {
              "name": "jurisdiction",
              "in": "query",
              "value": "$inputs.jurisdiction"
            },
            {
              "name": "event_type",
              "in": "query",
              "value": "$inputs.event_type"
            },
            {
              "name": "created",
              "in": "query",
              "value": "$inputs.created"
            },
            {
              "name": "updated",
              "in": "query",
              "value": "$inputs.updated"
            },
            {
              "name": "road_name",
              "in": "query",
              "value": "$inputs.road_name"
            },
            {
              "name": "area_id",
              "in": "query",
              "value": "$steps.get-areas.outputs.areas_data.id"
            },
            {
              "name": "bbox",
              "in": "query",
              "value": "$inputs.bbox"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "events_list": "$response.body#/events_list"
          }
        }
      ],
      "outputs": {
        "areas_data": "$steps.get-areas.outputs.areas_data",
        "events_list": "$steps.get-events-by-area.outputs.events_list"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}