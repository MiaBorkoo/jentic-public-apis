{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/vmware.local/vrni/1.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "add-and-enable-v-center-data-source",
      "summary": "Adds a new vCenter server as a data source in vRealize Network Insight and enables it for data collection.",
      "description": "Adds a new vCenter server as a data source in vRealize Network Insight and enables it for data collection.",
      "inputs": {
        "type": "object",
        "properties": {
          "get-auth-token_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-auth-token",
          "description": "Authenticate to get the token needed for subsequent calls.",
          "operationId": "create",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.get-auth-token_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "token": "$response.body"
          }
        },
        {
          "stepId": "add-vcenter",
          "description": "Adds a new vCenter server by providing its details and credentials.",
          "operationId": "addVcenterDatasource",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "token": "$steps.get-auth-token.outputs.token"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "entity_id": "$response.body",
            "VCenterDataSource details": "$response.body"
          }
        },
        {
          "stepId": "enable-vcenter",
          "description": "Ensures the newly added vCenter data source is enabled for collection.",
          "operationId": "enableVcenter",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.add-vcenter.outputs.entity_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code": "$response.body"
          }
        }
      ],
      "outputs": {
        "token": "$steps.get-auth-token.outputs.token",
        "entity_id": "$steps.add-vcenter.outputs.entity_id",
        "VCenterDataSource details": "$steps.add-vcenter.outputs.VCenterDataSource details",
        "status_code": "$steps.enable-vcenter.outputs.status_code"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "add-and-configure-snmp-for-a-network-switch-example-cisco",
      "summary": "Adds a new Cisco switch as a data source, configures its SNMP settings, and enables it.",
      "description": "Adds a new Cisco switch as a data source, configures its SNMP settings, and enables it.",
      "inputs": {
        "type": "object",
        "properties": {
          "get-auth-token_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-auth-token",
          "description": "Authenticate to get the token needed for subsequent calls.",
          "operationId": "create",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.get-auth-token_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "token": "$response.body"
          }
        },
        {
          "stepId": "add-cisco-switch",
          "description": "Adds a new Cisco switch by providing its details and credentials.",
          "operationId": "addCiscoSwitch",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "token": "$steps.get-auth-token.outputs.token"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "entity_id": "$response.body",
            "CiscoSwitchDataSource details": "$response.body"
          }
        },
        {
          "stepId": "update-cisco-snmp",
          "description": "Updates the SNMP configuration (v2c or v3) for the added switch.",
          "operationId": "updateCiscoSwitchSnmpConfig",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.add-cisco-switch.outputs.entity_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "token": "$steps.get-auth-token.outputs.token",
              "id": "$steps.add-cisco-switch.outputs.entity_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_SNMPConfig": "$response.body"
          }
        },
        {
          "stepId": "enable-cisco-switch",
          "description": "Ensures the newly added and configured Cisco switch data source is enabled.",
          "operationId": "enableCiscoSwitch",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.add-cisco-switch.outputs.entity_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status_code": "$response.body"
          }
        }
      ],
      "outputs": {
        "token": "$steps.get-auth-token.outputs.token",
        "entity_id": "$steps.add-cisco-switch.outputs.entity_id",
        "CiscoSwitchDataSource details": "$steps.add-cisco-switch.outputs.CiscoSwitchDataSource details",
        "updated_SNMPConfig": "$steps.update-cisco-snmp.outputs.updated_SNMPConfig",
        "status_code": "$steps.enable-cisco-switch.outputs.status_code"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "retrieve-problem-event-details",
      "summary": "Lists recent problem events detected by vRNI and retrieves details for a specific problem.",
      "description": "Lists recent problem events detected by vRNI and retrieves details for a specific problem.",
      "inputs": {
        "type": "object",
        "properties": {
          "get-auth-token_body": {
            "type": "object"
          },
          "size": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "time": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-auth-token",
          "description": "Authenticate to get the token needed for subsequent calls.",
          "operationId": "create",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.get-auth-token_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "token": "$response.body"
          }
        },
        {
          "stepId": "list-problem-events",
          "description": "Lists recent problem events, potentially filtered by time.",
          "operationId": "listProblemEvents",
          "parameters": [
            {
              "name": "size",
              "in": "query",
              "value": "$inputs.size"
            },
            {
              "name": "cursor",
              "in": "query",
              "value": "$inputs.cursor"
            },
            {
              "name": "start_time",
              "in": "query",
              "value": "$inputs.start_time"
            },
            {
              "name": "end_time",
              "in": "query",
              "value": "$inputs.end_time"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "problem_event_list": "$response.body"
          }
        },
        {
          "stepId": "get-problem-details",
          "description": "Retrieves detailed information about a specific problem event identified from the list.",
          "operationId": "getProblemEvent",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.list-problem-events.outputs.problem_event_list.results[0].entity_id"
            },
            {
              "name": "time",
              "in": "query",
              "value": "$inputs.time"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "problem_event_details": "$response.body"
          }
        }
      ],
      "outputs": {
        "token": "$steps.get-auth-token.outputs.token",
        "problem_event_list": "$steps.list-problem-events.outputs.problem_event_list",
        "problem_event_details": "$steps.get-problem-details.outputs.problem_event_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}