{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/intellifi.nl/main/2.27.2%2B0.gd5006bf.dirty/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "smartspot-configuration-and-local-item-set-synchronization",
      "summary": "This workflow allows for configuring a Smartspot device and synchronizing a central item list to it. This is crucial for implementing local processing rules on Smartspots, such as Sense&Control, based on predefined item groups.",
      "description": "This workflow allows for configuring a Smartspot device and synchronizing a central item list to it. This is crucial for implementing local processing rules on Smartspots, such as Sense&Control, based on predefined item groups.",
      "inputs": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string"
          },
          "after_id": {
            "type": "string"
          },
          "before": {
            "type": "string"
          },
          "before_id": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "from_id": {
            "type": "string"
          },
          "id_only": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "populate": {
            "type": "string"
          },
          "results_only": {
            "type": "string"
          },
          "select": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "until": {
            "type": "string"
          },
          "until_id": {
            "type": "string"
          },
          "timeout_s": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "time_created": {
            "type": "string"
          },
          "time_updated": {
            "type": "string"
          },
          "is_online": {
            "type": "string"
          },
          "request_counter": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "setId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-smartspot-details",
          "description": "Retrieves a list of Smartspots to identify a specific device for configuration.",
          "operationId": "getSpots",
          "parameters": [
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            },
            {
              "name": "after_id",
              "in": "query",
              "value": "$inputs.after_id"
            },
            {
              "name": "before",
              "in": "query",
              "value": "$inputs.before"
            },
            {
              "name": "before_id",
              "in": "query",
              "value": "$inputs.before_id"
            },
            {
              "name": "from",
              "in": "query",
              "value": "$inputs.from"
            },
            {
              "name": "from_id",
              "in": "query",
              "value": "$inputs.from_id"
            },
            {
              "name": "id_only",
              "in": "query",
              "value": "$inputs.id_only"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "populate",
              "in": "query",
              "value": "$inputs.populate"
            },
            {
              "name": "results_only",
              "in": "query",
              "value": "$inputs.results_only"
            },
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "until",
              "in": "query",
              "value": "$inputs.until"
            },
            {
              "name": "until_id",
              "in": "query",
              "value": "$inputs.until_id"
            },
            {
              "name": "timeout_s",
              "in": "query",
              "value": "$inputs.timeout_s"
            },
            {
              "name": "id",
              "in": "query",
              "value": "$inputs.id"
            },
            {
              "name": "time_created",
              "in": "query",
              "value": "$inputs.time_created"
            },
            {
              "name": "time_updated",
              "in": "query",
              "value": "$inputs.time_updated"
            },
            {
              "name": "is_online",
              "in": "query",
              "value": "$inputs.is_online"
            },
            {
              "name": "request_counter",
              "in": "query",
              "value": "$inputs.request_counter"
            },
            {
              "name": "serial_number",
              "in": "query",
              "value": "$inputs.serial_number"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "spot_id": "$response.body#/spot_id"
          }
        },
        {
          "stepId": "create-central-item-list",
          "description": "Creates a central list of item IDs that can be referenced by Smartspot local sets, enabling centralized management of item groups.",
          "operationId": "addItemList",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "itemlist_id": "$response.body#/itemlist_id"
          }
        },
        {
          "stepId": "add-items-to-central-list",
          "description": "Adds specific item IDs to the newly created central item list, populating the group of items.",
          "operationId": "addItemIdsList",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.create-central-item-list.outputs.itemlist_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "id": "$steps.create-central-item-list.outputs.itemlist_id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "total": "$response.body#/total"
          }
        },
        {
          "stepId": "create-spotset-referencing-central-list",
          "description": "Creates a local spotset on the Smartspot that references the central item list, allowing the Smartspot to use this list for its local logic and rules.",
          "operationId": "addSpotSet",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-smartspot-details.outputs.spot_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "spotset_id": "$response.body#/spotset_id"
          }
        },
        {
          "stepId": "get-spotset-details",
          "description": "Retrieves the details of the created spotset on the Smartspot to verify its configuration and the referenced item list.",
          "operationId": "getSpotSetById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-smartspot-details.outputs.spot_id"
            },
            {
              "name": "setId",
              "in": "path",
              "value": "$steps.create-spotset-referencing-central-list.outputs.spotset_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "type": "$response.body#/type",
            "itemlist_id": "$response.body#/itemlist_id",
            "total": "$response.body#/total"
          }
        }
      ],
      "outputs": {
        "spot_id": "$steps.get-smartspot-details.outputs.spot_id",
        "itemlist_id": "$steps.get-spotset-details.outputs.itemlist_id",
        "total": "$steps.get-spotset-details.outputs.total",
        "spotset_id": "$steps.create-spotset-referencing-central-list.outputs.spotset_id",
        "type": "$steps.get-spotset-details.outputs.type"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "real-time-item-tracking--event-monitoring",
      "summary": "This workflow enables real-time tracking of physical items by setting up locations, registering items, subscribing to item movement events, and retrieving current item presences and historical events. It's valuable for applications needing to monitor asset locations and react to changes.",
      "description": "This workflow enables real-time tracking of physical items by setting up locations, registering items, subscribing to item movement events, and retrieving current item presences and historical events. It's valuable for applications needing to monitor asset locations and react to changes.",
      "inputs": {
        "type": "object",
        "properties": {
          "create-item_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "after": {
            "type": "string"
          },
          "after_id": {
            "type": "string"
          },
          "before": {
            "type": "string"
          },
          "before_id": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "from_id": {
            "type": "string"
          },
          "id_only": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "populate": {
            "type": "string"
          },
          "results_only": {
            "type": "string"
          },
          "select": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "until": {
            "type": "string"
          },
          "until_id": {
            "type": "string"
          },
          "timeout_s": {
            "type": "string"
          },
          "time_created": {
            "type": "string"
          },
          "topic.resource_type": {
            "type": "string"
          },
          "topic.action": {
            "type": "string"
          },
          "topic.resource": {
            "type": "string"
          },
          "time_event": {
            "type": "string"
          },
          "time_expire": {
            "type": "string"
          },
          "time_updated": {
            "type": "string"
          },
          "item": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "proximity": {
            "type": "string"
          },
          "technology": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-location",
          "description": "Defines a new physical location where items can be tracked.",
          "operationId": "addLocation",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "create-item",
          "description": "Registers a new item that will be tracked by the system.",
          "operationId": "addItem",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-item_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "create-item-event-subscription",
          "description": "Creates a subscription to receive events for all item-related activities (e.g., creation, updates, movements). This sets up a webhook or internal event storage.",
          "operationId": "addSubscription",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "get-subscription-events",
          "description": "Retrieves a list of events that match the created subscription, allowing for historical analysis or processing of past events.",
          "operationId": "getEventsForSubscriptionById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.create-item-event-subscription.outputs.id"
            },
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            },
            {
              "name": "after_id",
              "in": "query",
              "value": "$inputs.after_id"
            },
            {
              "name": "before",
              "in": "query",
              "value": "$inputs.before"
            },
            {
              "name": "before_id",
              "in": "query",
              "value": "$inputs.before_id"
            },
            {
              "name": "from",
              "in": "query",
              "value": "$inputs.from"
            },
            {
              "name": "from_id",
              "in": "query",
              "value": "$inputs.from_id"
            },
            {
              "name": "id_only",
              "in": "query",
              "value": "$inputs.id_only"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "populate",
              "in": "query",
              "value": "$inputs.populate"
            },
            {
              "name": "results_only",
              "in": "query",
              "value": "$inputs.results_only"
            },
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "until",
              "in": "query",
              "value": "$inputs.until"
            },
            {
              "name": "until_id",
              "in": "query",
              "value": "$inputs.until_id"
            },
            {
              "name": "timeout_s",
              "in": "query",
              "value": "$inputs.timeout_s"
            },
            {
              "name": "id",
              "in": "query",
              "value": "$steps.create-item-event-subscription.outputs.id"
            },
            {
              "name": "time_created",
              "in": "query",
              "value": "$inputs.time_created"
            },
            {
              "name": "topic.resource_type",
              "in": "query",
              "value": "$inputs.topic.resource_type"
            },
            {
              "name": "topic.action",
              "in": "query",
              "value": "$inputs.topic.action"
            },
            {
              "name": "topic.resource",
              "in": "query",
              "value": "$inputs.topic.resource"
            },
            {
              "name": "time_event",
              "in": "query",
              "value": "$inputs.time_event"
            },
            {
              "name": "time_expire",
              "in": "query",
              "value": "$inputs.time_expire"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "results": "$response.body#/results"
          }
        },
        {
          "stepId": "get-item-current-presence",
          "description": "Retrieves the current presence (location) of a specific item, indicating where it is currently detected.",
          "operationId": "getPresences",
          "parameters": [
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            },
            {
              "name": "after_id",
              "in": "query",
              "value": "$inputs.after_id"
            },
            {
              "name": "before",
              "in": "query",
              "value": "$inputs.before"
            },
            {
              "name": "before_id",
              "in": "query",
              "value": "$inputs.before_id"
            },
            {
              "name": "from",
              "in": "query",
              "value": "$inputs.from"
            },
            {
              "name": "from_id",
              "in": "query",
              "value": "$inputs.from_id"
            },
            {
              "name": "id_only",
              "in": "query",
              "value": "$inputs.id_only"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "populate",
              "in": "query",
              "value": "$inputs.populate"
            },
            {
              "name": "results_only",
              "in": "query",
              "value": "$inputs.results_only"
            },
            {
              "name": "select",
              "in": "query",
              "value": "$inputs.select"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "until",
              "in": "query",
              "value": "$inputs.until"
            },
            {
              "name": "until_id",
              "in": "query",
              "value": "$inputs.until_id"
            },
            {
              "name": "timeout_s",
              "in": "query",
              "value": "$inputs.timeout_s"
            },
            {
              "name": "id",
              "in": "query",
              "value": "$inputs.id"
            },
            {
              "name": "time_created",
              "in": "query",
              "value": "$inputs.time_created"
            },
            {
              "name": "time_updated",
              "in": "query",
              "value": "$inputs.time_updated"
            },
            {
              "name": "item",
              "in": "query",
              "value": "$steps.create-item.outputs.id"
            },
            {
              "name": "location",
              "in": "query",
              "value": "$inputs.location"
            },
            {
              "name": "proximity",
              "in": "query",
              "value": "$inputs.proximity"
            },
            {
              "name": "technology",
              "in": "query",
              "value": "$inputs.technology"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "results": "$response.body#/results"
          }
        },
        {
          "stepId": "get-item-details-with-location",
          "description": "Retrieves detailed information about a specific item, including its current or last known location by populating the location reference.",
          "operationId": "getItemById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.create-item.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "location": "$response.body#/location",
            "label": "$response.body#/label"
          }
        }
      ],
      "outputs": {
        "id": "$steps.create-item-event-subscription.outputs.id",
        "results": "$steps.get-item-current-presence.outputs.results",
        "location": "$steps.get-item-details-with-location.outputs.location",
        "label": "$steps.get-item-details-with-location.outputs.label"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "asset-inventory-management-with-custom-data",
      "summary": "This workflow enables comprehensive management of physical assets by registering them in the system and associating custom metadata for detailed inventory tracking. It's useful for extending asset information beyond standard fields.",
      "description": "This workflow enables comprehensive management of physical assets by registering them in the system and associating custom metadata for detailed inventory tracking. It's useful for extending asset information beyond standard fields.",
      "inputs": {
        "type": "object",
        "properties": {
          "create-item_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "custom": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-item",
          "description": "Registers a new asset in the system, providing its basic identification.",
          "operationId": "addItem",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-item_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-custom-item-metadata",
          "description": "Adds or updates custom, application-specific metadata (e.g., serial numbers, purchase dates) for the registered asset.",
          "operationId": "updateItem",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.create-item.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "id": "$steps.create-item.outputs.id",
              "custom": "$inputs.custom"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "get-item-details-with-custom-data",
          "description": "Retrieves the item's details, including the custom metadata that was previously added, allowing for verification and display.",
          "operationId": "getItemById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.create-item.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "custom": "$response.body#/custom",
            "label": "$response.body#/label",
            "code_hex": "$response.body#/code_hex"
          }
        }
      ],
      "outputs": {
        "id": "$steps.add-custom-item-metadata.outputs.id",
        "custom": "$steps.get-item-details-with-custom-data.outputs.custom",
        "label": "$steps.get-item-details-with-custom-data.outputs.label",
        "code_hex": "$steps.get-item-details-with-custom-data.outputs.code_hex"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "blob-storage-and-retrieval",
      "summary": "This workflow demonstrates how to store and retrieve binary large objects (blobs), such as images or documents, within the Brain API. This is valuable for applications that need to associate files with tracked assets or locations.",
      "description": "This workflow demonstrates how to store and retrieve binary large objects (blobs), such as images or documents, within the Brain API. This is valuable for applications that need to associate files with tracked assets or locations.",
      "inputs": {
        "type": "object",
        "properties": {
          "create-blob-metadata_body": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "file": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-blob-metadata",
          "description": "Creates a metadata entry for a binary large object, reserving an ID for the blob before its content is uploaded.",
          "operationId": "addBlob",
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.create-blob-metadata_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "upload-blob-content",
          "description": "Uploads the actual binary content (e.g., an image file) to the previously created blob metadata entry.",
          "operationId": "uploadBlobById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.create-blob-metadata.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "id": "$steps.create-blob-metadata.outputs.id",
              "file": "$inputs.file"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "content_data": "$response.body"
          }
        },
        {
          "stepId": "get-blob-metadata",
          "description": "Retrieves the metadata for a specific blob, including its filename and content type, which are needed for downloading.",
          "operationId": "getBlobMetadataById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.create-blob-metadata.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "filename": "$response.body#/filename",
            "content_type": "$response.body#/content_type"
          }
        },
        {
          "stepId": "download-blob",
          "description": "Downloads the binary content of the blob using its ID and filename, completing the storage and retrieval cycle.",
          "operationId": "getBlobById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.create-blob-metadata.outputs.id"
            },
            {
              "name": "filename",
              "in": "path",
              "value": "$steps.get-blob-metadata.outputs.filename"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "binary_data": "$response.body#/binary_data"
          }
        }
      ],
      "outputs": {
        "id": "$steps.create-blob-metadata.outputs.id",
        "content_data": "$steps.upload-blob-content.outputs.content_data",
        "filename": "$steps.get-blob-metadata.outputs.filename",
        "content_type": "$steps.get-blob-metadata.outputs.content_type",
        "binary_data": "$steps.download-blob.outputs.binary_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
