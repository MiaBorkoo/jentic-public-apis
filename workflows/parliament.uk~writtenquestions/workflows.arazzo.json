{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/parliament.uk/writtenquestions/v1/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "track-questions-by-specific-mp",
      "summary": "Find all written questions asked by a specific Member of Parliament (MP) within an optional date range, and then retrieve the full details of a selected question.",
      "description": "Find all written questions asked by a specific Member of Parliament (MP) within an optional date range, and then retrieve the full details of a selected question.",
      "inputs": {
        "type": "object",
        "properties": {
          "askingMemberId": {
            "type": "string"
          },
          "answeringMemberId": {
            "type": "string"
          },
          "tabledWhenFrom": {
            "type": "string"
          },
          "tabledWhenTo": {
            "type": "string"
          },
          "answered": {
            "type": "string"
          },
          "answeredWhenFrom": {
            "type": "string"
          },
          "answeredWhenTo": {
            "type": "string"
          },
          "questionStatus": {
            "type": "string"
          },
          "includeWithdrawn": {
            "type": "string"
          },
          "expandMember": {
            "type": "string"
          },
          "correctedWhenFrom": {
            "type": "string"
          },
          "correctedWhenTo": {
            "type": "string"
          },
          "searchTerm": {
            "type": "string"
          },
          "uIN": {
            "type": "string"
          },
          "answeringBodies": {
            "type": "string"
          },
          "members": {
            "type": "string"
          },
          "house": {
            "type": "string"
          },
          "skip": {
            "type": "string"
          },
          "take": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-mp-questions",
          "description": "Search for written questions asked by a specific MP, optionally filtering by the date they were tabled.",
          "operationPath": "openapi_source#/paths/~1api~1writtenquestions~1questions/get",
          "parameters": [
            {
              "name": "askingMemberId",
              "in": "query",
              "value": "$inputs.askingMemberId"
            },
            {
              "name": "answeringMemberId",
              "in": "query",
              "value": "$inputs.answeringMemberId"
            },
            {
              "name": "tabledWhenFrom",
              "in": "query",
              "value": "$inputs.tabledWhenFrom"
            },
            {
              "name": "tabledWhenTo",
              "in": "query",
              "value": "$inputs.tabledWhenTo"
            },
            {
              "name": "answered",
              "in": "query",
              "value": "$inputs.answered"
            },
            {
              "name": "answeredWhenFrom",
              "in": "query",
              "value": "$inputs.answeredWhenFrom"
            },
            {
              "name": "answeredWhenTo",
              "in": "query",
              "value": "$inputs.answeredWhenTo"
            },
            {
              "name": "questionStatus",
              "in": "query",
              "value": "$inputs.questionStatus"
            },
            {
              "name": "includeWithdrawn",
              "in": "query",
              "value": "$inputs.includeWithdrawn"
            },
            {
              "name": "expandMember",
              "in": "query",
              "value": "$inputs.expandMember"
            },
            {
              "name": "correctedWhenFrom",
              "in": "query",
              "value": "$inputs.correctedWhenFrom"
            },
            {
              "name": "correctedWhenTo",
              "in": "query",
              "value": "$inputs.correctedWhenTo"
            },
            {
              "name": "searchTerm",
              "in": "query",
              "value": "$inputs.searchTerm"
            },
            {
              "name": "uIN",
              "in": "query",
              "value": "$inputs.uIN"
            },
            {
              "name": "answeringBodies",
              "in": "query",
              "value": "$inputs.answeringBodies"
            },
            {
              "name": "members",
              "in": "query",
              "value": "$inputs.members"
            },
            {
              "name": "house",
              "in": "query",
              "value": "$inputs.house"
            },
            {
              "name": "skip",
              "in": "query",
              "value": "$inputs.skip"
            },
            {
              "name": "take",
              "in": "query",
              "value": "$inputs.take"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questionsList": "$response.body"
          }
        },
        {
          "stepId": "get-question-details-by-id",
          "description": "Retrieve the full details of a specific written question using its ID obtained from the search results.",
          "operationPath": "openapi_source#/paths/~1api~1writtenquestions~1questions~1{id}/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-mp-questions.outputs.questionsList.results[0].value.id"
            },
            {
              "name": "expandMember",
              "in": "query",
              "value": "$inputs.expandMember"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questionDetails": "$response.body"
          }
        }
      ],
      "outputs": {
        "questionsList": "$steps.search-mp-questions.outputs.questionsList",
        "questionDetails": "$steps.get-question-details-by-id.outputs.questionDetails"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "monitor-department-answers",
      "summary": "Find all written questions answered by specific government departments or answering bodies within an optional date range, and retrieve the full details of a selected answered question.",
      "description": "Find all written questions answered by specific government departments or answering bodies within an optional date range, and retrieve the full details of a selected answered question.",
      "inputs": {
        "type": "object",
        "properties": {
          "askingMemberId": {
            "type": "string"
          },
          "answeringMemberId": {
            "type": "string"
          },
          "tabledWhenFrom": {
            "type": "string"
          },
          "tabledWhenTo": {
            "type": "string"
          },
          "answered": {
            "type": "string"
          },
          "answeredWhenFrom": {
            "type": "string"
          },
          "answeredWhenTo": {
            "type": "string"
          },
          "questionStatus": {
            "type": "string"
          },
          "includeWithdrawn": {
            "type": "string"
          },
          "expandMember": {
            "type": "string"
          },
          "correctedWhenFrom": {
            "type": "string"
          },
          "correctedWhenTo": {
            "type": "string"
          },
          "searchTerm": {
            "type": "string"
          },
          "uIN": {
            "type": "string"
          },
          "answeringBodies": {
            "type": "string"
          },
          "members": {
            "type": "string"
          },
          "house": {
            "type": "string"
          },
          "skip": {
            "type": "string"
          },
          "take": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-department-answers",
          "description": "Search for written questions answered by specific answering bodies, optionally filtering by answer date.",
          "operationPath": "openapi_source#/paths/~1api~1writtenquestions~1questions/get",
          "parameters": [
            {
              "name": "askingMemberId",
              "in": "query",
              "value": "$inputs.askingMemberId"
            },
            {
              "name": "answeringMemberId",
              "in": "query",
              "value": "$inputs.answeringMemberId"
            },
            {
              "name": "tabledWhenFrom",
              "in": "query",
              "value": "$inputs.tabledWhenFrom"
            },
            {
              "name": "tabledWhenTo",
              "in": "query",
              "value": "$inputs.tabledWhenTo"
            },
            {
              "name": "answered",
              "in": "query",
              "value": "$inputs.answered"
            },
            {
              "name": "answeredWhenFrom",
              "in": "query",
              "value": "$inputs.answeredWhenFrom"
            },
            {
              "name": "answeredWhenTo",
              "in": "query",
              "value": "$inputs.answeredWhenTo"
            },
            {
              "name": "questionStatus",
              "in": "query",
              "value": "$inputs.questionStatus"
            },
            {
              "name": "includeWithdrawn",
              "in": "query",
              "value": "$inputs.includeWithdrawn"
            },
            {
              "name": "expandMember",
              "in": "query",
              "value": "$inputs.expandMember"
            },
            {
              "name": "correctedWhenFrom",
              "in": "query",
              "value": "$inputs.correctedWhenFrom"
            },
            {
              "name": "correctedWhenTo",
              "in": "query",
              "value": "$inputs.correctedWhenTo"
            },
            {
              "name": "searchTerm",
              "in": "query",
              "value": "$inputs.searchTerm"
            },
            {
              "name": "uIN",
              "in": "query",
              "value": "$inputs.uIN"
            },
            {
              "name": "answeringBodies",
              "in": "query",
              "value": "$inputs.answeringBodies"
            },
            {
              "name": "members",
              "in": "query",
              "value": "$inputs.members"
            },
            {
              "name": "house",
              "in": "query",
              "value": "$inputs.house"
            },
            {
              "name": "skip",
              "in": "query",
              "value": "$inputs.skip"
            },
            {
              "name": "take",
              "in": "query",
              "value": "$inputs.take"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "answeredQuestionsList": "$response.body"
          }
        },
        {
          "stepId": "get-answered-question-details",
          "description": "Retrieve the full details of a specific answered question using its ID.",
          "operationPath": "openapi_source#/paths/~1api~1writtenquestions~1questions~1{id}/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-department-answers.outputs.answeredQuestionsList.results[0].value.id"
            },
            {
              "name": "expandMember",
              "in": "query",
              "value": "$inputs.expandMember"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "answeredQuestionDetails": "$response.body"
          }
        }
      ],
      "outputs": {
        "answeredQuestionsList": "$steps.search-department-answers.outputs.answeredQuestionsList",
        "answeredQuestionDetails": "$steps.get-answered-question-details.outputs.answeredQuestionDetails"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "find-unanswered-questions-for-department",
      "summary": "Identify written questions directed to specific answering bodies that have not yet been answered, and retrieve the details of a specific unanswered question.",
      "description": "Identify written questions directed to specific answering bodies that have not yet been answered, and retrieve the details of a specific unanswered question.",
      "inputs": {
        "type": "object",
        "properties": {
          "askingMemberId": {
            "type": "string"
          },
          "answeringMemberId": {
            "type": "string"
          },
          "tabledWhenFrom": {
            "type": "string"
          },
          "tabledWhenTo": {
            "type": "string"
          },
          "answered": {
            "type": "string"
          },
          "answeredWhenFrom": {
            "type": "string"
          },
          "answeredWhenTo": {
            "type": "string"
          },
          "questionStatus": {
            "type": "string"
          },
          "includeWithdrawn": {
            "type": "string"
          },
          "expandMember": {
            "type": "string"
          },
          "correctedWhenFrom": {
            "type": "string"
          },
          "correctedWhenTo": {
            "type": "string"
          },
          "searchTerm": {
            "type": "string"
          },
          "uIN": {
            "type": "string"
          },
          "answeringBodies": {
            "type": "string"
          },
          "members": {
            "type": "string"
          },
          "house": {
            "type": "string"
          },
          "skip": {
            "type": "string"
          },
          "take": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "find-unanswered-questions",
          "description": "Search for written questions directed to specific answering bodies that are marked as unanswered.",
          "operationPath": "openapi_source#/paths/~1api~1writtenquestions~1questions/get",
          "parameters": [
            {
              "name": "askingMemberId",
              "in": "query",
              "value": "$inputs.askingMemberId"
            },
            {
              "name": "answeringMemberId",
              "in": "query",
              "value": "$inputs.answeringMemberId"
            },
            {
              "name": "tabledWhenFrom",
              "in": "query",
              "value": "$inputs.tabledWhenFrom"
            },
            {
              "name": "tabledWhenTo",
              "in": "query",
              "value": "$inputs.tabledWhenTo"
            },
            {
              "name": "answered",
              "in": "query",
              "value": "$inputs.answered"
            },
            {
              "name": "answeredWhenFrom",
              "in": "query",
              "value": "$inputs.answeredWhenFrom"
            },
            {
              "name": "answeredWhenTo",
              "in": "query",
              "value": "$inputs.answeredWhenTo"
            },
            {
              "name": "questionStatus",
              "in": "query",
              "value": "$inputs.questionStatus"
            },
            {
              "name": "includeWithdrawn",
              "in": "query",
              "value": "$inputs.includeWithdrawn"
            },
            {
              "name": "expandMember",
              "in": "query",
              "value": "$inputs.expandMember"
            },
            {
              "name": "correctedWhenFrom",
              "in": "query",
              "value": "$inputs.correctedWhenFrom"
            },
            {
              "name": "correctedWhenTo",
              "in": "query",
              "value": "$inputs.correctedWhenTo"
            },
            {
              "name": "searchTerm",
              "in": "query",
              "value": "$inputs.searchTerm"
            },
            {
              "name": "uIN",
              "in": "query",
              "value": "$inputs.uIN"
            },
            {
              "name": "answeringBodies",
              "in": "query",
              "value": "$inputs.answeringBodies"
            },
            {
              "name": "members",
              "in": "query",
              "value": "$inputs.members"
            },
            {
              "name": "house",
              "in": "query",
              "value": "$inputs.house"
            },
            {
              "name": "skip",
              "in": "query",
              "value": "$inputs.skip"
            },
            {
              "name": "take",
              "in": "query",
              "value": "$inputs.take"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "unansweredQuestionsList": "$response.body"
          }
        },
        {
          "stepId": "get-unanswered-question-details",
          "description": "Retrieve the full details of a specific unanswered question using its ID.",
          "operationPath": "openapi_source#/paths/~1api~1writtenquestions~1questions~1{id}/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.find-unanswered-questions.outputs.unansweredQuestionsList.results[0].value.id"
            },
            {
              "name": "expandMember",
              "in": "query",
              "value": "$inputs.expandMember"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "unansweredQuestionDetails": "$response.body"
          }
        }
      ],
      "outputs": {
        "unansweredQuestionsList": "$steps.find-unanswered-questions.outputs.unansweredQuestionsList",
        "unansweredQuestionDetails": "$steps.get-unanswered-question-details.outputs.unansweredQuestionDetails"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "find-statements-by-keyword",
      "summary": "Search for written ministerial statements containing a specific keyword or phrase within an optional date range, and then retrieve the full details of a selected statement.",
      "description": "Search for written ministerial statements containing a specific keyword or phrase within an optional date range, and then retrieve the full details of a selected statement.",
      "inputs": {
        "type": "object",
        "properties": {
          "madeWhenFrom": {
            "type": "string"
          },
          "madeWhenTo": {
            "type": "string"
          },
          "searchTerm": {
            "type": "string"
          },
          "uIN": {
            "type": "string"
          },
          "answeringBodies": {
            "type": "string"
          },
          "members": {
            "type": "string"
          },
          "house": {
            "type": "string"
          },
          "skip": {
            "type": "string"
          },
          "take": {
            "type": "string"
          },
          "expandMember": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-statements-keyword",
          "description": "Search for written statements containing a specific term, optionally filtering by date.",
          "operationPath": "openapi_source#/paths/~1api~1writtenstatements~1statements/get",
          "parameters": [
            {
              "name": "madeWhenFrom",
              "in": "query",
              "value": "$inputs.madeWhenFrom"
            },
            {
              "name": "madeWhenTo",
              "in": "query",
              "value": "$inputs.madeWhenTo"
            },
            {
              "name": "searchTerm",
              "in": "query",
              "value": "$inputs.searchTerm"
            },
            {
              "name": "uIN",
              "in": "query",
              "value": "$inputs.uIN"
            },
            {
              "name": "answeringBodies",
              "in": "query",
              "value": "$inputs.answeringBodies"
            },
            {
              "name": "members",
              "in": "query",
              "value": "$inputs.members"
            },
            {
              "name": "house",
              "in": "query",
              "value": "$inputs.house"
            },
            {
              "name": "skip",
              "in": "query",
              "value": "$inputs.skip"
            },
            {
              "name": "take",
              "in": "query",
              "value": "$inputs.take"
            },
            {
              "name": "expandMember",
              "in": "query",
              "value": "$inputs.expandMember"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "statementsList": "$response.body"
          }
        },
        {
          "stepId": "get-statement-details-by-id",
          "description": "Retrieve the full details of a specific written statement using its ID.",
          "operationPath": "openapi_source#/paths/~1api~1writtenstatements~1statements~1{id}/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-statements-keyword.outputs.statementsList.results[0].value.id"
            },
            {
              "name": "expandMember",
              "in": "query",
              "value": "$inputs.expandMember"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "statementDetails": "$response.body"
          }
        }
      ],
      "outputs": {
        "statementsList": "$steps.search-statements-keyword.outputs.statementsList",
        "statementDetails": "$steps.get-statement-details-by-id.outputs.statementDetails"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}