{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/walletobjects.googleapis.com/pay-passes/v1/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "register-new-issuer",
      "summary": "Allows a new organization to register as an issuer with Google Wallet, enabling them to create and manage passes. This workflow also includes a step to retrieve the newly created issuer's details for verification or further operations.",
      "description": "Allows a new organization to register as an issuer with Google Wallet, enabling them to create and manage passes. This workflow also includes a step to retrieve the newly created issuer's details for verification or further operations.",
      "inputs": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "upload_protocol": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "oauth_token": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "$.xgafv": {
            "type": "string"
          },
          "uploadType": {
            "type": "string"
          },
          "alt": {
            "type": "string"
          },
          "prettyPrint": {
            "type": "string"
          },
          "quotaUser": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-issuer",
          "description": "Inserts a new issuer account with specified properties. The issuer ID is automatically generated upon successful creation.",
          "operationId": "walletobjects.issuer.insert",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "issuerId": "$response.body#/issuerId",
            "issuerName": "$response.body#/issuerName"
          }
        },
        {
          "stepId": "get-issuer-details",
          "description": "Retrieves the full details of the newly created issuer using its unique ID.",
          "operationId": "walletobjects.issuer.get",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$steps.create-issuer.outputs.issuerId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "issuerDetails": "$response.body#/issuerDetails"
          }
        }
      ],
      "outputs": {
        "issuerId": "$steps.create-issuer.outputs.issuerId",
        "issuerName": "$steps.create-issuer.outputs.issuerName",
        "issuerDetails": "$steps.get-issuer-details.outputs.issuerDetails"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-issue-event-ticket-pass",
      "summary": "Defines a new event ticket template (class), creates an individual ticket (object) based on that template, and generates a JWT for the user to save the pass to Google Wallet.",
      "description": "Defines a new event ticket template (class), creates an individual ticket (object) based on that template, and generates a JWT for the user to save the pass to Google Wallet.",
      "inputs": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "upload_protocol": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "oauth_token": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "$.xgafv": {
            "type": "string"
          },
          "uploadType": {
            "type": "string"
          },
          "alt": {
            "type": "string"
          },
          "prettyPrint": {
            "type": "string"
          },
          "quotaUser": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-event-ticket-class",
          "description": "Creates a new event ticket class (template) defining the visual and functional properties for a type of event ticket.",
          "operationId": "walletobjects.eventticketclass.insert",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "eventTicketClassId": "$response.body#/eventTicketClassId"
          }
        },
        {
          "stepId": "create-event-ticket-object",
          "description": "Creates an individual event ticket object (instance) for a specific user, linking it to the previously created class.",
          "operationId": "walletobjects.eventticketobject.insert",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "eventTicketObjectId": "$response.body#/eventTicketObjectId"
          }
        },
        {
          "stepId": "issue-pass-via-jwt",
          "description": "Generates a JWT that allows a user to save the created event ticket object to their Google Wallet. The JWT payload is constructed by the client using the object ID.",
          "operationId": "walletobjects.jwt.insert",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "jwt": "$steps.create-event-ticket-object.outputs.eventTicketObjectId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "saveUri": "$response.body#/saveUri"
          }
        }
      ],
      "outputs": {
        "eventTicketClassId": "$steps.create-event-ticket-class.outputs.eventTicketClassId",
        "eventTicketObjectId": "$steps.create-event-ticket-object.outputs.eventTicketObjectId",
        "saveUri": "$steps.issue-pass-via-jwt.outputs.saveUri"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "update-flight-status-and-notify-passengers",
      "summary": "Allows an airline to update flight information (e.g., delays, gate changes) for an existing flight pass and send a notification to the passenger.",
      "description": "Allows an airline to update flight information (e.g., delays, gate changes) for an existing flight pass and send a notification to the passenger.",
      "inputs": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "upload_protocol": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "oauth_token": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "$.xgafv": {
            "type": "string"
          },
          "uploadType": {
            "type": "string"
          },
          "alt": {
            "type": "string"
          },
          "prettyPrint": {
            "type": "string"
          },
          "quotaUser": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-flight-object",
          "description": "Retrieves the current details of a specific flight object to get its current state before updating.",
          "operationId": "walletobjects.flightobject.get",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$inputs.resourceId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "flightObjectId": "$response.body#/flightObjectId",
            "currentFlightObject": "$response.body#/currentFlightObject"
          }
        },
        {
          "stepId": "update-flight-object",
          "description": "Updates specific fields of the flight object, such as estimated arrival/departure times or gate information, and sets notification preference to notify the user.",
          "operationId": "walletobjects.flightobject.patch",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$steps.get-flight-object.outputs.flightObjectId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "resourceId": "$steps.get-flight-object.outputs.flightObjectId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updatedFlightObject": "$response.body#/updatedFlightObject"
          }
        },
        {
          "stepId": "add-message-to-flight-object",
          "description": "Adds a custom message to the flight object, which will be displayed to the user, for example, to inform them about a delay or gate change.",
          "operationId": "walletobjects.flightobject.addmessage",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$steps.update-flight-object.outputs.updatedFlightObject.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "resourceId": "$steps.update-flight-object.outputs.updatedFlightObject.id",
              "message": "$inputs.message"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "messageAddResponse": "$response.body#/messageAddResponse"
          }
        }
      ],
      "outputs": {
        "flightObjectId": "$steps.get-flight-object.outputs.flightObjectId",
        "currentFlightObject": "$steps.get-flight-object.outputs.currentFlightObject",
        "updatedFlightObject": "$steps.update-flight-object.outputs.updatedFlightObject",
        "messageAddResponse": "$steps.add-message-to-flight-object.outputs.messageAddResponse"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "update-gift-card-balance",
      "summary": "Allows a merchant to update the balance of a gift card in a user's Google Wallet, reflecting real-time changes in the card's value.",
      "description": "Allows a merchant to update the balance of a gift card in a user's Google Wallet, reflecting real-time changes in the card's value.",
      "inputs": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "upload_protocol": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "oauth_token": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "$.xgafv": {
            "type": "string"
          },
          "uploadType": {
            "type": "string"
          },
          "alt": {
            "type": "string"
          },
          "prettyPrint": {
            "type": "string"
          },
          "quotaUser": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-gift-card-object",
          "description": "Retrieves the current details of a specific gift card object, including its current balance, before applying an update.",
          "operationId": "walletobjects.giftcardobject.get",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$inputs.resourceId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "giftCardObjectId": "$response.body#/giftCardObjectId",
            "currentGiftCardObject": "$response.body#/currentGiftCardObject"
          }
        },
        {
          "stepId": "update-gift-card-balance",
          "description": "Updates the 'balance' and 'balanceUpdateTime' fields of the gift card object to reflect the new balance.",
          "operationId": "walletobjects.giftcardobject.patch",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$steps.get-gift-card-object.outputs.giftCardObjectId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "resourceId": "$steps.get-gift-card-object.outputs.giftCardObjectId"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updatedGiftCardObject": "$response.body#/updatedGiftCardObject"
          }
        }
      ],
      "outputs": {
        "giftCardObjectId": "$steps.get-gift-card-object.outputs.giftCardObjectId",
        "currentGiftCardObject": "$steps.get-gift-card-object.outputs.currentGiftCardObject",
        "updatedGiftCardObject": "$steps.update-gift-card-balance.outputs.updatedGiftCardObject"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-transit-pass-rotating-barcode-values",
      "summary": "Allows transit operators to upload and manage dynamic rotating barcode values for transit passes, enhancing security and preventing fraud by frequently changing the barcode.",
      "description": "Allows transit operators to upload and manage dynamic rotating barcode values for transit passes, enhancing security and preventing fraud by frequently changing the barcode.",
      "inputs": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "upload_protocol": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "oauth_token": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "$.xgafv": {
            "type": "string"
          },
          "uploadType": {
            "type": "string"
          },
          "alt": {
            "type": "string"
          },
          "prettyPrint": {
            "type": "string"
          },
          "quotaUser": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          },
          "upload-rotating-barcode-values_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-rotating-barcode-values",
          "description": "Uploads a new set of rotating barcode values for a specific transit object. This is typically done periodically to ensure barcode freshness.",
          "operationId": "walletobjects.media.upload",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$inputs.resourceId"
            }
          ],
          "requestBody": {
            "contentType": "application/octet-stream",
            "payload": "$inputs.upload-rotating-barcode-values_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "uploadResponse": "$response.body#/uploadResponse"
          }
        },
        {
          "stepId": "download-rotating-barcode-values",
          "description": "Downloads the current rotating barcode values for a transit object, which can be used for auditing or reconciliation purposes.",
          "operationId": "walletobjects.media.download",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$inputs.resourceId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "mediaContent": "$response.body#/mediaContent"
          }
        }
      ],
      "outputs": {
        "uploadResponse": "$steps.upload-rotating-barcode-values.outputs.uploadResponse",
        "mediaContent": "$steps.download-rotating-barcode-values.outputs.mediaContent"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "link-offer-to-event-ticket-pass",
      "summary": "Creates a new offer object and links it to an existing event ticket pass, allowing users to see relevant offers alongside their event tickets in Google Wallet.",
      "description": "Creates a new offer object and links it to an existing event ticket pass, allowing users to see relevant offers alongside their event tickets in Google Wallet.",
      "inputs": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "upload_protocol": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "oauth_token": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "$.xgafv": {
            "type": "string"
          },
          "uploadType": {
            "type": "string"
          },
          "alt": {
            "type": "string"
          },
          "prettyPrint": {
            "type": "string"
          },
          "quotaUser": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          },
          "link-offer-to-event-ticket_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-offer-object",
          "description": "Creates a new offer object that will be linked to an event ticket pass. This offer must be based on an existing offer class.",
          "operationId": "walletobjects.offerobject.insert",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "createdOfferId": "$response.body#/createdOfferId"
          }
        },
        {
          "stepId": "link-offer-to-event-ticket",
          "description": "Links the newly created offer object to an existing event ticket object by adding its ID to the linked offers list.",
          "operationId": "walletobjects.eventticketobject.modifylinkedofferobjects",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$inputs.resourceId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.link-offer-to-event-ticket_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updatedEventTicketObject": "$response.body#/updatedEventTicketObject"
          }
        }
      ],
      "outputs": {
        "createdOfferId": "$steps.create-offer-object.outputs.createdOfferId",
        "updatedEventTicketObject": "$steps.link-offer-to-event-ticket.outputs.updatedEventTicketObject"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "link-offer-to-loyalty-card",
      "summary": "Creates a new offer object and links it to an existing loyalty card, allowing users to see relevant offers alongside their loyalty program details in Google Wallet.",
      "description": "Creates a new offer object and links it to an existing loyalty card, allowing users to see relevant offers alongside their loyalty program details in Google Wallet.",
      "inputs": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "upload_protocol": {
            "type": "string"
          },
          "callback": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "oauth_token": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "$.xgafv": {
            "type": "string"
          },
          "uploadType": {
            "type": "string"
          },
          "alt": {
            "type": "string"
          },
          "prettyPrint": {
            "type": "string"
          },
          "quotaUser": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          },
          "modify-loyalty-linked-offers_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-offer-object",
          "description": "Creates a new offer object that will be linked to a loyalty card. This offer must be based on an existing offer class.",
          "operationId": "walletobjects.offerobject.insert",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "createdOfferId": "$response.body#/createdOfferId"
          }
        },
        {
          "stepId": "modify-loyalty-linked-offers",
          "description": "Links the newly created offer object to an existing loyalty object by adding its ID to the linked offers list.",
          "operationId": "walletobjects.loyaltyobject.modifylinkedofferobjects",
          "parameters": [
            {
              "name": "access_token",
              "in": "query",
              "value": "$inputs.access_token"
            },
            {
              "name": "upload_protocol",
              "in": "query",
              "value": "$inputs.upload_protocol"
            },
            {
              "name": "callback",
              "in": "query",
              "value": "$inputs.callback"
            },
            {
              "name": "key",
              "in": "query",
              "value": "$inputs.key"
            },
            {
              "name": "oauth_token",
              "in": "query",
              "value": "$inputs.oauth_token"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "$.xgafv",
              "in": "query",
              "value": "$inputs.$.xgafv"
            },
            {
              "name": "uploadType",
              "in": "query",
              "value": "$inputs.uploadType"
            },
            {
              "name": "alt",
              "in": "query",
              "value": "$inputs.alt"
            },
            {
              "name": "prettyPrint",
              "in": "query",
              "value": "$inputs.prettyPrint"
            },
            {
              "name": "quotaUser",
              "in": "query",
              "value": "$inputs.quotaUser"
            },
            {
              "name": "resourceId",
              "in": "path",
              "value": "$inputs.resourceId"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.modify-loyalty-linked-offers_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updatedLoyaltyObject": "$response.body#/updatedLoyaltyObject"
          }
        }
      ],
      "outputs": {
        "createdOfferId": "$steps.create-offer-object.outputs.createdOfferId",
        "updatedLoyaltyObject": "$steps.modify-loyalty-linked-offers.outputs.updatedLoyaltyObject"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}