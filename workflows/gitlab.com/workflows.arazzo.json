{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/gitlab.com/main/0.0.1/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "project-setup-and-initial-configuration",
      "summary": "This workflow automates the initial setup of a new project, including creating the project, adding a deploy key, setting up a CI/CD variable, configuring a webhook, and defining project-level notification settings. This is valuable for quickly onboarding new development efforts with predefined standards.",
      "description": "This workflow automates the initial setup of a new project, including creating the project, adding a deploy key, setting up a CI/CD variable, configuring a webhook, and defining project-level notification settings. This is valuable for quickly onboarding new development efforts with predefined standards.",
      "inputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "close_issue": {
            "type": "string"
          },
          "close_merge_request": {
            "type": "string"
          },
          "failed_pipeline": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "merge_merge_request": {
            "type": "string"
          },
          "new_issue": {
            "type": "string"
          },
          "new_merge_request": {
            "type": "string"
          },
          "new_note": {
            "type": "string"
          },
          "reassign_issue": {
            "type": "string"
          },
          "reassign_merge_request": {
            "type": "string"
          },
          "reopen_issue": {
            "type": "string"
          },
          "reopen_merge_request": {
            "type": "string"
          },
          "success_pipeline": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-project",
          "description": "Creates a new project with specified name and visibility.",
          "operationId": "postV3Projects",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "name": "$response.body#/name",
            "path": "$response.body#/path",
            "runners_token": "$response.body#/runners_token",
            "web_url": "$response.body#/web_url"
          }
        },
        {
          "stepId": "add-deploy-key",
          "description": "Adds a new deploy key to the newly created project for secure access.",
          "operationId": "postV3ProjectsIdDeployKeys",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "key": "$inputs.key"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "title": "$response.body#/title",
            "key": "$response.body#/key"
          }
        },
        {
          "stepId": "add-project-variable",
          "description": "Creates a new CI/CD variable for the project, useful for pipeline configurations.",
          "operationId": "postV3ProjectsIdVariables",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "key": "$inputs.key"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "key": "$response.body#/key",
            "value": "$response.body#/value"
          }
        },
        {
          "stepId": "create-project-hook",
          "description": "Adds a webhook to the project to integrate with external services on events like pushes or merges.",
          "operationId": "postV3ProjectsIdHooks",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "url": "$inputs.url"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "url": "$response.body#/url",
            "project_id": "$response.body#/project_id"
          }
        },
        {
          "stepId": "set-project-notification-settings",
          "description": "Updates the project's notification settings to control alerts for various events.",
          "operationId": "putV3ProjectsIdNotificationSettings",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "close_issue": "$inputs.close_issue",
              "close_merge_request": "$inputs.close_merge_request",
              "failed_pipeline": "$inputs.failed_pipeline",
              "level": "$inputs.level",
              "merge_merge_request": "$inputs.merge_merge_request",
              "new_issue": "$inputs.new_issue",
              "new_merge_request": "$inputs.new_merge_request",
              "new_note": "$inputs.new_note",
              "reassign_issue": "$inputs.reassign_issue",
              "reassign_merge_request": "$inputs.reassign_merge_request",
              "reopen_issue": "$inputs.reopen_issue",
              "reopen_merge_request": "$inputs.reopen_merge_request",
              "success_pipeline": "$inputs.success_pipeline"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "level": "$response.body#/level"
          }
        }
      ],
      "outputs": {
        "id": "$steps.create-project-hook.outputs.id",
        "name": "$steps.create-project.outputs.name",
        "path": "$steps.create-project.outputs.path",
        "runners_token": "$steps.create-project.outputs.runners_token",
        "web_url": "$steps.create-project.outputs.web_url",
        "title": "$steps.add-deploy-key.outputs.title",
        "key": "$steps.add-project-variable.outputs.key",
        "value": "$steps.add-project-variable.outputs.value",
        "url": "$steps.create-project-hook.outputs.url",
        "project_id": "$steps.create-project-hook.outputs.project_id",
        "level": "$steps.set-project-notification-settings.outputs.level"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "cicd-pipeline-monitoring-and-artifact-retrieval",
      "summary": "This workflow enables users to trigger a new CI/CD pipeline, retrieve its details, list its associated builds, and then download artifacts from a specific build. This is crucial for automated testing, deployment, and debugging processes.",
      "description": "This workflow enables users to trigger a new CI/CD pipeline, retrieve its details, list its associated builds, and then download artifacts from a specific build. This is crucial for automated testing, deployment, and debugging processes.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "pipeline_id": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "per_page": {
            "type": "string"
          },
          "build_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-pipeline",
          "description": "Triggers a new CI/CD pipeline for a project on a specified reference (branch/tag).",
          "operationId": "postV3ProjectsIdPipeline",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ref": "$inputs.ref"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "sha": "$response.body#/sha",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "get-pipeline-details",
          "description": "Retrieves detailed information about the triggered pipeline.",
          "operationId": "getV3ProjectsIdPipelinesPipelineId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "pipeline_id",
              "in": "path",
              "value": "$inputs.pipeline_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "sha": "$response.body#/sha",
            "ref": "$response.body#/ref",
            "status": "$response.body#/status",
            "user": "$response.body#/user",
            "created_at": "$response.body#/created_at",
            "finished_at": "$response.body#/finished_at"
          }
        },
        {
          "stepId": "get-pipeline-builds",
          "description": "Lists all builds associated with the project, which can then be filtered by pipeline or commit SHA.",
          "operationId": "getV3ProjectsIdBuilds",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "scope",
              "in": "query",
              "value": "$inputs.scope"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "per_page",
              "in": "query",
              "value": "$inputs.per_page"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "builds": "$response.body#/builds"
          }
        },
        {
          "stepId": "download-build-artifacts",
          "description": "Downloads the artifacts file generated by a specific build.",
          "operationId": "getV3ProjectsIdBuildsBuildIdArtifacts",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "build_id",
              "in": "path",
              "value": "$steps.get-pipeline-builds.outputs.builds.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "artifacts_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "id": "$steps.get-pipeline-details.outputs.id",
        "sha": "$steps.get-pipeline-details.outputs.sha",
        "status": "$steps.get-pipeline-details.outputs.status",
        "ref": "$steps.get-pipeline-details.outputs.ref",
        "user": "$steps.get-pipeline-details.outputs.user",
        "created_at": "$steps.get-pipeline-details.outputs.created_at",
        "finished_at": "$steps.get-pipeline-details.outputs.finished_at",
        "builds": "$steps.get-pipeline-builds.outputs.builds",
        "artifacts_data": "$steps.download-build-artifacts.outputs.artifacts_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "repository-branch-and-release-management",
      "summary": "This workflow streamlines the process of creating and managing new branches and releases. It involves creating a new branch, protecting it to prevent accidental changes, creating a tag from that branch, and then adding release notes to the tag.",
      "description": "This workflow streamlines the process of creating and managing new branches and releases. It involves creating a new branch, protecting it to prevent accidental changes, creating a tag from that branch, and then adding release notes to the tag.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "branch_name": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "developers_can_merge": {
            "type": "string"
          },
          "developers_can_push": {
            "type": "string"
          },
          "tag_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-branch",
          "description": "Creates a new branch in the project repository from a specified reference.",
          "operationId": "postV3ProjectsIdRepositoryBranches",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "branch_name": "$inputs.branch_name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "name": "$response.body#/name",
            "commit": "$response.body#/commit"
          }
        },
        {
          "stepId": "protect-branch",
          "description": "Protects the newly created branch, restricting push and merge access.",
          "operationId": "putV3ProjectsIdRepositoryBranchesBranchProtect",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "branch",
              "in": "path",
              "value": "$inputs.branch"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "developers_can_merge": "$inputs.developers_can_merge",
              "developers_can_push": "$inputs.developers_can_push"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "name": "$response.body#/name",
            "protected": "$response.body#/protected"
          }
        },
        {
          "stepId": "create-tag",
          "description": "Creates a new tag from the protected branch, marking a release point.",
          "operationId": "postV3ProjectsIdRepositoryTags",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "tag_name": "$inputs.tag_name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "name": "$response.body#/name",
            "commit": "$response.body#/commit"
          }
        },
        {
          "stepId": "add-release-note-to-tag",
          "description": "Adds release notes to the newly created tag, providing details about the release.",
          "operationId": "postV3ProjectsIdRepositoryTagsTagNameRelease",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "tag_name",
              "in": "path",
              "value": "$inputs.tag_name"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "description": "$inputs.description"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tag_name": "$response.body#/tag_name",
            "description": "$response.body#/description"
          }
        }
      ],
      "outputs": {
        "name": "$steps.create-tag.outputs.name",
        "commit": "$steps.create-tag.outputs.commit",
        "protected": "$steps.protect-branch.outputs.protected",
        "tag_name": "$steps.add-release-note-to-tag.outputs.tag_name",
        "description": "$steps.add-release-note-to-tag.outputs.description"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "issue-management-and-time-tracking",
      "summary": "This workflow covers the lifecycle of an issue within a project, from creation and commenting to time tracking and final resolution. It's essential for project managers and development teams to manage tasks effectively.",
      "description": "This workflow covers the lifecycle of an issue within a project, from creation and commenting to time tracking and final resolution. It's essential for project managers and development teams to manage tasks effectively.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "noteable_id": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "issue_id": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "state_event": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-project-issue",
          "description": "Creates a new issue in a specified project with a title, description, and optional assignments.",
          "operationId": "postV3ProjectsIdIssues",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "title": "$inputs.title"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "iid": "$response.body#/iid",
            "title": "$response.body#/title",
            "state": "$response.body#/state",
            "project_id": "$response.body#/project_id"
          }
        },
        {
          "stepId": "add-issue-comment",
          "description": "Adds a new comment (note) to the created issue for discussion or updates.",
          "operationId": "postV3ProjectsIdIssuesNoteableIdNotes",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "noteable_id",
              "in": "path",
              "value": "$inputs.noteable_id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "body": "$inputs.body"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "body": "$response.body#/body",
            "noteable_id": "$response.body#/noteable_id"
          }
        },
        {
          "stepId": "add-spent-time-to-issue",
          "description": "Logs time spent on the issue, useful for time tracking and reporting.",
          "operationId": "postV3ProjectsIdIssuesIssueIdAddSpentTime",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "issue_id",
              "in": "path",
              "value": "$inputs.issue_id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "duration": "$inputs.duration"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "issue_data": "$response.body"
          }
        },
        {
          "stepId": "close-issue",
          "description": "Updates the state of the issue to 'closed' once the task is complete.",
          "operationId": "putV3ProjectsIdIssuesIssueId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "issue_id",
              "in": "path",
              "value": "$inputs.issue_id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "state_event": "$inputs.state_event"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "iid": "$response.body#/iid",
            "state": "$response.body#/state"
          }
        }
      ],
      "outputs": {
        "id": "$steps.close-issue.outputs.id",
        "iid": "$steps.close-issue.outputs.iid",
        "title": "$steps.create-project-issue.outputs.title",
        "state": "$steps.close-issue.outputs.state",
        "project_id": "$steps.create-project-issue.outputs.project_id",
        "body": "$steps.add-issue-comment.outputs.body",
        "noteable_id": "$steps.add-issue-comment.outputs.noteable_id",
        "issue_data": "$steps.add-spent-time-to-issue.outputs.issue_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-group-access-requests",
      "summary": "This workflow allows an administrator to list pending access requests for a specific group and then approve or deny them, streamlining user onboarding and access control for group resources.",
      "description": "This workflow allows an administrator to list pending access requests for a specific group and then approve or deny them, streamlining user onboarding and access control for group resources.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "per_page": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "access_level": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-group-access-requests",
          "description": "Retrieves a list of all pending access requests for a given group.",
          "operationId": "getV3GroupsIdAccessRequests",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "per_page",
              "in": "query",
              "value": "$inputs.per_page"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "access_requesters": "$response.body#/access_requesters"
          }
        },
        {
          "stepId": "approve-group-access-request",
          "description": "Approves a specific user's access request to the group, granting them a specified access level.",
          "operationId": "putV3GroupsIdAccessRequestsUserIdApprove",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-group-access-requests.outputs.access_requesters.id"
            },
            {
              "name": "user_id",
              "in": "path",
              "value": "$steps.get-group-access-requests.outputs.access_requesters.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "id": "$steps.get-group-access-requests.outputs.access_requesters[0].id",
              "user_id": "$steps.get-group-access-requests.outputs.access_requesters[0].id",
              "access_level": "$inputs.access_level"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "username": "$response.body#/username",
            "access_level": "$response.body#/access_level"
          }
        }
      ],
      "outputs": {
        "access_requesters": "$steps.get-group-access-requests.outputs.access_requesters",
        "id": "$steps.approve-group-access-request.outputs.id",
        "username": "$steps.approve-group-access-request.outputs.username",
        "access_level": "$steps.approve-group-access-request.outputs.access_level"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "administrator-user-ssh-key-management",
      "summary": "This workflow enables an administrator to manage SSH keys for a specific user. It allows searching for a user, listing their existing SSH keys, adding a new key, and removing an old one, ensuring secure access control.",
      "description": "This workflow enables an administrator to manage SSH keys for a specific user. It allows searching for a user, listing their existing SSH keys, adding a new key, and removing an old one, ensuring secure access control.",
      "inputs": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "active": {
            "type": "string"
          },
          "external": {
            "type": "string"
          },
          "blocked": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "per_page": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "key_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-user-by-username",
          "description": "Searches for a user by username to get their ID.",
          "operationId": "getV3Users",
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "value": "$inputs.username"
            },
            {
              "name": "search",
              "in": "query",
              "value": "$inputs.search"
            },
            {
              "name": "active",
              "in": "query",
              "value": "$inputs.active"
            },
            {
              "name": "external",
              "in": "query",
              "value": "$inputs.external"
            },
            {
              "name": "blocked",
              "in": "query",
              "value": "$inputs.blocked"
            },
            {
              "name": "page",
              "in": "query",
              "value": "$inputs.page"
            },
            {
              "name": "per_page",
              "in": "query",
              "value": "$inputs.per_page"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "users": "$response.body#/users"
          }
        },
        {
          "stepId": "get-user-ssh-keys",
          "description": "Retrieves all SSH keys associated with the specified user.",
          "operationId": "getV3UsersIdKeys",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-user-by-username.outputs.users.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "ssh_keys": "$response.body#/ssh_keys"
          }
        },
        {
          "stepId": "add-user-ssh-key",
          "description": "Adds a new SSH key for the specified user.",
          "operationId": "postV3UsersIdKeys",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-user-by-username.outputs.users.id"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "id": "$steps.get-user-by-username.outputs.users[0].id",
              "key": "$inputs.key"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "title": "$response.body#/title",
            "key": "$response.body#/key"
          }
        },
        {
          "stepId": "delete-user-ssh-key",
          "description": "Deletes an existing SSH key from the specified user.",
          "operationId": "deleteV3UsersIdKeysKeyId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-user-by-username.outputs.users.id"
            },
            {
              "name": "key_id",
              "in": "path",
              "value": "$steps.get-user-ssh-keys.outputs.ssh_keys.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "title": "$response.body#/title",
            "key": "$response.body#/key"
          }
        }
      ],
      "outputs": {
        "users": "$steps.get-user-by-username.outputs.users",
        "ssh_keys": "$steps.get-user-ssh-keys.outputs.ssh_keys",
        "id": "$steps.delete-user-ssh-key.outputs.id",
        "title": "$steps.delete-user-ssh-key.outputs.title",
        "key": "$steps.delete-user-ssh-key.outputs.key"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "global-application-settings-management",
      "summary": "This workflow allows administrators to retrieve the current global application settings and then modify them. This is crucial for maintaining and configuring the overall behavior and security of the GitLab instance.",
      "description": "This workflow allows administrators to retrieve the current global application settings and then modify them. This is crucial for maintaining and configuring the overall behavior and security of the GitLab instance.",
      "inputs": {
        "type": "object",
        "properties": {
          "admin_notification_email": {
            "type": "string"
          },
          "after_sign_out_path": {
            "type": "string"
          },
          "after_sign_up_text": {
            "type": "string"
          },
          "akismet_api_key": {
            "type": "string"
          },
          "akismet_enabled": {
            "type": "string"
          },
          "container_registry_token_expire_delay": {
            "type": "string"
          },
          "default_branch_protection": {
            "type": "string"
          },
          "default_group_visibility": {
            "type": "string"
          },
          "default_project_visibility": {
            "type": "string"
          },
          "default_projects_limit": {
            "type": "string"
          },
          "default_snippet_visibility": {
            "type": "string"
          },
          "disabled_oauth_sign_in_sources": {
            "type": "string"
          },
          "domain_blacklist": {
            "type": "string"
          },
          "domain_blacklist_enabled": {
            "type": "string"
          },
          "domain_whitelist": {
            "type": "string"
          },
          "email_author_in_body": {
            "type": "string"
          },
          "enabled_git_access_protocol": {
            "type": "string"
          },
          "gravatar_enabled": {
            "type": "string"
          },
          "help_page_text": {
            "type": "string"
          },
          "home_page_url": {
            "type": "string"
          },
          "housekeeping_bitmaps_enabled": {
            "type": "string"
          },
          "housekeeping_enabled": {
            "type": "string"
          },
          "housekeeping_full_repack_period": {
            "type": "string"
          },
          "housekeeping_gc_period": {
            "type": "string"
          },
          "housekeeping_incremental_repack_period": {
            "type": "string"
          },
          "html_emails_enabled": {
            "type": "string"
          },
          "import_sources": {
            "type": "string"
          },
          "koding_enabled": {
            "type": "string"
          },
          "koding_url": {
            "type": "string"
          },
          "max_artifacts_size": {
            "type": "string"
          },
          "max_attachment_size": {
            "type": "string"
          },
          "metrics_enabled": {
            "type": "string"
          },
          "metrics_host": {
            "type": "string"
          },
          "metrics_method_call_threshold": {
            "type": "string"
          },
          "metrics_packet_size": {
            "type": "string"
          },
          "metrics_pool_size": {
            "type": "string"
          },
          "metrics_port": {
            "type": "string"
          },
          "metrics_sample_interval": {
            "type": "string"
          },
          "metrics_timeout": {
            "type": "string"
          },
          "plantuml_enabled": {
            "type": "string"
          },
          "plantuml_url": {
            "type": "string"
          },
          "recaptcha_enabled": {
            "type": "string"
          },
          "recaptcha_private_key": {
            "type": "string"
          },
          "recaptcha_site_key": {
            "type": "string"
          },
          "repository_checks_enabled": {
            "type": "string"
          },
          "repository_storage": {
            "type": "string"
          },
          "require_two_factor_authentication": {
            "type": "string"
          },
          "restricted_visibility_levels": {
            "type": "string"
          },
          "send_user_confirmation_email": {
            "type": "string"
          },
          "sentry_dsn": {
            "type": "string"
          },
          "sentry_enabled": {
            "type": "string"
          },
          "session_expire_delay": {
            "type": "string"
          },
          "shared_runners_enabled": {
            "type": "string"
          },
          "shared_runners_text": {
            "type": "string"
          },
          "sidekiq_throttling_enabled": {
            "type": "string"
          },
          "sidekiq_throttling_factor": {
            "type": "string"
          },
          "sidekiq_throttling_queus": {
            "type": "string"
          },
          "sign_in_text": {
            "type": "string"
          },
          "signin_enabled": {
            "type": "string"
          },
          "signup_enabled": {
            "type": "string"
          },
          "two_factor_grace_period": {
            "type": "string"
          },
          "user_default_external": {
            "type": "string"
          },
          "user_oauth_applications": {
            "type": "string"
          },
          "version_check_enabled": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-application-settings",
          "description": "Retrieves the current global application settings.",
          "operationId": "getV3ApplicationSettings",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "created_at": "$response.body#/created_at",
            "updated_at": "$response.body#/updated_at",
            "after_sign_out_path": "$response.body#/after_sign_out_path",
            "after_sign_up_text": "$response.body#/after_sign_up_text",
            "container_registry_token_expire_delay": "$response.body#/container_registry_token_expire_delay",
            "default_branch_protection": "$response.body#/default_branch_protection",
            "default_group_visibility": "$response.body#/default_group_visibility",
            "default_project_visibility": "$response.body#/default_project_visibility",
            "default_projects_limit": "$response.body#/default_projects_limit",
            "default_snippet_visibility": "$response.body#/default_snippet_visibility",
            "domain_blacklist": "$response.body#/domain_blacklist",
            "domain_blacklist_enabled": "$response.body#/domain_blacklist_enabled",
            "domain_whitelist": "$response.body#/domain_whitelist",
            "gravatar_enabled": "$response.body#/gravatar_enabled",
            "home_page_url": "$response.body#/home_page_url",
            "koding_enabled": "$response.body#/koding_enabled",
            "koding_url": "$response.body#/koding_url",
            "max_attachment_size": "$response.body#/max_attachment_size",
            "plantuml_enabled": "$response.body#/plantuml_enabled",
            "plantuml_url": "$response.body#/plantuml_url",
            "repository_storage": "$response.body#/repository_storage",
            "repository_storages": "$response.body#/repository_storages",
            "restricted_visibility_levels": "$response.body#/restricted_visibility_levels",
            "session_expire_delay": "$response.body#/session_expire_delay",
            "sign_in_text": "$response.body#/sign_in_text",
            "signin_enabled": "$response.body#/signin_enabled",
            "signup_enabled": "$response.body#/signup_enabled",
            "user_oauth_applications": "$response.body#/user_oauth_applications"
          }
        },
        {
          "stepId": "modify-application-settings",
          "description": "Updates specific global application settings based on retrieved values or new inputs.",
          "operationId": "putV3ApplicationSettings",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "admin_notification_email": "$inputs.admin_notification_email",
              "after_sign_out_path": "$inputs.after_sign_out_path",
              "after_sign_up_text": "$inputs.after_sign_up_text",
              "akismet_api_key": "$inputs.akismet_api_key",
              "akismet_enabled": "$inputs.akismet_enabled",
              "container_registry_token_expire_delay": "$inputs.container_registry_token_expire_delay",
              "default_branch_protection": "$inputs.default_branch_protection",
              "default_group_visibility": "$inputs.default_group_visibility",
              "default_project_visibility": "$inputs.default_project_visibility",
              "default_projects_limit": "$inputs.default_projects_limit",
              "default_snippet_visibility": "$inputs.default_snippet_visibility",
              "disabled_oauth_sign_in_sources": "$inputs.disabled_oauth_sign_in_sources",
              "domain_blacklist": "$inputs.domain_blacklist",
              "domain_blacklist_enabled": "$inputs.domain_blacklist_enabled",
              "domain_whitelist": "$inputs.domain_whitelist",
              "email_author_in_body": "$inputs.email_author_in_body",
              "enabled_git_access_protocol": "$inputs.enabled_git_access_protocol",
              "gravatar_enabled": "$inputs.gravatar_enabled",
              "help_page_text": "$inputs.help_page_text",
              "home_page_url": "$inputs.home_page_url",
              "housekeeping_bitmaps_enabled": "$inputs.housekeeping_bitmaps_enabled",
              "housekeeping_enabled": "$inputs.housekeeping_enabled",
              "housekeeping_full_repack_period": "$inputs.housekeeping_full_repack_period",
              "housekeeping_gc_period": "$inputs.housekeeping_gc_period",
              "housekeeping_incremental_repack_period": "$inputs.housekeeping_incremental_repack_period",
              "html_emails_enabled": "$inputs.html_emails_enabled",
              "import_sources": "$inputs.import_sources",
              "koding_enabled": "$inputs.koding_enabled",
              "koding_url": "$inputs.koding_url",
              "max_artifacts_size": "$inputs.max_artifacts_size",
              "max_attachment_size": "$inputs.max_attachment_size",
              "metrics_enabled": "$inputs.metrics_enabled",
              "metrics_host": "$inputs.metrics_host",
              "metrics_method_call_threshold": "$inputs.metrics_method_call_threshold",
              "metrics_packet_size": "$inputs.metrics_packet_size",
              "metrics_pool_size": "$inputs.metrics_pool_size",
              "metrics_port": "$inputs.metrics_port",
              "metrics_sample_interval": "$inputs.metrics_sample_interval",
              "metrics_timeout": "$inputs.metrics_timeout",
              "plantuml_enabled": "$inputs.plantuml_enabled",
              "plantuml_url": "$inputs.plantuml_url",
              "recaptcha_enabled": "$inputs.recaptcha_enabled",
              "recaptcha_private_key": "$inputs.recaptcha_private_key",
              "recaptcha_site_key": "$inputs.recaptcha_site_key",
              "repository_checks_enabled": "$inputs.repository_checks_enabled",
              "repository_storage": "$inputs.repository_storage",
              "require_two_factor_authentication": "$inputs.require_two_factor_authentication",
              "restricted_visibility_levels": "$inputs.restricted_visibility_levels",
              "send_user_confirmation_email": "$inputs.send_user_confirmation_email",
              "sentry_dsn": "$inputs.sentry_dsn",
              "sentry_enabled": "$inputs.sentry_enabled",
              "session_expire_delay": "$inputs.session_expire_delay",
              "shared_runners_enabled": "$inputs.shared_runners_enabled",
              "shared_runners_text": "$inputs.shared_runners_text",
              "sidekiq_throttling_enabled": "$inputs.sidekiq_throttling_enabled",
              "sidekiq_throttling_factor": "$inputs.sidekiq_throttling_factor",
              "sidekiq_throttling_queus": "$inputs.sidekiq_throttling_queus",
              "sign_in_text": "$inputs.sign_in_text",
              "signin_enabled": "$inputs.signin_enabled",
              "signup_enabled": "$inputs.signup_enabled",
              "two_factor_grace_period": "$inputs.two_factor_grace_period",
              "user_default_external": "$inputs.user_default_external",
              "user_oauth_applications": "$inputs.user_oauth_applications",
              "version_check_enabled": "$inputs.version_check_enabled"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "default_project_visibility": "$response.body#/default_project_visibility",
            "signin_enabled": "$response.body#/signin_enabled",
            "signup_enabled": "$response.body#/signup_enabled"
          }
        }
      ],
      "outputs": {
        "id": "$steps.modify-application-settings.outputs.id",
        "created_at": "$steps.get-application-settings.outputs.created_at",
        "updated_at": "$steps.get-application-settings.outputs.updated_at",
        "after_sign_out_path": "$steps.get-application-settings.outputs.after_sign_out_path",
        "after_sign_up_text": "$steps.get-application-settings.outputs.after_sign_up_text",
        "container_registry_token_expire_delay": "$steps.get-application-settings.outputs.container_registry_token_expire_delay",
        "default_branch_protection": "$steps.get-application-settings.outputs.default_branch_protection",
        "default_group_visibility": "$steps.get-application-settings.outputs.default_group_visibility",
        "default_project_visibility": "$steps.modify-application-settings.outputs.default_project_visibility",
        "default_projects_limit": "$steps.get-application-settings.outputs.default_projects_limit",
        "default_snippet_visibility": "$steps.get-application-settings.outputs.default_snippet_visibility",
        "domain_blacklist": "$steps.get-application-settings.outputs.domain_blacklist",
        "domain_blacklist_enabled": "$steps.get-application-settings.outputs.domain_blacklist_enabled",
        "domain_whitelist": "$steps.get-application-settings.outputs.domain_whitelist",
        "gravatar_enabled": "$steps.get-application-settings.outputs.gravatar_enabled",
        "home_page_url": "$steps.get-application-settings.outputs.home_page_url",
        "koding_enabled": "$steps.get-application-settings.outputs.koding_enabled",
        "koding_url": "$steps.get-application-settings.outputs.koding_url",
        "max_attachment_size": "$steps.get-application-settings.outputs.max_attachment_size",
        "plantuml_enabled": "$steps.get-application-settings.outputs.plantuml_enabled",
        "plantuml_url": "$steps.get-application-settings.outputs.plantuml_url",
        "repository_storage": "$steps.get-application-settings.outputs.repository_storage",
        "repository_storages": "$steps.get-application-settings.outputs.repository_storages",
        "restricted_visibility_levels": "$steps.get-application-settings.outputs.restricted_visibility_levels",
        "session_expire_delay": "$steps.get-application-settings.outputs.session_expire_delay",
        "sign_in_text": "$steps.get-application-settings.outputs.sign_in_text",
        "signin_enabled": "$steps.modify-application-settings.outputs.signin_enabled",
        "signup_enabled": "$steps.modify-application-settings.outputs.signup_enabled",
        "user_oauth_applications": "$steps.get-application-settings.outputs.user_oauth_applications"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
