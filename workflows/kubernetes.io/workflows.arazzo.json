{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/kubernetes.io/main/v1.10.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "inspect-and-debug-pod",
      "summary": "This workflow allows a user to retrieve detailed information about a specific pod, view its logs, and execute commands within its containers for debugging purposes. It starts by listing pods in a namespace, then allows selection of a pod for detailed inspection and subsequent troubleshooting actions.",
      "description": "This workflow allows a user to retrieve detailed information about a specific pod, view its logs, and execute commands within its containers for debugging purposes. It starts by listing pods in a namespace, then allows selection of a pod for detailed inspection and subsequent troubleshooting actions.",
      "inputs": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string"
          },
          "pretty": {
            "type": "string"
          },
          "continue": {
            "type": "string"
          },
          "fieldSelector": {
            "type": "string"
          },
          "includeUninitialized": {
            "type": "string"
          },
          "labelSelector": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "timeoutSeconds": {
            "type": "string"
          },
          "watch": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "exact": {
            "type": "string"
          },
          "export": {
            "type": "string"
          },
          "container": {
            "type": "string"
          },
          "follow": {
            "type": "string"
          },
          "limitBytes": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "sinceSeconds": {
            "type": "string"
          },
          "tailLines": {
            "type": "string"
          },
          "timestamps": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "stderr": {
            "type": "string"
          },
          "stdin": {
            "type": "string"
          },
          "stdout": {
            "type": "string"
          },
          "tty": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-namespaced-pods",
          "description": "Lists all pods within a specified namespace. This step helps identify the target pod for debugging.",
          "operationId": "listCoreV1NamespacedPod",
          "parameters": [
            {
              "name": "namespace",
              "in": "path",
              "value": "$inputs.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "continue",
              "in": "query",
              "value": "$inputs.continue"
            },
            {
              "name": "fieldSelector",
              "in": "query",
              "value": "$inputs.fieldSelector"
            },
            {
              "name": "includeUninitialized",
              "in": "query",
              "value": "$inputs.includeUninitialized"
            },
            {
              "name": "labelSelector",
              "in": "query",
              "value": "$inputs.labelSelector"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "resourceVersion",
              "in": "query",
              "value": "$inputs.resourceVersion"
            },
            {
              "name": "timeoutSeconds",
              "in": "query",
              "value": "$inputs.timeoutSeconds"
            },
            {
              "name": "watch",
              "in": "query",
              "value": "$inputs.watch"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "pod_list": "$response.body#/pod_list"
          }
        },
        {
          "stepId": "read-namespaced-pod",
          "description": "Retrieves detailed information for a specific pod, including its status and container details.",
          "operationId": "readCoreV1NamespacedPod",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.list-namespaced-pods.outputs.pod_list.items[0].metadata.name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.list-namespaced-pods.outputs.pod_list.items[0].metadata.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "exact",
              "in": "query",
              "value": "$inputs.exact"
            },
            {
              "name": "export",
              "in": "query",
              "value": "$inputs.export"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "pod_details": "$response.body#/pod_details"
          }
        },
        {
          "stepId": "read-pod-logs",
          "description": "Fetches the logs from a specified container within the selected pod, useful for diagnosing issues.",
          "operationId": "readCoreV1NamespacedPodLog",
          "parameters": [
            {
              "name": "container",
              "in": "query",
              "value": "$steps.read-namespaced-pod.outputs.pod_details.spec.containers[0].name"
            },
            {
              "name": "follow",
              "in": "query",
              "value": "$inputs.follow"
            },
            {
              "name": "limitBytes",
              "in": "query",
              "value": "$inputs.limitBytes"
            },
            {
              "name": "name",
              "in": "path",
              "value": "$steps.read-namespaced-pod.outputs.pod_details.metadata.name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.read-namespaced-pod.outputs.pod_details.metadata.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "previous",
              "in": "query",
              "value": "$inputs.previous"
            },
            {
              "name": "sinceSeconds",
              "in": "query",
              "value": "$inputs.sinceSeconds"
            },
            {
              "name": "tailLines",
              "in": "query",
              "value": "$inputs.tailLines"
            },
            {
              "name": "timestamps",
              "in": "query",
              "value": "$inputs.timestamps"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "pod_logs": "$response.body#/pod_logs"
          }
        },
        {
          "stepId": "execute-pod-command",
          "description": "Executes a command inside a specific container of the selected pod, enabling interactive debugging or one-off tasks.",
          "operationId": "connectCoreV1PostNamespacedPodExec",
          "parameters": [
            {
              "name": "command",
              "in": "query",
              "value": "$inputs.command"
            },
            {
              "name": "container",
              "in": "query",
              "value": "$steps.read-namespaced-pod.outputs.pod_details.spec.containers[0].name"
            },
            {
              "name": "name",
              "in": "path",
              "value": "$steps.read-namespaced-pod.outputs.pod_details.metadata.name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.read-namespaced-pod.outputs.pod_details.metadata.namespace"
            },
            {
              "name": "stderr",
              "in": "query",
              "value": "$inputs.stderr"
            },
            {
              "name": "stdin",
              "in": "query",
              "value": "$inputs.stdin"
            },
            {
              "name": "stdout",
              "in": "query",
              "value": "$inputs.stdout"
            },
            {
              "name": "tty",
              "in": "query",
              "value": "$inputs.tty"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "exec_output": "$response.body#/exec_output"
          }
        }
      ],
      "outputs": {
        "pod_list": "$steps.list-namespaced-pods.outputs.pod_list",
        "pod_details": "$steps.read-namespaced-pod.outputs.pod_details",
        "pod_logs": "$steps.read-pod-logs.outputs.pod_logs",
        "exec_output": "$steps.execute-pod-command.outputs.exec_output"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-kubernetes-namespace",
      "summary": "This workflow provides a complete lifecycle management for a Kubernetes namespace, from creation to deletion, including viewing its details. This is a common administrative task for isolating and organizing resources for different teams or projects.",
      "description": "This workflow provides a complete lifecycle management for a Kubernetes namespace, from creation to deletion, including viewing its details. This is a common administrative task for isolating and organizing resources for different teams or projects.",
      "inputs": {
        "type": "object",
        "properties": {
          "pretty": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "exact": {
            "type": "string"
          },
          "export": {
            "type": "string"
          },
          "gracePeriodSeconds": {
            "type": "string"
          },
          "orphanDependents": {
            "type": "string"
          },
          "propagationPolicy": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-namespace",
          "description": "Creates a new Kubernetes namespace with a specified name and metadata.",
          "operationId": "createCoreV1Namespace",
          "parameters": [
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "created_namespace_name": "$response.body#/created_namespace_name"
          }
        },
        {
          "stepId": "read-namespace",
          "description": "Retrieves the full details and current status of the newly created namespace.",
          "operationId": "readCoreV1Namespace",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.create-namespace.outputs.created_namespace_name"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "exact",
              "in": "query",
              "value": "$inputs.exact"
            },
            {
              "name": "export",
              "in": "query",
              "value": "$inputs.export"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "namespace_details": "$response.body#/namespace_details"
          }
        },
        {
          "stepId": "delete-namespace",
          "description": "Deletes the specified Kubernetes namespace, cleaning up all resources within it.",
          "operationId": "deleteCoreV1Namespace",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.read-namespace.outputs.namespace_details.metadata.name"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "gracePeriodSeconds",
              "in": "query",
              "value": "$inputs.gracePeriodSeconds"
            },
            {
              "name": "orphanDependents",
              "in": "query",
              "value": "$inputs.orphanDependents"
            },
            {
              "name": "propagationPolicy",
              "in": "query",
              "value": "$inputs.propagationPolicy"
            }
          ],
          "requestBody": {
            "contentType": "*/*",
            "payload": {
              "name": "$steps.read-namespace.outputs.namespace_details.metadata.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deletion_status": "$response.body#/deletion_status"
          }
        }
      ],
      "outputs": {
        "created_namespace_name": "$steps.create-namespace.outputs.created_namespace_name",
        "namespace_details": "$steps.read-namespace.outputs.namespace_details",
        "deletion_status": "$steps.delete-namespace.outputs.deletion_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-cluster-roles-and-bindings",
      "summary": "This workflow allows for the creation and deletion of cluster-wide roles and their bindings, which are used to define and assign permissions across the entire Kubernetes cluster for users, groups, or service accounts.",
      "description": "This workflow allows for the creation and deletion of cluster-wide roles and their bindings, which are used to define and assign permissions across the entire Kubernetes cluster for users, groups, or service accounts.",
      "inputs": {
        "type": "object",
        "properties": {
          "pretty": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gracePeriodSeconds": {
            "type": "string"
          },
          "orphanDependents": {
            "type": "string"
          },
          "propagationPolicy": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-cluster-role",
          "description": "Creates a new cluster-wide role with a defined set of permissions.",
          "operationId": "createRbacAuthorizationV1ClusterRole",
          "parameters": [
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "created_cluster_role_name": "$response.body#/created_cluster_role_name"
          }
        },
        {
          "stepId": "create-cluster-role-binding",
          "description": "Binds a subject (user, group, or service account) to the newly created cluster role, granting them the defined permissions.",
          "operationId": "createRbacAuthorizationV1ClusterRoleBinding",
          "parameters": [
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "created_cluster_role_binding_name": "$response.body#/created_cluster_role_binding_name"
          }
        },
        {
          "stepId": "delete-cluster-role-binding",
          "description": "Deletes a specific cluster role binding, revoking the associated permissions.",
          "operationId": "deleteRbacAuthorizationV1ClusterRoleBinding",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.create-cluster-role-binding.outputs.created_cluster_role_binding_name"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "gracePeriodSeconds",
              "in": "query",
              "value": "$inputs.gracePeriodSeconds"
            },
            {
              "name": "orphanDependents",
              "in": "query",
              "value": "$inputs.orphanDependents"
            },
            {
              "name": "propagationPolicy",
              "in": "query",
              "value": "$inputs.propagationPolicy"
            }
          ],
          "requestBody": {
            "contentType": "*/*",
            "payload": {
              "name": "$steps.create-cluster-role-binding.outputs.created_cluster_role_binding_name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "binding_deletion_status": "$response.body#/binding_deletion_status"
          }
        },
        {
          "stepId": "delete-cluster-role",
          "description": "Deletes a specific cluster role, removing the permission definition from the cluster.",
          "operationId": "deleteRbacAuthorizationV1ClusterRole",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.create-cluster-role.outputs.created_cluster_role_name"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "gracePeriodSeconds",
              "in": "query",
              "value": "$inputs.gracePeriodSeconds"
            },
            {
              "name": "orphanDependents",
              "in": "query",
              "value": "$inputs.orphanDependents"
            },
            {
              "name": "propagationPolicy",
              "in": "query",
              "value": "$inputs.propagationPolicy"
            }
          ],
          "requestBody": {
            "contentType": "*/*",
            "payload": {
              "name": "$steps.create-cluster-role.outputs.created_cluster_role_name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "role_deletion_status": "$response.body#/role_deletion_status"
          }
        }
      ],
      "outputs": {
        "created_cluster_role_name": "$steps.create-cluster-role.outputs.created_cluster_role_name",
        "created_cluster_role_binding_name": "$steps.create-cluster-role-binding.outputs.created_cluster_role_binding_name",
        "binding_deletion_status": "$steps.delete-cluster-role-binding.outputs.binding_deletion_status",
        "role_deletion_status": "$steps.delete-cluster-role.outputs.role_deletion_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "scale-kubernetes-deployment",
      "summary": "This workflow enables an operator to dynamically adjust the number of replicas for a specific application deployment to handle varying loads, ensuring optimal resource utilization.",
      "description": "This workflow enables an operator to dynamically adjust the number of replicas for a specific application deployment to handle varying loads, ensuring optimal resource utilization.",
      "inputs": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string"
          },
          "pretty": {
            "type": "string"
          },
          "continue": {
            "type": "string"
          },
          "fieldSelector": {
            "type": "string"
          },
          "includeUninitialized": {
            "type": "string"
          },
          "labelSelector": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "timeoutSeconds": {
            "type": "string"
          },
          "watch": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-namespaced-deployments",
          "description": "Lists all deployments within a specified namespace to identify the target deployment for scaling.",
          "operationId": "listAppsV1NamespacedDeployment",
          "parameters": [
            {
              "name": "namespace",
              "in": "path",
              "value": "$inputs.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "continue",
              "in": "query",
              "value": "$inputs.continue"
            },
            {
              "name": "fieldSelector",
              "in": "query",
              "value": "$inputs.fieldSelector"
            },
            {
              "name": "includeUninitialized",
              "in": "query",
              "value": "$inputs.includeUninitialized"
            },
            {
              "name": "labelSelector",
              "in": "query",
              "value": "$inputs.labelSelector"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "resourceVersion",
              "in": "query",
              "value": "$inputs.resourceVersion"
            },
            {
              "name": "timeoutSeconds",
              "in": "query",
              "value": "$inputs.timeoutSeconds"
            },
            {
              "name": "watch",
              "in": "query",
              "value": "$inputs.watch"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deployment_list": "$response.body#/deployment_list"
          }
        },
        {
          "stepId": "read-deployment-scale",
          "description": "Retrieves the current scaling configuration (number of replicas) for the chosen deployment.",
          "operationId": "readAppsV1NamespacedDeploymentScale",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.list-namespaced-deployments.outputs.deployment_list.items[0].metadata.name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.list-namespaced-deployments.outputs.deployment_list.items[0].metadata.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "scale_object": "$response.body#/scale_object"
          }
        },
        {
          "stepId": "replace-deployment-scale",
          "description": "Updates the desired number of replicas for the deployment based on the new scaling requirements.",
          "operationId": "replaceAppsV1NamespacedDeploymentScale",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.read-deployment-scale.outputs.scale_object.metadata.name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.read-deployment-scale.outputs.scale_object.metadata.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "requestBody": {
            "contentType": "*/*",
            "payload": {
              "namespace": "$steps.read-deployment-scale.outputs.scale_object.metadata.namespace",
              "name": "$steps.read-deployment-scale.outputs.scale_object.metadata.name",
              "scale_object_with_new_replicas": "$steps.read-deployment-scale.outputs.scale_object"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "updated_scale_status": "$response.body#/updated_scale_status"
          }
        }
      ],
      "outputs": {
        "deployment_list": "$steps.list-namespaced-deployments.outputs.deployment_list",
        "scale_object": "$steps.read-deployment-scale.outputs.scale_object",
        "updated_scale_status": "$steps.replace-deployment-scale.outputs.updated_scale_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-config-maps",
      "summary": "This workflow allows for the creation, retrieval, and deletion of ConfigMaps within a specific Kubernetes namespace. ConfigMaps are essential for externalizing configuration data from application code.",
      "description": "This workflow allows for the creation, retrieval, and deletion of ConfigMaps within a specific Kubernetes namespace. ConfigMaps are essential for externalizing configuration data from application code.",
      "inputs": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string"
          },
          "pretty": {
            "type": "string"
          },
          "create-namespaced-config-map_body": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "exact": {
            "type": "string"
          },
          "export": {
            "type": "string"
          },
          "gracePeriodSeconds": {
            "type": "string"
          },
          "orphanDependents": {
            "type": "string"
          },
          "propagationPolicy": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-namespaced-config-map",
          "description": "Creates a new ConfigMap in a specified namespace with provided configuration data.",
          "operationId": "createCoreV1NamespacedConfigMap",
          "parameters": [
            {
              "name": "namespace",
              "in": "path",
              "value": "$inputs.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "requestBody": {
            "contentType": "*/*",
            "payload": "$inputs.create-namespaced-config-map_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "created_config_map_name": "$response.body#/created_config_map_name",
            "config_map_namespace": "$response.body#/config_map_namespace"
          }
        },
        {
          "stepId": "read-namespaced-config-map",
          "description": "Retrieves the detailed content and metadata of a specific ConfigMap.",
          "operationId": "readCoreV1NamespacedConfigMap",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.create-namespaced-config-map.outputs.created_config_map_name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.create-namespaced-config-map.outputs.config_map_namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "exact",
              "in": "query",
              "value": "$inputs.exact"
            },
            {
              "name": "export",
              "in": "query",
              "value": "$inputs.export"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "config_map_details": "$response.body#/config_map_details"
          }
        },
        {
          "stepId": "delete-namespaced-config-map",
          "description": "Deletes a specified ConfigMap from a namespace, removing its configuration data.",
          "operationId": "deleteCoreV1NamespacedConfigMap",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.read-namespaced-config-map.outputs.config_map_details.metadata.name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.read-namespaced-config-map.outputs.config_map_details.metadata.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "gracePeriodSeconds",
              "in": "query",
              "value": "$inputs.gracePeriodSeconds"
            },
            {
              "name": "orphanDependents",
              "in": "query",
              "value": "$inputs.orphanDependents"
            },
            {
              "name": "propagationPolicy",
              "in": "query",
              "value": "$inputs.propagationPolicy"
            }
          ],
          "requestBody": {
            "contentType": "*/*",
            "payload": {
              "namespace": "$steps.read-namespaced-config-map.outputs.config_map_details.metadata.namespace",
              "name": "$steps.read-namespaced-config-map.outputs.config_map_details.metadata.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deletion_status": "$response.body#/deletion_status"
          }
        }
      ],
      "outputs": {
        "created_config_map_name": "$steps.create-namespaced-config-map.outputs.created_config_map_name",
        "config_map_namespace": "$steps.create-namespaced-config-map.outputs.config_map_namespace",
        "config_map_details": "$steps.read-namespaced-config-map.outputs.config_map_details",
        "deletion_status": "$steps.delete-namespaced-config-map.outputs.deletion_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "discover-kubernetes-api-capabilities",
      "summary": "This workflow allows a client to programmatically discover the available API versions, groups, and resources supported by the Kubernetes API server. This is essential for building dynamic clients that can adapt to different cluster configurations.",
      "description": "This workflow allows a client to programmatically discover the available API versions, groups, and resources supported by the Kubernetes API server. This is essential for building dynamic clients that can adapt to different cluster configurations.",
      "steps": [
        {
          "stepId": "get-core-api-versions",
          "description": "Retrieves the available core API versions supported by the server.",
          "operationId": "getCoreAPIVersions",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "core_api_versions": "$response.body#/core_api_versions"
          }
        },
        {
          "stepId": "get-api-groups",
          "description": "Retrieves a list of all available API groups, providing a high-level overview of the API surface.",
          "operationId": "getAPIVersions",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "api_group_list": "$response.body#/api_group_list"
          }
        },
        {
          "stepId": "get-core-v1-api-resources",
          "description": "Retrieves the available resources within the core v1 API group, detailing what objects can be managed.",
          "operationId": "getCoreV1APIResources",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "core_v1_api_resources": "$response.body#/core_v1_api_resources"
          }
        }
      ],
      "outputs": {
        "core_api_versions": "$steps.get-core-api-versions.outputs.core_api_versions",
        "api_group_list": "$steps.get-api-groups.outputs.api_group_list",
        "core_v1_api_resources": "$steps.get-core-v1-api-resources.outputs.core_v1_api_resources"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-persistent-volume-claims",
      "summary": "This workflow enables the creation, status checking, and deletion of Persistent Volume Claims (PVCs) within a namespace, facilitating dynamic storage provisioning and management for stateful applications.",
      "description": "This workflow enables the creation, status checking, and deletion of Persistent Volume Claims (PVCs) within a namespace, facilitating dynamic storage provisioning and management for stateful applications.",
      "inputs": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string"
          },
          "pretty": {
            "type": "string"
          },
          "create-namespaced-persistent-volume-claim_body": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "gracePeriodSeconds": {
            "type": "string"
          },
          "orphanDependents": {
            "type": "string"
          },
          "propagationPolicy": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-namespaced-persistent-volume-claim",
          "description": "Creates a new PersistentVolumeClaim in a specified namespace, requesting a piece of persistent storage.",
          "operationId": "createCoreV1NamespacedPersistentVolumeClaim",
          "parameters": [
            {
              "name": "namespace",
              "in": "path",
              "value": "$inputs.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "requestBody": {
            "contentType": "*/*",
            "payload": "$inputs.create-namespaced-persistent-volume-claim_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "created_pvc_name": "$response.body#/created_pvc_name",
            "pvc_namespace": "$response.body#/pvc_namespace"
          }
        },
        {
          "stepId": "read-namespaced-persistent-volume-claim-status",
          "description": "Reads the current status of a specific PersistentVolumeClaim, including its bound volume and access modes.",
          "operationId": "readCoreV1NamespacedPersistentVolumeClaimStatus",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.create-namespaced-persistent-volume-claim.outputs.created_pvc_name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.create-namespaced-persistent-volume-claim.outputs.pvc_namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "pvc_status_details": "$response.body#/pvc_status_details"
          }
        },
        {
          "stepId": "delete-namespaced-persistent-volume-claim",
          "description": "Deletes a specified PersistentVolumeClaim, releasing the associated persistent storage.",
          "operationId": "deleteCoreV1NamespacedPersistentVolumeClaim",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.read-namespaced-persistent-volume-claim-status.outputs.pvc_status_details.metadata.name"
            },
            {
              "name": "namespace",
              "in": "path",
              "value": "$steps.read-namespaced-persistent-volume-claim-status.outputs.pvc_status_details.metadata.namespace"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "gracePeriodSeconds",
              "in": "query",
              "value": "$inputs.gracePeriodSeconds"
            },
            {
              "name": "orphanDependents",
              "in": "query",
              "value": "$inputs.orphanDependents"
            },
            {
              "name": "propagationPolicy",
              "in": "query",
              "value": "$inputs.propagationPolicy"
            }
          ],
          "requestBody": {
            "contentType": "*/*",
            "payload": {
              "namespace": "$steps.read-namespaced-persistent-volume-claim-status.outputs.pvc_status_details.metadata.namespace",
              "name": "$steps.read-namespaced-persistent-volume-claim-status.outputs.pvc_status_details.metadata.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deletion_confirmation": "$response.body#/deletion_confirmation"
          }
        }
      ],
      "outputs": {
        "created_pvc_name": "$steps.create-namespaced-persistent-volume-claim.outputs.created_pvc_name",
        "pvc_namespace": "$steps.create-namespaced-persistent-volume-claim.outputs.pvc_namespace",
        "pvc_status_details": "$steps.read-namespaced-persistent-volume-claim-status.outputs.pvc_status_details",
        "deletion_confirmation": "$steps.delete-namespaced-persistent-volume-claim.outputs.deletion_confirmation"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "check-cluster-component-health",
      "summary": "This workflow allows a user to retrieve the health status of various core Kubernetes cluster components, providing insight into the cluster's operational state and identifying potential issues.",
      "description": "This workflow allows a user to retrieve the health status of various core Kubernetes cluster components, providing insight into the cluster's operational state and identifying potential issues.",
      "inputs": {
        "type": "object",
        "properties": {
          "continue": {
            "type": "string"
          },
          "fieldSelector": {
            "type": "string"
          },
          "includeUninitialized": {
            "type": "string"
          },
          "labelSelector": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "pretty": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "timeoutSeconds": {
            "type": "string"
          },
          "watch": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-core-v1-component-status",
          "description": "Lists the status of all core Kubernetes cluster components.",
          "operationId": "listCoreV1ComponentStatus",
          "parameters": [
            {
              "name": "continue",
              "in": "query",
              "value": "$inputs.continue"
            },
            {
              "name": "fieldSelector",
              "in": "query",
              "value": "$inputs.fieldSelector"
            },
            {
              "name": "includeUninitialized",
              "in": "query",
              "value": "$inputs.includeUninitialized"
            },
            {
              "name": "labelSelector",
              "in": "query",
              "value": "$inputs.labelSelector"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            },
            {
              "name": "resourceVersion",
              "in": "query",
              "value": "$inputs.resourceVersion"
            },
            {
              "name": "timeoutSeconds",
              "in": "query",
              "value": "$inputs.timeoutSeconds"
            },
            {
              "name": "watch",
              "in": "query",
              "value": "$inputs.watch"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "component_status_list": "$response.body#/component_status_list"
          }
        },
        {
          "stepId": "read-core-v1-component-status",
          "description": "Reads the detailed status of a specific cluster component, providing granular health information.",
          "operationId": "readCoreV1ComponentStatus",
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "value": "$steps.list-core-v1-component-status.outputs.component_status_list.items[0].metadata.name"
            },
            {
              "name": "pretty",
              "in": "query",
              "value": "$inputs.pretty"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "component_status_details": "$response.body#/component_status_details"
          }
        }
      ],
      "outputs": {
        "component_status_list": "$steps.list-core-v1-component-status.outputs.component_status_list",
        "component_status_details": "$steps.read-core-v1-component-status.outputs.component_status_details"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
