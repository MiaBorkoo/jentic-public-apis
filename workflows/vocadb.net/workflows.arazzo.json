{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/vocadb.net/main/1.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "discover-and-explore-songs",
      "summary": "Allows users to search for songs, retrieve detailed information about a specific song, including its lyrics, and find related songs.",
      "description": "Allows users to search for songs, retrieve detailed information about a specific song, including its lyrics, and find related songs.",
      "inputs": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "songTypes": {
            "type": "string"
          },
          "afterDate": {
            "type": "string"
          },
          "beforeDate": {
            "type": "string"
          },
          "tagName[]": {
            "type": "string"
          },
          "tagId[]": {
            "type": "string"
          },
          "childTags": {
            "type": "string"
          },
          "unifyTypesAndTags": {
            "type": "string"
          },
          "artistId[]": {
            "type": "string"
          },
          "artistParticipationStatus": {
            "type": "string"
          },
          "childVoicebanks": {
            "type": "string"
          },
          "includeMembers": {
            "type": "string"
          },
          "onlyWithPvs": {
            "type": "string"
          },
          "pvServices": {
            "type": "string"
          },
          "since": {
            "type": "string"
          },
          "minScore": {
            "type": "string"
          },
          "userCollectionId": {
            "type": "string"
          },
          "releaseEventId": {
            "type": "string"
          },
          "parentSongId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "advancedFilters": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "maxResults": {
            "type": "string"
          },
          "getTotalCount": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "preferAccurateMatches": {
            "type": "string"
          },
          "nameMatchMode": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "minMilliBpm": {
            "type": "string"
          },
          "maxMilliBpm": {
            "type": "string"
          },
          "minLength": {
            "type": "string"
          },
          "maxLength": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "languages[]": {
            "type": "string"
          },
          "excludedTagIds[]": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lyricsId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-songs",
          "description": "Searches for songs based on various criteria like query, song types, tags, and artists.",
          "operationPath": "openapi_source#/paths/~1api~1songs/get",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "value": "$inputs.query"
            },
            {
              "name": "songTypes",
              "in": "query",
              "value": "$inputs.songTypes"
            },
            {
              "name": "afterDate",
              "in": "query",
              "value": "$inputs.afterDate"
            },
            {
              "name": "beforeDate",
              "in": "query",
              "value": "$inputs.beforeDate"
            },
            {
              "name": "tagName[]",
              "in": "query",
              "value": "$inputs.tagName[]"
            },
            {
              "name": "tagId[]",
              "in": "query",
              "value": "$inputs.tagId[]"
            },
            {
              "name": "childTags",
              "in": "query",
              "value": "$inputs.childTags"
            },
            {
              "name": "unifyTypesAndTags",
              "in": "query",
              "value": "$inputs.unifyTypesAndTags"
            },
            {
              "name": "artistId[]",
              "in": "query",
              "value": "$inputs.artistId[]"
            },
            {
              "name": "artistParticipationStatus",
              "in": "query",
              "value": "$inputs.artistParticipationStatus"
            },
            {
              "name": "childVoicebanks",
              "in": "query",
              "value": "$inputs.childVoicebanks"
            },
            {
              "name": "includeMembers",
              "in": "query",
              "value": "$inputs.includeMembers"
            },
            {
              "name": "onlyWithPvs",
              "in": "query",
              "value": "$inputs.onlyWithPvs"
            },
            {
              "name": "pvServices",
              "in": "query",
              "value": "$inputs.pvServices"
            },
            {
              "name": "since",
              "in": "query",
              "value": "$inputs.since"
            },
            {
              "name": "minScore",
              "in": "query",
              "value": "$inputs.minScore"
            },
            {
              "name": "userCollectionId",
              "in": "query",
              "value": "$inputs.userCollectionId"
            },
            {
              "name": "releaseEventId",
              "in": "query",
              "value": "$inputs.releaseEventId"
            },
            {
              "name": "parentSongId",
              "in": "query",
              "value": "$inputs.parentSongId"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "advancedFilters",
              "in": "query",
              "value": "$inputs.advancedFilters"
            },
            {
              "name": "start",
              "in": "query",
              "value": "$inputs.start"
            },
            {
              "name": "maxResults",
              "in": "query",
              "value": "$inputs.maxResults"
            },
            {
              "name": "getTotalCount",
              "in": "query",
              "value": "$inputs.getTotalCount"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "preferAccurateMatches",
              "in": "query",
              "value": "$inputs.preferAccurateMatches"
            },
            {
              "name": "nameMatchMode",
              "in": "query",
              "value": "$inputs.nameMatchMode"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "minMilliBpm",
              "in": "query",
              "value": "$inputs.minMilliBpm"
            },
            {
              "name": "maxMilliBpm",
              "in": "query",
              "value": "$inputs.maxMilliBpm"
            },
            {
              "name": "minLength",
              "in": "query",
              "value": "$inputs.minLength"
            },
            {
              "name": "maxLength",
              "in": "query",
              "value": "$inputs.maxLength"
            },
            {
              "name": "language",
              "in": "query",
              "value": "$inputs.language"
            },
            {
              "name": "languages[]",
              "in": "query",
              "value": "$inputs.languages[]"
            },
            {
              "name": "excludedTagIds[]",
              "in": "query",
              "value": "$inputs.excludedTagIds[]"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/items",
            "totalCount": "$response.body#/totalCount"
          }
        },
        {
          "stepId": "get-song-details",
          "description": "Retrieves comprehensive details for a specific song, including associated albums, artists, PVs, and lyrics.",
          "operationPath": "openapi_source#/paths/~1api~1songs~1{id}/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-songs.outputs.items.id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "lyrics": "$response.body#/lyrics",
            "pvs": "$response.body#/pvs",
            "albums": "$response.body#/albums",
            "artists": "$response.body#/artists",
            "webLinks": "$response.body#/webLinks"
          }
        },
        {
          "stepId": "get-song-lyrics",
          "description": "Fetches specific lyrics for a song by its lyrics ID, which can be found in the song details.",
          "operationPath": "openapi_source#/paths/~1api~1songs~1lyrics~1{lyricsId}/get",
          "parameters": [
            {
              "name": "lyricsId",
              "in": "path",
              "value": "$steps.get-song-details.outputs.lyrics.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "LyricsForSongContract": "$response.body#/LyricsForSongContract"
          }
        },
        {
          "stepId": "get-related-songs",
          "description": "Finds songs that are related to a given song, based on artists, tags, or other similarities.",
          "operationPath": "openapi_source#/paths/~1api~1songs~1{id}~1related/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-songs.outputs.items.id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "RelatedSongsContract": "$response.body#/RelatedSongsContract"
          }
        }
      ],
      "outputs": {
        "items": "$steps.search-songs.outputs.items",
        "totalCount": "$steps.search-songs.outputs.totalCount",
        "id": "$steps.get-song-details.outputs.id",
        "lyrics": "$steps.get-song-details.outputs.lyrics",
        "pvs": "$steps.get-song-details.outputs.pvs",
        "albums": "$steps.get-song-details.outputs.albums",
        "artists": "$steps.get-song-details.outputs.artists",
        "webLinks": "$steps.get-song-details.outputs.webLinks",
        "LyricsForSongContract": "$steps.get-song-lyrics.outputs.LyricsForSongContract",
        "RelatedSongsContract": "$steps.get-related-songs.outputs.RelatedSongsContract"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "browse-and-review-albums",
      "summary": "Allows users to search for albums, view their detailed information, including tracks, and read or post reviews for them.",
      "description": "Allows users to search for albums, view their detailed information, including tracks, and read or post reviews for them.",
      "inputs": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "discTypes": {
            "type": "string"
          },
          "tagName[]": {
            "type": "string"
          },
          "tagId[]": {
            "type": "string"
          },
          "childTags": {
            "type": "string"
          },
          "artistId[]": {
            "type": "string"
          },
          "artistParticipationStatus": {
            "type": "string"
          },
          "childVoicebanks": {
            "type": "string"
          },
          "includeMembers": {
            "type": "string"
          },
          "barcode": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "releaseDateAfter": {
            "type": "string"
          },
          "releaseDateBefore": {
            "type": "string"
          },
          "advancedFilters": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "maxResults": {
            "type": "string"
          },
          "getTotalCount": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "preferAccurateMatches": {
            "type": "string"
          },
          "deleted": {
            "type": "string"
          },
          "nameMatchMode": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "songFields": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-albums",
          "description": "Searches for albums based on various criteria such as query, disc types, tags, and artists.",
          "operationPath": "openapi_source#/paths/~1api~1albums/get",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "value": "$inputs.query"
            },
            {
              "name": "discTypes",
              "in": "query",
              "value": "$inputs.discTypes"
            },
            {
              "name": "tagName[]",
              "in": "query",
              "value": "$inputs.tagName[]"
            },
            {
              "name": "tagId[]",
              "in": "query",
              "value": "$inputs.tagId[]"
            },
            {
              "name": "childTags",
              "in": "query",
              "value": "$inputs.childTags"
            },
            {
              "name": "artistId[]",
              "in": "query",
              "value": "$inputs.artistId[]"
            },
            {
              "name": "artistParticipationStatus",
              "in": "query",
              "value": "$inputs.artistParticipationStatus"
            },
            {
              "name": "childVoicebanks",
              "in": "query",
              "value": "$inputs.childVoicebanks"
            },
            {
              "name": "includeMembers",
              "in": "query",
              "value": "$inputs.includeMembers"
            },
            {
              "name": "barcode",
              "in": "query",
              "value": "$inputs.barcode"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "releaseDateAfter",
              "in": "query",
              "value": "$inputs.releaseDateAfter"
            },
            {
              "name": "releaseDateBefore",
              "in": "query",
              "value": "$inputs.releaseDateBefore"
            },
            {
              "name": "advancedFilters",
              "in": "query",
              "value": "$inputs.advancedFilters"
            },
            {
              "name": "start",
              "in": "query",
              "value": "$inputs.start"
            },
            {
              "name": "maxResults",
              "in": "query",
              "value": "$inputs.maxResults"
            },
            {
              "name": "getTotalCount",
              "in": "query",
              "value": "$inputs.getTotalCount"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "preferAccurateMatches",
              "in": "query",
              "value": "$inputs.preferAccurateMatches"
            },
            {
              "name": "deleted",
              "in": "query",
              "value": "$inputs.deleted"
            },
            {
              "name": "nameMatchMode",
              "in": "query",
              "value": "$inputs.nameMatchMode"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/items",
            "totalCount": "$response.body#/totalCount"
          }
        },
        {
          "stepId": "get-album-details",
          "description": "Retrieves comprehensive details for a specific album, including its artists, tracks, PVs, and web links.",
          "operationPath": "openapi_source#/paths/~1api~1albums~1{id}/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-albums.outputs.items.id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "songFields",
              "in": "query",
              "value": "$inputs.songFields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "tracks": "$response.body#/tracks",
            "reviews": "$response.body#/reviews"
          }
        },
        {
          "stepId": "get-album-tracks",
          "description": "Fetches the list of tracks contained within a specific album.",
          "operationPath": "openapi_source#/paths/~1api~1albums~1{id}~1tracks/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-albums.outputs.items.id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "SongInAlbumForApiContract[]": "$response.body#/0/SongInAlbumForApiContract[]"
          }
        },
        {
          "stepId": "get-album-reviews",
          "description": "Retrieves all user reviews for a specified album.",
          "operationPath": "openapi_source#/paths/~1api~1albums~1{id}~1reviews/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-albums.outputs.items.id"
            },
            {
              "name": "languageCode",
              "in": "query",
              "value": "$inputs.languageCode"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "AlbumReviewContract[]": "$response.body#/0/AlbumReviewContract[]"
          }
        },
        {
          "stepId": "post-album-review",
          "description": "Allows a user to post a new review for an album.",
          "operationPath": "openapi_source#/paths/~1api~1albums~1{id}~1reviews/post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-albums.outputs.items.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json-patch+json",
            "payload": {
              "id": "$steps.search-albums.outputs.items[0].id",
              "languageCode": "$inputs.languageCode",
              "text": "$inputs.text",
              "title": "$inputs.title"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "AlbumReviewContract": "$response.body#/AlbumReviewContract"
          }
        }
      ],
      "outputs": {
        "items": "$steps.search-albums.outputs.items",
        "totalCount": "$steps.search-albums.outputs.totalCount",
        "id": "$steps.get-album-details.outputs.id",
        "tracks": "$steps.get-album-details.outputs.tracks",
        "reviews": "$steps.get-album-details.outputs.reviews",
        "SongInAlbumForApiContract[]": "$steps.get-album-tracks.outputs.SongInAlbumForApiContract[]",
        "AlbumReviewContract[]": "$steps.get-album-reviews.outputs.AlbumReviewContract[]",
        "AlbumReviewContract": "$steps.post-album-review.outputs.AlbumReviewContract"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "discover-and-explore-release-events",
      "summary": "Enables users to search for music release events, view their details, and find albums and songs that were released or published at those events.",
      "description": "Enables users to search for music release events, view their details, and find albums and songs that were released or published at those events.",
      "inputs": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "nameMatchMode": {
            "type": "string"
          },
          "seriesId": {
            "type": "string"
          },
          "afterDate": {
            "type": "string"
          },
          "beforeDate": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "userCollectionId": {
            "type": "string"
          },
          "tagId[]": {
            "type": "string"
          },
          "childTags": {
            "type": "string"
          },
          "artistId[]": {
            "type": "string"
          },
          "childVoicebanks": {
            "type": "string"
          },
          "includeMembers": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "maxResults": {
            "type": "string"
          },
          "getTotalCount": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "sortDirection": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "search-release-events",
          "description": "Searches for release events based on various criteria like query, category, and date range.",
          "operationPath": "openapi_source#/paths/~1api~1releaseEvents/get",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "value": "$inputs.query"
            },
            {
              "name": "nameMatchMode",
              "in": "query",
              "value": "$inputs.nameMatchMode"
            },
            {
              "name": "seriesId",
              "in": "query",
              "value": "$inputs.seriesId"
            },
            {
              "name": "afterDate",
              "in": "query",
              "value": "$inputs.afterDate"
            },
            {
              "name": "beforeDate",
              "in": "query",
              "value": "$inputs.beforeDate"
            },
            {
              "name": "category",
              "in": "query",
              "value": "$inputs.category"
            },
            {
              "name": "userCollectionId",
              "in": "query",
              "value": "$inputs.userCollectionId"
            },
            {
              "name": "tagId[]",
              "in": "query",
              "value": "$inputs.tagId[]"
            },
            {
              "name": "childTags",
              "in": "query",
              "value": "$inputs.childTags"
            },
            {
              "name": "artistId[]",
              "in": "query",
              "value": "$inputs.artistId[]"
            },
            {
              "name": "childVoicebanks",
              "in": "query",
              "value": "$inputs.childVoicebanks"
            },
            {
              "name": "includeMembers",
              "in": "query",
              "value": "$inputs.includeMembers"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "start",
              "in": "query",
              "value": "$inputs.start"
            },
            {
              "name": "maxResults",
              "in": "query",
              "value": "$inputs.maxResults"
            },
            {
              "name": "getTotalCount",
              "in": "query",
              "value": "$inputs.getTotalCount"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "sortDirection",
              "in": "query",
              "value": "$inputs.sortDirection"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/items",
            "totalCount": "$response.body#/totalCount"
          }
        },
        {
          "stepId": "get-event-details",
          "description": "Retrieves comprehensive details for a specific release event, including artists, series, venue, and web links.",
          "operationPath": "openapi_source#/paths/~1api~1releaseEvents~1{id}/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.search-release-events.outputs.items.id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "artists": "$response.body#/artists",
            "series": "$response.body#/series",
            "venue": "$response.body#/venue",
            "webLinks": "$response.body#/webLinks"
          }
        },
        {
          "stepId": "get-event-albums",
          "description": "Fetches the list of albums that were released at a specific event.",
          "operationPath": "openapi_source#/paths/~1api~1releaseEvents~1{eventId}~1albums/get",
          "parameters": [
            {
              "name": "eventId",
              "in": "path",
              "value": "$steps.search-release-events.outputs.items.id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "AlbumForApiContract[]": "$response.body#/0/AlbumForApiContract[]"
          }
        },
        {
          "stepId": "get-event-songs",
          "description": "Retrieves the list of songs that were published or premiered at a specific event.",
          "operationPath": "openapi_source#/paths/~1api~1releaseEvents~1{eventId}~1published-songs/get",
          "parameters": [
            {
              "name": "eventId",
              "in": "path",
              "value": "$steps.search-release-events.outputs.items.id"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "SongForApiContract[]": "$response.body#/0/SongForApiContract[]"
          }
        }
      ],
      "outputs": {
        "items": "$steps.search-release-events.outputs.items",
        "totalCount": "$steps.search-release-events.outputs.totalCount",
        "id": "$steps.get-event-details.outputs.id",
        "artists": "$steps.get-event-details.outputs.artists",
        "series": "$steps.get-event-details.outputs.series",
        "venue": "$steps.get-event-details.outputs.venue",
        "webLinks": "$steps.get-event-details.outputs.webLinks",
        "AlbumForApiContract[]": "$steps.get-event-albums.outputs.AlbumForApiContract[]",
        "SongForApiContract[]": "$steps.get-event-songs.outputs.SongForApiContract[]"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-users-personal-music-collection",
      "summary": "Enables a user to view their collected albums and rated songs, and update the collection status for albums they own or wish to acquire.",
      "description": "Enables a user to view their collected albums and rated songs, and update the collection status for albums they own or wish to acquire.",
      "inputs": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "tagId": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "artistId": {
            "type": "string"
          },
          "purchaseStatuses": {
            "type": "string"
          },
          "releaseEventId": {
            "type": "string"
          },
          "albumTypes": {
            "type": "string"
          },
          "advancedFilters": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "maxResults": {
            "type": "string"
          },
          "getTotalCount": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "nameMatchMode": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "mediaType": {
            "type": "string"
          },
          "tagName": {
            "type": "string"
          },
          "tagId[]": {
            "type": "string"
          },
          "artistId[]": {
            "type": "string"
          },
          "childVoicebanks": {
            "type": "string"
          },
          "artistGrouping": {
            "type": "string"
          },
          "rating": {
            "type": "string"
          },
          "songListId": {
            "type": "string"
          },
          "groupByRating": {
            "type": "string"
          },
          "pvServices": {
            "type": "string"
          },
          "albumId": {
            "type": "string"
          },
          "collectionStatus": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-current-user-profile",
          "description": "Retrieves the profile details of the currently authenticated user.",
          "operationPath": "openapi_source#/paths/~1api~1users~1current/get",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "name": "$response.body#/name"
          }
        },
        {
          "stepId": "get-user-albums",
          "description": "Fetches the list of albums associated with a specific user's collection, filtered by various criteria.",
          "operationPath": "openapi_source#/paths/~1api~1users~1{id}~1albums/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-current-user-profile.outputs.id"
            },
            {
              "name": "query",
              "in": "query",
              "value": "$inputs.query"
            },
            {
              "name": "tagId",
              "in": "query",
              "value": "$inputs.tagId"
            },
            {
              "name": "tag",
              "in": "query",
              "value": "$inputs.tag"
            },
            {
              "name": "artistId",
              "in": "query",
              "value": "$inputs.artistId"
            },
            {
              "name": "purchaseStatuses",
              "in": "query",
              "value": "$inputs.purchaseStatuses"
            },
            {
              "name": "releaseEventId",
              "in": "query",
              "value": "$inputs.releaseEventId"
            },
            {
              "name": "albumTypes",
              "in": "query",
              "value": "$inputs.albumTypes"
            },
            {
              "name": "advancedFilters",
              "in": "query",
              "value": "$inputs.advancedFilters"
            },
            {
              "name": "start",
              "in": "query",
              "value": "$inputs.start"
            },
            {
              "name": "maxResults",
              "in": "query",
              "value": "$inputs.maxResults"
            },
            {
              "name": "getTotalCount",
              "in": "query",
              "value": "$inputs.getTotalCount"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "nameMatchMode",
              "in": "query",
              "value": "$inputs.nameMatchMode"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            },
            {
              "name": "mediaType",
              "in": "query",
              "value": "$inputs.mediaType"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/items",
            "totalCount": "$response.body#/totalCount"
          }
        },
        {
          "stepId": "get-user-rated-songs",
          "description": "Retrieves the list of songs that a specific user has rated.",
          "operationPath": "openapi_source#/paths/~1api~1users~1{id}~1ratedSongs/get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-current-user-profile.outputs.id"
            },
            {
              "name": "query",
              "in": "query",
              "value": "$inputs.query"
            },
            {
              "name": "tagName",
              "in": "query",
              "value": "$inputs.tagName"
            },
            {
              "name": "tagId[]",
              "in": "query",
              "value": "$inputs.tagId[]"
            },
            {
              "name": "artistId[]",
              "in": "query",
              "value": "$inputs.artistId[]"
            },
            {
              "name": "childVoicebanks",
              "in": "query",
              "value": "$inputs.childVoicebanks"
            },
            {
              "name": "artistGrouping",
              "in": "query",
              "value": "$inputs.artistGrouping"
            },
            {
              "name": "rating",
              "in": "query",
              "value": "$inputs.rating"
            },
            {
              "name": "songListId",
              "in": "query",
              "value": "$inputs.songListId"
            },
            {
              "name": "groupByRating",
              "in": "query",
              "value": "$inputs.groupByRating"
            },
            {
              "name": "pvServices",
              "in": "query",
              "value": "$inputs.pvServices"
            },
            {
              "name": "advancedFilters",
              "in": "query",
              "value": "$inputs.advancedFilters"
            },
            {
              "name": "start",
              "in": "query",
              "value": "$inputs.start"
            },
            {
              "name": "maxResults",
              "in": "query",
              "value": "$inputs.maxResults"
            },
            {
              "name": "getTotalCount",
              "in": "query",
              "value": "$inputs.getTotalCount"
            },
            {
              "name": "sort",
              "in": "query",
              "value": "$inputs.sort"
            },
            {
              "name": "nameMatchMode",
              "in": "query",
              "value": "$inputs.nameMatchMode"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "lang",
              "in": "query",
              "value": "$inputs.lang"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/items",
            "totalCount": "$response.body#/totalCount"
          }
        },
        {
          "stepId": "update-album-collection-status",
          "description": "Updates the collection status (e.g., wishlisted, owned) and rating for a specific album in the current user's collection.",
          "operationPath": "openapi_source#/paths/~1api~1users~1current~1albums~1{albumId}/post",
          "parameters": [
            {
              "name": "albumId",
              "in": "path",
              "value": "$steps.get-user-albums.outputs.items.album.id"
            },
            {
              "name": "collectionStatus",
              "in": "query",
              "value": "$inputs.collectionStatus"
            },
            {
              "name": "mediaType",
              "in": "query",
              "value": "$inputs.mediaType"
            },
            {
              "name": "rating",
              "in": "query",
              "value": "$inputs.rating"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "string": "$response.body#/string"
          }
        }
      ],
      "outputs": {
        "id": "$steps.get-current-user-profile.outputs.id",
        "name": "$steps.get-current-user-profile.outputs.name",
        "items": "$steps.get-user-rated-songs.outputs.items",
        "totalCount": "$steps.get-user-rated-songs.outputs.totalCount",
        "string": "$steps.update-album-collection-status.outputs.string"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "engage-in-community-discussions",
      "summary": "Allows users to browse discussion folders, view topics within them, and post comments on specific discussion topics.",
      "description": "Allows users to browse discussion folders, view topics within them, and post comments on specific discussion topics.",
      "inputs": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "topicId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-discussion-folders",
          "description": "Retrieves a list of available discussion folders.",
          "operationPath": "openapi_source#/paths/~1api~1discussions~1folders/get",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "DiscussionFolderContract[]": "$response.body#/0/DiscussionFolderContract[]"
          }
        },
        {
          "stepId": "get-topics-in-folder",
          "description": "Fetches all discussion topics contained within a specified folder.",
          "operationPath": "openapi_source#/paths/~1api~1discussions~1folders~1{folderId}~1topics/get",
          "parameters": [
            {
              "name": "folderId",
              "in": "path",
              "value": "$inputs.folderId"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "DiscussionTopicContract[]": "$response.body#/0/DiscussionTopicContract[]"
          }
        },
        {
          "stepId": "get-topic-details",
          "description": "Retrieves the full details of a specific discussion topic, including its content and comments.",
          "operationPath": "openapi_source#/paths/~1api~1discussions~1topics~1{topicId}/get",
          "parameters": [
            {
              "name": "topicId",
              "in": "path",
              "value": "$inputs.topicId"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "DiscussionTopicContract": "$response.body#/DiscussionTopicContract"
          }
        },
        {
          "stepId": "post-topic-comment",
          "description": "Allows a user to post a new comment to a specific discussion topic.",
          "operationPath": "openapi_source#/paths/~1api~1discussions~1topics~1{topicId}~1comments/post",
          "parameters": [
            {
              "name": "topicId",
              "in": "path",
              "value": "$inputs.topicId"
            }
          ],
          "requestBody": {
            "contentType": "application/json-patch+json",
            "payload": {
              "message": "$inputs.message"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "CommentForApiContract": "$response.body#/CommentForApiContract"
          }
        }
      ],
      "outputs": {
        "DiscussionFolderContract[]": "$steps.get-discussion-folders.outputs.DiscussionFolderContract[]",
        "DiscussionTopicContract[]": "$steps.get-topics-in-folder.outputs.DiscussionTopicContract[]",
        "DiscussionTopicContract": "$steps.get-topic-details.outputs.DiscussionTopicContract",
        "CommentForApiContract": "$steps.post-topic-comment.outputs.CommentForApiContract"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
