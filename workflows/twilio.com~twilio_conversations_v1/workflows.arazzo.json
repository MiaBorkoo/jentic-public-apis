{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/twilio.com/twilio_conversations_v1/1.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "initiate-conversation-with-participants",
      "summary": "Create a new conversation and immediately add multiple participants to it, then send an initial message. This workflow is ideal for starting group chats or customer support interactions.",
      "description": "Create a new conversation and immediately add multiple participants to it, then send an initial message. This workflow is ideal for starting group chats or customer support interactions.",
      "inputs": {
        "type": "object",
        "properties": {
          "X-Twilio-Webhook-Enabled": {
            "type": "string"
          },
          "FriendlyName": {
            "type": "string"
          },
          "UniqueName": {
            "type": "string"
          },
          "MessagingServiceSid": {
            "type": "string"
          },
          "Attributes": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Timers.Inactive": {
            "type": "string"
          },
          "Timers.Closed": {
            "type": "string"
          },
          "Bindings.Email.Address": {
            "type": "string"
          },
          "Bindings.Email.Name": {
            "type": "string"
          },
          "Participant": {
            "type": "string"
          },
          "ConversationSid": {
            "type": "string"
          },
          "Author": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "MediaSid": {
            "type": "string"
          },
          "ContentSid": {
            "type": "string"
          },
          "ContentVariables": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-conversation-with-participants",
          "description": "Creates a new conversation and adds a list of participants in a single API call.",
          "operationId": "CreateConversationWithParticipants",
          "parameters": [
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName",
              "UniqueName": "$inputs.UniqueName",
              "MessagingServiceSid": "$inputs.MessagingServiceSid",
              "Attributes": "$inputs.Attributes",
              "State": "$inputs.State",
              "Timers.Inactive": "$inputs.Timers.Inactive",
              "Timers.Closed": "$inputs.Timers.Closed",
              "Bindings.Email.Address": "$inputs.Bindings.Email.Address",
              "Bindings.Email.Name": "$inputs.Bindings.Email.Name",
              "Participant": "$inputs.Participant"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "chat_service_sid": "$response.body#/chat_service_sid"
          }
        },
        {
          "stepId": "send-initial-message",
          "description": "Sends the first message to the newly created conversation.",
          "operationId": "CreateConversationMessage",
          "parameters": [
            {
              "name": "ConversationSid",
              "in": "path",
              "value": "$steps.create-conversation-with-participants.outputs.sid"
            },
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ConversationSid": "$steps.create-conversation-with-participants.outputs.sid",
              "Author": "$inputs.Author",
              "Body": "$inputs.Body",
              "MediaSid": "$inputs.MediaSid",
              "ContentSid": "$inputs.ContentSid",
              "ContentVariables": "$inputs.ContentVariables",
              "Subject": "$inputs.Subject"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.send-initial-message.outputs.sid",
        "chat_service_sid": "$steps.create-conversation-with-participants.outputs.chat_service_sid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-active-conversation",
      "summary": "Manage an active conversation by adding new participants, sending messages, and retrieving the message history. This workflow covers common real-time communication scenarios.",
      "description": "Manage an active conversation by adding new participants, sending messages, and retrieving the message history. This workflow covers common real-time communication scenarios.",
      "inputs": {
        "type": "object",
        "properties": {
          "Sid": {
            "type": "string"
          },
          "ConversationSid": {
            "type": "string"
          },
          "X-Twilio-Webhook-Enabled": {
            "type": "string"
          },
          "Identity": {
            "type": "string"
          },
          "MessagingBinding.Address": {
            "type": "string"
          },
          "MessagingBinding.ProxyAddress": {
            "type": "string"
          },
          "DateCreated": {
            "type": "string"
          },
          "DateUpdated": {
            "type": "string"
          },
          "Attributes": {
            "type": "string"
          },
          "MessagingBinding.ProjectedAddress": {
            "type": "string"
          },
          "RoleSid": {
            "type": "string"
          },
          "Author": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "MediaSid": {
            "type": "string"
          },
          "ContentSid": {
            "type": "string"
          },
          "ContentVariables": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Order": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "fetch-conversation-details",
          "description": "Retrieves the details of an existing conversation.",
          "operationId": "FetchConversation",
          "parameters": [
            {
              "name": "Sid",
              "in": "path",
              "value": "$inputs.Sid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid",
            "chat_service_sid": "$response.body#/chat_service_sid"
          }
        },
        {
          "stepId": "add-participant-to-conversation",
          "description": "Adds a new participant (e.g., a user or a phone number) to the conversation.",
          "operationId": "CreateConversationParticipant",
          "parameters": [
            {
              "name": "ConversationSid",
              "in": "path",
              "value": "$steps.fetch-conversation-details.outputs.sid"
            },
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ConversationSid": "$steps.fetch-conversation-details.outputs.sid",
              "Identity": "$inputs.Identity",
              "MessagingBinding.Address": "$inputs.MessagingBinding.Address",
              "MessagingBinding.ProxyAddress": "$inputs.MessagingBinding.ProxyAddress",
              "DateCreated": "$inputs.DateCreated",
              "DateUpdated": "$inputs.DateUpdated",
              "Attributes": "$inputs.Attributes",
              "MessagingBinding.ProjectedAddress": "$inputs.MessagingBinding.ProjectedAddress",
              "RoleSid": "$inputs.RoleSid"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "send-message-to-conversation",
          "description": "Sends a new message within the conversation.",
          "operationId": "CreateConversationMessage",
          "parameters": [
            {
              "name": "ConversationSid",
              "in": "path",
              "value": "$steps.fetch-conversation-details.outputs.sid"
            },
            {
              "name": "X-Twilio-Webhook-Enabled",
              "in": "header",
              "value": "$inputs.X-Twilio-Webhook-Enabled"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ConversationSid": "$steps.fetch-conversation-details.outputs.sid",
              "Author": "$inputs.Author",
              "Body": "$inputs.Body",
              "DateCreated": "$inputs.DateCreated",
              "DateUpdated": "$inputs.DateUpdated",
              "Attributes": "$inputs.Attributes",
              "MediaSid": "$inputs.MediaSid",
              "ContentSid": "$inputs.ContentSid",
              "ContentVariables": "$inputs.ContentVariables",
              "Subject": "$inputs.Subject"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "list-conversation-messages",
          "description": "Retrieves a list of all messages in the conversation.",
          "operationId": "ListConversationMessage",
          "parameters": [
            {
              "name": "ConversationSid",
              "in": "path",
              "value": "$steps.fetch-conversation-details.outputs.sid"
            },
            {
              "name": "Order",
              "in": "query",
              "value": "$inputs.Order"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "messages": "$response.body#/messages"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.send-message-to-conversation.outputs.sid",
        "chat_service_sid": "$steps.fetch-conversation-details.outputs.chat_service_sid",
        "messages": "$steps.list-conversation-messages.outputs.messages"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "setup-new-conversation-service",
      "summary": "Create a new Twilio Conversation Service and configure its default roles and reachability settings. This is a foundational workflow for setting up a new communication application.",
      "description": "Create a new Twilio Conversation Service and configure its default roles and reachability settings. This is a foundational workflow for setting up a new communication application.",
      "inputs": {
        "type": "object",
        "properties": {
          "FriendlyName": {
            "type": "string"
          },
          "ChatServiceSid": {
            "type": "string"
          },
          "DefaultConversationCreatorRoleSid": {
            "type": "string"
          },
          "DefaultConversationRoleSid": {
            "type": "string"
          },
          "DefaultChatServiceRoleSid": {
            "type": "string"
          },
          "ReachabilityEnabled": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-service",
          "description": "Creates a new conversation service with a friendly name.",
          "operationId": "CreateService",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "FriendlyName": "$inputs.FriendlyName"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "update-service-configuration",
          "description": "Updates the configuration settings for the newly created conversation service, including default roles and reachability.",
          "operationId": "UpdateServiceConfiguration",
          "parameters": [
            {
              "name": "ChatServiceSid",
              "in": "path",
              "value": "$steps.create-service.outputs.sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "ChatServiceSid": "$steps.create-service.outputs.sid",
              "DefaultConversationCreatorRoleSid": "$inputs.DefaultConversationCreatorRoleSid",
              "DefaultConversationRoleSid": "$inputs.DefaultConversationRoleSid",
              "DefaultChatServiceRoleSid": "$inputs.DefaultChatServiceRoleSid",
              "ReachabilityEnabled": "$inputs.ReachabilityEnabled"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "chat_service_sid": "$response.body#/chat_service_sid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.create-service.outputs.sid",
        "chat_service_sid": "$steps.update-service-configuration.outputs.chat_service_sid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-address-auto-creation",
      "summary": "Set up or update an address configuration to automatically create conversations when messages are received on a specific channel (e.g., SMS, WhatsApp). This is crucial for inbound communication flows.",
      "description": "Set up or update an address configuration to automatically create conversations when messages are received on a specific channel (e.g., SMS, WhatsApp). This is crucial for inbound communication flows.",
      "inputs": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Address": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          },
          "FriendlyName": {
            "type": "string"
          },
          "AutoCreation.Enabled": {
            "type": "string"
          },
          "AutoCreation.Type": {
            "type": "string"
          },
          "AutoCreation.ConversationServiceSid": {
            "type": "string"
          },
          "AutoCreation.WebhookUrl": {
            "type": "string"
          },
          "AutoCreation.WebhookMethod": {
            "type": "string"
          },
          "AutoCreation.WebhookFilters": {
            "type": "string"
          },
          "AutoCreation.StudioFlowSid": {
            "type": "string"
          },
          "AutoCreation.StudioRetryCount": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-address-configuration",
          "description": "Creates a new address configuration for a specific type (e.g., SMS, WhatsApp) and enables auto-creation of conversations.",
          "operationId": "CreateConfigurationAddress",
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Type": "$inputs.Type",
              "Address": "$inputs.Address"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        },
        {
          "stepId": "update-address-configuration",
          "description": "Updates the auto-creation settings for an existing address configuration, allowing changes to friendly name, webhook details, or Studio flow integration.",
          "operationId": "UpdateConfigurationAddress",
          "parameters": [
            {
              "name": "Sid",
              "in": "path",
              "value": "$steps.create-address-configuration.outputs.sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "Sid": "$steps.create-address-configuration.outputs.sid",
              "FriendlyName": "$inputs.FriendlyName",
              "AutoCreation.Enabled": "$inputs.AutoCreation.Enabled",
              "AutoCreation.Type": "$inputs.AutoCreation.Type",
              "AutoCreation.ConversationServiceSid": "$inputs.AutoCreation.ConversationServiceSid",
              "AutoCreation.WebhookUrl": "$inputs.AutoCreation.WebhookUrl",
              "AutoCreation.WebhookMethod": "$inputs.AutoCreation.WebhookMethod",
              "AutoCreation.WebhookFilters": "$inputs.AutoCreation.WebhookFilters",
              "AutoCreation.StudioFlowSid": "$inputs.AutoCreation.StudioFlowSid",
              "AutoCreation.StudioRetryCount": "$inputs.AutoCreation.StudioRetryCount"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "sid": "$response.body#/sid"
          }
        }
      ],
      "outputs": {
        "sid": "$steps.update-address-configuration.outputs.sid"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "configure-service-webhooks",
      "summary": "Set up or update service-level webhooks to receive notifications about various conversation events. This allows for custom integrations and real-time processing of conversation data.",
      "description": "Set up or update service-level webhooks to receive notifications about various conversation events. This allows for custom integrations and real-time processing of conversation data.",
      "inputs": {
        "type": "object",
        "properties": {
          "ChatServiceSid": {
            "type": "string"
          },
          "PreWebhookUrl": {
            "type": "string"
          },
          "PostWebhookUrl": {
            "type": "string"
          },
          "Filters": {
            "type": "string"
          },
          "Method": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "fetch-service-webhook-configuration",
          "description": "Retrieves the current webhook configuration for a specific conversation service.",
          "operationId": "FetchServiceWebhookConfiguration",
          "parameters": [
            {
              "name": "ChatServiceSid",
              "in": "path",
              "value": "$inputs.ChatServiceSid"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "pre_webhook_url": "$response.body#/pre_webhook_url",
            "post_webhook_url": "$response.body#/post_webhook_url",
            "filters": "$response.body#/filters",
            "method": "$response.body#/method"
          }
        },
        {
          "stepId": "update-service-webhook-configuration",
          "description": "Updates the pre-event and post-event webhook URLs, filters, and HTTP method for a conversation service.",
          "operationId": "UpdateServiceWebhookConfiguration",
          "parameters": [
            {
              "name": "ChatServiceSid",
              "in": "path",
              "value": "$inputs.ChatServiceSid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "PreWebhookUrl": "$inputs.PreWebhookUrl",
              "PostWebhookUrl": "$inputs.PostWebhookUrl",
              "Filters": "$inputs.Filters",
              "Method": "$inputs.Method"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "pre_webhook_url": "$response.body#/pre_webhook_url",
            "post_webhook_url": "$response.body#/post_webhook_url",
            "filters": "$response.body#/filters",
            "method": "$response.body#/method"
          }
        }
      ],
      "outputs": {
        "pre_webhook_url": "$steps.update-service-webhook-configuration.outputs.pre_webhook_url",
        "post_webhook_url": "$steps.update-service-webhook-configuration.outputs.post_webhook_url",
        "filters": "$steps.update-service-webhook-configuration.outputs.filters",
        "method": "$steps.update-service-webhook-configuration.outputs.method"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-user-conversation-read-status",
      "summary": "Retrieve a user's conversations and update their read status within a specific conversation. This is essential for building chat UIs with unread message indicators and read receipts.",
      "description": "Retrieve a user's conversations and update their read status within a specific conversation. This is essential for building chat UIs with unread message indicators and read receipts.",
      "inputs": {
        "type": "object",
        "properties": {
          "UserSid": {
            "type": "string"
          },
          "PageSize": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "PageToken": {
            "type": "string"
          },
          "ConversationSid": {
            "type": "string"
          },
          "NotificationLevel": {
            "type": "string"
          },
          "LastReadTimestamp": {
            "type": "string"
          },
          "LastReadMessageIndex": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-user-conversations",
          "description": "Retrieves a list of all conversations a specific user is part of.",
          "operationId": "ListUserConversation",
          "parameters": [
            {
              "name": "UserSid",
              "in": "path",
              "value": "$inputs.UserSid"
            },
            {
              "name": "PageSize",
              "in": "query",
              "value": "$inputs.PageSize"
            },
            {
              "name": "Page",
              "in": "query",
              "value": "$inputs.Page"
            },
            {
              "name": "PageToken",
              "in": "query",
              "value": "$inputs.PageToken"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "conversations": "$response.body#/conversations"
          }
        },
        {
          "stepId": "update-user-conversation-read-status",
          "description": "Updates the last read message index and timestamp for a user in a particular conversation, marking messages as read.",
          "operationId": "UpdateUserConversation",
          "parameters": [
            {
              "name": "UserSid",
              "in": "path",
              "value": "$steps.list-user-conversations.outputs.conversations.user_sid"
            },
            {
              "name": "ConversationSid",
              "in": "path",
              "value": "$steps.list-user-conversations.outputs.conversations.conversation_sid"
            }
          ],
          "requestBody": {
            "contentType": "application/x-www-form-urlencoded",
            "payload": {
              "UserSid": "$steps.list-user-conversations.outputs.conversations[0].user_sid",
              "ConversationSid": "$steps.list-user-conversations.outputs.conversations[0].conversation_sid",
              "NotificationLevel": "$inputs.NotificationLevel",
              "LastReadTimestamp": "$inputs.LastReadTimestamp",
              "LastReadMessageIndex": "$inputs.LastReadMessageIndex"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "last_read_message_index": "$response.body#/last_read_message_index",
            "last_read_timestamp": "$response.body#/last_read_timestamp"
          }
        }
      ],
      "outputs": {
        "conversations": "$steps.list-user-conversations.outputs.conversations",
        "last_read_message_index": "$steps.update-user-conversation-read-status.outputs.last_read_message_index",
        "last_read_timestamp": "$steps.update-user-conversation-read-status.outputs.last_read_timestamp"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}