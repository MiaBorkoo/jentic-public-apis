name: Fix OpenAPI Specification

on:
  issues:
    types: [opened, edited]

env:
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  fix_spec:
    if: contains(github.event.issue.labels.*.name, 'spec-fix')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install PDM
        run: |
          curl -sSL https://pdm-project.org/install-pdm.py | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          pdm install
      
      - name: Parse issue form
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body;
            const rawUrlMatch = body.match(/### Raw URL\s*\n\s*([^\n]+)/);
            const docUrlMatch = body.match(/### Doc URL\s*\n\s*([^\n]+)/);
            const fixContextMatch = body.match(/### Fix Context\s*\n\s*([\s\S]*?)(?=\n### |$)/);
            const errorContextMatch = body.match(/### Error Context\s*\n\s*([\s\S]*?)(?=\n### |$)/);
            
            const rawUrl = rawUrlMatch ? rawUrlMatch[1].trim() : '';
            const docUrl = docUrlMatch ? docUrlMatch[1].trim() : '';
            const fixContext = fixContextMatch ? fixContextMatch[1].trim() : '';
            const errorContext = errorContextMatch ? errorContextMatch[1].trim() : '';
            
            core.setOutput('raw_url', rawUrl);
            core.setOutput('doc_url', docUrl);
            core.setOutput('fix_context', fixContext);
            core.setOutput('error_context', errorContext);
      
      - name: Validate inputs
        run: |
          if [ -z "${{ steps.parse.outputs.raw_url }}" ]; then
            echo "Error: Raw URL is required"
            exit 1
          fi
          if [[ "${{ steps.parse.outputs.raw_url }}" != https://raw.githubusercontent.com/* ]]; then
            echo "Error: URL must be a raw GitHub URL"
            exit 1
          fi
          if [[ "${{ steps.parse.outputs.raw_url }}" == *.yaml ]] || [[ "${{ steps.parse.outputs.raw_url }}" == *.yml ]]; then
            echo "Error: Only JSON format OpenAPI specifications are supported. YAML format is not supported."
            exit 1
          fi
      
      - name: Run OpenAPI fixer
        id: fix
        run: |
          OUTPUT=$(pdm run python main.py fix-url-spec --url "$RAW_URL" --doc-url "$DOC_URL" --fix-context "$FIX_CONTEXT" --error-context "$ERROR_CONTEXT" 2>&1)
          echo "$OUTPUT"
          
          # Extract repair details if present
          REPAIR_LINE=$(echo "$OUTPUT" | grep "REPAIR_DETAILS=" || true)
          if [ ! -z "$REPAIR_LINE" ]; then
            REPAIR_JSON=$(echo "$REPAIR_LINE" | cut -d'=' -f2-)
            echo "repair_details=$REPAIR_JSON" >> $GITHUB_OUTPUT
          fi
        env:
          RAW_URL: ${{ steps.parse.outputs.raw_url }}
          DOC_URL: ${{ steps.parse.outputs.doc_url }}
          FIX_CONTEXT: ${{ steps.parse.outputs.fix_context }}
          ERROR_CONTEXT: ${{ steps.parse.outputs.error_context }}
      
      - name: Create PR with changes
        id: create_pr
        if: success()
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create a new branch for the fix
          BRANCH_NAME="fix-spec-issue-${{ github.event.issue.number }}"
          git checkout -b "$BRANCH_NAME"
          
          # Stage all changes
          git add .
          
          # Commit changes (only if there are staged changes)
          if git diff --cached --quiet; then
            echo "No changes to commit"
            echo "pr_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          git commit -m "Fix OpenAPI spec from issue #${{ github.event.issue.number }}" \
            -m "- Fixed issues in OpenAPI specification" \
            -m "- URL: ${{ steps.parse.outputs.raw_url }}" \
            -m "- Doc URL: ${{ steps.parse.outputs.doc_url }}" \
            -m "- Fix Context: ${{ steps.parse.outputs.fix_context }}" \
            -m "- Error Context: ${{ steps.parse.outputs.error_context }}" \
            -m "" \
            -m "Resolves #${{ github.event.issue.number }}"
          
          # Push the new branch (auth via GITHUB_TOKEN)
          git push origin "$BRANCH_NAME"
          
          # Create PR body
          cat > pr_body.md << 'EOF'
          ## 🔧 OpenAPI Specification Fix
          
          This PR automatically fixes the OpenAPI specification requested in issue #${{ github.event.issue.number }}.
          
          ### 📋 Details
          - **Source URL**: ${{ steps.parse.outputs.raw_url }}
          - **Documentation**: ${{ steps.parse.outputs.doc_url || 'Not provided' }}
          - **Fix Context**: ${{ steps.parse.outputs.fix_context || 'Not provided' }}
          - **Error Context**: ${{ steps.parse.outputs.error_context || 'Not provided' }}
          
          ### 🤖 Changes Made
          - Applied automated fixes to the OpenAPI specification
          - Generated feedback file documenting all repairs
          - Updated the original spec file with corrections
          
          ### ✅ Ready for Review
          This PR is ready for review and merging. All changes were generated automatically by the OpenAPI-Repair tool.
          
          Closes #${{ github.event.issue.number }}
          EOF
          
          # Create PR using GitHub CLI
          gh pr create \
            --title "Fix OpenAPI spec from issue #${{ github.event.issue.number }}" \
            --body-file pr_body.md \
            --head "$BRANCH_NAME" \
            --base main \
            --label "automated-fix,spec-fix"
          
          echo "pr_created=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Comment on issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fixSuccess = '${{ steps.fix.outcome }}' === 'success';
            const prCreated = '${{ steps.create_pr.outputs.pr_created }}' === 'true';
            const repairDetails = '${{ steps.fix.outputs.repair_details }}';
            
            let emoji, title;
            if (!fixSuccess) {
              emoji = '❌';
              title = 'OpenAPI specification fix failed';
            } else if (prCreated) {
              emoji = '✅';
              title = 'OpenAPI specification fix completed successfully';
            } else {
              emoji = '✅';
              title = 'OpenAPI specification analysis completed - no fixes needed';
            }

            const rawUrl = ${{ toJSON(steps.parse.outputs.raw_url) }};
            const docUrl = ${{ toJSON(steps.parse.outputs.doc_url) }} || 'None provided';
            const fixContext = ${{ toJSON(steps.parse.outputs.fix_context) }} || 'None provided';
            const errorContext = ${{ toJSON(steps.parse.outputs.error_context) }} || 'None provided';

            let resultMessage = '';
            let repairSection = '';

            if (fixSuccess && prCreated) {
              resultMessage = 'The specification has been analyzed and fixed. A pull request has been created with the changes.';
            } else if (fixSuccess && !prCreated) {
              resultMessage = 'The specification was processed but no changes were needed.';
              
              // Add repair details only when no changes were made
              if (repairDetails) {
                try {
                  const repairs = JSON.parse(repairDetails);
                  repairSection = '\n**Analysis Results:**\n';
                  repairs.forEach(repair => {
                    repairSection += `- **${repair.type}**: ${repair.action}\n`;
                  });
                  repairSection += '\n';
                } catch (e) {
                  console.log('Failed to parse repair details:', e);
                }
              }
            } else {
              resultMessage = 'There was an error processing the specification. Please check the workflow logs for details.';
            }

            const comment = `${title}!

            **Processed URL:** ${rawUrl}
            **Documentation URL:** ${docUrl}
            **Fix Context:** ${fixContext}
            **Error Context:** ${errorContext}
            ${repairSection}
            ${resultMessage}

            ---
            *This comment was automatically generated by the OpenAPI Fix workflow.*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
