openapi: 3.0.0
info:
  title: TrainingApi
  version: '2.1'
servers:
  - url: >-
      https://southcentralus.api.cognitive.microsoft.com/customvision/v2.1/Training
paths:
  /domains:
    get:
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Domain'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Domain'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Domain'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Domain'
                nullable: true
                type: array
          description: OK
      tags:
        - DomainsApi
      operationId: GetDomains
      summary: Get a list of the available domains
      x-ms-examples:
        Successful GetDomains request:
          $ref: ./examples/GetDomains.json
  '/domains/{domainId}':
    get:
      parameters:
        - description: The id of the domain to get information about
          in: path
          name: domainId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
            application/xml:
              schema:
                $ref: '#/components/schemas/Domain'
            text/json:
              schema:
                $ref: '#/components/schemas/Domain'
            text/xml:
              schema:
                $ref: '#/components/schemas/Domain'
          description: OK
      tags:
        - DomainsApi
      operationId: GetDomain
      summary: Get information about a specific domain
      x-ms-examples:
        Successful GetDomain request:
          $ref: ./examples/GetDomain.json
  /projects:
    get:
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                nullable: true
                type: array
          description: OK
      tags:
        - ProjectApi
      operationId: GetProjects
      summary: Get your projects
      x-ms-examples:
        Successful GetProjects request:
          $ref: ./examples/GetProjects.json
    post:
      parameters:
        - description: Name of the project
          in: query
          name: name
          required: true
          schema:
            type: string
          x-nullable: true
        - description: The description of the project
          in: query
          name: description
          required: false
          schema:
            type: string
          x-nullable: true
        - description: The id of the domain to use for this project. Defaults to General
          in: query
          name: domainId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - description: The type of classifier to create for this project
          in: query
          name: classificationType
          required: false
          schema:
            enum:
              - Multiclass
              - Multilabel
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
            text/json:
              schema:
                $ref: '#/components/schemas/Project'
            text/xml:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
      tags:
        - ProjectApi
      operationId: CreateProject
      summary: Create a project
      x-ms-examples:
        Successful CreateProject request:
          $ref: ./examples/CreateProject.json
  '/projects/{projectId}':
    delete:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '204':
          description: No Content
      tags:
        - ProjectApi
      operationId: DeleteProject
      summary: Delete a specific project
      x-ms-examples:
        Successful DeleteProject request:
          $ref: ./examples/DeleteProject.json
    get:
      parameters:
        - description: The id of the project to get
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
            text/json:
              schema:
                $ref: '#/components/schemas/Project'
            text/xml:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
      tags:
        - ProjectApi
      operationId: GetProject
      summary: Get a specific project
      x-ms-examples:
        Successful GetProject request:
          $ref: ./examples/GetProject.json
    patch:
      parameters:
        - description: The id of the project to update
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
            text/json:
              schema:
                $ref: '#/components/schemas/Project'
            text/xml:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
      tags:
        - ProjectApi
      operationId: UpdateProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          application/xml:
            schema:
              $ref: '#/components/schemas/Project'
          text/json:
            schema:
              $ref: '#/components/schemas/Project'
          text/xml:
            schema:
              $ref: '#/components/schemas/Project'
        description: The updated project model
        required: true
      summary: Update a specific project
      x-ms-examples:
        Successful UpdateProject request:
          $ref: ./examples/UpdateProject.json
  '/projects/{projectId}/images':
    delete:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Ids of the images to be deleted. Limited to 256 images per batch
          in: query
          name: imageIds
          required: true
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '204':
          description: No Content
      tags:
        - ImageApi
      operationId: DeleteImages
      summary: Delete images from the set of training images
      x-ms-examples:
        Successful DeleteImages request:
          $ref: ./examples/DeleteImages.json
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The tags ids with which to tag each image. Limited to 20
          in: query
          name: tagIds
          required: false
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
          description: OK
      tags:
        - ImageApi
      description: "This API accepts body content as multipart/form-data and application/octet-stream. When using multipart\r\nmultiple image files can be sent at once, with a maximum of 64 files"
      operationId: CreateImagesFromData
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      summary: Add the provided images to the set of training images
      x-ms-examples:
        Successful CreateImagesFromData request:
          $ref: ./examples/CreateImagesFromData.json
  '/projects/{projectId}/images/files':
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
          description: OK
      tags:
        - ImageApi
      description: >-
        This API accepts a batch of files, and optionally tags, to create
        images. There is a limit of 64 images and 20 tags.
      operationId: CreateImagesFromFiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageFileCreateBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageFileCreateBatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageFileCreateBatch'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageFileCreateBatch'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageFileCreateBatch'
        description: >-
          The batch of image files to add. Limited to 64 images and 20 tags per
          batch
        required: true
      summary: Add the provided batch of images to the set of training images
      x-ms-examples:
        Successful CreateImagesFromFiles request:
          $ref: ./examples/CreateImagesFromFiles.json
  '/projects/{projectId}/images/id':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The list of image ids to retrieve. Limited to 256
          in: query
          name: imageIds
          required: false
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - description: The iteration id. Defaults to workspace
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
          description: OK
      tags:
        - ImageApi
      description: "This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the\r\ncurrent workspace is used."
      operationId: GetImagesByIds
      summary: Get images by id for a given project iteration
      x-ms-examples:
        Successful GetImagesByIds request:
          $ref: ./examples/GetImagesByIds.json
  '/projects/{projectId}/images/predictions':
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
          description: OK
      tags:
        - ImageApi
      description: >-
        This API creates a batch of images from predicted images specified.
        There is a limit of 64 images and 20 tags.
      operationId: CreateImagesFromPredictions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageIdCreateBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageIdCreateBatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageIdCreateBatch'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageIdCreateBatch'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageIdCreateBatch'
        description: Image and tag ids. Limited to 64 images and 20 tags per batch
        required: true
      summary: Add the specified predicted images to the set of training images
      x-ms-examples:
        Successful CreateImagesFromPredictions request:
          $ref: ./examples/CreateImagesFromPredictions.json
  '/projects/{projectId}/images/regions':
    delete:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Regions to delete. Limited to 64
          in: query
          name: regionIds
          required: true
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '204':
          description: No Content
      tags:
        - ImageApi
      operationId: DeleteImageRegions
      summary: Delete a set of image regions
      x-ms-examples:
        Successful DeleteImageRegions request:
          $ref: ./examples/DeleteImageRegions.json
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRegionCreateSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImageRegionCreateSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageRegionCreateSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImageRegionCreateSummary'
          description: OK
      tags:
        - ImageApi
      description: "This API accepts a batch of image regions, and optionally tags, to update existing images with region information.\r\nThere is a limit of 64 entries in the batch."
      operationId: CreateImageRegions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRegionCreateBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageRegionCreateBatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageRegionCreateBatch'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageRegionCreateBatch'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageRegionCreateBatch'
        description: >-
          Batch of image regions which include a tag and bounding box. Limited
          to 64
        required: true
      summary: Create a set of image regions
      x-ms-examples:
        Successful CreateImageRegions request:
          $ref: ./examples/CreateImageRegions.json
  '/projects/{projectId}/images/tagged':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id. Defaults to workspace
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - description: >-
            A list of tags ids to filter the images. Defaults to all tagged
            images when null. Limited to 20
          in: query
          name: tagIds
          required: false
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - description: The ordering. Defaults to newest
          in: query
          name: orderBy
          required: false
          schema:
            enum:
              - Newest
              - Oldest
            type: string
          x-nullable: false
        - description: 'Maximum number of images to return. Defaults to 50, limited to 256'
          in: query
          name: take
          required: false
          schema:
            default: 50
            format: int32
            type: integer
        - description: >-
            Number of images to skip before beginning the image batch. Defaults
            to 0
          in: query
          name: skip
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
          description: OK
      tags:
        - ImageApi
      description: "This API supports batching and range selection. By default it will only return first 50 images matching images.\r\nUse the {take} and {skip} parameters to control how many images to return in a given batch.\r\nThe filtering is on an and/or relationship. For example, if the provided tag ids are for the \"Dog\" and\r\n\"Cat\" tags, then only images tagged with Dog and/or Cat will be returned"
      operationId: GetTaggedImages
      summary: Get tagged images for a given project iteration
      x-ms-examples:
        Successful GetTaggedImages request:
          $ref: ./examples/GetTaggedImages.json
  '/projects/{projectId}/images/tagged/count':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id. Defaults to workspace
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - description: >-
            A list of tags ids to filter the images to count. Defaults to all
            tags when null.
          in: query
          name: tagIds
          required: false
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                format: int32
                nullable: false
                type: integer
            application/xml:
              schema:
                format: int32
                nullable: false
                type: integer
            text/json:
              schema:
                format: int32
                nullable: false
                type: integer
            text/xml:
              schema:
                format: int32
                nullable: false
                type: integer
          description: OK
      tags:
        - ImageApi
      description: "The filtering is on an and/or relationship. For example, if the provided tag ids are for the \"Dog\" and\r\n\"Cat\" tags, then only images tagged with Dog and/or Cat will be returned"
      operationId: GetTaggedImageCount
      summary: 'Gets the number of images tagged with the provided {tagIds}'
      x-ms-examples:
        Successful GetTaggedImageCount request:
          $ref: ./examples/GetTaggedImageCount.json
  '/projects/{projectId}/images/tags':
    delete:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Image ids. Limited to 64 images
          in: query
          name: imageIds
          required: true
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - description: Tags to be deleted from the specified images. Limited to 20 tags
          in: query
          name: tagIds
          required: true
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '204':
          description: No Content
      tags:
        - ImageApi
      operationId: DeleteImageTags
      summary: Remove a set of tags from a set of images
      x-ms-examples:
        Successful DeleteImageTags request:
          $ref: ./examples/DeleteImageTags.json
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageTagCreateSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImageTagCreateSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageTagCreateSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImageTagCreateSummary'
          description: OK
      tags:
        - ImageApi
      operationId: CreateImageTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageTagCreateBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageTagCreateBatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageTagCreateBatch'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageTagCreateBatch'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageTagCreateBatch'
        description: Batch of image tags. Limited to 128 tags per batch
        required: true
      summary: Associate a set of images with a set of tags
      x-ms-examples:
        Successful CreateImageTags request:
          $ref: ./examples/CreateImageTags.json
  '/projects/{projectId}/images/untagged':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id. Defaults to workspace
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - description: The ordering. Defaults to newest
          in: query
          name: orderBy
          required: false
          schema:
            enum:
              - Newest
              - Oldest
            type: string
          x-nullable: false
        - description: 'Maximum number of images to return. Defaults to 50, limited to 256'
          in: query
          name: take
          required: false
          schema:
            default: 50
            format: int32
            type: integer
        - description: >-
            Number of images to skip before beginning the image batch. Defaults
            to 0
          in: query
          name: skip
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                nullable: true
                type: array
          description: OK
      tags:
        - ImageApi
      description: "This API supports batching and range selection. By default it will only return first 50 images matching images.\r\nUse the {take} and {skip} parameters to control how many images to return in a given batch."
      operationId: GetUntaggedImages
      summary: Get untagged images for a given project iteration
      x-ms-examples:
        Successful GetUntaggedImages request:
          $ref: ./examples/GetUntaggedImages.json
  '/projects/{projectId}/images/untagged/count':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id. Defaults to workspace
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                format: int32
                nullable: false
                type: integer
            application/xml:
              schema:
                format: int32
                nullable: false
                type: integer
            text/json:
              schema:
                format: int32
                nullable: false
                type: integer
            text/xml:
              schema:
                format: int32
                nullable: false
                type: integer
          description: OK
      tags:
        - ImageApi
      description: "This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the\r\ncurrent workspace is used."
      operationId: GetUntaggedImageCount
      summary: Gets the number of untagged images
      x-ms-examples:
        Successful GetUntaggedImageCount request:
          $ref: ./examples/GetUntaggedImageCount.json
  '/projects/{projectId}/images/urls':
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImageCreateSummary'
          description: OK
      tags:
        - ImageApi
      description: >-
        This API accepts a batch of urls, and optionally tags, to create images.
        There is a limit of 64 images and 20 tags.
      operationId: CreateImagesFromUrls
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUrlCreateBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageUrlCreateBatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageUrlCreateBatch'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageUrlCreateBatch'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageUrlCreateBatch'
        description: Image urls and tag ids. Limited to 64 images and 20 tags per batch
        required: true
      summary: Add the provided images urls to the set of training images
      x-ms-examples:
        Successful CreateImagesFromUrls request:
          $ref: ./examples/CreateImagesFromUrls.json
  '/projects/{projectId}/iterations':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Iteration'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Iteration'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Iteration'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Iteration'
                nullable: true
                type: array
          description: OK
      tags:
        - ProjectApi
      operationId: GetIterations
      summary: Get iterations for the project
      x-ms-examples:
        Successful GetIterations request:
          $ref: ./examples/GetIterations.json
  '/projects/{projectId}/iterations/{iterationId}':
    delete:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id
          in: path
          name: iterationId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '204':
          description: No Content
      tags:
        - ProjectApi
      operationId: DeleteIteration
      summary: Delete a specific iteration of a project
      x-ms-examples:
        Successful DeleteIteration request:
          $ref: ./examples/DeleteIteration.json
    get:
      parameters:
        - description: The id of the project the iteration belongs to
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The id of the iteration to get
          in: path
          name: iterationId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iteration'
            application/xml:
              schema:
                $ref: '#/components/schemas/Iteration'
            text/json:
              schema:
                $ref: '#/components/schemas/Iteration'
            text/xml:
              schema:
                $ref: '#/components/schemas/Iteration'
          description: OK
      tags:
        - ProjectApi
      operationId: GetIteration
      summary: Get a specific iteration
      x-ms-examples:
        Successful GetIteration request:
          $ref: ./examples/GetIteration.json
    patch:
      parameters:
        - description: Project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Iteration id
          in: path
          name: iterationId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iteration'
            application/xml:
              schema:
                $ref: '#/components/schemas/Iteration'
            text/json:
              schema:
                $ref: '#/components/schemas/Iteration'
            text/xml:
              schema:
                $ref: '#/components/schemas/Iteration'
          description: OK
      tags:
        - ProjectApi
      operationId: UpdateIteration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Iteration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Iteration'
          application/xml:
            schema:
              $ref: '#/components/schemas/Iteration'
          text/json:
            schema:
              $ref: '#/components/schemas/Iteration'
          text/xml:
            schema:
              $ref: '#/components/schemas/Iteration'
        description: The updated iteration model
        required: true
      summary: Update a specific iteration
      x-ms-examples:
        Successful UpdateIteration request:
          $ref: ./examples/UpdateIteration.json
  '/projects/{projectId}/iterations/{iterationId}/export':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id
          in: path
          name: iterationId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Export'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Export'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Export'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Export'
                nullable: true
                type: array
          description: OK
      tags:
        - ProjectApi
      operationId: GetExports
      summary: Get the list of exports for a specific iteration
      x-ms-examples:
        Successful GetExports request:
          $ref: ./examples/GetExports.json
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id
          in: path
          name: iterationId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The target platform (coreml or tensorflow)
          in: query
          name: platform
          required: true
          schema:
            enum:
              - CoreML
              - TensorFlow
              - DockerFile
              - ONNX
            type: string
          x-nullable: true
        - description: 'The flavor of the target platform (Windows, Linux, ARM, or GPU)'
          in: query
          name: flavor
          required: false
          schema:
            enum:
              - Linux
              - Windows
            type: string
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Export'
            application/xml:
              schema:
                $ref: '#/components/schemas/Export'
            text/json:
              schema:
                $ref: '#/components/schemas/Export'
            text/xml:
              schema:
                $ref: '#/components/schemas/Export'
          description: OK
      tags:
        - ProjectApi
      operationId: ExportIteration
      summary: Export a trained iteration
      x-ms-examples:
        Successful ExportIteration request:
          $ref: ./examples/ExportIteration.json
  '/projects/{projectId}/iterations/{iterationId}/performance':
    get:
      parameters:
        - description: The id of the project the iteration belongs to
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The id of the iteration to get
          in: path
          name: iterationId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The threshold used to determine true predictions
          in: query
          name: threshold
          required: false
          schema:
            format: float
            type: number
        - description: >-
            If applicable, the bounding box overlap threshold used to determine
            true predictions
          in: query
          name: overlapThreshold
          required: false
          schema:
            format: float
            type: number
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IterationPerformance'
            application/xml:
              schema:
                $ref: '#/components/schemas/IterationPerformance'
            text/json:
              schema:
                $ref: '#/components/schemas/IterationPerformance'
            text/xml:
              schema:
                $ref: '#/components/schemas/IterationPerformance'
          description: OK
      tags:
        - ProjectApi
      operationId: GetIterationPerformance
      summary: Get detailed performance information about an iteration
      x-ms-examples:
        Successful GetIterationPerformance request:
          $ref: ./examples/GetIterationPerformance.json
  '/projects/{projectId}/iterations/{iterationId}/performance/images':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id. Defaults to workspace
          in: path
          name: iterationId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: >-
            A list of tags ids to filter the images. Defaults to all tagged
            images when null. Limited to 20
          in: query
          name: tagIds
          required: false
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - description: The ordering. Defaults to newest
          in: query
          name: orderBy
          required: false
          schema:
            enum:
              - Newest
              - Oldest
            type: string
          x-nullable: false
        - description: 'Maximum number of images to return. Defaults to 50, limited to 256'
          in: query
          name: take
          required: false
          schema:
            default: 50
            format: int32
            type: integer
        - description: >-
            Number of images to skip before beginning the image batch. Defaults
            to 0
          in: query
          name: skip
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImagePerformance'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/ImagePerformance'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImagePerformance'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/ImagePerformance'
                nullable: true
                type: array
          description: OK
      tags:
        - ProjectApi
      description: "This API supports batching and range selection. By default it will only return first 50 images matching images.\r\nUse the {take} and {skip} parameters to control how many images to return in a given batch.\r\nThe filtering is on an and/or relationship. For example, if the provided tag ids are for the \"Dog\" and\r\n\"Cat\" tags, then only images tagged with Dog and/or Cat will be returned"
      operationId: GetImagePerformances
      summary: Get image with its prediction for a given project iteration
      x-ms-examples:
        Successful GetImagePerformances request:
          $ref: ./examples/GetImagePerformances.json
  '/projects/{projectId}/iterations/{iterationId}/performance/images/count':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id. Defaults to workspace
          in: path
          name: iterationId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: >-
            A list of tags ids to filter the images to count. Defaults to all
            tags when null.
          in: query
          name: tagIds
          required: false
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                format: int32
                nullable: false
                type: integer
            application/xml:
              schema:
                format: int32
                nullable: false
                type: integer
            text/json:
              schema:
                format: int32
                nullable: false
                type: integer
            text/xml:
              schema:
                format: int32
                nullable: false
                type: integer
          description: OK
      tags:
        - ProjectApi
      description: "The filtering is on an and/or relationship. For example, if the provided tag ids are for the \"Dog\" and\r\n\"Cat\" tags, then only images tagged with Dog and/or Cat will be returned"
      operationId: GetImagePerformanceCount
      summary: "Gets the number of images tagged with the provided {tagIds} that have prediction results from\r\ntraining for the provided iteration {iterationId}"
      x-ms-examples:
        Successful GetImagePerformanceCount request:
          $ref: ./examples/GetImagePerformanceCount.json
  '/projects/{projectId}/predictions':
    delete:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The prediction ids. Limited to 64
          in: query
          name: ids
          required: true
          schema:
            items:
              nullable: false
              type: string
            type: array
          style: form
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '204':
          description: No Content
      tags:
        - PredictionsApi
      operationId: DeletePrediction
      summary: Delete a set of predicted images and their associated prediction results
      x-ms-examples:
        Successful DeletePrediction request:
          $ref: ./examples/DeletePrediction.json
  '/projects/{projectId}/predictions/query':
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionQueryResult'
            application/xml:
              schema:
                $ref: '#/components/schemas/PredictionQueryResult'
            text/json:
              schema:
                $ref: '#/components/schemas/PredictionQueryResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/PredictionQueryResult'
          description: OK
      tags:
        - PredictionsApi
      operationId: QueryPredictions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictionQueryToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PredictionQueryToken'
          application/xml:
            schema:
              $ref: '#/components/schemas/PredictionQueryToken'
          text/json:
            schema:
              $ref: '#/components/schemas/PredictionQueryToken'
          text/xml:
            schema:
              $ref: '#/components/schemas/PredictionQueryToken'
        description: Parameters used to query the predictions. Limited to combining 2 tags
        required: true
      summary: Get images that were sent to your prediction endpoint
      x-ms-examples:
        Successful QueryPredictions request:
          $ref: ./examples/QueryPredictions.json
  '/projects/{projectId}/quicktest/image':
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: "Optional. Specifies the id of a particular iteration to evaluate against.\r\n            The default iteration for the project will be used when not specified."
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
      tags:
        - PredictionsApi
      operationId: QuickTestImage
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      summary: Quick test an image
      x-ms-examples:
        Successful QuickTestImage request:
          $ref: ./examples/QuickTestImage.json
  '/projects/{projectId}/quicktest/url':
    post:
      parameters:
        - description: The project to evaluate against
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: "Optional. Specifies the id of a particular iteration to evaluate against.\r\n            The default iteration for the project will be used when not specified."
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
      tags:
        - PredictionsApi
      operationId: QuickTestImageUrl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
        description: >-
          An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image
          to be evaluated
        required: true
      summary: Quick test an image url
      x-ms-examples:
        Successful QuickTestImageUrl request:
          $ref: ./examples/QuickTestImageUrl.json
  '/projects/{projectId}/tags':
    get:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The iteration id. Defaults to workspace
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                nullable: true
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                nullable: true
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                nullable: true
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                nullable: true
                type: array
          description: OK
      tags:
        - TagsApi
      operationId: GetTags
      summary: Get the tags for a given project and iteration
      x-ms-examples:
        Successful GetTags request:
          $ref: ./examples/GetTags.json
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The tag name
          in: query
          name: name
          required: true
          schema:
            type: string
          x-nullable: true
        - description: Optional description for the tag
          in: query
          name: description
          required: false
          schema:
            type: string
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
            text/json:
              schema:
                $ref: '#/components/schemas/Tag'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tag'
          description: OK
      tags:
        - TagsApi
      operationId: CreateTag
      summary: Create a tag for the project
      x-ms-examples:
        Successful CreateTag request:
          $ref: ./examples/CreateTag.json
  '/projects/{projectId}/tags/{tagId}':
    delete:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Id of the tag to be deleted
          in: path
          name: tagId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '204':
          description: No Content
      tags:
        - TagsApi
      operationId: DeleteTag
      summary: Delete a tag from the project
      x-ms-examples:
        Successful DeleteTag request:
          $ref: ./examples/DeleteTag.json
    get:
      parameters:
        - description: The project this tag belongs to
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The tag id
          in: path
          name: tagId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: >-
            The iteration to retrieve this tag from. Optional, defaults to
            current training set
          in: query
          name: iterationId
          required: false
          schema:
            format: uuid
            type: string
          x-nullable: true
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
            text/json:
              schema:
                $ref: '#/components/schemas/Tag'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tag'
          description: OK
      tags:
        - TagsApi
      operationId: GetTag
      summary: Get information about a specific tag
      x-ms-examples:
        Successful GetTag request:
          $ref: ./examples/GetTag.json
    patch:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The id of the target tag
          in: path
          name: tagId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
            text/json:
              schema:
                $ref: '#/components/schemas/Tag'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tag'
          description: OK
      tags:
        - TagsApi
      operationId: UpdateTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tag'
          text/json:
            schema:
              $ref: '#/components/schemas/Tag'
          text/xml:
            schema:
              $ref: '#/components/schemas/Tag'
        description: The updated tag model
        required: true
      summary: Update a tag
      x-ms-examples:
        Successful UpdateTag request:
          $ref: ./examples/UpdateTag.json
  '/projects/{projectId}/train':
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iteration'
            application/xml:
              schema:
                $ref: '#/components/schemas/Iteration'
            text/json:
              schema:
                $ref: '#/components/schemas/Iteration'
            text/xml:
              schema:
                $ref: '#/components/schemas/Iteration'
          description: OK
      tags:
        - ProjectApi
      operationId: TrainProject
      summary: Queues project for training
      x-ms-examples:
        Successful TrainProject request:
          $ref: ./examples/TrainProject.json
  '/{projectId}/images/{imageId}/regionproposals':
    post:
      parameters:
        - description: The project id
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: The image id
          in: path
          name: imageId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRegionProposal'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageRegionProposal'
          description: OK
      tags:
        - ImageRegionProposalApi
      description: >-
        This API will get region proposals for an image along with confidences
        for the region. It returns an empty array if no proposals are found.
      operationId: GetImageRegionProposals
      summary: >-
        Get region proposals for an image. Returns empty array if no proposals
        are found.
      x-ms-examples:
        Successful GetImageRegionProposals request:
          $ref: ./examples/GetImageRegionProposals.json
components:
  parameters:
    ApiKey:
      in: header
      name: Training-Key
      required: true
      schema:
        type: string
      x-ms-client-name: ApiKey
      x-ms-parameter-location: client
  requestBodies:
    CreateImagesFromData:
      content:
        application/octet-stream:
          schema:
            format: binary
            type: string
      required: true
  schemas:
    BoundingBox:
      nullable: true
      properties:
        height:
          format: float
          nullable: false
          type: number
        left:
          format: float
          nullable: false
          type: number
        top:
          format: float
          nullable: false
          type: number
        width:
          format: float
          nullable: false
          type: number
      type: object
    Domain:
      nullable: true
      properties:
        enabled:
          nullable: false
          readOnly: true
          type: boolean
        exportable:
          nullable: false
          readOnly: true
          type: boolean
        id:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        type:
          enum:
            - Classification
            - ObjectDetection
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: DomainType
      type: object
    Export:
      nullable: true
      properties:
        downloadUri:
          nullable: true
          readOnly: true
          type: string
        flavor:
          enum:
            - Linux
            - Windows
          nullable: true
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: ExportFlavor
        newerVersionAvailable:
          nullable: false
          readOnly: true
          type: boolean
        platform:
          enum:
            - CoreML
            - TensorFlow
            - DockerFile
            - ONNX
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: ExportPlatform
        status:
          enum:
            - Exporting
            - Failed
            - Done
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: ExportStatusModel
      type: object
    Image:
      description: Image model to be sent as JSON
      nullable: true
      properties:
        tags:
          items:
            $ref: '#/components/schemas/ImageTag'
          nullable: true
          readOnly: true
          type: array
        created:
          format: date-time
          nullable: false
          readOnly: true
          type: string
        height:
          format: int32
          nullable: false
          readOnly: true
          type: integer
        id:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        imageUri:
          nullable: true
          readOnly: true
          type: string
        regions:
          items:
            $ref: '#/components/schemas/ImageRegion'
          nullable: true
          readOnly: true
          type: array
        thumbnailUri:
          nullable: true
          readOnly: true
          type: string
        width:
          format: int32
          nullable: false
          readOnly: true
          type: integer
      type: object
    ImageCreateResult:
      nullable: true
      properties:
        image:
          $ref: '#/components/schemas/Image'
          readOnly: true
        sourceUrl:
          nullable: true
          readOnly: true
          type: string
        status:
          enum:
            - OK
            - OKDuplicate
            - ErrorSource
            - ErrorImageFormat
            - ErrorImageSize
            - ErrorStorage
            - ErrorLimitExceed
            - ErrorTagLimitExceed
            - ErrorRegionLimitExceed
            - ErrorUnknown
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: ImageUploadStatus
      type: object
    ImageCreateSummary:
      nullable: true
      properties:
        images:
          items:
            $ref: '#/components/schemas/ImageCreateResult'
          nullable: true
          readOnly: true
          type: array
        isBatchSuccessful:
          nullable: false
          readOnly: true
          type: boolean
      type: object
    ImageFileCreateBatch:
      nullable: true
      properties:
        images:
          items:
            $ref: '#/components/schemas/ImageFileCreateEntry'
          nullable: true
          type: array
        tagIds:
          items:
            format: uuid
            nullable: false
            type: string
          nullable: true
          type: array
      type: object
    ImageFileCreateEntry:
      nullable: true
      properties:
        contents:
          format: byte
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        regions:
          items:
            $ref: '#/components/schemas/Region'
          nullable: true
          type: array
        tagIds:
          items:
            format: uuid
            nullable: false
            type: string
          nullable: true
          type: array
      type: object
    ImageIdCreateBatch:
      nullable: true
      properties:
        images:
          items:
            $ref: '#/components/schemas/ImageIdCreateEntry'
          nullable: true
          type: array
        tagIds:
          items:
            format: uuid
            nullable: false
            type: string
          nullable: true
          type: array
      type: object
    ImageIdCreateEntry:
      nullable: true
      properties:
        id:
          format: uuid
          nullable: false
          type: string
        regions:
          items:
            $ref: '#/components/schemas/Region'
          nullable: true
          type: array
        tagIds:
          items:
            format: uuid
            nullable: false
            type: string
          nullable: true
          type: array
      type: object
    ImagePerformance:
      description: Image performance model
      nullable: true
      properties:
        tags:
          items:
            $ref: '#/components/schemas/ImageTag'
          nullable: true
          readOnly: true
          type: array
        created:
          format: date-time
          nullable: false
          readOnly: true
          type: string
        height:
          format: int32
          nullable: false
          readOnly: true
          type: integer
        id:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        imageUri:
          nullable: true
          readOnly: true
          type: string
        predictions:
          items:
            $ref: '#/components/schemas/Prediction'
          nullable: true
          readOnly: true
          type: array
        regions:
          items:
            $ref: '#/components/schemas/ImageRegion'
          nullable: true
          readOnly: true
          type: array
        thumbnailUri:
          nullable: true
          readOnly: true
          type: string
        width:
          format: int32
          nullable: false
          readOnly: true
          type: integer
      type: object
    ImagePrediction:
      nullable: true
      properties:
        created:
          format: date-time
          nullable: false
          readOnly: true
          type: string
        id:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        iteration:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        predictions:
          items:
            $ref: '#/components/schemas/Prediction'
          nullable: true
          readOnly: true
          type: array
        project:
          format: uuid
          nullable: false
          readOnly: true
          type: string
      type: object
    ImageRegion:
      nullable: true
      properties:
        created:
          format: date-time
          nullable: false
          readOnly: true
          type: string
        height:
          format: float
          nullable: false
          type: number
        left:
          format: float
          nullable: false
          type: number
        regionId:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        tagId:
          format: uuid
          nullable: false
          type: string
        tagName:
          nullable: true
          readOnly: true
          type: string
        top:
          format: float
          nullable: false
          type: number
        width:
          format: float
          nullable: false
          type: number
      type: object
    ImageRegionCreateBatch:
      description: Batch of image region information to create.
      nullable: true
      properties:
        regions:
          items:
            $ref: '#/components/schemas/ImageRegionCreateEntry'
          nullable: true
          type: array
      type: object
    ImageRegionCreateEntry:
      nullable: true
      properties:
        height:
          format: float
          nullable: false
          type: number
        imageId:
          format: uuid
          nullable: false
          type: string
        left:
          format: float
          nullable: false
          type: number
        tagId:
          format: uuid
          nullable: false
          type: string
        top:
          format: float
          nullable: false
          type: number
        width:
          format: float
          nullable: false
          type: number
      type: object
    ImageRegionCreateResult:
      nullable: true
      properties:
        created:
          format: date-time
          nullable: false
          readOnly: true
          type: string
        height:
          format: float
          nullable: false
          type: number
        imageId:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        left:
          format: float
          nullable: false
          type: number
        regionId:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        tagId:
          format: uuid
          nullable: false
          type: string
        tagName:
          nullable: true
          readOnly: true
          type: string
        top:
          format: float
          nullable: false
          type: number
        width:
          format: float
          nullable: false
          type: number
      type: object
    ImageRegionCreateSummary:
      nullable: true
      properties:
        created:
          items:
            $ref: '#/components/schemas/ImageRegionCreateResult'
          nullable: true
          type: array
        duplicated:
          items:
            $ref: '#/components/schemas/ImageRegionCreateEntry'
          nullable: true
          type: array
        exceeded:
          items:
            $ref: '#/components/schemas/ImageRegionCreateEntry'
          nullable: true
          type: array
      type: object
    ImageRegionProposal:
      nullable: true
      properties:
        imageId:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        projectId:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        proposals:
          items:
            $ref: '#/components/schemas/RegionProposal'
          nullable: true
          readOnly: true
          type: array
      type: object
    ImageTag:
      nullable: true
      properties:
        created:
          format: date-time
          nullable: false
          readOnly: true
          type: string
        tagId:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        tagName:
          nullable: true
          readOnly: true
          type: string
      type: object
    ImageTagCreateBatch:
      nullable: true
      properties:
        tags:
          items:
            $ref: '#/components/schemas/ImageTagCreateEntry'
          nullable: true
          type: array
      type: object
    ImageTagCreateEntry:
      nullable: true
      properties:
        imageId:
          format: uuid
          nullable: false
          type: string
        tagId:
          format: uuid
          nullable: false
          type: string
      type: object
    ImageTagCreateSummary:
      nullable: true
      properties:
        created:
          items:
            $ref: '#/components/schemas/ImageTagCreateEntry'
          nullable: true
          type: array
        duplicated:
          items:
            $ref: '#/components/schemas/ImageTagCreateEntry'
          nullable: true
          type: array
        exceeded:
          items:
            $ref: '#/components/schemas/ImageTagCreateEntry'
          nullable: true
          type: array
      type: object
    ImageUrl:
      nullable: true
      properties:
        url:
          nullable: true
          type: string
      type: object
    ImageUrlCreateBatch:
      nullable: true
      properties:
        images:
          items:
            $ref: '#/components/schemas/ImageUrlCreateEntry'
          nullable: true
          type: array
        tagIds:
          items:
            format: uuid
            nullable: false
            type: string
          nullable: true
          type: array
      type: object
    ImageUrlCreateEntry:
      nullable: true
      properties:
        regions:
          items:
            $ref: '#/components/schemas/Region'
          nullable: true
          type: array
        tagIds:
          items:
            format: uuid
            nullable: false
            type: string
          nullable: true
          type: array
        url:
          nullable: true
          type: string
      type: object
    Iteration:
      description: Iteration model to be sent over JSON
      nullable: true
      properties:
        classificationType:
          description: Gets the classification type of the project
          enum:
            - Multiclass
            - Multilabel
          nullable: true
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: Classifier
        created:
          description: Gets the time this iteration was completed
          format: date-time
          nullable: false
          readOnly: true
          type: string
        domainId:
          description: Get or sets a guid of the domain the iteration has been trained on
          format: uuid
          nullable: true
          readOnly: true
          type: string
        exportable:
          description: Whether the iteration can be exported to another format for download
          nullable: false
          readOnly: true
          type: boolean
        id:
          description: Gets the id of the iteration
          format: uuid
          nullable: false
          readOnly: true
          type: string
        isDefault:
          description: >-
            Gets or sets a value indicating whether the iteration is the default
            iteration for the project
          nullable: false
          type: boolean
        lastModified:
          description: Gets the time this iteration was last modified
          format: date-time
          nullable: false
          readOnly: true
          type: string
        name:
          description: Gets or sets the name of the iteration
          nullable: true
          type: string
        projectId:
          description: Gets the project id of the iteration
          format: uuid
          nullable: false
          readOnly: true
          type: string
        status:
          description: Gets the current iteration status
          nullable: true
          readOnly: true
          type: string
        trainedAt:
          description: Gets the time this iteration was last modified
          format: date-time
          nullable: true
          readOnly: true
          type: string
      type: object
    IterationPerformance:
      description: Represents the detailed performance data for a trained iteration
      nullable: true
      properties:
        averagePrecision:
          description: Gets the average precision when applicable
          format: float
          nullable: true
          readOnly: true
          type: number
        perTagPerformance:
          description: Gets the per-tag performance details for this iteration
          items:
            $ref: '#/components/schemas/TagPerformance'
          nullable: true
          readOnly: true
          type: array
        precision:
          description: Gets the precision
          format: float
          nullable: false
          readOnly: true
          type: number
        precisionStdDeviation:
          description: Gets the standard deviation for the precision
          format: float
          nullable: false
          readOnly: true
          type: number
        recall:
          description: Gets the recall
          format: float
          nullable: false
          readOnly: true
          type: number
        recallStdDeviation:
          description: Gets the standard deviation for the recall
          format: float
          nullable: false
          readOnly: true
          type: number
      type: object
    Prediction:
      nullable: true
      properties:
        boundingBox:
          $ref: '#/components/schemas/BoundingBox'
          readOnly: true
        probability:
          format: float
          nullable: false
          readOnly: true
          type: number
        tagId:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        tagName:
          nullable: true
          readOnly: true
          type: string
      type: object
    PredictionQueryResult:
      nullable: true
      properties:
        results:
          items:
            $ref: '#/components/schemas/StoredImagePrediction'
          nullable: true
          readOnly: true
          type: array
        token:
          $ref: '#/components/schemas/PredictionQueryToken'
          readOnly: true
      type: object
    PredictionQueryTag:
      nullable: true
      properties:
        id:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        maxThreshold:
          format: float
          nullable: false
          readOnly: true
          type: number
        minThreshold:
          format: float
          nullable: false
          readOnly: true
          type: number
      type: object
    PredictionQueryToken:
      nullable: true
      properties:
        tags:
          items:
            $ref: '#/components/schemas/PredictionQueryTag'
          nullable: true
          type: array
        application:
          nullable: true
          type: string
        continuation:
          nullable: true
          type: string
        endTime:
          format: date-time
          nullable: true
          type: string
        iterationId:
          format: uuid
          nullable: true
          type: string
        maxCount:
          format: int32
          nullable: false
          type: integer
        orderBy:
          enum:
            - Newest
            - Oldest
            - Suggested
          nullable: false
          type: string
          x-ms-enum:
            modelAsString: true
            name: OrderBy
        session:
          nullable: true
          type: string
        startTime:
          format: date-time
          nullable: true
          type: string
      type: object
    Project:
      description: Represents a project
      nullable: true
      properties:
        created:
          description: Gets the date this project was created
          format: date-time
          nullable: false
          readOnly: true
          type: string
        description:
          description: Gets or sets the description of the project
          nullable: true
          type: string
        id:
          description: Gets the project id
          format: uuid
          nullable: false
          readOnly: true
          type: string
        lastModified:
          description: Gets the date this project was last modified
          format: date-time
          nullable: false
          readOnly: true
          type: string
        name:
          description: Gets or sets the name of the project
          nullable: true
          type: string
        settings:
          $ref: '#/components/schemas/ProjectSettings'
          description: Gets or sets the project settings
        thumbnailUri:
          description: Gets the thumbnail url representing the project
          nullable: true
          readOnly: true
          type: string
      type: object
    ProjectSettings:
      description: Represents settings associated with a project
      nullable: true
      properties:
        classificationType:
          description: Gets or sets the classification type of the project
          enum:
            - Multiclass
            - Multilabel
          nullable: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: Classifier
        domainId:
          description: Gets or sets the id of the Domain to use with this project
          format: uuid
          nullable: false
          type: string
      type: object
    Region:
      nullable: true
      properties:
        height:
          format: float
          nullable: false
          type: number
        left:
          format: float
          nullable: false
          type: number
        tagId:
          format: uuid
          nullable: false
          type: string
        top:
          format: float
          nullable: false
          type: number
        width:
          format: float
          nullable: false
          type: number
      type: object
    RegionProposal:
      nullable: true
      properties:
        boundingBox:
          $ref: '#/components/schemas/BoundingBox'
          readOnly: true
        confidence:
          format: float
          nullable: false
          readOnly: true
          type: number
      type: object
    StoredImagePrediction:
      description: result of an image classification request
      nullable: true
      properties:
        created:
          format: date-time
          nullable: false
          readOnly: true
          type: string
        domain:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        id:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        imageUri:
          nullable: true
          readOnly: true
          type: string
        iteration:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        predictions:
          items:
            $ref: '#/components/schemas/Prediction'
          nullable: true
          readOnly: true
          type: array
        project:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        thumbnailUri:
          nullable: true
          readOnly: true
          type: string
      type: object
    Tag:
      description: Represents a Tag
      nullable: true
      properties:
        description:
          description: Gets or sets the description of the tag
          nullable: true
          type: string
        id:
          description: Gets the Tag ID
          format: uuid
          nullable: false
          readOnly: true
          type: string
        imageCount:
          description: Gets the number of images with this tag
          format: int32
          nullable: false
          readOnly: true
          type: integer
        name:
          description: Gets or sets the name of the tag
          nullable: true
          type: string
      type: object
    TagPerformance:
      description: Represents performance data for a particular tag in a trained iteration
      nullable: true
      properties:
        averagePrecision:
          description: Gets the average precision when applicable
          format: float
          nullable: true
          readOnly: true
          type: number
        id:
          format: uuid
          nullable: false
          readOnly: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        precision:
          description: Gets the precision
          format: float
          nullable: false
          readOnly: true
          type: number
        precisionStdDeviation:
          description: Gets the standard deviation for the precision
          format: float
          nullable: false
          readOnly: true
          type: number
        recall:
          description: Gets the recall
          format: float
          nullable: false
          readOnly: true
          type: number
        recallStdDeviation:
          description: Gets the standard deviation for the recall
          format: float
          nullable: false
          readOnly: true
          type: number
      type: object

