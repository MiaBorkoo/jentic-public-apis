openapi: 3.0.0
info:
  title: Custom Vision Prediction Client
  version: '3.0'
servers:
  - url: >-
      https://southcentralus.api.cognitive.microsoft.com/customvision/v3.0/prediction
  - url: '{Endpoint}'
    variables:
      Endpoint:
        description: Supported Cognitive Services endpoints.
        x-ms-parameter-location: client
        x-ms-skip-url-encoding: true
paths:
  '/{projectId}/classify/iterations/{publishedName}/image':
    post:
      parameters:
        - description: The project id.
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          schema:
            type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          schema:
            type: string
          x-nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      tags:
        - ImagePredictionApi
      operationId: ClassifyImage
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      summary: Classify an image and saves the result.
      x-ms-examples:
        Successful ClassifyImage request:
          $ref: ./examples/ClassifyImage.json
  '/{projectId}/classify/iterations/{publishedName}/image/nostore':
    post:
      parameters:
        - description: The project id.
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          schema:
            type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          schema:
            type: string
          x-nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      tags:
        - ImagePredictionApi
      operationId: ClassifyImageWithNoStore
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      summary: Classify an image without saving the result.
      x-ms-examples:
        Successful ClassifyImageWithNoStore request:
          $ref: ./examples/ClassifyImageWithNoStore.json
  '/{projectId}/classify/iterations/{publishedName}/url':
    post:
      parameters:
        - description: The project id.
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          schema:
            type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          schema:
            type: string
          x-nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      tags:
        - ImagePredictionApi
      operationId: ClassifyImageUrl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
        description: An ImageUrl that contains the url of the image to be evaluated.
        required: true
      summary: Classify an image url and saves the result.
      x-ms-examples:
        Successful ClassifyImageUrl request:
          $ref: ./examples/ClassifyImageUrl.json
  '/{projectId}/classify/iterations/{publishedName}/url/nostore':
    post:
      parameters:
        - description: The project id.
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          schema:
            type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          schema:
            type: string
          x-nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      tags:
        - ImagePredictionApi
      operationId: ClassifyImageUrlWithNoStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
        description: >-
          An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image
          to be evaluated.
        required: true
      summary: Classify an image url without saving the result.
      x-ms-examples:
        Successful ClassifyImageUrlWithNoStore request:
          $ref: ./examples/ClassifyImageUrlWithNoStore.json
  '/{projectId}/detect/iterations/{publishedName}/image':
    post:
      parameters:
        - description: The project id.
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          schema:
            type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          schema:
            type: string
          x-nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      tags:
        - ImagePredictionApi
      operationId: DetectImage
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      summary: Detect objects in an image and saves the result.
      x-ms-examples:
        Successful DetectImage request:
          $ref: ./examples/DetectImage.json
  '/{projectId}/detect/iterations/{publishedName}/image/nostore':
    post:
      parameters:
        - description: The project id.
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          schema:
            type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          schema:
            type: string
          x-nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      tags:
        - ImagePredictionApi
      operationId: DetectImageWithNoStore
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      summary: Detect objects in an image without saving the result.
      x-ms-examples:
        Successful DetectImageWithNoStore request:
          $ref: ./examples/DetectImageWithNoStore.json
  '/{projectId}/detect/iterations/{publishedName}/url':
    post:
      parameters:
        - description: The project id.
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          schema:
            type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          schema:
            type: string
          x-nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      tags:
        - ImagePredictionApi
      operationId: DetectImageUrl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
        description: An ImageUrl that contains the url of the image to be evaluated.
        required: true
      summary: Detect objects in an image url and saves the result.
      x-ms-examples:
        Successful DetectImageUrl request:
          $ref: ./examples/DetectImageUrl.json
  '/{projectId}/detect/iterations/{publishedName}/url/nostore':
    post:
      parameters:
        - description: The project id.
          in: path
          name: projectId
          required: true
          schema:
            format: uuid
            type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          schema:
            type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          schema:
            type: string
          x-nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      tags:
        - ImagePredictionApi
      operationId: DetectImageUrlWithNoStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          application/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
          text/xml:
            schema:
              $ref: '#/components/schemas/ImageUrl'
        description: >-
          An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image
          to be evaluated.
        required: true
      summary: Detect objects in an image url without saving the result.
      x-ms-examples:
        Successful DetectImageUrlWithNoStore request:
          $ref: ./examples/DetectImageUrlWithNoStore.json
components:
  parameters:
    Endpoint:
      description: Supported Cognitive Services endpoints.
      x-ms-parameter-location: client
      x-ms-skip-url-encoding: true
  requestBodies:
    ClassifyImage:
      content:
        application/octet-stream:
          schema:
            format: binary
            type: string
      required: true
    ImageUrl:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        application/xml:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        text/xml:
          schema:
            $ref: '#/components/schemas/ImageUrl'
      description: An ImageUrl that contains the url of the image to be evaluated.
      required: true
    ImageUrl2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        application/xml:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        text/xml:
          schema:
            $ref: '#/components/schemas/ImageUrl'
      description: >-
        An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to
        be evaluated.
      required: true
  schemas:
    BoundingBox:
      description: Bounding box that defines a region of an image.
      properties:
        height:
          description: Height.
          format: float
          nullable: false
          readOnly: false
          type: number
        left:
          description: Coordinate of the left boundary.
          format: float
          nullable: false
          readOnly: false
          type: number
        top:
          description: Coordinate of the top boundary.
          format: float
          nullable: false
          readOnly: false
          type: number
        width:
          description: Width.
          format: float
          nullable: false
          readOnly: false
          type: number
      required:
        - left
        - top
        - width
        - height
      type: object
    CustomVisionError:
      properties:
        code:
          description: The error code.
          enum:
            - NoError
            - BadRequest
            - BadRequestExceededBatchSize
            - BadRequestNotSupported
            - BadRequestInvalidIds
            - BadRequestProjectName
            - BadRequestProjectNameNotUnique
            - BadRequestProjectDescription
            - BadRequestProjectUnknownDomain
            - BadRequestProjectUnknownClassification
            - BadRequestProjectUnsupportedDomainTypeChange
            - BadRequestProjectUnsupportedExportPlatform
            - BadRequestIterationName
            - BadRequestIterationNameNotUnique
            - BadRequestIterationDescription
            - BadRequestIterationIsNotTrained
            - BadRequestWorkspaceCannotBeModified
            - BadRequestWorkspaceNotDeletable
            - BadRequestTagName
            - BadRequestTagNameNotUnique
            - BadRequestTagDescription
            - BadRequestTagType
            - BadRequestMultipleNegativeTag
            - BadRequestImageTags
            - BadRequestImageRegions
            - BadRequestNegativeAndRegularTagOnSameImage
            - BadRequestRequiredParamIsNull
            - BadRequestIterationIsPublished
            - BadRequestInvalidPublishName
            - BadRequestInvalidPublishTarget
            - BadRequestUnpublishFailed
            - BadRequestSubscriptionApi
            - BadRequestExceedProjectLimit
            - BadRequestExceedIterationPerProjectLimit
            - BadRequestExceedTagPerProjectLimit
            - BadRequestExceedTagPerImageLimit
            - BadRequestExceededQuota
            - BadRequestCannotMigrateProjectWithName
            - BadRequestNotLimitedTrial
            - BadRequestImageBatch
            - BadRequestImageStream
            - BadRequestImageUrl
            - BadRequestImageFormat
            - BadRequestImageSizeBytes
            - BadRequestImageExceededCount
            - BadRequestTrainingNotNeeded
            - BadRequestTrainingNotNeededButTrainingPipelineUpdated
            - BadRequestTrainingValidationFailed
            - BadRequestClassificationTrainingValidationFailed
            - BadRequestMultiClassClassificationTrainingValidationFailed
            - BadRequestMultiLabelClassificationTrainingValidationFailed
            - BadRequestDetectionTrainingValidationFailed
            - BadRequestTrainingAlreadyInProgress
            - BadRequestDetectionTrainingNotAllowNegativeTag
            - BadRequestInvalidEmailAddress
            - BadRequestDomainNotSupportedForAdvancedTraining
            - BadRequestExportPlatformNotSupportedForAdvancedTraining
            - BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining
            - BadRequestExportValidationFailed
            - BadRequestExportAlreadyInProgress
            - BadRequestPredictionIdsMissing
            - BadRequestPredictionIdsExceededCount
            - BadRequestPredictionTagsExceededCount
            - BadRequestPredictionResultsExceededCount
            - BadRequestPredictionInvalidApplicationName
            - BadRequestPredictionInvalidQueryParameters
            - BadRequestInvalid
            - UnsupportedMediaType
            - Forbidden
            - ForbiddenUser
            - ForbiddenUserResource
            - ForbiddenUserSignupDisabled
            - ForbiddenUserSignupAllowanceExceeded
            - ForbiddenUserDoesNotExist
            - ForbiddenUserDisabled
            - ForbiddenUserInsufficientCapability
            - ForbiddenDRModeEnabled
            - ForbiddenInvalid
            - NotFound
            - NotFoundProject
            - NotFoundProjectDefaultIteration
            - NotFoundIteration
            - NotFoundIterationPerformance
            - NotFoundTag
            - NotFoundImage
            - NotFoundDomain
            - NotFoundApimSubscription
            - NotFoundInvalid
            - Conflict
            - ConflictInvalid
            - ErrorUnknown
            - ErrorProjectInvalidWorkspace
            - ErrorProjectInvalidPipelineConfiguration
            - ErrorProjectInvalidDomain
            - ErrorProjectTrainingRequestFailed
            - ErrorProjectExportRequestFailed
            - ErrorFeaturizationServiceUnavailable
            - ErrorFeaturizationQueueTimeout
            - ErrorFeaturizationInvalidFeaturizer
            - ErrorFeaturizationAugmentationUnavailable
            - ErrorFeaturizationUnrecognizedJob
            - ErrorFeaturizationAugmentationError
            - ErrorExporterInvalidPlatform
            - ErrorExporterInvalidFeaturizer
            - ErrorExporterInvalidClassifier
            - ErrorPredictionServiceUnavailable
            - ErrorPredictionModelNotFound
            - ErrorPredictionModelNotCached
            - ErrorPrediction
            - ErrorPredictionStorage
            - ErrorRegionProposal
            - ErrorInvalid
          type: string
          x-ms-enum:
            modelAsString: true
            name: CustomVisionErrorCodes
        message:
          description: A message explaining the error reported by the service.
          type: string
      required:
        - code
        - message
      type: object
    ImagePrediction:
      description: Result of an image prediction request.
      properties:
        created:
          description: Date this prediction was created.
          format: date-time
          nullable: false
          readOnly: true
          type: string
        id:
          description: Prediction Id.
          format: uuid
          nullable: false
          readOnly: true
          type: string
        iteration:
          description: Iteration Id.
          format: uuid
          nullable: false
          readOnly: true
          type: string
        predictions:
          description: List of predictions.
          items:
            $ref: '#/components/schemas/Prediction'
            nullable: false
          readOnly: true
          type: array
        project:
          description: Project Id.
          format: uuid
          nullable: false
          readOnly: true
          type: string
      type: object
    ImageUrl:
      description: Image url.
      properties:
        url:
          description: Url of the image.
          nullable: false
          readOnly: false
          type: string
      required:
        - url
      type: object
    Prediction:
      description: Prediction result.
      properties:
        boundingBox:
          $ref: '#/components/schemas/BoundingBox'
          description: Bounding box of the prediction.
          nullable: true
          readOnly: true
        probability:
          description: Probability of the tag.
          format: float
          nullable: false
          readOnly: true
          type: number
        tagId:
          description: Id of the predicted tag.
          format: uuid
          nullable: false
          readOnly: true
          type: string
        tagName:
          description: Name of the predicted tag.
          nullable: true
          readOnly: true
          type: string
      type: object
  securitySchemes:
    apim_key:
      in: header
      name: Prediction-Key
      type: apiKey
security:
  - apim_key: []

