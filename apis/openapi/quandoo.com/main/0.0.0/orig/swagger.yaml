openapi: 3.0.0
info:
  description: ''
  title: QuandooAPIDocumentation
  version: ''
servers: []
paths:
  '/v1/customers/{customerId}':
    get:
      parameters:
        - description: Id of the customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerResponse'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Customer not found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - customers
      description: >
        This endpoint allows an agent to get customer information by id.  

        Customer id both in the request and response are agent-specific. The
        agent needs to be authenticated.


        The endpoint will return `HTTP 404 - Not Found` if the customer with the
        specified id could not be found.

        It will return `HTTP 403 - Forbidden` if the agent is not authenticated
        or the agent doesn't have permissions.


        ####Request:

        * **customerId**: Agent-specific ID of the customer


        ####Response:

        The response contains the following data of the customer as explained
        below:

        * **id**: The agent-dependent identifier of the customer 

        * **email**: The given email of this customer. _Optional_

        * **firstName**: First name of the customer. _Optional_

        * **lastName**: Last name of the customer. _Optional_

        * **gender**: The given gender of the customer (one of MALE, FEMALE,
        OTHER or UNDEFINED). _Optional_

        * **phoneNumber**: The ID of the merchant at which this reservation was
        made

        * **mobileNumber**: The ID of the customer to which this reservation
        belongs

        * **country**: 2-letter ISO country code of the customer, e.g. DE

        * **links**: Related links that can be followed based on this response

        * **subscriptions**: The newsletter subscriptions, e.g. QUANDOO,
        MERCHANT


        Example curl:

        ```

        curl https://{host}/v{X}/customers/9ffb3466-3562-42cc-add1-92a46a2f0902

        ```


        Example response: 

        ```

        {
          "id": "9ffb3466-3562-42cc-add1-92a46a2f0902",
          "firstName": "Gaius",
          "lastName": "Octavius",
          "gender": "male",
          "email": "c2f22117-6148-45b8-ae79-41eda25eae67augustus@spqr.com",
          "phoneNumber": "+4917312345678",
          "country": "DE",  
          "links": [
            {
              "href": "http://localhost:39250/v1/customers/9ffb3466-3562-42cc-add1-92a46a2f0902/reservations",
              "method": "GET",
              "rel": "get-customer-reservations"
            }
          ],
          "subscriptions": [
            {
              "id": "QUANDOO"
            }
          ]
        }

        ```
      operationId: getCustomer_1
      summary: Get customer Data
  '/v1/customers/{customerId}/reservations':
    get:
      parameters:
        - description: Id of the customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationDataList'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Customer not found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - customers
      description: >
        This endpoint allows an agent to get reservations of a customer. The
        results will be filtered by agent id. 

        Customer id in the request and reservation IDs in response are
        agent-specific. The agent needs to be authenticated.


        The endpoint will return `HTTP 404 - Not Found` if the customer with the
        specified id could not be found.

        It will return `HTTP 403 - Forbidden` if the agent is not authenticated
        or the agent doesn't have permissions.


        ####Request:

        * **customerId**: Agent-specific ID of the customer


        ####Response:

        The response will be a _list_ of reservations. Each reservation has the
        fields explained below:

        * **id**: The agent-dependent unique id of the reservation

        * **number**: Quandoo internal identifier of the reservation.

        * **quandooId**: The public id of this reservation on quandoo system.

        * **status**: The status of the reservation eg. CREATED, CONFIRMED,
        CUSTOMER CANCELED etc.

        * **startTime**: The start time of the reservation. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **endTime**: The end time of the reservation. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **capacity**: The capacity (people count) of the reservation

        * **merchantId**: The ID of the merchant at which this reservation was
        made.

        * **customerId**: The public ID of the customer to which this
        reservation belongs

        * **promoCode**: The promotion code associated with this reservation.
        Optional.

        * **extraInfo**: extra information that the customer provided for the
        reservation. Optional.

        * **links**: Related links that can be followed based on this response.

        * **createdAt**: The date the reservation was created. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **updatedAt**: The date the reservation was last updated. Format:
        `yyyy-MM-ddTHH:mm:ssZ`


        Example curl:

        ```

        curl
        https://{host}/v{X}/customers/ce0706ff-a95d-4229-a220-d21dcd175342/reservations

        ```


        Example response: 

        ```

        {
          "reservations": [
            {
              "id": "07f53b36-3f48-11e5-a151-feff819cdc9f",
              "number": 8734957,
              "quandooId": "07f53b36-3f48-11e5-a151-feff819cdc9f",
              "status": "CREATED",
              "startTime": "2015-06-22T12:00:00+00:00",
              "endTime": "2015-06-22T13:00:00+00:00",
              "capacity": 4,
              "merchantId": 1384,
              "customerId": "ce0706ff-a95d-4229-a220-d21dcd175342",
              "promocode": "SOME_CAMPAIGN_CODE",
              "extraInfo": "request for baby chair",
              "links": [
                {
                  "href": "https://{host}/v{X}/reservations/07f53b36-3f48-11e5-a151-feff819cdc9f",
                  "method": "GET",
                  "rel": "self"
                },
                {
                  "href": "https://{host}/v{X}/reservations/07f53b36-3f48-11e5-a151-feff819cdc9f",
                  "method": "PATCH",
                  "rel": "update"
                }
              ],
              "createdAt": "2015-06-01T15:21:54Z",
              "updatedAt": "2015-06-01T18:45:30Z"
            },
            {
              "id": "d8f53b36-3f48-11e5-a151-feff819cdc7a",
              "number": 8734958,
              "quandooId": "d8f53b36-3f48-11e5-a151-feff819cdc7a",
              "status": "CONFIRMED",
              "startTime": "2015-06-22T12:00:00+00:00",
              "endTime": "2015-06-22T13:00:00+00:00",
              "capacity": 3,
              "merchantId": 1384,
              "customerId": "ce0706ff-a95d-4229-a220-d21dcd175342",
              "promocode": "SOME_CAMPAIGN_CODE",
              "links": [
                {
                  "href": "https://{host}/v{X}/reservations/d8f53b36-3f48-11e5-a151-feff819cdc7a",
                  "method": "GET",
                  "rel": "self"
                },
                {
                  "href": "https://{host}/v{X}/reservations/d8f53b36-3f48-11e5-a151-feff819cdc7a",
                  "method": "PATCH",
                  "rel": "update"
                }
              ],
              "createdAt": "2015-06-01T15:21:54Z",
              "updatedAt": "2015-06-01T18:45:30Z"
            }
          ]
        }

        ```
      operationId: getReservations_1
      summary: Get customer reservations
  /v1/merchants:
    get:
      parameters:
        - description: Search query for a merchant name
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: >-
            Search query for a place (country, city or district) name: the most
            relevant places, if any, are taken as a filter
          in: query
          name: place
          required: false
          schema:
            type: string
        - description: DEPRECATED. Filter by place found by id. Semicolon separated.
          in: query
          name: placeIds
          required: false
          schema:
            type: string
        - description: >-
            Search with coordinates and radius. "radius" argument can be set,
            otherwise default value of 10 km will be
            used.<br>Format:<br>53.1222,13.0303<br>where latitude=53.1222,
            longitude=13.0303
          in: query
          name: centerPoint
          required: false
          schema:
            type: string
        - description: Radius for coordinate-based search
          in: query
          name: radius
          required: false
          schema:
            default: 10
            format: int32
            type: integer
        - description: Filter only bookable merchants
          in: query
          name: bookable
          required: false
          schema:
            type: boolean
        - description: >-
            Filter by tags found by text. The value can be either in English or
            in the specific locale. Semicolon separated. All or nothing
            behaviour: if one single tag is not found, the whole request fails.
            Cannot be used in combination with 'groupedTagIds' parameter.
          in: query
          name: tags
          required: false
          schema:
            type: string
        - description: >-
            Filter by tags found by id. Semicolon separated. All or nothing
            behaviour: if one single tag id is not found, the whole request
            fails. Cannot be used in combination with 'tags' parameter.
          in: query
          name: tagIds
          required: false
          schema:
            type: string
        - description: Filter by max review score (100 - 600)
          in: query
          name: reviewScoreMax
          required: false
          schema:
            format: int32
            type: integer
        - description: >-
            Search with attributes specified only. Attribute "documents" is
            currently supported, requires permission
          in: query
          name: onlyWithAttributes
          required: false
          schema:
            type: string
        - description: >-
            Number of people. In order to be effective, "date" and "fromTime"
            must also be set.
          in: query
          name: capacity
          required: true
          schema:
            default: 2
            format: int32
            type: integer
        - description: >-
            Date of the desired reservation in merchants' time zone. Format:
            yyyy-MM-dd. Availability search is only activated if "place" is
            specified.
          example: '2019-01-11'
          in: query
          name: date
          required: false
          schema:
            format: date
            type: string
        - description: >-
            Beginning of the desired reservation time frame in merchants' time
            zone. Format: HH:mm. Consider a 3h buffer for the time (0.5h before
            the given time and 2.5h after)
          example: '20:00'
          in: query
          name: fromTime
          required: false
          schema:
            type: string
        - description: offset
          in: query
          name: offset
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - description: limit
          in: query
          name: limit
          required: false
          schema:
            default: 100
            format: int32
            type: integer
        - description: language
          in: header
          name: Accept-Language
          required: false
          schema:
            type: string
        - description: ivrNumber
          in: query
          name: ivrNumber
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantDetailsDtoList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
      security:
        - API_TOKEN: []
      tags:
        - merchants
      description: >-
        ###Description


        This endpoint is used to search merchants by a set of parameters.

        For each merchant in the result there is information about location,
        language and tags that describe this merchant's basic characteristics,
        there is also a set of images selected by the merchant.


        ####Possible query parameters:


        ##Mandatory geo parameters (at least one of two options must be
        provided)


        * **place**: Filter for merchant on a country, city or district whose
        name matches the parameter. (if the parameter does not match any city or
        district on the system it is ignored)

        * **centerPoint**: Filter merchants within the circle defined by center
        on centerPoint and radius defined by radius parameter (if not informed
        defaults to 10). Center point has the format LATITUDE,LONGITUDE with
        both parameters as numbers with . as decimal separator (e.g
        `centerPoint=52.547928,13.4085728`)


        * **query**: Filter merchants using text similarity on a number of
        merchant fields like name, description, categories and tags

        * **placeIds**: DEPRECATED. Filter for merchant by id of place.
        Semicolon separated integer value.

        * **radius**: The radius of the circle to filter merchants in
        **kilometers**. Defaults to 10 and is only used if *centerPoint* is also
        informed

        * **bookable**: Boolean value, if informed true means that only
        merchants that are online bookable will be returned and false means that
        only merchants that are NOT online bookable will be returned

        * **tags**: Filter out merchants with the selected tags text. Semicolon
        separated text value. All or nothing field: if a tag is not found, the
        query will fail. Cannot be used in conjunction with 'tagIds' parameter.

        * **tagIds**: Filter out merchants with the selected tag ids. Semicolon
        separated text value. All or nothing field: if a tag is not found, the
        query will fail. Cannot be used in conjunction with 'tags' parameter.

        * **reviewScoreMax**: Filter out merchants with review score higher than
        the one informed.

        * **onlyWithAttributes**: This field only accepts the value
        **documents** for now. If informed only merchants with documents will be
        returned. You need to have required permissions to use this filter

        * **capacity**: Number of people. In order to be effective, "place",
        "date" and "fromTime" must also be set.

        * **date**: Date of the desired reservation in merchants' time zone.
        Format: yyyy-MM-dd. Availability search is only activated if "place" is
        specified.

        * **fromTime**: Beginning of the desired reservation time frame in
        merchants' time zone. Format: HH:mm. Consider a 3h buffer for the time
        (0.5h before the given time and 2.5h after)

        * **offset**: Number of merchants to skip on the result. Defaults to 0

        * **limit**: Maximum number of merchants to return. Defaults to 100 and
        cannot be more than 100.

        * **ivrNumber**: Filter out merchants with phone number.



        ####Result fields for Merchant object:


        * **id**: Id of the merchant

        * **name**: Name of the merchant

        * **phoneNumber**: The phone number of the merchant

        * **currency**: Currency of the merchant in the ISO 4217 letter format

        * **locale**: Locale used to communicate with this merchant

        * **timezone**: Canonical Timezone name

        * **location**: Location of the merchant, contains both an geo located
        point and an address if available

        * **reviewScore**: Review score of the merchant

        * **tagGroups**: Tags (grouped) about relevant merchant characteristics

        * **images**: Group of images selected by the merchant

        * **documents**: Group of documents released by this merchant (e.g
        seasonal menus )

        * **links**: Links for other pages or api operations for this merchant

        * **bookable**: The flag indicates whether the merchant is bookable or
        not

        * **openingTimes**: Group of opening times: restaurant opening times for
        this merchant. Time range beginning may be greater than the end time of
        the range, when this range goes beyond the day when it was started, e.g.
        19:00:00 - 02:00:00

        * **ccvEnabled**: If true, credit card information is required when
        creating a reservation

        * **chain**: Merchant chain information, if any

        * **ivrRedirectNumber**: The IVR forwarding phone number, requires
        permission

        * **shortDescription**: Merchant short description, requires permission

        * **longDescription**: Merchant long description, requires permission



        ###Authenticated use of the api:

        * Field `documents` is only accessible for authorized callers and will
        be empty otherwise.

        * Queries with parameter `onlyWithAttributes` are only allowed for
        authorized callers and will return `HTTP 403` for unauthorized requests


        #####How?

        In order to make an authenticated call the caller must send a header
        name `X-Quandoo-AuthToken` with the token obtained from contact with
        Quandoo.


        ###Pagination of the result:


        The result contains the fields `size` with the number of all merchants
        that matched the informed parameters, `offset` and `limit` defining
        which merchants from the complete list are on this response,

        and the caller can use query parameters `offset` and `limit` to get
        different merchants on the result list


        ###Examples:


        Example curl:

        ```

        curl -H 'X-Quandoo-AuthToken: INSERT_KEY_HERE'
        'https://{host}/v{X}/merchants?query=Zim&place=Berlin&amp;centerPoint=52.5479288%2C13.4085728&radius=10&bookable=true&reviewScoreMax=200&onlyWithAttributes=documents&offset=0&limit=100'

        ```


        Example response:

        ```

        {
          "merchants": [
            {
              "id": 215,
              "name": "a-merchant-Zim",
              "phoneNumber": "+49153153153",
              "currency": "EUR",
              "locale": "de_DE",
              "timezone": "Europe/Berlin",
              "location": {
                "coordinates": {
                  "latitude": 55,
                  "longitude": 12
                },
                "address": {}
              },
              "reviewScore": "5.3",
              "tagGroups": [
                {
                  "type": "CUISINE",
                  "tags": [
                    {
                      "id": 63,
                      "name": "Testküche Hauptkategorie"
                    },
                    {
                      "id": 66,
                      "name": "Test cuisine"
                    }
                  ]
                }
              ],
              "images": [],
              "documents": [
                {
                  "name": "Main Menu",
                  "url": "https://d2s6u6f7snurg9.cloudfront.net/partner/uploads/MD-document-3ec1dc15-1b69-463f-bdd2-c060b9bf844d.pdf",
                  "format": "pdf",
                  "description": "Seasonal Main Menu"
                }
              ],
              "links": [
                {
                  "href": "https://{host}/{path}?aid=16",
                  "method": "GET",
                  "rel": "DETAILS"
                },
                {
                  "href": "https://{host}/{path}?aid=16&countryId=NLD",
                  "method": "GET",
                  "rel": "WIDGET"
                },
                {
                  "href": "https://{host}/{path}/details?aid=16&countryId=NLD",
                  "method": "GET",
                  "rel": "WIDGET_DETAILS"
                }
              ],
              "bookable": true,
              "ccvEnabled": true,
              "chain": {
                "id": 1,
                "name": "Test chain"
              },
              "ivrRedirectNumber": "+49153153153",
              "shortDescription": "Test short description",
              "longDescription": "Test long description",
            },
            {
              "id": 219,
              "name": "another merchants Zim",
              "phoneNumber": "+49154154154",
              "currency": "EUR",
              "locale": "de_DE",
              "timezone": "Europe/Berlin",
              "location": {
                "coordinates": {
                  "latitude": 52,
                  "longitude": 13
                },
                "address": {
                  "street": "Wintersteinstr.",
                  "number": "15",
                  "zipcode": "10587",
                  "city": "Berlin",
                  "country": "DEU"
                }
              },
              "reviewScore": "4.7",      
              "tagGroups": [
                {
                  "type": "CUISINE",
                  "tags": [
                    {
                      "id": 79,
                      "name": "Testküche Hauptkategorie"
                    },
                    {
                      "id": 82,
                      "name": "Test Japanese"
                    }
                  ]
                },
                {
                  "type": "PRICE",
                  "tags": [
                    {
                      "id": 84,
                      "name": "Test expensive"
                    }
                  ]
                }
              ],
              "images": [
                {
                  "url": "https://dci5ez2ey8tr9.cloudfront.net/1482eec7-e585-4821-b096-8a9941e0d2eb/25_sld.jpg"
                }
              ],
              "documents": [],
              "links": [
                {
                  "href": "https://{host}/{path}?aid=16",
                  "method": "GET",
                  "rel": "DETAILS"
                },
                {
                  "href": "https://{host}/{path}?aid=16&countryId=NLD",
                  "method": "GET",
                  "rel": "WIDGET"
                },
                {
                  "href": "https://{host}/{path}/details?aid=16&countryId=NLD",
                  "method": "GET",
                  "rel": "WIDGET_DETAILS"
                }
              ],
              "bookable": true,
              "openingTimes": {
                "standardOpeningTimes": {
                  "SATURDAY": [
                    {
                      "start": "09:00:00",
                      "end": "20:00:00"
                    }
                  ],
                  "SUNDAY": [
                    {
                      "start": "09:00:00",
                      "end": "18:00:00"
                    }
                  ]
                }
              },
              "ccvEnabled": true,
              "chain": {
                "id": 1,
                "name": "Test chain"
              },
              "ivrRedirectNumber": "+49153153153",
              "shortDescription": "Test short description",
              "longDescription": "Test long description",
            }
          ],
          "size": 2,
          "offset": 0,
          "limit": 100
        }

        ```
      operationId: search
      summary: Allows to get merchant information by parameters
  '/v1/merchants/{merchantId}':
    get:
      parameters:
        - description: merchantId
          in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
        - description: 'Locale.<br>Format:<br>&lt;language code&gt;[_&lt;country code&gt;]'
          in: header
          name: Accept-Language
          required: false
          schema:
            default: en_GB
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantDetailsDto'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Merchant not found error
      security:
        - API_TOKEN: []
      tags:
        - merchants
      description: >-
        This endpoint allows to receive detailed information on a particular
        merchant in the system. This merchant should be specified by their
        identifier **merchantId**, which is mandatory. The endpoint can take
        optional request header **Accept-Language**. This header is used to
        determine correct locale and has an effect on translation of merchant's
        entity fields, that may be omitted.


        The expected value of the header **Accept-Language** should contain
        language and can contain country, e.g. "de_DE" or "de". Locale by
        default is "en_GB".


        The endpoint returns status `HTTP 200` if the request is successful.

        The endpoint will return status `HTTP 404` if the merchant, specified by
        identifier, was not found or has no products, allowed for a web search. 


        Example curl:

        ```

        curl  -H 'X-Quandoo-AuthToken: {INSERT_KEY_HERE}' -H 'Accept-Language:
        de_DE' 'https://{host}/v{X}/merchants/11'

        ```


        Example response:

        ```

        {
            "id":11,
            "name":"Test merchant",
            "phoneNumber":"+27113901837",
            "currency":"ZAR",
            "locale":"en_ZA",
            "timezone":"Africa/Johannesburg",
            "location":{
                "coordinates":{
                    "latitude":33.9,
                    "longitude":18.4
                },
                "address":{
                    "street":"Tamerlan street",
                    "number":"6A",
                    "zipcode":"10787",
                    "city":"Cape Town",
                    "country":"ZAF"
                }
            },
            "reviewScore": "5.3",
            "tagGroups":[
                {
                    "type":"CUISINE",
                    "tags":[
                        {
                            "id":25,
                            "name":"Testküche Hauptkategorie"
                        },
                        {
                            "id":28,
                            "name":"Test cuisine"
                        }
                    ]
                }
            ],
            "images":[
                {
                    "url":"https://dci5ez2ey8tr9.cloudfront.net/8e4d1063-9171-40b1-94b7-5e9337591a90/7_sld.jpg"
                }
            ],
            "documents":[],
            "links":[
                {
                    "href":"https://{host}/{path}?aid=16",
                    "method":"GET",
                    "rel":"DETAILS"
                },
                {
                    "href":"https://{host}/{path}?aid=16&countryId=NLD",
                    "method":"GET",
                    "rel":"WIDGET"
                },
                {
                    "href":"https://{host}/{path}/details?aid=16&countryId=NLD",
                    "method":"GET",
                    "rel":"WIDGET_DETAILS"
                }
            ],
            "bookable": true,
            "openingTimes": {
              "standardOpeningTimes": {
                "SATURDAY": [
                  {
                    "start": "09:00:00",
                    "end": "20:00:00"
                  }
                ],
                "SUNDAY": [
                  {
                    "start": "09:00:00",
                    "end": "18:00:00"
                  }
                ]
              }
            },
            "ccvEnabled": true,
            "chain": {
               "id": 1,
               "name": "Test chain"
            }
        }

        ```
      operationId: search_2
      summary: Allows to get a merchant by id
  '/v1/merchants/{merchantId}/availabilities':
    get:
      parameters:
        - description: Id of the merchant
          in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
        - description: Id of the agent
          in: query
          name: agentId
          required: true
          schema:
            format: int32
            type: integer
        - description: Number of people
          in: query
          name: capacity
          required: false
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MerchantAvailabilityDaysDto'
          description: Merchant availabilities response
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Agent not found error
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      tags:
        - availabilities
      description: >-
        This endpoint returns days which a customer can select for his
        reservation. The response is based on when the merchant is known to be
        open. It is not guaranteed that they have available times for
        reservation. The days are returned starting from the first available day
        up to the merchant-defined limit, but never more than 365 days.


        ####Request parameters:

        * **merchantId**: Id of the merchant. Path parameter.

        * **agentId**: Id of the agent making the request

        * **capacity**: Specifies the number of people in reservation.
        Availability days will be returned based on this capacity.


        ####Response:

        The response returns availability days that could be selected for
        reservation. 

        * **days**: List of availability days that could be reserved. Format:
        yyyy-MM-dd 

        * **links**: Related links that can be followed based on this response.


        ####Example curl:

        ```

        curl
        https://{host}/v{X}/merchants/15/availabilities?agentId=3&capacity=4

        ```



        ####Example response:

        ```

        {
          "days": [
            "2017-01-01",
            "2017-01-02",
            "2017-01-03",
             ...
          ],
          "links": [
            {
              "href": "https://{host}/v{X}/merchants/15",
              "method": "GET",
              "rel": "parent"
            },
            {
              "href": "https://{host}/v{X}/merchants/15/reservation-settings",
              "method": "GET",
              "rel": "settings"
            },
            {
              "href": "https://{host}/v{X}/merchants/15/availabilities/2017-01-01/times",
              "method": "GET",
              "rel": "availabilities"
            }
          ]
        }

        ```
      operationId: availabilityDays_1
      summary: Get merchant availability days
  '/v1/merchants/{merchantId}/availabilities/{date}/times':
    get:
      parameters:
        - description: Id of the merchant
          in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
        - description: Id of the agent
          in: query
          name: agentId
          required: true
          schema:
            format: int32
            type: integer
        - description: Number of people
          in: query
          name: capacity
          required: true
          schema:
            default: 2
            format: int32
            type: integer
        - description: 'Date of the desired reservation. Format: yyyy-MM-dd'
          example: '2018-01-25'
          in: path
          name: date
          required: true
          schema:
            format: date
            type: string
        - description: 'Beginning of the desired reservation time frame. Format: HH:mm'
          example: '10:45'
          in: query
          name: fromTime
          required: false
          schema:
            type: string
        - description: 'End of the desired reservation time frame. Format: HH:mm'
          example: '12:45'
          in: query
          name: toTime
          required: false
          schema:
            type: string
        - description: Id of the area
          in: query
          name: areaId
          required: false
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MerchantAvailabilityDtoList'
          description: Merchant availabilities response
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Agent type not found error
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      tags:
        - availabilities
      description: >-
        This endpoint returns availability time slots which can be reserved for
        a given capacity.


        ####Request parameters:

        * **merchantId**: Id of the merchant. Path parameter.

        * **date**: Specifies date of the desired reservation. Format:
        `yyyy-MM-dd`. Path parameter.

        * **fromTime**: Beginning of the desired reservation time frame. Format:
        `HH:mm`. Optional.

        * **toTime**: End of the desired reservation time frame. Format:
        `HH:mm`. Optional.

        * **agentId**: Id of the agent making the request

        * **capacity**: Specifies the number of people in reservation.
        Availabilities will be returned based on this capacity. If not provided,
        the default value is 2.

        * **areaId**: Restricts availabilities to a certain area. Optional.
            
        ####Response:

        The response returns availability time slots that could be reserved,
        along with the areas it is associated with and contains information on
        how much should be paid if the reservation is cancelled by a client. 


        * **timeSlots**: List of available time slots.
          * **areaIds**: List of areas for which this time slot can be reserved.
          * **dateTime**: Date and time of the available slot. Format: `yyyy-MM-dd'T'HH:mm:ssZ`
          * **occupancy**: Occupancy of the available time slot. This is an integer between `0` and `100`.
          * **vaultSettingsId**: ID of the vault setting, if there is any. See: `vaultSettings`
        * **vaultSettings**: Credit card vault settings representing the fees to
        be paid in case of cancellation.
          * **id**: ID of the setting as shown in `timeSlots`.
          * **fee**: Fee to be paid in case of cancellation. Currency is defined by merchant. See reservation-settings.
          * **feeType**: Type of fee to be paid. Can be `PER_PERSON` or `PER_RESERVATION`.
          * **feePercentageForTime**: Fee percentage depending of the time of cancellation. Format: `"{hoursStart}-{hoursEnd}": {percentage}` , where hours are the number of hours before the visit.
        * **links**: Related links that can be followed based on this response.


        ####Example curl:

        ```

        curl
        https://{host}/v{X}/merchants/15/availabilities/2017-11-09/times?capacity=2&areaId=24&agentId=3&fromTime=10:45&toTime=12:45

        ```



        ####Example response:

        ```

        { 
            "timeSlots": [ 
                { 
                    "areaIds": [33532, 33533], 
                    "dateTime": "2017-09-27T10:45:00+01:00", 
                    "occupancy": 0, 
                    "vaultSettingId": "284d701f-f79a-4efa-9859-fd09851dfdce"
                }, 
                ... 
            ], 
            "vaultSettings": [ 
                 { 
                    "id": "284d701f-f79a-4efa-9859-fd09851dfdce", 
                     "fee": "10.00", 
                     "feeType": "PER_PERSON", 
                     "feePercentageForTime": 
                        { 
                          "0-12":100, 
                          "12-24":50, 
                          "24-48":20 
                        } 
                 } 
             ], 
            "links": [
              {
                "href": "https://{host}/v{X}/merchants/15",
                "method": "GET",
                "rel": "parent"
              },
              {
                "href": "https://{host}/v{X}/merchants/15/reservation-settings",
                "method": "GET",
                "rel": "reservation-settings"
              },
              {
                "href": "https://{host}/v{X}/merchants/reservations",
                "method": "PUT",
                "rel": "create-reservation"
              }
            ]
        } 

        ```
      operationId: availabilityOptions_1
      summary: Get merchant availability time slots
  '/v1/merchants/{merchantId}/customers':
    get:
      parameters:
        - description: Id of the merchant
          in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
        - description: offset
          in: query
          name: offset
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - description: limit
          in: query
          name: limit
          required: false
          schema:
            default: 100
            format: int32
            type: integer
        - description: 'modifiedSince. Format: yyyy-MM-dd HH:mm:ss'
          example: '2018-01-01 00:00:00'
          in: query
          name: modifiedSince
          required: false
          schema:
            format: date-time
            type: string
        - description: 'modifiedUntil. Format: yyyy-MM-dd HH:mm:ss'
          example: '2018-03-01 00:00:00'
          in: query
          name: modifiedUntil
          required: false
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDataList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Customer not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - customers
      description: >
        This endpoint allows a third party to get a list of customers of a
        merchant.

        The list is filtered, showing only the customers that the third party
        system has access.

        Customer id is agent-specific if the customer was created by the agent.
        The agent needs to be authenticated.


        The endpoint will return `HTTP 404 - Not Found` if the merchant with the
        specified id could not be found.

        It will return `HTTP 403 - Forbidden` if the agent is not authenticated
        or the agent doesn't have permissions.


        ####Request:

        * **merchantId**: Identifier of the merchant

        * **offset**: sets the starting element to be returned. Defaults to 0
        when unset or malformed.

        * **limit**: maximum number of results to be returned. Value must be
        between 1 and 100. Defaults to 100 when unset, malformed or outside
        bounds.

        * **modifiedSince**: earliest date time of time window in UTC. Format:
        yyyy-MM-dd HH:mm:ss

        * **modifiedUntil**: latest date time of time window in UTC. Format:
        yyyy-MM-dd HH:mm:ss


        ####Response:

        The response contains the following data of the customer as explained
        below:

        * **id**: The agent-dependent identifier of the customer 

        * **title**: The title of the customer. _Optional_

        * **firstName**: First name of the customer. _Optional_

        * **lastName**: Last name of the customer. _Optional_

        * **email**: The given email of this customer. _Optional_

        * **gender**: The given gender of the customer (one of MALE, FEMALE,
        OTHER or UNDEFINED). _Optional_

        * **phoneNumber**: The phone number of the customer. _Optional_

        * **mobileNumber**: The mobile phone number of the customer. _Optional_

        * **locale**: The locale of the customer.

        * **links**: Related links that can be followed based on this response

        * **subscriptions**: The newsletter subscriptions, e.g. QUANDOO,
        MERCHANT

        * **statistics**: The customer statistics: number of successful,
        cancelled and no-show reservations

        * **createdAt**: The date the customer was created. Format:
        yyyy-MM-ddTHH:mm:ssZ

        * **updatedAt**: The date the customer was last updated. Format:
        yyyy-MM-ddTHH:mm:ssZ


        Example curl:

        ```

        curl https://{host}/v{X}/merchants/1234/customers

        ```


        Example response: 

        ```

        {
          "result": [
            {
              "id": "9ffb3466-3562-42cc-add1-92a46a2f0902",
              "customerRef": "9ffb3466-3562-42cc-add1-92a46a2f0902",
              "marketingFlags": [
                {
                  "marketingSettingType": "NEWSLETTERS",
                  "marketingSettingStatus": "INACTIVE"
                },
                {
                  "marketingSettingType": "PROMO_CODES",
                  "marketingSettingStatus": "ACTIVE"
                }
              ],
              "title": "Mr.",
              "firstName": "John",
              "lastName": "Doe",
              "email": "test@quandoo.de",
              "phoneNumber": "+493012345678",
              "mobileNumber": "+17712345678",
              "locale": "de_DE",
              "links": [
                {
                  "href": "http://localhost:39250/v1/customers/9ffb3466-3562-42cc-add1-92a46a2f0902/reservations",
                  "method": "GET",
                  "rel": "get-customer-reservations"
                }
              ],
              "subscriptions": [
                {
                  "id": "QUANDOO"
                }
              ],
              "statistics": {
                "reservationSuccessfulCount": 8,
                "reservationCancelledCount": 5,
                "reservationNoShowCount": 2
              },
              "createdAt": "2018-11-22T18:42:16Z",
              "updatedAt": "2018-11-30T18:16:02Z"
            }
          ],
          "offset": 0,
          "limit": 100
        }

        ```
      operationId: getCustomersOfMerchant_1
      summary: Get a list of Customers of a merchant
  '/v1/merchants/{merchantId}/reservation-settings':
    get:
      parameters:
        - description: Id of the merchant
          in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MerchantReservationSettingsDto'
          description: Reservation settings response
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Merchant not found error
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      tags:
        - reservation-settings
      description: >
        This endpoint provides all data that is required to initiate the
        reservation flow and is not part of the search endpoint.


        Example curl:

        ```

        curl https://{host}/v{X}/merchants/15/reservation-settings

        ```


        Example response: 

        ```

        {
          "areaIds": [
            {
              "id": 2,
              "name": "Garden",
              "priority": 10
            }
          ],
          "areaSelectionRequired": true,
          "capacities": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "links": [
            {
              "href": "https://{host}/v{X}/merchants/15",
              "method": "GET",
              "rel": "parent"
            },
            {
              "href": "https://{host}/v{X}/merchants/15/availabilities",
              "method": "GET",
              "rel": "availability_days"
            },
            {
              "href": "https://{host}/v{X}/merchants/15/availabilities/2017-01-01/times",
              "method": "GET",
              "rel": "availability"
            }
          ],
          "merchantNewsletterSelectionRequired": true,
          "minimumCapacityForEnquiries": 10,
          "onlineReservationInterval": 60,
          "reservationEnquiryEnabled": true,
          "specialTerms": "This is any custom string for special terms",
          "automaticConfirmation": true,
          "ccvEnabled": true
        }

        ```
      operationId: reservationSettings_1
      summary: Get merchant reservation settings
  '/v1/merchants/{merchantId}/reservation_tags':
    get:
      parameters:
        - description: Id of the merchant
          in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationTagsDto'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Agent not found error
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      tags:
        - reservations tags
      description: >
        This endpoint returns all active reservation tags for a merchant.

        ####Request:

        * **merchantId**: merchant's ID. Taken as a path parameter.


        ####Response:

        * **id**: reservation tag's ID.

        * **name**: tag's name. Default tag names are usually translated to
        merchant's locale.

        * **merchantId**: merchant's ID.


        It will return `HTTP 403 - AUTHENTICATION_ERROR` if the user is not
        authenticated.


        Example response:

        ```

        {
            "reservationTags": [
                {
                    "id": 5,
                    "name": "Birthday",
                    "merchantId": 3
                },
                {
                    "id": 51,
                    "name": "With Children",
                    "merchantId": 3
                }
            ]
        }

        ```



        Example curl:

        ```

        curl -H "Content-Type: application/json" -X GET 
        https://{host}/v{X}/merchants/{merchantId}/reservation_tags

        ```
      operationId: getReservationTags_1
      summary: Get merchant reservation tags
  '/v1/merchants/{merchantId}/reservations':
    get:
      parameters:
        - description: Id of the merchant
          in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
        - description: Skip first n reservations
          in: query
          name: offset
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - description: limit
          in: query
          name: limit
          required: false
          schema:
            default: 100
            format: int32
            type: integer
        - description: >-
            earliest date time of time window in UTC. Format: yyyy-MM-dd
            HH:mm:ss
          example: '2018-01-01 00:00:00'
          in: query
          name: earliest
          required: false
          schema:
            format: date-time
            type: string
        - description: 'latest date time of time window in UTC. Format: yyyy-MM-dd HH:mm:ss'
          example: '2018-03-01 00:00:00'
          in: query
          name: latest
          required: false
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MerchantReservationDataList'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Merchant not found error
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - merchants
      description: >
        This endpoint allows an agent to get reservations of a merchant. The
        results will be filtered by agent id. 

        Reservation IDs in response are agent-specific. The agent needs to be
        authenticated.


        The endpoint will return `HTTP 404 - Not Found` if the merchant with the
        specified id could not be found.

        It will return `HTTP 403 - Forbidden` if the agent is not authenticated
        or the agent doesn't have permissions.


        ####Request:

        * **merchantId**: ID of the merchant

        * **offset**: sets the starting element to be returned. Defaults to 0
        when unset or malformed.

        * **limit**: maximum number of results to be returned. Value must be
        between 1 and 100. Defaults to 100 when unset, malformed or outside
        bounds.

        * **earliest**: earliest date time of time window in UTC. Format:
        yyyy-MM-dd HH:mm:ss

        * **latest**: latest date time of time window in UTC. Format: yyyy-MM-dd
        HH:mm:ss



        ####Response:

        The response will be a _list_ of reservations. Each reservation has the
        fields explained below:

        * **id**: The public id of the reservation

        * **number**: Quandoo internal identifier of the reservation.

        * **quandooId**: The public id of this reservation on quandoo system.

        * **status**: The status of the reservation eg. CREATED, CONFIRMED,
        CUSTOMER CANCELED etc.

        * **startTime**: The start time of the reservation. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **endTime**: The end time of the reservation. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **capacity**: The capacity (people count) of the reservation

        * **merchantId**: The ID of the merchant at which this reservation was
        made.

        * **customerId**: The public ID of the customer to which this
        reservation belongs

        * **promoCode**: The promotion code associated with this reservation.
        Optional.

        * **extraInfo**: extra information that the customer provided for the
        reservation. Optional.

        * **links**: Related links that can be followed based on this response.

        * **createdAt**: The date the reservation was created. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **updatedAt**: The date the reservation was last updated. Format:
        `yyyy-MM-ddTHH:mm:ssZ`


        Example curl:

        ```

        curl https://{host}/v{X}/merchants/32489/reservations

        ```


        Example response: 

        ```

        {
          "reservations": [
            {
              "id": "07f53b36-3f48-11e5-a151-feff819cdc9f",
              "number": 8734957,
              "quandooId": "07f53b36-3f48-11e5-a151-feff819cdc9f",
              "status": "CREATED",
              "startTime": "2015-06-22T12:00:00+00:00",
              "endTime": "2015-06-22T13:00:00+00:00",
              "capacity": 4,
              "merchantId": 1384,
              "customerId": "ce0706ff-a95d-4229-a220-d21dcd175342",
              "promocode": "SOME_CAMPAIGN_CODE",
              "extraInfo": "request for baby chair",
              "links": [
                {
                  "href": "https://{host}/v{X}/reservations/07f53b36-3f48-11e5-a151-feff819cdc9f",
                  "method": "GET",
                  "rel": "self"
                },
                {
                  "href": "https://{host}/v{X}/reservations/07f53b36-3f48-11e5-a151-feff819cdc9f",
                  "method": "PATCH",
                  "rel": "update"
                }
              ],
              "createdAt": "2015-06-01T15:21:54Z",
              "updatedAt": "2015-06-01T18:45:30Z"
            },
            {
              "id": "d8f53b36-3f48-11e5-a151-feff819cdc7a",
              "number": 8734958,
              "quandooId": "d8f53b36-3f48-11e5-a151-feff819cdc7a",
              "status": "CONFIRMED",
              "startTime": "2015-06-22T12:00:00+00:00",
              "endTime": "2015-06-22T13:00:00+00:00",
              "capacity": 3,
              "merchantId": 1384,
              "customerId": "ce0706ff-a95d-4229-a220-d21dcd175342",
              "promocode": "SOME_CAMPAIGN_CODE",
              "links": [
                {
                  "href": "https://{host}/v{X}/reservations/d8f53b36-3f48-11e5-a151-feff819cdc7a",
                  "method": "GET",
                  "rel": "self"
                },
                {
                  "href": "https://{host}/v{X}/reservations/d8f53b36-3f48-11e5-a151-feff819cdc7a",
                  "method": "PATCH",
                  "rel": "update"
                }
              ],
              "createdAt": "2015-06-01T15:21:54Z",
              "updatedAt": "2015-06-01T18:45:30Z"
            }
          ],
          offset:0,
          limit:100
        }

        ```
      operationId: getReservations_2
      summary: Get merchant reservations
  '/v1/merchants/{merchantId}/reviews':
    get:
      parameters:
        - in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
        - description: Skip first n reviews
          in: query
          name: offset
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - description: Max number of reviews to be retrieved
          in: query
          name: limit
          required: false
          schema:
            default: 10
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDtoList'
          description: Review response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Merchant not found error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      tags:
        - merchants
      description: >-
        This endpoint retrieves customer reviews for a particular merchant with
        rating, description, locale, date & the customer's information.This
        merchant should be specified by their identifier **merchantId**, which
        is mandatory.


        Supports pagination via offset & limit parameters in the request.


        `offset` allows skipping the first n reviews.

        `limit` makes sure the response contains a maximum of n reviews.


        If not supplied, offset will be 0 and limit will be 10


        ####Response:


        * **customer**: block contains link to customer's profile image,
        customer's first name & first letter of customer's last name.

        * **rating**: a value between 1 and 6, where 1 represents the worst
        rating and 6 represents the best.

        * **description**: the review description entered by the customer.

        * **locale**: represents the language settings of the customer, in the
        format: <language code>_<country code>

        * **date**: represents the date of the review, with the format:
        yyyy-MM-dd


        Example curl:

        ```

        curl https://{host}/v{X}/merchants/15/reviews?offset=10&limit=5

        ```


        Example response:

        ```

        {
           reviews: [
             {
                   customer: {
                        firstName: "Hans",
                        lastName: "W",
                        profileImage: {
                            url: "https://www..."
                        },
                   },
                   rating: 1,
                   description: "Foo bar",                
                   locale: "de_DE",
                   date: "2017-07-21"
             }
           ],
           offset: 10,
           limit: 5,
           size: 1
        }

        ```
      operationId: getReviews_1
      summary: 'Retrieves customer reviews for a merchant, specified by reviewId'
  '/v1/merchants/{merchantId}/similar':
    get:
      parameters:
        - description: merchantId
          in: path
          name: merchantId
          required: true
          schema:
            format: int32
            type: integer
        - description: Sort order. Default sorting will be by proximity.
          in: query
          name: sort
          required: false
          schema:
            default: CLOSEST
            enum:
              - CLOSEST
            type: string
        - description: Max number of merchant recommendations to return.
          in: query
          name: limit
          required: false
          schema:
            default: 10
            format: int32
            type: integer
        - description: 'Locale.<br>Format:<br>&lt;language code&gt;[_&lt;country code&gt;]'
          in: header
          name: Accept-Language
          required: false
          schema:
            default: en_GB
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantWithRecommendationsDto'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Merchant not found error
      security:
        - API_TOKEN: []
      tags:
        - merchants
      description: >-
        This endpoint allows to receive detailed information for a particular
        merchant in the system and for restaurants that are similar to this one.

        A merchant is similar if all the following conditions are met:

        1. Location: the recommended merchants are within 30 km radius from the
        main merchant

        2. The similar merchants are bookable online

        3. The similar merchants have the main cuisine in common


        This merchant should be specified by their identifier **merchantId**,
        which is mandatory.

        The endpoint can take optional request header **Accept-Language**.

        This header is used to determine correct locale and has an effect on
        translation of merchant's entity fields, that may be omitted.


        The expected value of the header **Accept-Language** should contain
        language and can contain country, e.g. "de_DE" or "de". Locale by
        default is "en_GB".


        The endpoint returns status `HTTP 200` if the request is successful. In
        a successful requests the specified merchant was found.


        If the merchant has no products allowed for a web search, i.e. is not
        bookable, response data with `HTTP 200` is returned, but the field
        `merchant` is not set. Instead, the merchant search message is set.


        The endpoint will return status `HTTP 404` if the merchant, specified by
        identifier, was not found.


        Example curl:

        ```

        curl  -H 'X-Quandoo-AuthToken: {INSERT_KEY_HERE}' -H 'Accept-Language:
        de_DE' 'https://{host}/v{X}/merchants/11/similar'

        ```


        Example responses:

        `merchant bookable`

        ```

        {
            "merchant": {
                "id":11,
                "name":"Test merchant",
                "phoneNumber":"+27113901837",
                "currency":"ZAR",
                "locale":"en_ZA",
                "timezone":"Africa/Johannesburg",
                "location":{
                    "coordinates":{
                        "latitude":33.9,
                        "longitude":18.4
                    },
                    "address":{
                        "street":"Tamerlan street",
                        "number":"6A",
                        "zipcode":"10787",
                        "city":"Cape Town",
                        "country":"ZAF"
                    }
                },
                "reviewScore": "5.3",
                "tagGroups":[
                    {
                        "type":"CUISINE",
                        "tags":[
                            {
                                "id":25,
                                "name":"Testküche Hauptkategorie"
                            },
                            {
                                "id":28,
                                "name":"Test cuisine"
                            }
                        ]
                    }
                ],
                "images":[
                    {
                        "url":"https://dci5ez2ey8tr9.cloudfront.net/8e4d1063-9171-40b1-94b7-5e9337591a90/7_sld.jpg"
                    }
                ],
                "documents":[],
                "links":[
                    {
                        "href":"https://{host}/{path}?aid=16",
                        "method":"GET",
                        "rel":"DETAILS"
                    },
                    {
                        "href":"https://{host}/{path}?aid=16&countryId=NLD",
                        "method":"GET",
                        "rel":"WIDGET"
                    },
                    {
                        "href":"https://{host}/{path}/details?aid=16&countryId=NLD",
                        "method":"GET",
                        "rel":"WIDGET_DETAILS"
                    }
                ],
                "bookable": true,
                "openingTimes": {
                  "standardOpeningTimes": {
                    "SATURDAY": [
                      {
                        "start": "09:00:00",
                        "end": "20:00:00"
                      }
                    ],
                    "SUNDAY": [
                      {
                        "start": "09:00:00",
                        "end": "18:00:00"
                      }
                    ]
                  }
                },
                "ccvEnabled": true,
                "chain": {
                   "id": 1,
                   "name": "Test chain"
                }
            },
           "recommendedMerchants": {
                "merchants": [
                    {
                        "id":12,
                        "name":"similar merchant",
                        "phoneNumber":"+27113901838",
                        "currency":"ZAR",
                        "locale":"en_ZA",
                        "timezone":"Africa/Johannesburg",
                        "location":{
                            "coordinates":{
                                "latitude":33.8,
                                "longitude":18.4
                            },
                            "address":{
                                "street":"Tamerlan street",
                                "number":"5A",
                                "zipcode":"10787",
                                "city":"Cape Town",
                                "country":"ZAF"
                            }
                        },
                        "reviewScore": "5.3",
                        "tagGroups":[
                            {
                                "type":"CUISINE",
                                "tags":[
                                    {
                                        "id":25,
                                        "name":"Testküche Hauptkategorie"
                                    },
                                    {
                                        "id":28,
                                        "name":"Test cuisine"
                                    }
                                ]
                            }
                        ],
                        "images":[
                            {
                                "url":"https://dci5ez2ey8tr9.cloudfront.net/8e4d1063-9171-40b1-94b7-5e9337591a90/7_sld.jpg"
                            }
                        ],
                        "documents":[],
                        "links":[
                            {
                                "href":"https://{host}/{path}?aid=16",
                                "method":"GET",
                                "rel":"DETAILS"
                            },
                            {
                                "href":"https://{host}/{path}?aid=16&countryId=NLD",
                                "method":"GET",
                                "rel":"WIDGET"
                            },
                            {
                                "href":"https://{host}/{path}/details?aid=16&countryId=NLD",
                                "method":"GET",
                                "rel":"WIDGET_DETAILS"
                            }
                        ],
                        "bookable": true,
                        "openingTimes": {
                          "standardOpeningTimes": {
                            "SATURDAY": [
                              {
                                "start": "09:00:00",
                                "end": "20:00:00"
                              }
                            ],
                            "SUNDAY": [
                              {
                                "start": "09:00:00",
                                "end": "18:00:00"
                              }
                            ]
                          }
                        },
                        "ccvEnabled": true,
                        "chain": {
                           "id": 1,
                           "name": "Test chain"
                        }
                    }
                ],
                "size": 1,
                "offset": 0,
                "limit": 10
            }
        }

        ```


        `merchant not bookable`

        ```

        {
            "merchantSearchMessage": "MERCHANT_NOT_BOOKABLE",
            "recommendedMerchants": {
                "limit": 10,
                "merchants": [...],
                "offset": 0,
                "size": 0
            }
        }

        ```
      operationId: searchSimilar_1
      summary: Allows to get a merchant by id and find similar merchants
  /v1/reservation-enquiries:
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReservationEnquiryData'
          description: Reservation enquiry successfully created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
      security:
        - API_TOKEN: []
      tags:
        - reservation-enquiries
      description: >-
        This endpoint allows to create a reservation enquiry for a certain
        capacity, start and end time. It also requires certain customer
        information. All optional fields can be either omitted or set to null.
        The endpoint is idempotent, which means sending the same request twice
        will not create another reservation enquiry. For that purpose the client
        is required to generate an agent-specific unique ID for each request.


        The endpoint will return status `HTTP 400` should any of the required
        parameters be missing or formatted incorrectly. See schema for details. 


        ####Request:

        The request needs to have 3 objects: reservation enquiry, customer and
        tracking information.


        * **reservationEnquiry**: Information about the merchant and the
        enquiry.
          * **id**: The unique identifier of the reservation enquiry for the calling agent (Agent dependent field) or NULL if the agent identifier should be created. Optional.
          * **merchantId**: The ID of the merchant at which this enquiry will be made. **Required**.
          * **capacity**: The capacity (people count) of the reservation enquiry. **Required**.
          * **startDateTime**: The start date and time when the customer wants to make a reservation. Format: yyyy-MM-ddTHH:mm:ssZ. **Required**.
          * **endDateTime**: The expected date and time for the reservation to end accordingly to the customer. Format: yyyy-MM-ddTHH:mm:ssZ. **Required**.
          * **message**: A free-text message to the merchant. Max of 5000 characters. **Required**.

        * **customer**: Information on the customer making the reservation.
          * **id**: Identifier of the customer for the calling agent. Agent dependent field. Optional.
          * **firstName**: The first name of the customer. Optional.
          * **lastName**: The last name of the customer. Optional.
          * **emailAddress**: The email address of the customer. **Required**.
          * **phoneNumber**: The phone number of the customer. Without country code, since it will be assumed from the country field. Example: 030120765890. **Required**.
          * **locale**: The locale of the customer. E.g. de_DE. **Required**.
          * **country**: The 2 letter ISO country of the customer. E.g DE. **Required**
          * **subscriptions**: List of requested subscriptions e.g. QUANDOO, MERCHANT. Optional.

        * **tracking**: Third party information used to track customer and
        reservation enquiry.
          * **agent**: The id of the agent creating this reservation enquiry. **Required**.
          * **cookie**: Cookie information to be stored with this reservation. Optional.

        ####Response:

        The response returns information on the created reservation enquiry and
        the customer along with relevant links to follow.


        * **reservationEnquiry**: Information on the created reservation
        enquiry.
          * **id**: Agent-specific id set for the reservation enquiry.

        * **customer**: Information on the customer.
          * **id**: Agent-specific id set for the customer.

        * **links**: Related links that can be followed based on this response.


        Example curl:

        ```

        curl -H "Content-Type: application/json" -X POST -d '

        {
          "reservationEnquiry": {
            "id": "07f53b36-3f48-11e5-a151-feff819cdc9f",
            "merchantId": 15,
            "capacity": 10,
            "startDateTime": "2015-06-22T12:00:00+00:00",
            "endDateTime": "2015-06-22T17:00:00+00:00",
            "message": "Customer specific message"
          },
          "customer": {
                "id": "659b9f4b-cd1a-4dc9-a5c3-8ef6bacbade5",
                "firstName": "Hans",
                "lastName": "Wurst",
                "emailAddress": "hans.wurst@foo.bar",
                "phoneNumber": "017312345678",
                "locale": "de_DE",
                "country": "DE",
                "subscriptions": [
                  {
                      "id": "QUANDOO"
                  },
                  {
                      "id": "MERCHANT"
                  }
              ]
            },
            "tracking": {
                "agent": {
                  "id": 3
                },
                "cookie": {
                    "tracking": "ff819cdc9",
                    "referenceId": "07f53b36"
                }
            }
        }' https://{host}/v{X}/reservation-enquiries

        ```


        Example response:

        ```

        {
          "reservationEnquiry": {
            "id": "07f53b36-3f48-11e5-a151-feff819cdc9f"
          },
          "customer": {
            "id": "2cc29cba-1e1f-4af6-8184-386e19c891ec"
          },
          "links": [
            {
              "href": "https://{host}/v{X}/merchants/15",
              "method": "GET",
              "rel": "get-merchant"
            },
            {
              "href": "https://{host}/v{X}/merchants/15/reservation-settings",
              "method": "GET",
              "rel": "reservation-settings"
            },
            {
              "href": "https://{host}/v{X}/merchants/15/availabilities",
              "method": "GET",
              "rel": "availability_days"
            },
            {
              "href": "https://{host}/v{X}/merchants/15/availabilities/2015-06-22/times",
              "method": "GET",
              "rel": "availability"
            }
          ]
        }

        ```
      operationId: createReservationEnquiry_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantReservationEnquiryData'
        description: Reservation enquiry data
        required: true
      summary: Create reservation enquiries
  '/v1/reservation-enquiries/{reservationEnquiryId}':
    get:
      parameters:
        - description: Id of the reservation enquiry
          in: path
          name: reservationEnquiryId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetReservationEnquiryData'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Reservation enquiry not found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - reservation-enquiries
      description: >-
        This endpoint allows an agent to get an reservation enquiry by id. The
        id is agent-specific. The agent needs to be authenticated.


        The endpoint will return `HTTP 404 - Not Found` if the reservation
        enquiry with the specified id could not be found.


        It will return `HTTP 403 - Forbidden` if the agent is not authenticated,
        if the agent doesn't have permissions or the reservation enquiry doesn't
        belong to the authenticated agent.


        ####Request:

        * **reservationEnquiryId**: Agent-specific ID of the requested
        reservation enquiry


        ####Response:

        * **id**: The agent-dependent unique id of the reservation enquiry

        * **merchantId**: The ID of the merchant at which this reservation
        enquiry was made

        * **customerId**: The ID of the customer to which this reservation
        enquiry belongs

        * **capacity**: The capacity (people count) of the reservation enquiry

        * **startDateTime**: The start date time of the reservation enquiry.
        Format: yyyy-MM-ddTHH:mm:ssZ

        * **endDateTime**: The end date time of the reservation enquiry. Format:
        yyyy-MM-ddTHH:mm:ssZ

        * **status**: The status of the reservation enquiry which can be one
        of:  NEW, IN_PROGRESS, ACCEPTED or REJECTED


        Example curl:

        ```

        curl
        https://{host}/v{X}/reservation-enquiries/07f53b36-3f48-11e5-a151-feff819cdc9f

        ```


        Example response:

        ```

        {
          "id": "07f53b36-3f48-11e5-a151-feff819cdc9f",
          "merchantId": 1384,
          "customerId": "35fff464-142c-48ac-a0c6-ed72a1615664",
          "capacity": 4,
          "startTime": "2015-06-22T12:00:00+00:00",
          "endTime": "2015-06-22T13:00:00+00:00",
          "status": "NEW"
        }

        ```
      operationId: getReservationEnquiry_1
      summary: Get reservation enquiry by id
    patch:
      parameters:
        - description: Id of the reservation enquiry
          in: path
          name: reservationEnquiryId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid reservation enquiry status transition
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - reservation-enquiries
      description: >
        This endpoint allows to update the status of a reservation enquiry with
        the given ID. The allowed status transitions are as following:


        * NEW --> IN_PROGRESS --> {ACCEPTED/REJECTED}

        * ACCEPTED <--> REJECTED


        The endpoint will return `HTTP 404 - Not Found` if the reservation
        enquiry with the specified id could not be found.


        The endpoint will return `HTTP 400 - Bad Request` if the specified
        status is wrong.


        The endpoint will return `HTTP 409 - Conflict` if the status change is
        invalid.


        The endpoint will return `HTTP 403 - Forbidden` if the agent is not
        authenticated, if the agent doesn't have permissions or the reservation
        enquiry 

        doesn't belong to the authenticated agent.


        ####Request:

        * **reservationEnquiryId**: Agent-specific ID of the requested
        reservation enquiry

        * **reservationEnquiryData**: The new enquiry status
      operationId: updateReservationEnquiry_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReservationEnquiryData'
        description: New reservation enquiry status
        required: true
      summary: Update status of reservation enquiry by id
  '/v1/reservation-enquiries/{reservationEnquiryId}/messages':
    get:
      parameters:
        - description: Id of the reservation enquiry
          in: path
          name: reservationEnquiryId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationEnquiryMessageList'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Reservation enquiry not found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - reservation-enquiries
      description: >-
        This endpoint allows an agent to get all messages of a reservation
        enquiry. The id of the reservation enquiry is agent-specific. The agent
        needs to be authenticated.


        The endpoint will return `HTTP 404 - Not Found` if the reservation
        enquiry with the specified id could not be found.


        It will return `HTTP 403 - Forbidden` if the agent is not authenticated,
        if the agent doesn't have permissions or the reservation enquiry doesn't
        belong to the authenticated agent.


        ####Request:

        * **reservationEnquiryId**: Agent-specific ID of the requested
        reservation enquiry


        ####Response:

        The response will contain a _list_ of messages. Each one containing the
        following fields:

        * **senderType**: If this message was sent by the customer or by the
        merchant 

        * **creationDate**: The date time that this message was created. Format:
        yyyy-MM-ddTHH:mm:ssZ

        * **message**: The text of the message itself.


        Example curl:

        ```

        curl
        https://{host}/v{X}/reservation-enquiries/07f53b36-3f48-11e5-a151-feff819cdc9f/messages

        ```


        Example response:

        ```

        {
          "messages": [
            {
              "senderType": "CUSTOMER",
              "message": "Customer specific message",
              "creationDate": "2018-05-04T09:26:53Z"
            }
          ]
        }

        ```
      operationId: getMessagesForReservationEnquiry_1
      summary: Get all messages of a reservation enquiry
  /v1/reservations:
    put:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreatedReservationData'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '409':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No matching table(s) found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      tags:
        - reservations
      description: >-
        This endpoint allows to create a reservation for a certain capacity,
        date and time. It also requires certain customer information. All
        optional fields can be either omitted or set to null. The endpoint is
        idempotent, which means sending the same request twice will not create
        another reservation. For that purpose the client is required to generate
        an agent-specific unique ID for the reservation.


        The endpoint will return status `HTTP 409` should the reservation option
        specified by the given parameters not be bookable anymore.

        The endpoint will return status `HTTP 400` should any of the required
        parameters be missing or formatted incorrectly. See schema for details. 


        ####Request:

        The request needs to have 3 objects for reservation, customer and
        tracking information.


        * **reservation**: Information about the reservation.
          * **id**: The identifier of the reservation for the calling agent (Agent-dependent field). Optional.
          * **merchantId**: The ID of the merchant at which this reservation will be made. **Required**.
          * **capacity**: The capacity (people count) of the reservation. **Required**.
          * **areaId**: The ID of the area this reservation should be in. Optional.
          * **dateTime**: The date and time when the reservation will take place (local time). Format: yyyy-MM-ddTHH:mm:ss. **Required**
          * **extraInfo**: Any extra information that the customer likes to provide. Optional.
          * **promoCode**: A promotion code which should be used with this reservation. Optional.
          * **creditCardVaultSettingsId**: A credit card vault settings to be used by this reservation. Optional.
          * **recurringCardDetailId**:A customer credit card reference to be used if credit card vault should be applied. Optional.
          * **reservationTags**: A list of reservation tag IDs. Optional.

        * **customer**: Information on the customer making the reservation.
          * **id**: Identifier of the customer for the calling agent. Agent dependent field. Optional.
          * **firstName**: The first name of the customer. Optional.
          * **lastName**: The last name of the customer. **Required**
          * **emailAddress**: The email address of the customer. **Required**.
          * **phoneNumber**: The phone number of the customer. Without country code, since it will be assumed from the country field. Example: 030120765890. **Required**.
          * **locale**: The locale of the customer. E.g. de_DE. **Required**.
          * **country**: The 2 letter ISO country of the customer. E.g DE. **Required**
          * **subscriptions**: List of requested subscriptions e.g. QUANDOO, MERCHANT. Optional.

        * **tracking**: Third party information used to track customer and
        reservations.
          * **agent**: The id of the agent creating this request and partner references if any. **Required**.
          * **cookie**: Cookie information to be stored with this reservation. Optional.

        ####Response:

        The response returns information on the created reservation and the
        customer along with relevant links to follow.


        * **reservation**: Information on the created reservation.
          * **id**: Agent-specific id set for the reservation.
          * **number**: Quandoo internal identifier of the reservation.
          * **reservationNumber**: Quandoo long internal identifier of the reservation. Provided when **number** is not provided. 
          * **status**: Status for the created reservation. eg. "CREATED"
          * **quandooId**: Quandoo public identifier for the reservation.  

        * **customer**: Information on the customer making the reservation.
          * **id**: Agent-specific id set for the customer.

        * **links**: Related links that can be followed based on this response.


        Example curl:

        ```

        curl -H "Content-Type: application/json" -X POST -d '

        {
            "reservation": {
                "id": "07f53b36-3f48-11e5-a151-feff819cdc9f",
                "merchantId": 15,
                "capacity": 2,
                "areaId": 1,
                "dateTime": "2015-06-22T12:00:00+00:00",
                "extraInfo": "Some text",
                "promoCode": "PROMO123",
            },
            "customer": {
                "id": "659b9f4b-cd1a-4dc9-a5c3-8ef6bacbade5",
                "firstName": "Hans",
                "lastName": "Wurst",
                "emailAddress": "hans.wurst@foo.bar",
                "phoneNumber": "017312345678",
                "locale": "de_DE",
                "country": "DE",
                "subscriptions": [
                  {
                      "id": "QUANDOO"
                  },
                  {
                      "id": "MERCHANT"
                  }
              ]
            },
            "tracking": {
                "agent": {
                  "id": 3
                },
                "cookie": {
                    "tracking": "ff819cdc9",
                    "referenceId": "07f53b36"
                }
            }
        }' https://{host}/v{X}/reservations

        ```


        Example response:

        ```

        {
            "reservation": {
                "id": "07f53b36-3f48-11e5-a151-feff819cdc9f",
                "number": 708457891,
                "status": "CREATED",
                "quandooId": "07f53b36-3f48-11e5-a151-feff819cdc9f"
            },
            "customer": {
                "id": "01a53b36-3f48-11e5-a151-feff819cdc9f"
            },
            "links": [
                {
                   "href": "https://{host}/v{X}/merchants/15/reservation-settings",
                   "method": "GET",
                   "rel": "parent"
                },
                {
                   "href": "https://{portal}/edit-reservation/overview/b8d3213a-307b-4fa9-86f7-0202ea3311aa",
                   "method": "GET",
                   "rel": "customer-edit-reservation"
                },
                {
                   "href": "https://{portal}/de/checkout/offline-reservation?reservationId=9e1b295b-554e-4c35-bf84-e529fa971919&merchantId=test-merchant-33719&cardId=889c0613-3b42-4fc5-a1cf-bd24c1d26908",
                   "method": "GET",
                   "rel": "credit-card-details-page"
                }
            ]
        }

        ```
      operationId: createReservation_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantReservationData'
        description: Reservation data
        required: true
      summary: Create reservations
  '/v1/reservations/{reservationId}':
    get:
      parameters:
        - description: Id of the reservation
          in: path
          name: reservationId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationData'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Reservation not found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - reservations
      description: >-
        This endpoint allows an agent or a user to get a reservation by id. The
        id is either agent-specific or a public id. The agent/user needs to be
        authenticated.


        The endpoint will return `HTTP 404 - Not Found` if the reservation with
        the specified id could not be found.


        It will return `HTTP 403 - Forbidden` if the agent/user is not
        authenticated, if the agent/user doesn't have permissions, if the
        reservation doesn't belong to the authenticated agent or if the user
        doesn't have permissions to see objects from the merchant owner of the
        reservation


        ####Request:

        * **reservationId**: Agent-specific or public ID of the requested
        reservation


        ####Response:

        * **id**: Agent-specific or public ID of the requested reservation

        * **number**: Quandoo internal identifier of the reservation

        * **quandooId**: The public id of this reservation on quandoo system.

        * **status**: The status of the reservation eg. CREATED, CONFIRMED,
        CUSTOMER CANCELED etc.

        * **startTime**: The start time of the reservation. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **endTime**: The end time of the reservation. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **capacity**: The capacity (people count) of the reservation

        * **merchantId**: The ID of the merchant at which this reservation was
        made.

        * **customerId**: The public ID of the customer to which this
        reservation belongs

        * **promoCode**: The promotion code associated with this reservation.
        Optional.

        * **extraInfo**: extra information that the customer provided for the
        reservation. Optional.

        * **links**: Related links that can be followed based on this response.

        * **reservationTags**: A list of reservation tag IDs.

        * **createdAt**: The date the reservation was created. Format:
        `yyyy-MM-ddTHH:mm:ssZ`

        * **updatedAt**: The date the reservation was last updated. Format:
        `yyyy-MM-ddTHH:mm:ssZ`


        Example curl:

        ```

        curl
        https://{host}/v{X}/reservations/07f53b36-3f48-11e5-a151-feff819cdc9f

        ```


        Example response:

        ```

        {
          "id": "07f53b36-3f48-11e5-a151-feff819cdc9f",
          "number": 1092454812,
          "quandooId": "07f53b36-3f48-11e5-a151-feff819cdc9f",
          "status": "CREATED",
          "startTime": "2015-06-22T12:00:00+00:00",
          "endTime": "2015-06-22T13:00:00+00:00",
          "capacity": 4,
          "merchantId": 1384,
          "customerId": "35fff464-142c-48ac-a0c6-ed72a1615664",
          "promocode": "SOME_CAMPAIGN_CODE",
          "extraInfo": "request for baby chair",
          "links": [
            {
              "href": "https://{host}/v{X}/reservations/07f53b36-3f48-11e5-a151-feff819cdc9f",
              "method": "PATCH",
              "rel": "update"
            }
          ],
          "createdAt": "2015-06-01T15:21:54Z",
          "updatedAt": "2015-06-01T18:45:30Z"
        }

        ```
      operationId: getReservation_1
      summary: Get reservation by id
    patch:
      parameters:
        - description: Id of the reservation
          in: path
          name: reservationId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Reservation not found
        '409':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No matching table(s) found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - reservations
      description: >
        This endpoint allows an agent to update a reservation by id. The id is
        agent-specific. The agent needs to be authenticated.

        ####Request:

        * **reservationId**: Agent-specific ID of the requested reservation.
        Taken as a path parameter.

        * **reservation.status**: New status for the reservation. When is
        present then all parameters below should be omitted!

        * **reservation.capacity**: The capacity (people count) of the
        reservation.

        * **reservation.areaId**: The ID of the area this reservation should be
        in.

        * **reservation.dateTime**: The date and time when the reservation will
        take place. Format: yyyy-MM-ddTHH:mm:ssZ.

        * **reservation.reservationTags** list of reservation tag IDs. Null
        value is treated as no value.

        * **reservation.extraInfo** additional text information about the
        reservation.

          The next JSON will be treated as follows:
          - { } - **extraInfo** will not be updated
          - { “extraInfo”:null } - **extraInfo** will not be updated
          - { “extraInfo”:“some text”} - **extraInfo** will be updated with provided text
          - { “extraInfo”:“”} - **extraInfo** will be assigned an empty string

        For updating status request body should contain  only
        reservation.status.

        Valid status values depend on the current status of reservation and can
        be `CUSTOMER_CANCELED` or `RECONFIRMED`.

        * `CUSTOMER_CANCELED` is valid if current status is one of the below:
            * CREATED
            * CONFIRMED
            * AUTOMATIC_CONFIRMED
            * NOTIFICATION_REQUESTED
            * NOTIFIED
            * RECONFIRMED
        * `MERCHANT_CANCELED` is valid if current status is one of the below:
            * CONFIRMED
            * AUTOMATIC_CONFIRMED
            * NOTIFICATION_REQUESTED
            * NOTIFIED
            * RECONFIRMED
        * `RECONFIRMED` is valid if current status is one of the below:
            * CONFIRMED
            * AUTOMATIC_CONFIRMED
            * NOTIFICATION_REQUESTED
            * NOTIFIED

        If reservation.status field is not present then reservation data will be
        updated and reservation's status will be reset.

        Depending on `Automatic confirmation for online reservations` setting,
        reservation's status will be set to CREATED or AUTOMATIC_CONFIRMED.


        ####Response:

        The endpoint will return `HTTP 200 - OK` if update was successful.

        It will return `HTTP 404 - Not Found` error if the reservation with the
        specified id could not be found.

        It will return `HTTP 403 - Forbidden` error if the agent is not
        authenticated, if the agent doesn't have permissions or the reservation
        doesn't belong to the 

        authenticated agent.

        It will return `HTTP 409 - Conflict` error if reservation has menu, made
        by IOVOX, has conflict in status, time or other conflicts.


        Example curl:

        ```

        curl -H "Content-Type: application/json" -X PATCH -d '

        {
          "reservation": {
            "status": "CUSTOMER_CANCELED"
          }
        }

        ' https://{host}/v{X}/reservations/07f53b36-3f48-11e5-a151-feff819cdc9f

        ```
      operationId: updateReservation_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReservationData'
        description: New reservation data
        required: true
      summary: Update reservation by id
  /v1/reviews:
    get:
      parameters:
        - description: >-
            MerchantId to get the reviews from. Cannot be used in combination
            with 'reservationId'
          in: query
          name: merchantId
          required: false
          schema:
            format: int32
            type: integer
        - description: >-
            Reservation id to get the reviews from. Either public id or agent
            reference id. Cannot be used in combination with 'merchantId'. When
            set, 'offset' and 'limit' are ignored. All reviews for a reservation
            are returned.
          in: query
          name: reservationId
          required: false
          schema:
            type: string
        - description: Skip first n reviews
          in: query
          name: offset
          required: false
          schema:
            default: 0
            format: int32
            type: integer
        - description: Max number to retrieve
          in: query
          name: limit
          required: false
          schema:
            default: 10
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReviewsDto'
          description: Review response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Review not found error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - reviews
      description: "This resource return a list of reviews. The result obtained depends on the different query parameters provided. It is able to return three different results:\n* **Reviews associated to an agent:** if neither 'merchantId' nor 'reservationId' query parameters are provided, then the available reviews for the current agent are returned.\n* **Reviews associated to a merchant:** if the parameter 'merchantId' is provided, all the reviews for the given merchant and agent are provided. The agent is the one associated with the reservations.\n* **Reviews associated to a reservation:** Reservation could be identified in two ways: either by reservation public id or by agent reservation reference id.\n\n**NOTE:** For the second and third cases, the current agent must be the owner of the reservations used to get the reviews. In the specific case of the search by the merchants, the current agent id is the one realated to the reservations associated to the specified merchant's reviews.\n\n####Request:\nThe request needs 4 optional query parameters. Pagination is controlled by the usage of the 'limit' and 'offset' parameters.\n\n* **limit**: maximum number of results to be returned. Value must be between 1 and 10. Defaults to 10 when unset, malformed or outside bounds. Ignored when 'reservationId' is enabled.\n* **offset**: sets the starting element to be returned. Defaults to 0 when unset or malformed. Ignored when 'reservationId' is enabled.\n* **reservationId**: Either public ID of the reservation or agent reservation reference id from which to get the reviews. Cannot be used in combination with 'merchantId'. Can be null. Does not consider 'limit' and/or 'offset'.\n* **merchantId**: ID of the merchant from which to get the reviews. Cannot be used in combination with 'reservationId'. Can be null.\n\n####Response:\nThe response is a user review object containing a list of user reviews.\n\n* **size**: the number of reviews retrieved in this request. Can be any positive value between 0 and 10 (the maximum value for limit);\n* **offset**: echoes the offset value used in the request. Returns 0 in case 'reservationId' is used.\n* **limit**: echoes the limit value used in the request. Returns 0 in case 'reservationId' is used.\n* **reviews**: list of reviews retrieved, each review containing the following properties:\n\n* **reviewId**: review UUID. Same as the one used in the request.\n* **rating**: rating associated to this review.\n* **description**: description of the review.\n* **status**: current review status. Possible values are 'CREATED', 'DENIED', 'PUBLISHED'.\n* **merchantId**: merchant id associated to this review. **Only in the detailed view**.\n* **customerId**: customer id associated to this review. **DEPPRECATED, NOT USED**.\n* **publicCustomerId**: public customer id associated to this review. **Only in the detailed view**.\n* **customerFirstName**: review associated customer first name. **Only in the detailed view**.\n* **customerLastName**: first character of the customer last name. **Only in the detailed view**.\n* **customerProfileImage**: customer profile image URL. **Only in the detailed view**.\n* **locale**: locale associated to the review. **Only in the detailed view**.\n* **reservationId**: the reservation identifier this review is created for. Either reservation public id or agent specific reservation reference id(if set on creation) is used\n* **createdAt**: the date and time the review created at.\n\nExample curl:\n```\ncurl https://{host}/v{X}/reviews?merchantId=5124\n```\n\nExample response:\n```\n{\n\t\"reviews\": [{\n\t\t\t\"reviewId\": \"e94c5f9b-e61f-486a-bfa7-48abb1e42f93\",\n\t\t\t\"merchantId\": 5124,\n\t\t\t\"publicCustomerId\": \"a10fbb9a-df04-407c-9568-2e79bd620b41\",\n\t\t\t\"customerFirstName\": \"Perico\",\n\t\t\t\"customerLastName\": \"d\",\n\t\t\t\"customerProfileImage\": \"http://test.bla\",\n\t\t\t\"rating\": 6,\n\t\t\t\"description\": \"Description 8\",\n\t\t\t\"status\": \"PUBLISHED\",\n\t\t\t\"locale\": \"de_DE\",\n            \"reservationId\":\"1111112\",\n            \"createdAt\":\"2020-07-28T09:45:33Z\"\n\t\t}, {\n\t\t\t\"reviewId\": \"65472403-7968-4ccf-b389-fe7e6e70ee27\",\n\t\t\t\"merchantId\": 5124,\n\t\t\t\"publicCustomerId\": \"a10fbb9a-df04-407c-9568-2e79bd620b41\",\n\t\t\t\"customerFirstName\": \"Perico\",\n\t\t\t\"customerLastName\": \"d\",\n\t\t\t\"customerProfileImage\": \"http://test.bla\",\n\t\t\t\"rating\": 6,\n\t\t\t\"description\": \"Description 9\",\n\t\t\t\"status\": \"PUBLISHED\",\n\t\t\t\"locale\": \"de_DE\",\n            \"reservationId\":\"7dbe05dc-f566-48be-9872-c77b71aff072\",\n            \"createdAt\":\"2020-07-28T09:45:54Z\"\n\t\t}\n\t],\n\t\"size\": 2,\n\t\"offset\": 0,\n\t\"limit\": 10\n}\n```\n"
      operationId: getReviews_2
      summary: Get information from reviews in a list
    patch:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangedReviewDto'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Reservation not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - reviews
      description: >-
        This resource manages the update of reviews for a given review ID.
        Description and rating can be updated on a review. The agent must be the
        one that owns the reservation associated to the review to modify,
        otherwise a forbidden response is returned.


        **NOTE**: Reviews in state 'PUBLISHED' or 'DENIED' cannot be updated.
        Only those in status 'CREATED' are allowed to be updated.


        ####Request:

        The request needs to have 3 parameters for reservation reviewId (public
        reviewId), description and rating.


        * **reviewId**: Id of the review. **Required**.

        * **description**: Text content of the review. If not set (null value)
        it won't be considered for update.

        * **rating**: Integer value from 1 to 6 with the rating given. If not
        set (null value) it won't be considered for update.


        In case both description and rating are set to null, nothing happens to
        the review: it is not updated and its state remains.


        ####Response:

        The response is a review object containing information about the review.


        * **reviewId**: The Id of the updated review.

        * **status**: Status of the updated review. Can be 'CREATED',
        'PUBLISHED' or 'DENIED'. Upon a successful update, the status 'CREATED'
        is returned.

        * **links**: A series of links where to get details of the updated
        review.


        Example curl:

        ```

        curl -H "Content-Type: application/json" -X PATCH
        https://{host}/v{X}/reviews/ -d '

        {
            "reviewId": "01a53b36-3f48-11e5-a151-feff819cdc9f",
            "description": "Some updated description for the review",
            "rating": 2
        }

        ```


        Example response:

        ```

        {
            "reviewId": "01a53b36-3f48-11e5-a151-feff819cdc9f",
            "status": "CREATED",
            "links": [{
                "href": "http://localhost:39250/v1/reviews/01a53b36-3f48-11e5-a151-feff819cdc9f",
                "method": "GET",
                "rel": "get-review"
            }]
        }

        ```
      operationId: updateReview_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReviewDto'
        description: Review for this reservation
        required: true
      summary: Updated a review
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangedReviewDto'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Access denied
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Reservation not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error
      security:
        - API_TOKEN: []
      tags:
        - reviews
      description: >-
        This resource manages the creation of reviews for a particular agent and
        a reservation. Reviews must have a description, rating and a reservation
        public identifier or agent specific reference identifier with
        reservation agent identifier. The agent must be the one that created the
        reservation, otherwise it is forbidden.


        ####Request:

        The request needs to have 3 parameters for review reviewId, description
        and rating.


        * **reservationId**: Public ID or agent specific reference id of the
        reservation where to add a review. **Required**.

        * **description**: Text content of the review to be set. Optional. A
        review requires a minimum of a rating.

        * **rating**: Integer value from 1 to 6 with the new rating given.
        **Required**.



        ####Response:

        The response is a review object containing information about the review.


        * **reviewId**: The Id of the created review.

        * **status**: Status of the created review. Can be 'CREATED',
        'PUBLISHED' or 'DENIED'. After a successful creation, 'CREATED' is
        returned.

        * **links**: A series of links where to get details of the created
        review;


        Example curl:

        ```

        curl -H "Content-Type: application/json" -X PUT
        https://{host}/v{X}/reviews/ -d '

        {
            "reservationId": "07f53b36-3f48-11e5-a151-feff819cdc9f",
            "description": "Some description of the review",
            "rating": 1
        }

        ```


        ```

        curl -H "Content-Type: application/json" -X PUT
        https://{host}/v{X}/reviews/ -d '

        {
            "reservationId": "1111112",
            "description": "Some description of the review",
            "rating": 1,
        }

        ```


        Example response:

        ```

        {
            "reviewId": "01a53b36-3f48-11e5-a151-feff819cdc9f",
            "status": "CREATED",
            "links": [{
                "href": "http://localhost:39250/v1/reviews/01a53b36-3f48-11e5-a151-feff819cdc9f",
                "method": "GET",
                "rel": "get-review"
            }]
        }

        ```
      operationId: createReview_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewDto'
        description: Review for this reservation
        required: true
      summary: Create a review for a reservation
  /v1/status:
    get:
      responses:
        '200':
          description: OK
        '500':
          description: Internal server error
      tags:
        - status
      description: ''
      operationId: getStatusByGet_1
      summary: Provides information on the status of the service
    head:
      responses:
        '200':
          description: OK
        '500':
          description: Internal server error
      tags:
        - status
      description: ''
      operationId: getStatusByHead_1
      summary: Provides information on the status of the service
  /v1/validations/phone-numbers:
    get:
      parameters:
        - description: Phone number
          in: query
          name: phoneNumber
          required: true
          schema:
            type: string
        - description: Country code
          in: query
          name: country
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Phone number validated successfully
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
      tags:
        - validations
      description: >
        This endpoint validates a phone number. 

        If optional 2-letter country code `country` is not specified, the
        `phoneNumber` should be formatted according to E164, which means it is
        expected to be in the international format with a leading `"+"` and no
        spaces or dashes, e.g. `+4930120765890`. Otherwise it may have leading
        zero instead of country code, e.g. `030120765890`.


        The endpoint will return a status `HTTP 200` which means the
        `phoneNumber` is successfully validated.

        The endpoint will return a status `HTTP 400` which means the
        `phoneNumber` is missing or invalid.


        Example curl:

        ```

        curl
        https://{host}/v{X}/validations/phone-numbers?phoneNumber=030120765890&country=IT

        ```


        Example response:

        ```

        {
          "errorMessage": "phoneNumber is invalid: 030120765890, country specified is: IT",
          "errorType": "PHONE_NUMBER_INVALID"
        }

        ```
      operationId: validatePhoneNumber_1
      summary: Validate phone number
components:
  schemas:
    AgentTracking:
      properties:
        id:
          description: An agent id. Required.
          format: int32
          type: integer
      required:
        - id
      type: object
    AreaDto:
      properties:
        id:
          description: Id of the area
          format: int32
          type: integer
        name:
          description: Name of the area
          type: string
        priority:
          description: Priority set for this area
          format: int32
          type: integer
      type: object
    ChainDto:
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
      type: object
    ChangedReviewDto:
      properties:
        links:
          description: The links related to this entity.
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
        reviewId:
          description: Id of to the review.
          format: uuid
          type: string
        status:
          description: The status of the change.
          enum:
            - AVAILABLE_TO_REVIEW
            - CREATED
            - DENIED
            - PUBLISHED
          type: string
      required:
        - links
        - reviewId
      type: object
    CoordinatesDto:
      properties:
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
      type: object
    CreateReviewDto:
      properties:
        description:
          description: The description of the review.
          type: string
        rating:
          description: 'Possible values: 1 to 6.'
          format: int32
          type: integer
        reservationId:
          description: >-
            The reservation identifier this review is being created for.Either
            public reservation identifier or agent specific identifier could be
            passed.
          type: string
      required:
        - rating
        - reservationId
      type: object
    CreatedCustomer:
      properties:
        id:
          description: >-
            The id of the customer for the calling agent. (Agent dependent
            field)
          type: string
      required:
        - id
      type: object
    CreatedReservation:
      properties:
        id:
          description: >-
            The id of this reservation for the calling agent. (Agent dependent
            field)
          type: string
        number:
          description: The id of this reservation on quandoo system.
          format: int32
          type: integer
        quandooId:
          description: The public id of this reservation on quandoo system.
          format: uuid
          type: string
        reservationNumber:
          description: The long id of this reservation on quandoo system.
          type: string
        status:
          description: The status of the reservation.
          type: string
      required:
        - id
        - quandooId
      type: object
    CreatedReservationData:
      properties:
        customer:
          $ref: '#/components/schemas/CreatedCustomer'
          description: The object holding the customer data.
        links:
          description: Related links to follow
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
        reservation:
          $ref: '#/components/schemas/CreatedReservation'
          description: The object holding the reservation data.
      required:
        - customer
        - links
        - reservation
      type: object
    CreatedReservationEnquiry:
      properties:
        id:
          description: >-
            The identifier of the reservation enquiry for the calling agent
            (Agent-dependent field)
          type: string
      required:
        - id
      type: object
    CreatedReservationEnquiryData:
      properties:
        customer:
          $ref: '#/components/schemas/CreatedCustomer'
          description: The object holding the customer data.
        links:
          description: Related links to follow
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
        reservationEnquiry:
          $ref: '#/components/schemas/CreatedReservationEnquiry'
          description: The object holding the reservation enquiry data.
      required:
        - customer
        - links
        - reservationEnquiry
      type: object
    CustomerDataList:
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        result:
          items:
            $ref: '#/components/schemas/MerchantCustomerData'
          type: array
      type: object
    CustomerDto:
      properties:
        firstName:
          type: string
        lastName:
          type: string
        profileImage:
          $ref: '#/components/schemas/ImageDto'
      type: object
    CustomerResponse:
      properties:
        country:
          description: '2-letter ISO country code of the customer, e.g. DE.'
          type: string
        email:
          description: Email of the customer.
          type: string
        firstName:
          description: First name of the customer.
          type: string
        gender:
          description: Gender of the customer.
          enum:
            - male
            - female
            - other
            - undefined
          type: string
        id:
          description: The id of the customer.
          type: string
        lastName:
          description: Last name of the customer.
          type: string
        links:
          description: The links related to this entity.
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
        mobileNumber:
          description: Mobile phone number of the customer.
          type: string
        phoneNumber:
          description: Fixed line phone number of the customer.
          type: string
        subscriptions:
          description: 'The newsletter subscriptions, e.g. QUANDOO, MERCHANT.'
          items:
            $ref: '#/components/schemas/MerchantSubscription'
          type: array
      required:
        - country
        - email
        - firstName
        - gender
        - id
        - lastName
        - links
        - mobileNumber
        - phoneNumber
        - subscriptions
      type: object
    CustomerReviewData:
      properties:
        firstName:
          description: >-
            Customer first name associated to this review. Only in detailed
            view.
          type: string
        identifier:
          description: >-
            Identifier of the customer associated to this review. Only in
            detailed view.
          type: string
        lastName:
          description: >-
            First letter of customer last name associated to this review. Only
            in detailed view.
          type: string
        profileImage:
          description: >-
            Customer profile image URL associated to this review. Only in
            detailed view.
          type: string
      type: object
    CustomerStatisticsData:
      properties:
        reservationCancelledCount:
          description: >-
            The number of reservations made by the customer that were cancelled
            before taking place
          format: int32
          type: integer
        reservationNoShowCount:
          description: >-
            The number of reservations made by the customer that he did not show
            up
          format: int32
          type: integer
        reservationSuccessfulCount:
          description: >-
            The number of reservations made by the customer that were actually
            seated
          format: int32
          type: integer
      required:
        - reservationCancelledCount
        - reservationNoShowCount
        - reservationSuccessfulCount
      type: object
    DocumentDto:
      properties:
        description:
          type: string
        format:
          type: string
        name:
          type: string
        url:
          type: string
      type: object
    ErrorResponse:
      properties:
        errorMessage:
          type: string
        errorType:
          enum:
            - BAD_REQUEST_ERROR
            - FORBIDDEN_ERROR
            - NOT_FOUND_ERROR
            - METHOD_NOT_ALLOWED_ERROR
            - NOT_ACCEPTABLE_ERROR
            - UNSUPPORTED_MEDIA_TYPE_ERROR
            - START_TIME_NOT_FOUND_ERROR
            - MERCHANT_ID_INVALID
            - RESERVATION_CAPACITY_MISSING
            - RESERVATION_CAPACITY_INVALID
            - RESERVATION_DATE_TIME_MISSING
            - RESERVATION_DATE_TIME_INVALID_FORMAT
            - RESERVATION_EXTRA_INFO_INVALID
            - RESERVATION_SHOW_POSTCODE
            - RESERVATION_DATE_TIME_INVALID_IN_THE_PAST
            - RESERVATION_NO_TABLES_AVAILABLE
            - RESERVATION_NOT_FOUND
            - RESERVATION_IN_NON_EDITABLE_STATUS
            - RESERVATION_WITH_SMART_OFFER_EDIT
            - RESERVATION_WITH_CCV_EDIT
            - RESERVATION_IOVOX_OFFER_EDIT
            - RESERVATION_WITH_PREPAID_MENU_EDIT
            - RESERVATION_FOR_MERCHANT_WITH_FEEDBACK_TIME
            - RESERVATION_WALKIN_NOT_EDITABLE
            - RESERVATION_CUSTOMER_CANNOT_EDIT
            - RESERVATION_PROMO_CODE_PARAM_INVALID
            - RESERVATION_PROMO_CODE_NOT_FOUND
            - RESERVATION_PROMO_CODE_INVALID_DESTINATION
            - RESERVATION_PROMO_CODE_ALREADY_USED
            - RESERVATION_PROMO_CODE_INVALID_CAMPAIGN
            - RESERVATION_PROMO_CODE_DATE_TIME_IN_PAST_OR_FUTURE
            - RESERVATION_PROMO_CODE_INVALID_DAY_OF_WEEK
            - RESERVATION_PROMO_CODE_INVALID_AGENT
            - RESERVATION_PROMO_CODE_INVALID_MERCHANT
            - RESERVATION_PROMO_CODE_INVALID_PARTNER_VOUCHER
            - RESERVATION_PROMO_CODE_ALREADY_OWNED_BY_CUSTOMER
            - RESERVATION_INVITATION_PROMO_CODE_NOT_FIRST_RESERVATION
            - CCV_SETTINGS_REQUIRED
            - CCV_CARD_REQUIRED
            - CCV_SETTINGS_INVALID
            - CCV_SETTINGS_OFFLINE
            - CCV_CARD_INVALID
            - ENQUIRY_INVALID_MIN_COVERS
            - CUSTOMER_FIRST_NAME_INVALID
            - CUSTOMER_LAST_NAME_MISSING
            - CUSTOMER_LAST_NAME_INVALID
            - CUSTOMER_EMAIL_MISSING
            - CUSTOMER_EMAIL_INVALID
            - CUSTOMER_NEWSLETTER_REQUESTED_MISSING
            - CUSTOMER_PHONE_NUMBER_MISSING
            - CUSTOMER_COUNTRY_INVALID
            - CUSTOMER_ID_EXISTS
            - CUSTOMER_PHONE_NUMBER_INVALID
            - UNEXPECTED_SERVER_ERROR
            - PHONE_NUMBER_MISSING
            - PHONE_NUMBER_INVALID
            - UUID_CONFLICT
            - RESERVATION_STATUS_CONFLICT
            - INVALID_RESERVATION_GUESTS_QUANTITY
            - MENU_MAPPING_FAILED
          type: string
      type: object
    GetReservationEnquiryData:
      properties:
        capacity:
          description: The capacity (people count) of the reservation enquiry
          format: int32
          type: integer
        customerId:
          description: The ID of the customer to which this reservation enquiry belongs
          type: string
        endDateTime:
          description: >-
            The end date time of the reservation enquiry. Format:
            yyyy-MM-ddTHH:mm:ssZ
          type: string
        id:
          description: The agent-dependent unique id of the reservation enquiry
          type: string
        merchantId:
          description: The ID of the merchant at which this reservation enquiry was made
          format: int32
          type: integer
        startDateTime:
          description: >-
            The start date time of the reservation enquiry. Format:
            yyyy-MM-ddTHH:mm:ssZ
          type: string
        status:
          description: >-
            The status of the reservation enquiry which can be one of:  NEW,
            IN_PROGRESS, ACCEPTED or REJECTED
          type: string
      required:
        - customerId
      type: object
    GetReviewDto:
      properties:
        createdAt:
          description: 'The date the review created on. Format: yyyy-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
        customer:
          $ref: '#/components/schemas/CustomerReviewData'
          description: >-
            Data about the customer that made this review. Only in detailed
            view.
        description:
          description: Description associated to this review.
          type: string
        locale:
          description: Locale of the created review. Only in detailed view.
          type: string
        merchantId:
          description: Merchant Id associated to this review. Only in detailed view.
          format: int32
          type: integer
        rating:
          description: 'Rating associated to this review. Possible values: 1 to 6.'
          format: int32
          type: integer
        reservationId:
          description: The reservation identifier this review is created for.
          type: string
        reviewId:
          description: UUID identifying the review.
          format: uuid
          type: string
        status:
          description: >-
            Current review status. Possible values are
            'AVAILABLE_TO_REVIEW','CREATED', 'DENIED', 'PUBLISHED'.
          enum:
            - AVAILABLE_TO_REVIEW
            - CREATED
            - DENIED
            - PUBLISHED
          type: string
      required:
        - rating
        - reviewId
      type: object
    GetReviewsDto:
      properties:
        limit:
          description: >-
            Expected number of reviews that could be retrieved in the next
            pagination request. Can actually be less than the number returned.
            Its value is 0 when it is sure there are no more reviews available
            for pagination using the 'offset' as starting point.
          format: int32
          type: integer
        offset:
          description: >-
            Offset to apply on the next pagination request. Can be higher than
            the number of available reviews.
          format: int32
          type: integer
        reviews:
          description: List of returned reviews.
          items:
            $ref: '#/components/schemas/GetReviewDto'
          type: array
        size:
          description: Number of reviews returned in this object.
          format: int32
          type: integer
      type: object
    ImageDto:
      properties:
        url:
          format: url
          type: string
      type: object
    LinkRelationDto:
      properties:
        href:
          format: url
          type: string
        method:
          type: string
        rel:
          enum:
            - DETAILS
            - WIDGET
            - WIDGET_DETAILS
            - GET_MERCHANT
            - PARENT
            - SELF
            - SETTINGS
            - AVAILABILITY_DAYS
            - AVAILABILITIES
            - CREATE_RESERVATION
            - GET_RESERVATION
            - UPDATE_RESERVATION
            - GET_CUSTOMER_RESERVATION
            - GET_REVIEW
            - PORTAL_PREORDER_FORM
            - RESERVATION_CHECKOUT_PAGE
            - CREDIT_CARD_DETAILS_PAGE
            - CUSTOMER_EDIT_RESERVATION
          type: string
      type: object
    LocationDto:
      properties:
        address:
          $ref: '#/components/schemas/MerchantAddressDto'
        coordinates:
          $ref: '#/components/schemas/CoordinatesDto'
      type: object
    MarketingSettingDto:
      properties:
        marketingSettingStatus:
          enum:
            - ACTIVE
            - INACTIVE
          type: string
        marketingSettingType:
          enum:
            - SMART_OFFERS_AND_DEALS
            - PROMO_CODES
            - RESTAURANT_RECOMMENDATIONS
            - NEWSLETTERS
          type: string
      type: object
    MerchantAddressDto:
      properties:
        city:
          type: string
        country:
          type: string
        district:
          type: string
        number:
          type: string
        street:
          type: string
        zipcode:
          type: string
      type: object
    MerchantAvailabilityDaysDto:
      properties:
        days:
          description: The days that are available for a reservation
          items:
            description: The date when the review was written.
            format: date
            type: string
          type: array
        links:
          description: The links for possible operations related to this entity
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
      type: object
    MerchantAvailabilityDto:
      properties:
        areaIds:
          description: The ids of the areas this availability option can be reserved for.
          items:
            format: int32
            type: integer
          type: array
        dateTime:
          description: 'The date the review created on. Format: yyyy-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
        occupancy:
          description: >-
            The occupancy of this availability option across the restaurant.
            This is an integer number between 0 and 100.
          format: int32
          readOnly: true
          type: integer
        vaultSettingsId:
          description: The id of the Vault Settings applicable on this availability option.
          format: uuid
          type: string
      required:
        - occupancy
      type: object
    MerchantAvailabilityDtoList:
      properties:
        links:
          description: The links related to this entity.
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          readOnly: true
          type: array
        timeSlots:
          description: The availability time slots to reserve.
          items:
            $ref: '#/components/schemas/MerchantAvailabilityDto'
          readOnly: true
          type: array
        vaultSettings:
          description: The credit card vault settings.
          items:
            $ref: '#/components/schemas/MerchantVaultSettingsDto'
          readOnly: true
          type: array
      required:
        - links
      type: object
    MerchantCustomer:
      properties:
        country:
          description: 'The 2 letter ISO country of the customer, e.g. DE'
          type: string
        emailAddress:
          description: The email address of the customer.
          type: string
        firstName:
          description: The first name of the customer. Optional.
          type: string
        id:
          description: >-
            Identifier of the customer for the calling agent. (Agent dependent
            field)
          type: string
        lastName:
          description: The last name of the customer.
          type: string
        locale:
          description: The locale of the customer. E.g. de_DE
          type: string
        phoneNumber:
          description: >-
            The phone number of the customer. The expected format is E164 e.g.
            +4930120765890
          type: string
        subscriptions:
          description: 'The requested subscriptions, e.g. QUANDOO, MERCHANT'
          items:
            $ref: '#/components/schemas/MerchantSubscription'
          type: array
      required:
        - country
        - locale
        - phoneNumber
      type: object
    MerchantCustomerData:
      properties:
        customerRef:
          description: 'Customer reference '
          type: string
        email:
          description: Email of the customer.
          type: string
        firstName:
          description: First name of the customer.
          type: string
        id:
          description: The id of the customer.
          type: string
        lastName:
          description: Last name of the customer.
          type: string
        links:
          description: The links related to this entity.
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
        locale:
          description: Locale of the customer.
          type: string
        marketingFlags:
          description: Marketing flags for customer.
          items:
            $ref: '#/components/schemas/MarketingSettingDto'
          type: array
        mobileNumber:
          description: Mobile phone number of the customer.
          type: string
        phoneNumber:
          description: Fixed line phone number of the customer.
          type: string
        statistics:
          $ref: '#/components/schemas/CustomerStatisticsData'
          description: Statistics about the customer
        subscriptions:
          description: 'The newsletter subscriptions, e.g. QUANDOO, MERCHANT.'
          items:
            $ref: '#/components/schemas/MerchantSubscription'
          type: array
          uniqueItems: true
        title:
          description: Title of the customer.
          type: string
        updatedAt:
          description: 'The date the review created on. Format: yyyy-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
      required:
        - customerRef
        - email
        - firstName
        - id
        - lastName
        - links
        - locale
        - marketingFlags
        - mobileNumber
        - phoneNumber
        - statistics
        - subscriptions
        - title
      type: object
    MerchantDetailsDto:
      properties:
        bookable:
          description: The flag indicates whether the merchant is bookable or not.
          type: boolean
        ccvEnabled:
          description: >-
            If true, credit card information is required when creating a
            reservation.
          type: boolean
        chain:
          $ref: '#/components/schemas/ChainDto'
          description: The chain of the merchant.
        currency:
          description: The currency of the merchant.
          type: string
        documents:
          description: 'The documents this merchant has, requires permission.'
          items:
            $ref: '#/components/schemas/DocumentDto'
          type: array
        id:
          description: The id of the merchant.
          format: int32
          type: integer
        images:
          description: The slider images this merchant has.
          items:
            $ref: '#/components/schemas/ImageDto'
          type: array
        ivrRedirectNumber:
          description: 'The IVR forwarding phone number, requires permission.'
          type: string
        links:
          description: The links related to this entity.
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
        locale:
          description: The locale of the merchant.
          type: string
        location:
          $ref: '#/components/schemas/LocationDto'
          description: The location of the merchant.
        longDescription:
          description: 'Merchant long description, requires permission.'
          type: string
        name:
          description: The name of the merchant.
          type: string
        openingTimes:
          $ref: '#/components/schemas/OpeningTimesDto'
          description: All opening times of the merchant.
        phoneNumber:
          description: The phone number of the merchant.
          type: string
        reviewScore:
          description: The review score of the merchant.
          type: string
        shortDescription:
          description: 'Merchant short description, requires permission.'
          type: string
        tagGroups:
          description: >-
            The tag groups this merchant belongs to, requires permission.
            Without permissions returns only CUISINE and PRICE.
          items:
            $ref: '#/components/schemas/TagGroupDto'
          type: array
        timezone:
          description: The timezone of the merchant.
          type: string
      required:
        - bookable
        - ccvEnabled
        - id
        - links
        - location
        - name
        - openingTimes
        - phoneNumber
        - reviewScore
        - timezone
      type: object
    MerchantDetailsDtoList:
      properties:
        limit:
          format: int32
          type: integer
        merchants:
          description: Merchant details collection.
          items:
            $ref: '#/components/schemas/MerchantDetailsDto'
          type: array
        offset:
          format: int32
          type: integer
        size:
          format: int64
          type: integer
      required:
        - merchants
      type: object
    MerchantReservation:
      properties:
        areaId:
          description: The id of the area this reservation should be in. Optional.
          format: int32
          type: integer
        capacity:
          description: The capacity (people count) of the reservation.
          format: int32
          type: integer
        creditCardVaultSettingsId:
          description: >-
            A credit card vault settings to be used by this reservation.
            Optional.
          format: uuid
          type: string
        dateTime:
          description: 'The date the review created on. Format: yyyy-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
        extraInfo:
          description: Any extra information that the customer likes to provide. Optional.
          type: string
        id:
          description: >-
            The identifier of the reservation for the calling agent
            (Agent-dependent field)
          type: string
        merchantId:
          description: The ID of the merchant at which this reservation will be made.
          format: int32
          type: integer
        promoCode:
          description: >-
            A promotion code which should be used with this reservation.
            Optional.
          type: string
        recurringCardDetailId:
          description: >-
            A customer credit card reference to be used if credit card vault
            should be applied. Optional.
          format: uuid
          type: string
        reservationTags:
          description: A list of reservation tag IDs. Optional.
          items:
            format: int32
            type: integer
          type: array
      required:
        - capacity
        - merchantId
      type: object
    MerchantReservationData:
      properties:
        customer:
          $ref: '#/components/schemas/MerchantCustomer'
          description: The customer data.
        reservation:
          $ref: '#/components/schemas/MerchantReservation'
          description: The reservation data.
        tracking:
          $ref: '#/components/schemas/Tracking'
          description: The tracking data.
      required:
        - customer
        - reservation
        - tracking
      type: object
    MerchantReservationDataList:
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        reservations:
          items:
            $ref: '#/components/schemas/ReservationData'
          type: array
      type: object
    MerchantReservationEnquiry:
      properties:
        capacity:
          description: The capacity (people count) of the reservation enquiry.
          format: int32
          minimum: 1
          type: integer
        endDateTime:
          description: >-
            The end date and time of the potential reservation. Format:
            yyyy-MM-ddTHH:mm:ssZ
          type: string
        id:
          description: >-
            The unique identifier of the reservation enquiry for the calling
            agent (Agent dependent field) or NULL if the agent identifier should
            be created. Optional.
          type: string
        merchantId:
          description: The ID of the merchant at which this reservation will be made.
          format: int32
          type: integer
        message:
          description: A message from the customer.
          maxLength: 5000
          minLength: 0
          type: string
        startDateTime:
          description: >-
            The start date and time of the potential reservation. Format:
            yyyy-MM-ddTHH:mm:ssZ
          type: string
      required:
        - capacity
        - endDateTime
        - id
        - merchantId
        - message
        - startDateTime
      type: object
    MerchantReservationEnquiryData:
      properties:
        customer:
          $ref: '#/components/schemas/MerchantCustomer'
          description: The customer data.
        reservationEnquiry:
          $ref: '#/components/schemas/MerchantReservationEnquiry'
          description: The reservation enquiry data.
        tracking:
          $ref: '#/components/schemas/Tracking'
          description: The tracking data.
      required:
        - customer
        - reservationEnquiry
        - tracking
      type: object
    MerchantReservationSettingsDto:
      properties:
        areaIds:
          description: >-
            List of all the areas defined for the merchant. Each area will
            contain:
          items:
            $ref: '#/components/schemas/AreaDto'
          type: array
        areaSelectionRequired:
          description: >-
            If true, we display available areas in a dropdown when a guest is
            making an online reservation
          type: boolean
        automaticConfirmation:
          description: >-
            If true, the customer will receive an automatic email confirmation
            after he makes a reservation
          type: boolean
        capacities:
          description: Number of guests allowed in a reservation
          items:
            format: int32
            type: integer
          type: array
        ccvEnabled:
          description: >-
            If true, credit card information is required when creating a
            reservation
          type: boolean
        links:
          description: Related links that can be followed based on this response
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
        merchantNewsletterSelectionRequired:
          description: >-
            If true, a separate checkbox is displayed in the checkout for
            newsletter received from the restaurant
          type: boolean
        minimumCapacityForEnquiries:
          description: Minimum number of guests for an enquiry
          format: int32
          type: integer
        onlineReservationInterval:
          description: Time slots displayed for making a reservation
          format: int32
          type: integer
        reservationEnquiryEnabled:
          description: 'If true, the restaurants allows enquiries'
          type: boolean
        specialTerms:
          description: >-
            If true, special terms and conditions of the restaurant need to be
            confirmed upon making an online reservation
          type: string
      type: object
    MerchantSubscription:
      properties:
        id:
          enum:
            - QUANDOO
            - MERCHANT
          type: string
      type: object
    MerchantVaultSettingsDto:
      properties:
        fee:
          description: The fee customer should pay in the case of cancellation.
          readOnly: true
          type: number
        feePercentageForTime:
          additionalProperties:
            format: int32
            type: integer
          description: Fee percentage depending of the time of cancellation.
          type: object
        feeType:
          description: The type of the fee to pay.
          readOnly: true
          type: string
        id:
          description: The id of the vault settings.
          format: uuid
          readOnly: true
          type: string
      required:
        - fee
        - feeType
        - id
      type: object
    MerchantWithRecommendationsDto:
      properties:
        merchant:
          $ref: '#/components/schemas/MerchantDetailsDto'
          description: The merchant that was searched for. Only filled if it is bookable.
        merchantSearchMessage:
          description: >-
            Additional information about the search result:
            MERCHANT_NOT_BOOKABLE if the merchant exists but is not bookable
          enum:
            - MERCHANT_NOT_BOOKABLE
          type: string
        recommendedMerchants:
          $ref: '#/components/schemas/MerchantDetailsDtoList'
          description: Recommendations for similar merchants.
      required:
        - merchant
        - merchantSearchMessage
      type: object
    OpeningTimesDto:
      properties:
        standardOpeningTimes:
          $ref: '#/components/schemas/StandardOpeningTimesDto'
          description: The standard opening times of the merchant.
      required:
        - standardOpeningTimes
      type: object
    ReservationData:
      properties:
        capacity:
          description: The capacity of the reservation.
          format: int32
          type: integer
        customerId:
          description: The public ID of the customer to which this reservation belongs.
          type: string
        extraInfo:
          description: >-
            Extra information that the customer provided for the reservation.
            Optional.
          type: string
        id:
          description: The agent-dependent unique id of the reservation.
          type: string
        links:
          description: The links related to this entity.
          items:
            $ref: '#/components/schemas/LinkRelationDto'
          type: array
        merchantId:
          description: The id of the merchant.
          format: int32
          type: integer
        number:
          description: The id of the reservation on quandoo system.
          format: int32
          type: integer
        promocode:
          description: The promotion code used in this reservation. Optional.
          type: string
        quandooId:
          description: The public id of this reservation on quandoo system.
          format: uuid
          type: string
        reservationNumber:
          description: The long id of this reservation on quandoo system.
          type: string
        reservationTags:
          description: A list of reservation tag IDs.
          items:
            format: int32
            type: integer
          type: array
        status:
          description: The status of the reservation.
          type: string
        updatedAt:
          description: 'The date the review created on. Format: yyyy-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
      required:
        - capacity
        - customerId
        - id
        - links
        - merchantId
        - quandooId
        - status
      type: object
    ReservationDataList:
      properties:
        reservations:
          items:
            $ref: '#/components/schemas/ReservationData'
          type: array
      type: object
    ReservationDetails:
      properties:
        areaId:
          description: The id of the area this reservation should be in. Optional.
          format: int32
          type: integer
        capacity:
          description: The capacity (people count) of the reservation.
          format: int32
          type: integer
        dateTime:
          description: 'The date the review created on. Format: yyyy-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
        extraInfo:
          description: >-
            Additional text information about the reservation. Pass empty string
            to remove it.
          type: string
        reservationTags:
          description: Reservation tag IDs.
          items:
            format: int32
            type: integer
          type: array
        status:
          description: The status of the reservation.
          type: string
      required:
        - capacity
        - status
      type: object
    ReservationEnquiryMessageData:
      properties:
        creationDate:
          description: 'The date the review created on. Format: yyyy-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
        message:
          type: string
        senderType:
          enum:
            - MERCHANT
            - CUSTOMER
          type: string
      type: object
    ReservationEnquiryMessageList:
      properties:
        messages:
          items:
            $ref: '#/components/schemas/ReservationEnquiryMessageData'
          type: array
      type: object
    ReservationTagDto:
      properties:
        id:
          format: int32
          type: integer
        merchantId:
          format: int32
          type: integer
        name:
          type: string
      type: object
    ReservationTagsDto:
      properties:
        reservationTags:
          items:
            $ref: '#/components/schemas/ReservationTagDto'
          type: array
      type: object
    RestCookie:
      properties:
        referenceId:
          description: A reference id to be stored with the reservation. Optional.
          type: string
        tracking:
          description: A tracking string to be stored with the reservation. Optional.
          type: string
      type: object
    ReviewDto:
      properties:
        customer:
          $ref: '#/components/schemas/CustomerDto'
          description: The customer who wrote the review.
        date:
          description: The date when the review was written.
          format: date
          type: string
        description:
          description: The description of the review.
          type: string
        locale:
          type: string
        rating:
          description: 'Possible values: 1 to 6.'
          format: int32
          type: integer
      required:
        - customer
        - date
        - rating
      type: object
    ReviewDtoList:
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        reviews:
          description: Merchant customer review collection.
          items:
            $ref: '#/components/schemas/ReviewDto'
          type: array
        size:
          format: int32
          type: integer
      required:
        - reviews
      type: object
    StandardOpeningTimesDto:
      type: object
    TagGroupDto:
      properties:
        tags:
          items:
            $ref: '#/components/schemas/TranslatedTagDto'
          type: array
        type:
          enum:
            - CUISINE
            - MEAL_TYPE
            - ESTABLISHMENT_TYPE
            - AREA
            - INTERNET
            - FOOD_RELATED
            - ACCESSIBILITY
            - PAYMENT
            - PRICE
            - ATMOSPHERE
            - PARKING
            - EXTRAS
            - GOOD_FOR
            - MENU_DETAILS
          type: string
      type: object
    Tracking:
      properties:
        agent:
          $ref: '#/components/schemas/AgentTracking'
          description: >-
            The id of the agent creating this request and partner references if
            any. Required.
        cookie:
          $ref: '#/components/schemas/RestCookie'
          description: Cookie information to be stored with this reservation. Optional.
      required:
        - agent
      type: object
    TranslatedTagDto:
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
      type: object
    UpdateReservationData:
      properties:
        reservation:
          $ref: '#/components/schemas/ReservationDetails'
          description: The reservation status of the reservation.
      required:
        - reservation
      type: object
    UpdateReservationEnquiryData:
      properties:
        status:
          description: The status of the reservation enquiry
          type: string
      type: object
    UpdateReviewDto:
      properties:
        description:
          description: Description associated to this review.
          type: string
        rating:
          description: 'Rating associated to this review. Possible values: 1 to 6.'
          format: int32
          type: integer
        reviewId:
          description: UUID identifying the review.
          format: uuid
          type: string
      required:
        - reviewId
      type: object
  securitySchemes:
    API_TOKEN:
      in: header
      name: X-Quandoo-AuthToken
      type: apiKey
security:
  - API_TOKEN: []
tags:
  - name: status
  - name: customers
  - name: merchants
  - name: reservation-enquiries
  - name: availabilities
  - name: reservations tags
  - name: reservation-settings
  - name: preorder
  - name: reservations
  - name: reviews
  - name: validations

