{
  "openapi": "3.0.3",
  "info": {
    "title": "PlaceKit API Reference",
    "description": "[PlaceKit](https://placekit.io) is a worldwide geocoding API providing fast and accurate address autocomplete, store locator, and two-way geocoding for your app.\n\nPlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))\n",
    "termsOfService": "https://placekit.io/terms",
    "contact": {
      "name": "API Support",
      "email": "support@placekit.io",
      "url": "https://api.placekit.co"
    },
    "version": "1.4.0",
    "x-jentic-source-url": "https://raw.githubusercontent.com/placekit/api-reference/main/openapi.yml"
  },
  "servers": [
    {
      "url": "https://api.placekit.co"
    }
  ],
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "Geocoding",
      "description": "PlaceKit Geocoding API endpoints is composed of two similar endpoints `/search` and `/reverse`.\\\nAPI clients are simple wrappers on top of this API.\n"
    },
    {
      "name": "Live Patching",
      "description": "PlaceKit Live Patching feature enables users to create a data validation flow to fix data errors or add new addresses to their catalog, chose their validation flow and instantly publish it to their end-users.\n\nA `private` API key is **required** to use Live Patching endpoints.\n"
    },
    {
      "name": "Keys",
      "description": "Handle your API keys programmatically.\n\nA `private` API key is required to use Keys endpoints.\n"
    }
  ],
  "paths": {
    "/search": {
      "post": {
        "summary": "Search for addresses",
        "description": "Performs a forward geocoding search.\n\nIt will return results around `coordinates` (if provided) and the best matching textual relevance.\n\n**It is highly recommended** to set the `countries` parameter with the country you need results from for the best accuracy and revelance possible.\n\nIf your use case allows your users to search in any country, then you should ommit `countries` parameter and let the API defines the user's country by its IP.\n\nTo have the best location accuracy, you should set `coordinates` based on your users' position.\n",
        "operationId": "ForwardGeocoding",
        "tags": [
          "Geocoding"
        ],
        "requestBody": {
          "description": "Request parameters",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/parameters.query"
                  },
                  {
                    "$ref": "#/components/schemas/parameters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "451": {
            "$ref": "#/components/responses/451"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": {
              "$ref": "./code_samples/curl/search.yaml#/source"
            }
          },
          {
            "lang": "go",
            "source": {
              "$ref": "./code_samples/go/search.yaml#/source"
            }
          },
          {
            "lang": "js",
            "source": {
              "$ref": "./code_samples/js/search.yaml#/source"
            }
          },
          {
            "lang": "python",
            "source": {
              "$ref": "./code_samples/python/search.yaml#/source"
            }
          },
          {
            "lang": "ruby",
            "source": {
              "$ref": "./code_samples/ruby/search.yaml#/source"
            }
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/reverse": {
      "post": {
        "summary": "Reverse geocoding",
        "description": "Performs a reverse geocoding search.\n\nIt will return the closest results around `coordinates`.\n\nIf `coordinates` are not provided, it will use the user's IP to approximate its coordinates but results will be less accurate (city level accuracy instead of street level accuracy).\n",
        "operationId": "ReverseGeocoding",
        "tags": [
          "Geocoding"
        ],
        "requestBody": {
          "description": "Request parameters",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/parameters"
                  },
                  {
                    "$ref": "#/components/schemas/parameters.countryByIP"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "451": {
            "$ref": "#/components/responses/451"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": {
              "$ref": "./code_samples/curl/reverse.yaml#/source"
            }
          },
          {
            "lang": "go",
            "source": {
              "$ref": "./code_samples/go/reverse.yaml#/source"
            }
          },
          {
            "lang": "js",
            "source": {
              "$ref": "./code_samples/js/reverse.yaml#/source"
            }
          },
          {
            "lang": "python",
            "source": {
              "$ref": "./code_samples/python/reverse.yaml#/source"
            }
          },
          {
            "lang": "ruby",
            "source": {
              "$ref": "./code_samples/ruby/reverse.yaml#/source"
            }
          }
        ],
        "x-codegen-request-body-name": "payload"
      }
    },
    "/patch/search": {
      "post": {
        "summary": "List patch records",
        "description": "Get all patch records associated to the user.\n\nYou can refine the results by using the same parameters as the regular `/search` endpoint.\n",
        "operationId": "SearchPatches",
        "tags": [
          "Live Patching"
        ],
        "requestBody": {
          "description": "Request parameters (optional)",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/parameters.status"
                  },
                  {
                    "$ref": "#/components/schemas/parameters.query"
                  },
                  {
                    "$ref": "#/components/schemas/parameters"
                  },
                  {
                    "$ref": "#/components/schemas/parameters.offset"
                  }
                ]
              },
              "examples": {
                "status": {
                  "summary": "Filter by status",
                  "description": "Select all `pending` patch records",
                  "value": {
                    "status": "pending"
                  }
                },
                "query": {
                  "summary": "Advanced filtering",
                  "value": {
                    "status": "approved",
                    "query": "London",
                    "types": [
                      "city"
                    ],
                    "countries": [
                      "fr",
                      "gb"
                    ],
                    "maxResults": 20
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200.patch.search"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/patch": {
      "post": {
        "summary": "Create a new patch record",
        "description": "To create a new patch record, you must provide all the required properties.\n",
        "operationId": "CreatePatch",
        "tags": [
          "Live Patching"
        ],
        "requestBody": {
          "description": "Request parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "record"
                ],
                "properties": {
                  "record": {
                    "required": [
                      "name",
                      "city",
                      "county",
                      "administrative",
                      "country",
                      "countrycode",
                      "zipcode",
                      "population",
                      "coordinates",
                      "type"
                    ],
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/record"
                      }
                    ]
                  },
                  "status": {
                    "type": "string",
                    "default": "pending",
                    "description": "Status of the current patch record.\\\n`pending`: the admin will need to validate the data. Once approved, the patch record will be avaiable to end-users.\\\n`approved`: the patch record will be immediately available to end-users.\n",
                    "example": "pending",
                    "enum": [
                      "pending",
                      "approved"
                    ]
                  },
                  "language": {
                    "type": "string",
                    "description": "[Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\\\nSpecify the language in which the patch record is written.\n",
                    "example": "en"
                  }
                }
              },
              "examples": {
                "datafix": {
                  "summary": "Create a new patch record",
                  "description": "Create a new patch record",
                  "value": {
                    "record": {
                      "name": "Avenue New Road",
                      "city": "Rome",
                      "county": "Roma Capitale",
                      "administrative": "Lazio",
                      "country": "Italy",
                      "countrycode": "it",
                      "zipcode": [
                        "00137"
                      ],
                      "population": 2776362,
                      "coordinates": "41.9518005, 12.5644911",
                      "type": "street"
                    },
                    "status": "pending"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200.patch"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "put": {
        "summary": "Fix an existing record",
        "description": "To fix an existing record, you must provide the exact record you want to fix as the `origin` object.\\\nYou must also provide at least one of the property you want to modify in `update`.\n\nIf you want your patch record to be immediately available to your end-users, set the property `status` to `approved`.\\\nOtherwise, the patch record will be marked as `pending` and will require the app owner to validate it via the Dashboard or the API.\n",
        "operationId": "UpsertPatch",
        "tags": [
          "Live Patching"
        ],
        "requestBody": {
          "description": "Request parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "origin",
                  "update"
                ],
                "properties": {
                  "origin": {
                    "required": [
                      "name",
                      "city",
                      "county",
                      "administrative",
                      "country",
                      "countrycode",
                      "zipcode",
                      "population",
                      "coordinates",
                      "type"
                    ],
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/record"
                      }
                    ]
                  },
                  "update": {
                    "description": "At least one property is necessary.",
                    "minProperties": 1,
                    "$ref": "#/components/schemas/record"
                  },
                  "status": {
                    "type": "string",
                    "default": "pending",
                    "description": "Status of the current patch record.\\\n`pending`: the admin will need to validate the data. Once approved, the patch record will be avaiable to end-users.\\\n`approved`: the patch record will be immediately available to end-users.\n",
                    "example": "pending",
                    "enum": [
                      "pending",
                      "approved"
                    ]
                  },
                  "language": {
                    "type": "string",
                    "description": "[Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\\\nSpecify the language in which the patch record is written.\n",
                    "example": "en"
                  }
                }
              },
              "examples": {
                "datafix": {
                  "summary": "Edit a record",
                  "description": "Edit a record",
                  "value": {
                    "origin": {
                      "name": "Avenue des Champs \u00c9lys\u00e9es",
                      "city": "Paris 8e Arrondissement",
                      "county": "Paris",
                      "administrative": "\u00cele-de-France",
                      "country": "France",
                      "countrycode": "fr",
                      "zipcode": [
                        "75008"
                      ],
                      "population": 2220445,
                      "coordinates": "48.871086, 2.3036339",
                      "type": "street"
                    },
                    "update": {
                      "name": "rue des Nouveaux Champs \u00c9lys\u00e9es",
                      "zipcode": [
                        "75020"
                      ]
                    },
                    "status": "pending"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200.patch"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "The provided `origin` record could not be found"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/patch/{id}": {
      "get": {
        "summary": "Get a patch record",
        "operationId": "GetPatch",
        "tags": [
          "Live Patching"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/patch.id"
          },
          {
            "$ref": "#/components/parameters/patch.language"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200.patch"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "The provided patch record `id` could not be found"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "patch": {
        "summary": "Edit a patch record",
        "operationId": "UpdatePatch",
        "tags": [
          "Live Patching"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/patch.id"
          }
        ],
        "requestBody": {
          "description": "Request parameters",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update": {
                    "description": "At least one property is necessary.",
                    "minProperties": 1,
                    "$ref": "#/components/schemas/record"
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of the current data fix.\\\n`pending`: the admin will need to validate the data. Once approved, the patch record will be avaiable to end-users.\\\n`approved`: the patch record will be immediately available to end-users.\n",
                    "example": "pending",
                    "enum": [
                      "pending",
                      "approved"
                    ]
                  },
                  "language": {
                    "type": "string",
                    "description": "[Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\\\nSpecify the language in which the patch record is written.\n",
                    "example": "en"
                  }
                }
              },
              "examples": {
                "status": {
                  "summary": "Update patch record status",
                  "value": {
                    "status": "approved"
                  }
                },
                "datafix": {
                  "summary": "Update patch record property",
                  "value": {
                    "update": {
                      "name": "Rue des Nouveaux Champs \u00c9lys\u00e9es"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "The provided patch record `id` could not be found"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "delete": {
        "summary": "Delete a patch record",
        "operationId": "DeletePatch",
        "tags": [
          "Live Patching"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/patch.id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "The provided patch record `id` could not be found"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/patch/{id}/language/{language}": {
      "delete": {
        "summary": "Delete a patch record translation",
        "operationId": "DeletePatchLanguage",
        "tags": [
          "Live Patching"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/patch.id"
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "[Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\\\nDelete patch record language translation. There must be at least another translation available.\n",
            "schema": {
              "type": "string",
              "format": "ISO-639-1"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "The provided patch record `id` could not be found"
          },
          "409": {
            "description": "Deletion impossible. There must be at least another translation available"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/keys": {
      "get": {
        "summary": "List API keys",
        "description": "Get all API keys associated to the current key's app.",
        "operationId": "GetKeys",
        "tags": [
          "Keys"
        ],
        "responses": {
          "200": {
            "description": "Key operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/key"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "post": {
        "summary": "Create an API key",
        "description": "Get all API keys associated to the current key's app.",
        "operationId": "CreateKey",
        "tags": [
          "Keys"
        ],
        "requestBody": {
          "description": "Request parameters",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "default": "public",
                    "description": "Public API keys are <b>read-only</b> and are expected to be exposed to the browser.\\\nA `public` API key can only perform Geocoding operations.\\\nIt is <b>highly recommended</b> to set `domains` when a `public` API key is in use.\n\nPrivate API keys are <b>read and write</b> and are meant to be used for admin use.\\\nA `private` API key can perform all operations.\n",
                    "enum": [
                      "public",
                      "private"
                    ]
                  },
                  "domains": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                      "type": "string",
                      "format": "FQDN | IPv4 | IPv6 | localhost"
                    },
                    "description": "Allow list of domains or IPs from which the requests to the API are allowed. `localhost` and wildcard subdomains are supported.",
                    "example": "['dev.domain.com', '82.123.239.43', '*.domain.io', 'localhost']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200.key"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/keys/{id}": {
      "get": {
        "summary": "Get an API key",
        "operationId": "GetKey",
        "tags": [
          "Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/key.id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200.key"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "patch": {
        "summary": "Update API key domains",
        "operationId": "UpdateKey",
        "tags": [
          "Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/key.id"
          }
        ],
        "requestBody": {
          "description": "Request parameters",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domains": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                      "type": "string",
                      "format": "FQDN | IPv4 | IPv6 | localhost"
                    },
                    "description": "Allow list of domains or IPs from which the requests to the API are allowed. `localhost` and wildcard subdomains are supported.",
                    "example": "['dev.domain.com', '82.123.239.43', '*.domain.io', 'localhost']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200.key"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      },
      "delete": {
        "summary": "Delete an API key",
        "operationId": "DeleteKey",
        "tags": [
          "Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/key.id"
          }
        ],
        "responses": {
          "200": {
            "description": "API key deleted permanently."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "patch.id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Patch record unique identifier",
        "schema": {
          "type": "string",
          "format": "md5"
        }
      },
      "patch.language": {
        "name": "language",
        "in": "query",
        "required": false,
        "description": "[Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\\\nDefault results are in their original language.\\\nBy setting this parameter, you can change the language of the record, _if_ the translation is available.\n",
        "schema": {
          "type": "string",
          "format": "ISO-639-1"
        }
      },
      "key.id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Key unique identifier",
        "schema": {
          "type": "string",
          "example": "cln0clovg0001xpeh5oxv9tfs"
        }
      }
    },
    "schemas": {
      "parameters": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "description": "Array of [two-letter ISO 3166-1 alpha-2 country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\\nLimit the results to given countries.\\\nSelect only one country for the best results.\\\nIf not set, the API automatically selects the user's country defined by its IP.\n",
            "example": [
              "fr"
            ],
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string",
            "description": "[Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\\\nDefault results are in their original language.\\\nBy setting this parameter, you can change the language of the results, _if_ the translation is available.\n",
            "example": "en"
          },
          "types": {
            "type": "array",
            "description": "Select the types of record to return.\\\nPrepend with `-` to omit a type.\\\nReturns all types by default.\n",
            "items": {
              "$ref": "#/components/schemas/types"
            }
          },
          "maxResults": {
            "type": "integer",
            "description": "Maximum number of results to return.",
            "default": 5,
            "minimum": 1,
            "maximum": 20
          },
          "coordinates": {
            "type": "string",
            "description": "GPS coordinates latitude and longitude.\\\nUsed to improve relevancy of results around the given area.\n",
            "example": "48.873662, 2.295063"
          },
          "countryByIP": {
            "deprecated": true,
            "type": "boolean",
            "default": false,
            "description": "Automatically select the country to search in via the user IP's detected location.\\\nReturned results will be coming from the user's country's IP.\\\nIf set to `true`, the parameter `countries` acts as a fallback.\n"
          }
        }
      },
      "parameters.countryByIP": {
        "type": "object",
        "deprecated": true,
        "properties": {
          "countryByIP": {
            "deprecated": true,
            "type": "boolean",
            "default": true,
            "description": "Automatically select the country to search in via the user IP's detected location.\\\nReturned results will be coming from the user's country's IP.\\\nIf set to `true`, the parameter `countries` acts as a fallback.\n"
          }
        }
      },
      "parameters.offset": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Get paginated results starting from the offset.",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "parameters.status": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Select patch records with the corresponding status.",
            "example": "approved",
            "enum": [
              "pending",
              "approved"
            ]
          }
        }
      },
      "parameters.query": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query terms.",
            "example": "42 avenue Champs Elysees Paris",
            "default": ""
          }
        }
      },
      "record": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the current record.",
            "example": "42 Avenue des Champs \u00c9lys\u00e9es"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Paris 8e Arrondissement"
          },
          "county": {
            "type": "string",
            "description": "County name (department).",
            "example": "Paris"
          },
          "administrative": {
            "type": "string",
            "description": "Administrative name (region).",
            "example": "\u00cele-de-France"
          },
          "country": {
            "type": "string",
            "description": "Country name.",
            "example": "France"
          },
          "administrativecode": {
            "type": "string",
            "description": "[ISO 3166-2 administrative code](https://en.wikipedia.org/wiki/ISO_3166-2) (available in CA, ES, IE, IT, US).\n",
            "example": "CA"
          },
          "citycode": {
            "type": "string",
            "description": "INSEE city code (only available for France cities).",
            "example": "75108"
          },
          "countrycode": {
            "type": "string",
            "description": "[Two-letter ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n",
            "example": "fr"
          },
          "countycode": {
            "type": "string",
            "description": "[Two-letter ISO 3166-2 county code](https://en.wikipedia.org/wiki/ISO_3166-2) (available in FR and IT).\n",
            "example": "75"
          },
          "zipcode": {
            "type": "array",
            "description": "Postcodes associated with the record.",
            "example": [
              "75008"
            ],
            "items": {
              "type": "string"
            }
          },
          "population": {
            "type": "integer",
            "description": "Population number of the record city.",
            "example": 2220445
          },
          "lat": {
            "deprecated": true,
            "type": "number",
            "description": "Latitude value between `-90` and `90`.\\\n**Use `coordinates` instead.**\n",
            "example": 48.871086
          },
          "lng": {
            "deprecated": true,
            "type": "number",
            "description": "Longitude value between `-180` and `180`.\\\n**Use `coordinates` instead.**\n",
            "example": 2.3036339
          },
          "coordinates": {
            "type": "string",
            "description": "GPS coordinates latitude and longitude of the current record.",
            "example": "48.871086, 2.3036339"
          },
          "type": {
            "type": "string",
            "description": "Type of the record.",
            "example": "street",
            "enum": [
              "administrative",
              "airport",
              "bus",
              "city",
              "country",
              "county",
              "street",
              "tourism",
              "townhall",
              "train"
            ]
          }
        }
      },
      "key": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Key identifier.",
            "example": "cln0clovg0001xpeh5oxv9tfs"
          },
          "token": {
            "type": "string",
            "description": "API Key used to perform operations on the API.\\\nSet this key in the request header `x-placekit-api-key`.\n",
            "example": "pk_OGRVIUTnuxFEJUXNECjFrZ6sdVovGz1ojygkbzGXcbM="
          },
          "appId": {
            "type": "string",
            "description": "App ID associated with this API key.",
            "example": "ULIMBXTYDH"
          },
          "role": {
            "type": "string",
            "description": "Public API keys are <b>read-only</b> and are expected to be exposed to the browser.\\\nA `public` API key can only perform Geocoding operations.\\\nIt is <b>highly recommended</b> to set `domains` when a `public` API key is in use.\n\nPrivate API keys are <b>read and write</b> and are meant to be used for admin use.\\\nA `private` API key can perform all operations.\n",
            "enum": [
              "public",
              "private"
            ]
          },
          "domains": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "format": "FQDN | IPv4 | IPv6 | localhost"
            },
            "description": "Allow list of domains or IPs from which the requests to the API are allowed. `localhost` and wildcard subdomains are supported.",
            "example": "['dev.domain.com', '82.123.239.43', '*.domain.io', 'localhost']"
          },
          "createdAt": {
            "type": "string",
            "format": "timestamp",
            "description": "Timestamp when the key was created.",
            "example": 