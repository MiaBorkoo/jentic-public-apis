{
  "openapi": "3.0.0",
  "info": {
    "title": "ContainerRegistryManagementClient",
    "version": "2017-10-01",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/stable/2017-10-01/containerregistry.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/providers/Microsoft.ContainerRegistry/operations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Operation"
        ],
        "description": "Lists all of the available Azure Container Registry REST API operations.",
        "operationId": "Operations_List",
        "x-ms-examples": {
          "OperationList": {
            "$ref": "./examples/OperationList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryNameStatus"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Operation"
        ],
        "description": "Checks whether the container registry name is available for use. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.",
        "operationId": "Registries_CheckNameAvailability",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryNameCheckRequest"
              }
            }
          },
          "description": "The object containing information for the availability request.",
          "required": true
        },
        "x-ms-examples": {
          "RegistryCheckNameAvailable": {
            "$ref": "./examples/RegistryCheckNameAvailable.json"
          },
          "RegistryCheckNameNotAvailable": {
            "$ref": "./examples/RegistryCheckNameNotAvailable.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Lists all the container registries under the specified subscription.",
        "operationId": "Registries_List",
        "x-ms-examples": {
          "RegistryList": {
            "$ref": "./examples/RegistryList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Lists all the container registries under the specified resource group.",
        "operationId": "Registries_ListByResourceGroup",
        "x-ms-examples": {
          "RegistryListByResourceGroup": {
            "$ref": "./examples/RegistryListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The container registry does not exist in the subscription."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Deletes a container registry.",
        "operationId": "Registries_Delete",
        "x-ms-examples": {
          "RegistryDelete": {
            "$ref": "./examples/RegistryDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Gets the properties of the specified container registry.",
        "operationId": "Registries_Get",
        "x-ms-examples": {
          "RegistryGet": {
            "$ref": "./examples/RegistryGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Updates a container registry with the specified parameters.",
        "operationId": "Registries_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryUpdateParameters"
              }
            }
          },
          "description": "The parameters for updating a container registry.",
          "required": true
        },
        "x-ms-examples": {
          "RegistryUpdate": {
            "$ref": "./examples/RegistryUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Creates a container registry with the specified parameters.",
        "operationId": "Registries_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          },
          "description": "The parameters for creating a container registry.",
          "required": true
        },
        "x-ms-examples": {
          "RegistryCreate": {
            "$ref": "./examples/RegistryCreate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the operation has completed successfully."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Copies an image to this container registry from the specified container registry.",
        "operationId": "Registries_ImportImage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportImageParameters"
              }
            }
          },
          "description": "The parameters specifying the image to copy and the source container registry.",
          "required": true
        },
        "x-ms-examples": {
          "ImportImageByManifestDigest": {
            "$ref": "./examples/ImportImageByManifestDigest.json"
          },
          "ImportImageByTag": {
            "$ref": "./examples/ImportImageByTag.json"
          },
          "ImportImageFromPublicRegistry": {
            "$ref": "./examples/ImportImageFromPublicRegistry.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryListCredentialsResult"
                }
              }
            },
            "description": "The request was successful; the list of credentials retrieved and returned successfully."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Lists the login credentials for the specified container registry.",
        "operationId": "Registries_ListCredentials",
        "x-ms-examples": {
          "RegistryListCredentials": {
            "$ref": "./examples/RegistryListCredentials.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listPolicies": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryPolicies"
                }
              }
            },
            "description": "The request was successful; the registry policies were retrieved and returned successfully."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Lists the policies for the specified container registry.",
        "operationId": "Registries_ListPolicies",
        "x-ms-examples": {
          "RegistryListPolicies": {
            "$ref": "./examples/RegistryListPolicies.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryUsageListResult"
                }
              }
            },
            "description": "The request was successful; the registry usages retrieved and returned successfully."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Gets the quota usages for the specified container registry.",
        "operationId": "Registries_ListUsages",
        "x-ms-examples": {
          "RegistryListUsages": {
            "$ref": "./examples/RegistryListUsages.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryListCredentialsResult"
                }
              }
            },
            "description": "The request was successful; the specified credential regenerated successfully."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Regenerates one of the login credentials for the specified container registry.",
        "operationId": "Registries_RegenerateCredential",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegenerateCredentialParameters"
              }
            }
          },
          "description": "Specifies name of the password which should be regenerated -- password or password2.",
          "required": true
        },
        "x-ms-examples": {
          "RegistryRegenerateCredential": {
            "$ref": "./examples/RegistryRegenerateCredential.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicationListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Replications"
        ],
        "description": "Lists all the replications for the specified container registry.",
        "operationId": "Replications_List",
        "x-ms-examples": {
          "ReplicationList": {
            "$ref": "./examples/ReplicationList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ReplicationNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The replication does not exist in the subscription."
          }
        },
        "tags": [
          "Replications"
        ],
        "description": "Deletes a replication from a container registry.",
        "operationId": "Replications_Delete",
        "x-ms-examples": {
          "ReplicationDelete": {
            "$ref": "./examples/ReplicationDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ReplicationNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Replication"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Replications"
        ],
        "description": "Gets the properties of the specified replication.",
        "operationId": "Replications_Get",
        "x-ms-examples": {
          "ReplicationGet": {
            "$ref": "./examples/ReplicationGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ReplicationNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Replication"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Replication"
                }
              }
            },
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "tags": [
          "Replications"
        ],
        "description": "Updates a replication for a container registry with the specified parameters.",
        "operationId": "Replications_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplicationUpdateParameters"
              }
            }
          },
          "description": "The parameters for updating a replication.",
          "required": true
        },
        "x-ms-examples": {
          "ReplicationUpdate": {
            "$ref": "./examples/ReplicationUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ReplicationNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Replication"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Replication"
                }
              }
            },
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "tags": [
          "Replications"
        ],
        "description": "Creates a replication for a container registry with the specified parameters.",
        "operationId": "Replications_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Replication"
              }
            }
          },
          "description": "The parameters for creating a replication.",
          "required": true
        },
        "x-ms-examples": {
          "ReplicationCreate": {
            "$ref": "./examples/ReplicationCreate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/updatePolicies": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryPolicies"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Updates the policies for the specified container registry.",
        "operationId": "Registries_UpdatePolicies",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryPolicies"
              }
            }
          },
          "description": "The parameters for updating policies of a container registry.",
          "required": true
        },
        "x-ms-examples": {
          "RegistryUpdatePolicies": {
            "$ref": "./examples/RegistryUpdatePolicies.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Lists all the webhooks for the specified container registry.",
        "operationId": "Webhooks_List",
        "x-ms-examples": {
          "WebhookList": {
            "$ref": "./examples/WebhookList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously."
          },
          "204": {
            "description": "The webhook does not exist in the subscription."
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Deletes a webhook from a container registry.",
        "operationId": "Webhooks_Delete",
        "x-ms-examples": {
          "WebhookDelete": {
            "$ref": "./examples/WebhookDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Gets the properties of the specified webhook.",
        "operationId": "Webhooks_Get",
        "x-ms-examples": {
          "WebhookGet": {
            "$ref": "./examples/WebhookGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Updates a webhook with the specified parameters.",
        "operationId": "Webhooks_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookUpdateParameters"
              }
            }
          },
          "description": "The parameters for updating a webhook.",
          "required": true
        },
        "x-ms-examples": {
          "WebhookUpdate": {
            "$ref": "./examples/WebhookUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "The request was successful; the operation will complete asynchronously."
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Creates a webhook for a container registry with the specified parameters.",
        "operationId": "Webhooks_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreateParameters"
              }
            }
          },
          "description": "The parameters for creating a webhook.",
          "required": true
        },
        "x-ms-examples": {
          "WebhookCreate": {
            "$ref": "./examples/WebhookCreate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallbackConfig"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Gets the configuration of service URI and custom headers for the webhook.",
        "operationId": "Webhooks_GetCallbackConfig",
        "x-ms-examples": {
          "WebhookGetCallbackConfig": {
            "$ref": "./examples/WebhookGetCallbackConfig.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Lists recent events for the specified webhook.",
        "operationId": "Webhooks_ListEvents",
        "x-ms-examples": {
          "WebhookListEvents": {
            "$ref": "./examples/WebhookListEvents.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventInfo"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Triggers a ping event to be sent to the webhook.",
        "operationId": "Webhooks_Ping",
        "x-ms-examples": {
          "WebhookPing": {
            "$ref": "./examples/WebhookPing.json"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "ApiVersionParameter": {
        "description": "The client API version.",
        "in": "query",
        "name": "api-version",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RegistryNameParameter": {
        "description": "The name of the container registry.",
        "in": "path",
        "name": "registryName",
        "required": true,
        "schema": {
          "maxLength": 50,
          "minLength": 5,
          "pattern": "^[a-zA-Z0-9]*$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "ReplicationNameParameter": {
        "description": "The name of the replication.",
        "in": "path",
        "name": "replicationName",
        "required": true,
        "schema": {
          "maxLength": 50,
          "minLength": 5,
          "pattern": "^[a-zA-Z0-9]*$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "ResourceGroupParameter": {
        "description": "The name of the resource group to which the container registry belongs.",
        "in": "path",
        "name": "resourceGroupName",
        "required": true,
        "schema": {
          "minLength": 1,
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "SubscriptionIdParameter": {
        "description": "The Microsoft Azure subscription ID.",
        "in": "path",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "WebhookNameParameter": {
        "description": "The name of the webhook.",
        "in": "path",
        "name": "webhookName",
        "required": true,
        "schema": {
          "maxLength": 50,
          "minLength": 5,
          "pattern": "^[a-zA-Z0-9]*$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "schemas": {
      "Actor": {
        "description": "The agent that initiated the event. For most situations, this could be from the authorization context of the request.",
        "properties": {
          "name": {
            "description": "The subject or username associated with the request context that generated the event.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CallbackConfig": {
        "description": "The configuration of service URI and custom headers for the webhook.",
        "properties": {
          "customHeaders": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom headers that will be added to the webhook notifications.",
            "type": "object"
          },
          "serviceUri": {
            "description": "The service URI for the webhook to post notifications.",
            "type": "string"
          }
        },
        "required": [
          "serviceUri"
        ],
        "type": "object"
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventInfo"
          }
        ],
        "description": "The event for a webhook.",
        "properties": {
          "eventRequestMessage": {
            "$ref": "#/components/schemas/EventRequestMessage",
            "description": "The event request message sent to the service URI."
          },
          "eventResponseMessage": {
            "$ref": "#/components/schemas/EventResponseMessage",
            "description": "The event response message received from the service URI."
          }
        },
        "type": "object"
      },
      "EventContent": {
        "description": "The content of the event request message.",
        "properties": {
          "action": {
            "description": "The action that encompasses the provided event.",
            "type": "string"
          },
          "actor": {
            "$ref": "#/components/schemas/Actor",
            "description": "The agent that initiated the event. For most situations, this could be from the authorization context of the request."
          },
          "id": {
            "description": "The event ID.",
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/Request",
            "description": "The request that generated the event."
          },
          "source": {
            "$ref": "#/components/schemas/Source",
            "description": "The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it."
          },
          "target": {
            "$ref": "#/components/schemas/Target",
            "description": "The target of the event."
          },
          "timestamp": {
            "description": "The time at which the event occurred.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventInfo": {
        "description": "The basic information of an event.",
        "properties": {
          "id": {
            "description": "The event ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventListResult": {
        "description": "The result of a request to list events for a webhook.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next list of events.",
            "type": "string"
          },
          "value": {
            "description": "The list of events. Since this list may be incomplete, the nextLink field should be used to request the next list of events.",
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventRequestMessage": {
        "description": "The event request message sent to the service URI.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/EventContent",
            "description": "The content of the event request message."
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The headers of the event request message.",
            "type": "object"
          },
          "method": {
            "description": "The HTTP method used to send the event request message.",
            "type": "string"
          },
          "requestUri": {
            "description": "The URI used to send the event request message.",
            "type": "string"
          },
          "version": {
            "description": "The HTTP message version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventResponseMessage": {
        "description": "The event response message received from the service URI.",
        "properties": {
          "content": {
            "description": "The content of the event response message.",
            "type": "string"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The headers of the event response message.",
            "type": "object"
          },
          "reasonPhrase": {
            "description": "The reason phrase of the event response message.",
            "type": "string"
          },
          "statusCode": {
            "description": "The status code of the event response message.",
            "type": "string"
          },
          "version": {
            "description": "The HTTP message version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IPRule": {
        "description": "IP rule with specific IP or IP range in CIDR format.",
        "properties": {
          "action": {
            "default": "Allow",
            "description": "The action of IP ACL rule.",
            "enum": [
              "Allow"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "Action"
            }
          },
          "value": {
            "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
            "type": "string",
            "x-ms-client-name": "IPAddressOrRange"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "ImportImageParameters": {
        "properties": {
          "mode": {
            "default": "NoForce",
            "description": "When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation before any copying begins.",
            "enum": [
              "NoForce",
              "Force"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ImportMode"
            }
          },
          "source": {
            "$ref": "#/components/schemas/ImportSource",
            "description": "The source of the image."
          },
          "targetTags": {
            "description": "List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also omitted).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "untaggedTargetRepositories": {
            "description": "List of strings of repository names to do a manifest only copy. No tag will be created.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "source"
        ],
        "type": "object"
      },
      "ImportSource": {
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/ImportSourceCredentials",
            "description": "Credentials used when importing from a registry uri."
          },
          "registryUri": {
            "description": "The address of the source registry (e.g. 'mcr.microsoft.com').",
            "type": "string"
          },
          "resourceId": {
            "description": "The resource identifier of the source Azure Container Registry.",
            "type": "string"
          },
          "sourceImage": {
            "description": "Repository name of the source image.\r\nSpecify an image by repository ('hello-world'). This will use the 'latest' tag.\r\nSpecify an image by tag ('hello-world:latest').\r\nSpecify an image by sha256-based manifest digest ('hello-world@sha256:abc123').",
            "type": "string"
          }
        },
        "required": [
          "sourceImage"
        ],
        "type": "object"
      },
      "ImportSourceCredentials": {
        "properties": {
          "password": {
            "description": "The password used to authenticate with the source registry.",
            "type": "string"
          },
          "username": {
            "description": "The username to authenticate with the source registry.",
            "type": "string"
          }
        },
        "required": [
          "password"
        ],
        "type": "object"
      },
      "NetworkRuleSet": {
        "description": "The network rule set for a container registry.",
        "properties": {
          "defaultAction": {
            "default": "Allow",
            "description": "The default action of allow or deny when no other rules match.",
            "enum": [
              "Allow",
              "Deny"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "DefaultAction"
            }
          },
          "ipRules": {
            "description": "The IP ACL rules.",
            "items": {
              "$ref": "#/components/schemas/IPRule"
            },
            "type": "array"
          },
          "virtualNetworkRules": {
            "description": "The virtual network rules.",
            "items": {
              "$ref": "#/components/schemas/VirtualNetworkRule"
            },
            "type": "array"
          }
        },
        "required": [
          "defaultAction"
        ],
        "type": "object"
      },
      "OperationDefinition": {
        "description": "The definition of a container registry operation.",
        "properties": {
          "display": {
            "$ref": "#/components/schemas/OperationDisplayDefinition",
            "description": "The display information for the container registry operation."
          },
          "name": {
            "description": "Operation name: {provider}/{resource}/{operation}.",
            "type": "string"
          },
          "origin": {
            "description": "The origin information of the container registry operation.",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/OperationPropertiesDefinition",
            "description": "The properties information for the container registry operation.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "OperationDisplayDefinition": {
        "description": "The display information for a container registry operation.",
        "properties": {
          "description": {
            "description": "The description for the operation.",
            "type": "string"
          },
          "operation": {
            "description": "The operation that users can perform.",
            "type": "string"
          },
          "provider": {
            "description": "The resource provider name: Microsoft.ContainerRegistry.",
            "type": "string"
          },
          "resource": {
            "description": "The resource on which the operation is performed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OperationListResult": {
        "description": "The result of a request to list container registry operations.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next list of container registry operations.",
            "type": "string"
          },
          "value": {
            "description": "The list of container registry operations. Since this list may be incomplete, the nextLink field should be used to request the next list of operations.",
            "items": {
              "$ref": "#/components/schemas/OperationDefinition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OperationMetricSpecificationDefinition": {
        "description": "The definition of Azure Monitoring metric.",
        "properties": {
          "aggregationType": {
            "description": "Metric aggregation type.",
            "type": "string"
          },
          "displayDescription": {
            "description": "Metric description.",
            "type": "string"
          },
          "displayName": {
            "description": "Metric display name.",
            "type": "string"
          },
          "internalMetricName": {
            "description": "Internal metric name.",
            "type": "string"
          },
          "name": {
            "description": "Metric name.",
            "type": "string"
          },
          "unit": {
            "description": "Metric unit.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OperationPropertiesDefinition": {
        "description": "The definition of Azure Monitoring properties.",
        "properties": {
          "serviceSpecification": {
            "$ref": "#/components/schemas/OperationServiceSpecificationDefinition",
            "description": "The definition of Azure Monitoring service."
          }
        },
        "type": "object"
      },
      "OperationServiceSpecificationDefinition": {
        "description": "The definition of Azure Monitoring metrics list.",
        "properties": {
          "metricSpecifications": {
            "description": "A list of Azure Monitoring metrics definition.",
            "items": {
              "$ref": "#/components/schemas/OperationMetricSpecificationDefinition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "QuarantinePolicy": {
        "description": "An object that represents quarantine policy for a container registry.",
        "properties": {
          "status": {
            "description": "The value that indicates whether the policy is enabled or not.",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PolicyStatus"
            }
          }
        },
        "type": "object"
      },
      "RegenerateCredentialParameters": {
        "description": "The parameters used to regenerate the login credential.",
        "properties": {
          "name": {
            "description": "Specifies name of the password which should be regenerated -- password or password2.",
            "enum": [
              "password",
              "password2"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "PasswordName"
            }
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Registry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "An object that represents a container registry.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RegistryProperties",
            "description": "The properties of the container registry.",
            "x-ms-client-flatten": true
          },
          "sku": {
            "$ref": "#/components/schemas/Sku",
            "description": "The SKU of the container registry."
          }
        },
        "required": [
          "sku"
        ],
        "type": "object"
      },
      "RegistryListCredentialsResult": {
        "description": "The response from the ListCredentials operation.",
        "properties": {
          "passwords": {
            "description": "The list of passwords for a container registry.",
            "items": {
              "$ref": "#/components/schemas/RegistryPassword"
            },
            "type": "array"
          },
          "username": {
            "description": "The username for a container registry.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegistryListResult": {
        "description": "The result of a request to list container registries.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next list of container registries.",
            "type": "string"
          },
          "value": {
            "description": "The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries.",
            "items": {
              "$ref": "#/components/schemas/Registry"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RegistryNameCheckRequest": {
        "description": "A request to check whether a container registry name is available.",
        "properties": {
          "name": {
            "description": "The name of the container registry.",
            "maxLength": 50,
            "minLength": 5,
            "pattern": "^[a-zA-Z0-9]*$",
            "type": "string"
          },
          "type": {
            "description": "The resource type of the container registry. This field must be set to 'Microsoft.ContainerRegistry/registries'.",
            "enum": [
              "Microsoft.ContainerRegistry/registries"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ContainerRegistryResourceType"
            }
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "RegistryNameStatus": {
        "description": "The result of a request to check the availability of a container registry name.",
        "properties": {
          "message": {
            "description": "If any, the error message that provides more detail for the reason that the name is not available.",
            "type": "string"
          },
          "nameAvailable": {
            "description": "The value that indicates whether the name is available.",
            "type": "boolean"
          },
          "reason": {
            "description": "If any, the reason that the name is not available.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegistryPassword": {
        "description": "The login password for the container registry.",
        "properties": {
          "name": {
            "description": "The password name.",
            "enum": [
              "password",
              "password2"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "PasswordName"
            }
          },
          "value": {
            "description": "The password value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegistryPolicies": {
        "description": "An object that represents policies for a container registry.",
        "properties": {
          "quarantinePolicy": {
            "$ref": "#/components/schemas/QuarantinePolicy",
            "description": "An object that represents quarantine policy for a container registry."
          },
          "trustPolicy": {
            "$ref": "#/components/schemas/TrustPolicy",
            "description": "An object that represents content trust policy for a container registry."
          }
        },
        "type": "object"
      },
      "RegistryProperties": {
        "description": "The properties of a container registry.",
        "properties": {
          "adminUserEnabled": {
            "default": false,
            "description": "The value that indicates whether the admin user is enabled.",
            "type": "boolean"
          },
          "creationDate": {
            "description": "The creation date of the container registry in ISO8601 format.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "loginServer": {
            "description": "The URL that can be used to log into the container registry.",
            "readOnly": true,
            "type": "string"
          },
          "networkRuleSet": {
            "$ref": "#/components/schemas/NetworkRuleSet",
            "description": "The network rule set for a container registry."
          },
          "provisioningState": {
            "description": "The provisioning state of the container registry at the time the operation was called.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Failed",
              "Canceled"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ProvisioningState"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status",
            "description": "The status of the container registry at the time the operation was called.",
            "readOnly": true
          },
          "storageAccount": {
            "$ref": "#/components/schemas/StorageAccountProperties",
            "description": "The properties of the storage account for the container registry. Only applicable to Classic SKU."
          }
        },
        "type": "object"
      },
      "RegistryPropertiesUpdateParameters": {
        "description": "The parameters for updating the properties of a container registry.",
        "properties": {
          "adminUserEnabled": {
            "description": "The value that indicates whether the admin user is enabled.",
            "type": "boolean"
          },
          "networkRuleSet": {
            "$ref": "#/components/schemas/NetworkRuleSet",
            "description": "The network rule set for a container registry."
          },
          "storageAccount": {
            "$ref": "#/components/schemas/StorageAccountProperties",
            "description": "The parameters of a storage account for the container registry. Only applicable to Classic SKU. If specified, the storage account must be in the same physical location as the container registry."
          }
        },
        "type": "object"
      },
      "RegistryUpdateParameters": {
        "description": "The parameters for updating a container registry.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The tags for the container registry.",
            "type": "object"
          },
          "properties": {
            "$ref": "#/components/schemas/RegistryPropertiesUpdateParameters",
            "description": "The properties that the container registry will be updated with.",
            "x-ms-client-flatten": true
          },
          "sku": {
            "$ref": "#/components/schemas/Sku",
            "description": "The SKU of the container registry."
          }
        },
        "type": "object"
      },
      "RegistryUsage": {
        "description": "The quota usage for a container registry.",
        "properties": {
          "currentValue": {
            "description": "The current value of the usage.",
            "format": "int64",
            "type": "integer"
          },
          "limit": {
            "description": "The limit of the usage.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The name of the usage.",
            "type": "string"
          },
          "unit": {
            "description": "The unit of measurement.",
            "enum": [
              "Count",
              "Bytes"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "RegistryUsageUnit"
            }
          }
        },
        "type": "object"
      },
      "RegistryUsageListResult": {
        "description": "The result of a request to get container registry quota usages.",
        "properties": {
          "value": {
            "description": "The list of container registry quota usages.",
            "items": {
              "$ref": "#/components/schemas/RegistryUsage"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Replication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "An object that represents a replication for a container registry.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/ReplicationProperties",
            "description": "The properties of the replication.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "ReplicationListResult": {
        "description": "The result of a request to list replications for a container registry.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next list of replications.",
            "type": "string"
          },
          "value": {
            "description": "The list of replications. Since this list may be incomplete, the nextLink field should be used to request the next list of replications.",
            "items": {
              "$ref": "#/components/schemas/Replication"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReplicationProperties": {
        "description": "The properties of a replication.",
        "properties": {
          "provisioningState": {
            "description": "The provisioning state of the replication at the time the operation was called.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Failed",
              "Canceled"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ProvisioningState"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status",
            "description": "The status of the replication at the time the operation was called.",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "ReplicationUpdateParameters": {
        "description": "The parameters for updating a replication.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The tags for the replication.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Request": {
        "description": "The request that generated the event.",
        "properties": {
          "host": {
            "description": "The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.",
            "type": "string"
          },
          "addr": {
            "description": "The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the request that initiated the event.",
            "type": "string"
          },
          "method": {
            "description": "The request method that generated the event.",
            "type": "string"
          },
          "useragent": {
            "description": "The user agent header of the request.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Resource": {
        "description": "An Azure resource.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The tags of the resource.",
            "type": "object"
          },
          "id": {
            "description": "The resource ID.",
            "readOnly": true,
            "type": "string"
          },
          "location": {
            "description": "The location of the resource. This cannot be changed after the resource is created.",
            "type": "string",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          },
          "name": {
            "description": "The name of the resource.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the resource.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "location"
        ],
        "type": "object",
        "x-ms-azure-resource": true
      },
      "Sku": {
        "description": "The SKU of a container registry.",
        "properties": {
          "name": {
            "description": "The SKU name of the container registry. Required for registry creation.",
            "enum": [
              "Classic",
              "Basic",
              "Standard",
              "Premium"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SkuName"
            }
          },
          "tier": {
            "description": "The SKU tier based on the SKU name.",
            "enum": [
              "Classic",
              "Basic",
              "Standard",
              "Premium"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SkuTier"
            }
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Source": {
        "description": "The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.",
        "properties": {
          "addr": {
            "description": "The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.",
            "type": "string"
          },
          "instanceID": {
            "description": "The running instance of an application. Changes after each restart.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The status of an Azure resource at the time the operation was called.",
        "properties": {
          "displayStatus": {
            "description": "The short label for the status.",
            "readOnly": true,
            "type": "string"
          },
          "message": {
            "description": "The detailed message for the status, including alerts and error messages.",
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The timestamp when the status was changed to the current value.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageAccountProperties": {
        "description": "The properties of a storage account for a container registry. Only applicable to Classic SKU.",
        "properties": {
          "id": {
            "description": "The resource ID of the storage account.",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Target": {
        "description": "The target of the event.",
        "properties": {
          "digest": {
            "description": "The digest of the content, as defined by the Registry V2 HTTP API Specification.",
            "type": "string"
          },
          "length": {
            "description": "The number of bytes of the content. Same as Size field.",
            "format": "int64",
            "type": "integer"
          },
          "mediaType": {
            "description": "The MIME type of the referenced object.",
            "type": "string"
          },
          "name": {
            "description": "The name of the artifact.",
            "type": "string"
          },
          "repository": {
            "description": "The repository name.",
            "type": "string"
          },
          "size": {
            "description": "The number of bytes of the content. Same as Length field.",
            "format": "int64",
            "type": "integer"
          },
          "tag": {
            "description": "The tag name.",
            "type": "string"
          },
          "url": {
            "description": "The direct URL to the content.",
            "type": "string"
          },
          "version": {
            "description": "The version of the artifact.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TrustPolicy": {
        "description": "An object that represents content trust policy for a container registry.",
        "properties": {
          "status": {
            "description": "The value that indicates whether the policy is enabled or not.",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PolicyStatus"
            }
          },
          "type": {
            "description": "The type of trust policy.",
            "enum": [
              "Notary"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TrustPolicyType"
            }
          }
        },
        "type": "object"
      },
      "VirtualNetworkRule": {
        "description": "Virtual network rule.",
        "properties": {
          "action": {
            "default": "Allow",
            "description": "The action of virtual network rule.",
            "enum": [
              "Allow"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "Action"
            }
          },
          "id": {
            "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
            "type": "string",
            "x-ms-client-name": "VirtualNetworkResourceId"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Webhook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "An object that represents a webhook for a container registry.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/WebhookProperties",
            "description": "The properties of the webhook.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "WebhookCreateParameters": {
        "description": "The parameters for creating a webhook.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The tags for the webhook.",
            "type": "object"
          },
          "location": {
            "description": "The location of the webhook. This cannot be changed after the resource is created.",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/WebhookPropertiesCreateParameters",
            "description": "The properties that the webhook will be created with.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "location"
        ],
        "type": "object"
      },
      "WebhookListResult": {
        "description": "The result of a request to list webhooks for a container registry.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next list of webhooks.",
            "type": "string"
          },
          "value": {
            "description": "The list of webhooks. Since this list may be incomplete, the nextLink field should be used to request the next list of webhooks.",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WebhookProperties": {
        "description": "The properties of a webhook.",
        "properties": {
          "actions": {
            "description": "The list of actions that trigger the webhook to post notifications.",
            "items": {
              "enum": [
                "push",
                "delete",
                "quarantine",
                "chart_push",
                "chart_delete"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "WebhookAction"
              }
            },
            "type": "array"
          },
          "provisioningState": {
            "description": "The provisioning state of the webhook at the time the operation was called.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Failed",
              "Canceled"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ProvisioningState"
            }
          },
          "scope": {
            "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
            "type": "string"
          },
          "status": {
            "description": "The status of the webhook at the time the operation was called.",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "WebhookStatus"
            }
          }
        },
        "required": [
          "actions"
        ],
        "type": "object"
      },
      "WebhookPropertiesCreateParameters": {
        "description": "The parameters for creating the properties of a webhook.",
        "properties": {
          "actions": {
            "description": "The list of actions that trigger the webhook to post notifications.",
            "items": {
              "enum": [
                "push",
                "delete",
                "quarantine",
                "chart_push",
                "chart_delete"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "WebhookAction"
              }
            },
            "type": "array"
          },
          "customHeaders": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom headers that will be added to the webhook notifications.",
            "type": "object"
          },
          "scope": {
            "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
            "type": "string"
          },
          "serviceUri": {
            "description": "The service URI for the webhook to post notifications.",
            "type": "string"
          },
          "status": {
            "description": "The status of the webhook at the time the operation was called.",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "WebhookStatus"
            }
          }
        },
        "required": [
          "serviceUri",
          "actions"
        ],
        "type": "object"
      },
      "WebhookPropertiesUpdateParameters": {
        "description": "The parameters for updating the properties of a webhook.",
        "properties": {
          "actions": {
            "description": "The list of actions that trigger the webhook to post notifications.",
            "items": {
              "enum": [
                "push",
                "delete",
                "quarantine",
                "chart_push",
                "chart_delete"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "WebhookAction"
              }
            },
            "type": "array"
          },
          "customHeaders": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom headers that will be added to the webhook notifications.",
            "type": "object"
          },
          "scope": {
            "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
            "type": "string"
          },
          "serviceUri": {
            "description": "The service URI for the webhook to post notifications.",
            "type": "string"
          },
          "status": {
            "description": "The status of the webhook at the time the operation was called.",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "WebhookStatus"
            }
          }
        },
        "type": "object"
      },
      "WebhookUpdateParameters": {
        "description": "The parameters for updating a webhook.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The tags for the webhook.",
            "type": "object"
          },
          "properties": {
            "$ref": "#/components/schemas/WebhookPropertiesUpdateParameters",
            "description": "The properties that the webhook will be updated with.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}