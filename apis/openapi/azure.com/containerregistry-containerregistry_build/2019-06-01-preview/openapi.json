{
  "openapi": "3.0.0",
  "info": {
    "title": "ContainerRegistryManagementClient",
    "version": "2019-06-01-preview",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/containerregistry_build.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPoolListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "AgentPools"
        ],
        "description": "Lists all the agent pools for a specified container registry.",
        "operationId": "AgentPools_List",
        "x-ms-examples": {
          "AgentPools_List": {
            "$ref": "./examples/AgentPoolsList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/AgentPoolNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successfully accepted; the operation will complete asynchronously."
          },
          "204": {
            "description": "No Content - the specified resource was not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "AgentPools"
        ],
        "description": "Deletes a specified agent pool resource.",
        "operationId": "AgentPools_Delete",
        "x-ms-examples": {
          "AgentPools_Delete": {
            "$ref": "./examples/AgentPoolsDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/AgentPoolNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPool"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/agentpool doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "AgentPools"
        ],
        "description": "Gets the detailed information for a given agent pool.",
        "operationId": "AgentPools_Get",
        "x-ms-examples": {
          "AgentPools_Get": {
            "$ref": "./examples/AgentPoolsGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/AgentPoolNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPool"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPool"
                }
              }
            },
            "description": "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "tags": [
          "AgentPools"
        ],
        "description": "Updates an agent pool with the specified parameters.",
        "operationId": "AgentPools_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentPoolUpdateParameters"
              }
            }
          },
          "description": "The parameters for updating an agent pool.",
          "required": true
        },
        "x-ms-examples": {
          "AgentPools_Update": {
            "$ref": "./examples/AgentPoolsUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/AgentPoolNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPool"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPool"
                }
              }
            },
            "description": "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "tags": [
          "AgentPools"
        ],
        "description": "Creates an agent pool for a container registry with the specified parameters.",
        "operationId": "AgentPools_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentPool"
              }
            }
          },
          "description": "The parameters of an agent pool that needs to scheduled.",
          "required": true
        },
        "x-ms-examples": {
          "AgentPools_Create": {
            "$ref": "./examples/AgentPoolsCreate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}/listQueueStatus": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/AgentPoolNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPoolQueueStatus"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/agentpool doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "AgentPools"
        ],
        "description": "Gets the count of queued runs for a given agent pool.",
        "operationId": "AgentPools_GetQueueStatus",
        "x-ms-examples": {
          "AgentPools_GetQueueStatus": {
            "$ref": "./examples/AgentPoolsGetQueueStatus.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceUploadDefinition"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Get the upload location for the user to be able to upload the source.",
        "operationId": "Registries_GetBuildSourceUploadUrl",
        "x-ms-examples": {
          "Registries_GetBuildSourceUploadUrl": {
            "$ref": "./examples/RegistriesGetBuildSourceUploadUrl.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "description": "The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed.",
            "in": "query",
            "name": "$filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "$top is supported for get list of runs, which limits the maximum number of runs to return.",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Runs"
        ],
        "description": "Gets all the runs for a registry.",
        "operationId": "Runs_List",
        "x-ms-examples": {
          "Runs_List": {
            "$ref": "./examples/RunsList.json"
          }
        },
        "x-ms-odata": "#/components/schemas/RunFilter",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "description": "The run ID.",
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Run"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "Runs"
        ],
        "description": "Gets the detailed information for a given run.",
        "operationId": "Runs_Get",
        "x-ms-examples": {
          "Runs_Get": {
            "$ref": "./examples/RunsGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "description": "The run ID.",
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Run"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Run"
                }
              }
            },
            "description": "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/build doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "tags": [
          "Runs"
        ],
        "description": "Patch the run properties.",
        "operationId": "Runs_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunUpdateParameters"
              }
            }
          },
          "description": "The run update properties.",
          "required": true
        },
        "x-ms-examples": {
          "Runs_Update": {
            "$ref": "./examples/RunsUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/cancel": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "description": "The run ID.",
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successfully accepted; the operation will complete asynchronously."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "Runs"
        ],
        "description": "Cancel an existing run.",
        "operationId": "Runs_Cancel",
        "x-ms-examples": {
          "Runs_Cancel": {
            "$ref": "./examples/RunsCancel.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/listLogSasUrl": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "description": "The run ID.",
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunGetLogResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "Runs"
        ],
        "description": "Gets a link to download the run logs.",
        "operationId": "Runs_GetLogSasUrl",
        "x-ms-examples": {
          "Runs_GetLogSasUrl": {
            "$ref": "./examples/RunsGetLogSasUrl.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Run"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successfully accepted; the operation will complete asynchronously."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "tags": [
          "Registries"
        ],
        "description": "Schedules a new run based on the request parameters and add it to the run queue.",
        "operationId": "Registries_ScheduleRun",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunRequest"
              }
            }
          },
          "description": "The parameters of a run that needs to scheduled.",
          "required": true
        },
        "x-ms-examples": {
          "Registries_ScheduleRun": {
            "$ref": "./examples/RegistriesScheduleRun.json"
          },
          "Registries_ScheduleRun_EncodedTaskRun": {
            "$ref": "./examples/RegistriesScheduleRun_EncodedTaskRun.json"
          },
          "Registries_ScheduleRun_FileTaskRun": {
            "$ref": "./examples/RegistriesScheduleRun_FileTaskRun.json"
          },
          "Registries_ScheduleRun_Task": {
            "$ref": "./examples/RegistriesScheduleRun_Task.json"
          },
          "Registries_ScheduleRun_Task_WithCustomCredentials": {
            "$ref": "./examples/RegistriesScheduleRun_FileTask_WithCustomCredentials.json"
          },
          "Registries_ScheduleRun_WithCustomCredentials": {
            "$ref": "./examples/RegistriesScheduleRun_WithCustomCredentials.json"
          },
          "Registries_ScheduleRun_WithLogTemplate": {
            "$ref": "./examples/RegistriesScheduleRun_WithLogTemplate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRunListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "TaskRuns"
        ],
        "description": "Lists all the task runs for a specified container registry.",
        "operationId": "TaskRuns_List",
        "x-ms-examples": {
          "TaskRuns_List": {
            "$ref": "./examples/TaskRunsList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskRunNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successfully accepted; the operation will complete asynchronously."
          },
          "204": {
            "description": "No Content - the specified resource was not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "TaskRuns"
        ],
        "description": "Deletes a specified task run resource.",
        "operationId": "TaskRuns_Delete",
        "x-ms-examples": {
          "TaskRuns_Delete": {
            "$ref": "./examples/TaskRunsDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskRunNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRun"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "TaskRuns"
        ],
        "description": "Gets the detailed information for a given task run.",
        "operationId": "TaskRuns_Get",
        "x-ms-examples": {
          "TaskRuns_Get": {
            "$ref": "./examples/TaskRunsGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskRunNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRun"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRun"
                }
              }
            },
            "description": "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "tags": [
          "TaskRuns"
        ],
        "description": "Updates a task run with the specified parameters.",
        "operationId": "TaskRuns_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRunUpdateParameters"
              }
            }
          },
          "description": "The parameters for updating a task run.",
          "required": true
        },
        "x-ms-examples": {
          "TaskRuns_Update": {
            "$ref": "./examples/TaskRunsUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskRunNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRun"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRun"
                }
              }
            },
            "description": "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "tags": [
          "TaskRuns"
        ],
        "description": "Creates a task run for a container registry with the specified parameters.",
        "operationId": "TaskRuns_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRun"
              }
            }
          },
          "description": "The parameters of a run that needs to scheduled.",
          "required": true
        },
        "x-ms-examples": {
          "TaskRuns_Create": {
            "$ref": "./examples/TaskRunsCreate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}/listDetails": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskRunNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRun"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "TaskRuns"
        ],
        "description": "Gets the detailed information for a given task run that includes all secrets.",
        "operationId": "TaskRuns_GetDetails",
        "x-ms-examples": {
          "TaskRuns_GetDetails": {
            "$ref": "./examples/TaskRunsGetDetails.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResult"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Tasks"
        ],
        "description": "Lists all the tasks for a specified container registry.",
        "operationId": "Tasks_List",
        "x-ms-examples": {
          "Tasks_List": {
            "$ref": "./examples/TasksList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successfully accepted; the operation will complete asynchronously."
          },
          "204": {
            "description": "No Content - the specified resource was not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Tasks"
        ],
        "description": "Deletes a specified task.",
        "operationId": "Tasks_Delete",
        "x-ms-examples": {
          "Tasks_Delete": {
            "$ref": "./examples/TasksDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "Tasks"
        ],
        "description": "Get the properties of a specified task.",
        "operationId": "Tasks_Get",
        "x-ms-examples": {
          "Tasks_Get": {
            "$ref": "./examples/TasksGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "tags": [
          "Tasks"
        ],
        "description": "Updates a task with the specified parameters.",
        "operationId": "Tasks_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdateParameters"
              }
            }
          },
          "description": "The parameters for updating a task.",
          "required": true
        },
        "x-ms-examples": {
          "Tasks_Update": {
            "$ref": "./examples/TasksUpdate.json"
          },
          "Tasks_Update_QuickTask": {
            "$ref": "./examples/TasksUpdate_QuickTask.json"
          },
          "Tasks_Update_WithKeyVaultCustomCredentials": {
            "$ref": "./examples/ManagedIdentity/TasksUpdate_WithKeyVaultCustomCredentials.json"
          },
          "Tasks_Update_WithMSICustomCredentials": {
            "$ref": "./examples/ManagedIdentity/TasksUpdate_WithMSICustomCredentials.json"
          },
          "Tasks_Update_WithOpaqueCustomCredentials": {
            "$ref": "./examples/TasksUpdate_WithOpaqueCustomCredentials.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned."
          }
        },
        "tags": [
          "Tasks"
        ],
        "description": "Creates a task for a container registry with the specified parameters.",
        "operationId": "Tasks_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          "description": "The parameters for creating a task.",
          "required": true
        },
        "x-ms-examples": {
          "Tasks_Create": {
            "$ref": "./examples/TasksCreate.json"
          },
          "Tasks_Create_QuickTask": {
            "$ref": "./examples/TasksCreate_QuickTask.json"
          },
          "Tasks_Create_WithSystemAndUserIdentities": {
            "$ref": "./examples/ManagedIdentity/TasksCreate_WithSystemAndUserIdentities.json"
          },
          "Tasks_Create_WithUserIdentities": {
            "$ref": "./examples/ManagedIdentity/TasksCreate_WithUserIdentities.json"
          },
          "Tasks_Create_WithUserIdentities_WithSystemIdentity": {
            "$ref": "./examples/ManagedIdentity/TasksCreate_WithSystemIdentity.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}/listDetails": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/TaskNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned."
          }
        },
        "tags": [
          "Tasks"
        ],
        "description": "Returns a task with extended information that includes all secrets.",
        "operationId": "Tasks_GetDetails",
        "x-ms-examples": {
          "Tasks_GetDetails": {
            "$ref": "./examples/TasksGetDetails.json"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "AgentPoolNameParameter": {
        "description": "The name of the agent pool.",
        "in": "path",
        "name": "agentPoolName",
        "required": true,
        "schema": {
          "maxLength": 20,
          "minLength": 3,
          "pattern": "^[a-zA-Z0-9-]*$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "ApiVersionParameter": {
        "description": "The client API version.",
        "in": "query",
        "name": "api-version",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RegistryNameParameter": {
        "description": "The name of the container registry.",
        "in": "path",
        "name": "registryName",
        "required": true,
        "schema": {
          "maxLength": 50,
          "minLength": 5,
          "pattern": "^[a-zA-Z0-9]*$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "ResourceGroupNameParameter": {
        "description": "The name of the resource group to which the container registry belongs.",
        "in": "path",
        "name": "resourceGroupName",
        "required": true,
        "schema": {
          "minLength": 1,
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "SubscriptionIdParameter": {
        "description": "The Microsoft Azure subscription ID.",
        "in": "path",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "TaskNameParameter": {
        "description": "The name of the container registry task.",
        "in": "path",
        "name": "taskName",
        "required": true,
        "schema": {
          "maxLength": 50,
          "minLength": 5,
          "pattern": "^[a-zA-Z0-9-_]*$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "TaskRunNameParameter": {
        "description": "The name of the task run.",
        "in": "path",
        "name": "taskRunName",
        "required": true,
        "schema": {
          "maxLength": 50,
          "minLength": 5,
          "pattern": "^[a-zA-Z0-9-]*$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "schemas": {
      "AgentPool": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "The agentpool that has the ARM resource and properties. \r\nThe agentpool will have all information to create an agent pool.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/AgentPoolProperties",
            "description": "The properties associated with the agent pool",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "AgentPoolListResult": {
        "description": "The collection of agent pools.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next set of paged results.",
            "type": "string"
          },
          "value": {
            "description": "The collection value.",
            "items": {
              "$ref": "#/components/schemas/AgentPool"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AgentPoolProperties": {
        "description": "The properties of agent pool.",
        "properties": {
          "count": {
            "description": "The count of agent machine",
            "format": "int32",
            "type": "integer"
          },
          "os": {
            "description": "The OS of agent machine",
            "enum": [
              "Windows",
              "Linux"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "OS"
            }
          },
          "provisioningState": {
            "description": "The provisioning state of this agent pool",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Failed",
              "Canceled"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ProvisioningState"
            }
          },
          "tier": {
            "description": "The Tier of agent machine",
            "type": "string"
          },
          "virtualNetworkSubnetResourceId": {
            "description": "The Virtual Network Subnet Resource Id of the agent machine",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentPoolPropertiesUpdateParameters": {
        "properties": {
          "count": {
            "description": "The count of agent machine",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AgentPoolQueueStatus": {
        "description": "The QueueStatus of Agent Pool",
        "properties": {
          "count": {
            "description": "The number of pending runs in the queue",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AgentPoolUpdateParameters": {
        "description": "The parameters for updating an agent pool.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The ARM resource tags.",
            "type": "object"
          },
          "properties": {
            "$ref": "#/components/schemas/AgentPoolPropertiesUpdateParameters",
            "description": "The properties associated with the agent pool",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "AgentProperties": {
        "description": "The properties that determine the run agent configuration.",
        "properties": {
          "cpu": {
            "description": "The CPU configuration in terms of number of cores required for the run.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Argument": {
        "description": "The properties of a run argument.",
        "properties": {
          "isSecret": {
            "default": false,
            "description": "Flag to indicate whether the argument represents a secret and want to be removed from build logs.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the argument.",
            "type": "string"
          },
          "value": {
            "description": "The value of the argument.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "AuthInfo": {
        "description": "The authorization properties for accessing the source code repository.",
        "properties": {
          "expiresIn": {
            "description": "Time in seconds that the token remains valid",
            "format": "int32",
            "type": "integer"
          },
          "refreshToken": {
            "description": "The refresh token used to refresh the access token.",
            "type": "string"
          },
          "scope": {
            "description": "The scope of the access token.",
            "type": "string"
          },
          "token": {
            "description": "The access token used to access the source control provider.",
            "type": "string"
          },
          "tokenType": {
            "description": "The type of Auth token.",
            "enum": [
              "PAT",
              "OAuth"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TokenType"
            }
          }
        },
        "required": [
          "tokenType",
          "token"
        ],
        "type": "object"
      },
      "AuthInfoUpdateParameters": {
        "description": "The authorization properties for accessing the source code repository.",
        "properties": {
          "expiresIn": {
            "description": "Time in seconds that the token remains valid",
            "format": "int32",
            "type": "integer"
          },
          "refreshToken": {
            "description": "The refresh token used to refresh the access token.",
            "type": "string"
          },
          "scope": {
            "description": "The scope of the access token.",
            "type": "string"
          },
          "token": {
            "description": "The access token used to access the source control provider.",
            "type": "string"
          },
          "tokenType": {
            "description": "The type of Auth token.",
            "enum": [
              "PAT",
              "OAuth"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TokenType"
            }
          }
        },
        "type": "object"
      },
      "BaseImageDependency": {
        "description": "Properties that describe a base image dependency.",
        "properties": {
          "digest": {
            "description": "The sha256-based digest of the image manifest.",
            "type": "string"
          },
          "registry": {
            "description": "The registry login server.",
            "type": "string"
          },
          "repository": {
            "description": "The repository name.",
            "type": "string"
          },
          "tag": {
            "description": "The tag name.",
            "type": "string"
          },
          "type": {
            "description": "The type of the base image dependency.",
            "enum": [
              "BuildTime",
              "RunTime"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "BaseImageDependencyType"
            }
          }
        },
        "type": "object"
      },
      "BaseImageTrigger": {
        "description": "The trigger based on base image dependency.",
        "properties": {
          "baseImageTriggerType": {
            "description": "The type of the auto trigger for base image dependency updates.",
            "enum": [
              "All",
              "Runtime"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "BaseImageTriggerType"
            }
          },
          "name": {
            "description": "The name of the trigger.",
            "type": "string"
          },
          "status": {
            "default": "Enabled",
            "description": "The current status of trigger.",
            "enum": [
              "Disabled",
              "Enabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TriggerStatus"
            }
          },
          "updateTriggerEndpoint": {
            "description": "The endpoint URL for receiving update triggers.",
            "type": "string"
          },
          "updateTriggerPayloadType": {
            "description": "Type of Payload body for Base image update triggers.",
            "enum": [
              "Default",
              "Token"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "UpdateTriggerPayloadType"
            }
          }
        },
        "required": [
          "baseImageTriggerType",
          "name"
        ],
        "type": "object"
      },
      "BaseImageTriggerUpdateParameters": {
        "description": "The properties for updating base image dependency trigger.",
        "properties": {
          "baseImageTriggerType": {
            "description": "The type of the auto trigger for base image dependency updates.",
            "enum": [
              "All",
              "Runtime"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "BaseImageTriggerType"
            }
          },
          "name": {
            "description": "The name of the trigger.",
            "type": "string"
          },
          "status": {
            "default": "Enabled",
            "description": "The current status of trigger.",
            "enum": [
              "Disabled",
              "Enabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TriggerStatus"
            }
          },
          "updateTriggerEndpoint": {
            "description": "The endpoint URL for receiving update triggers.",
            "type": "string"
          },
          "updateTriggerPayloadType": {
            "description": "Type of Payload body for Base image update triggers.",
            "enum": [
              "Default",
              "Token"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "UpdateTriggerPayloadType"
            }
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Credentials": {
        "description": "The parameters that describes a set of credentials that will be used when a run is invoked.",
        "properties": {
          "customRegistries": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomRegistryCredentials"
            },
            "description": "Describes the credential parameters for accessing other custom registries. The key\r\nfor the dictionary item will be the registry login server (myregistry.azurecr.io) and\r\nthe value of the item will be the registry credentials for accessing the registry.",
            "type": "object"
          },
          "sourceRegistry": {
            "$ref": "#/components/schemas/SourceRegistryCredentials",
            "description": "Describes the credential parameters for accessing the source registry."
          }
        },
        "type": "object"
      },
      "CustomRegistryCredentials": {
        "description": "Describes the credentials that will be used to access a custom registry during a run.",
        "properties": {
          "identity": {
            "description": "Indicates the managed identity assigned to the custom credential. If a user-assigned identity\r\nthis value is the Client ID. If a system-assigned identity, the value will be `system`. In\r\nthe case of a system-assigned identity, the Client ID will be determined by the runner. This\r\nidentity may be used to authenticate to key vault to retrieve credentials or it may be the only \r\nsource of authentication used for accessing the registry.",
            "type": "string"
          },
          "password": {
            "$ref": "#/components/schemas/SecretObject",
            "description": "The password for logging into the custom registry. The password is a secret \r\nobject that allows multiple ways of providing the value for it."
          },
          "userName": {
            "$ref": "#/components/schemas/SecretObject",
            "description": "The username for logging into the custom registry."
          }
        },
        "type": "object"
      },
      "DockerBuildRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RunRequest"
          }
        ],
        "description": "The parameters for a docker quick build.",
        "properties": {
          "agentConfiguration": {
            "$ref": "#/components/schemas/AgentProperties",
            "description": "The machine configuration of the run agent."
          },
          "arguments": {
            "description": "The collection of override arguments to be used when executing the run.",
            "items": {
              "$ref": "#/components/schemas/Argument"
            },
            "type": "array",
            "x-ms-identifiers": [
              "name"
            ]
          },
          "credentials": {
            "$ref": "#/components/schemas/Credentials",
            "description": "The properties that describes a set of credentials that will be used when this run is invoked."
          },
          "dockerFilePath": {
            "description": "The Docker file path relative to the source location.",
            "type": "string"
          },
          "imageNames": {
            "description": "The fully qualified image names including the repository and tag.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isPushEnabled": {
            "default": true,
            "description": "The value of this property indicates whether the image built should be pushed to the registry or not.",
            "type": "boolean"
          },
          "noCache": {
            "default": false,
            "description": "The value of this property indicates whether the image cache is enabled or not.",
            "type": "boolean"
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformProperties",
            "description": "The platform properties against which the run has to happen."
          },
          "sourceLocation": {
            "description": "The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\r\nIf it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.",
            "type": "string"
          },
          "target": {
            "description": "The name of the target build stage for the docker build.",
            "type": "string"
          },
          "timeout": {
            "default": 3600,
            "description": "Run timeout in seconds.",
            "format": "int32",
            "maximum": 28800,
            "minimum": 300,
            "type": "integer"
          }
        },
        "required": [
          "type",
          "dockerFilePath",
          "platform"
        ],
        "type": "object",
        "x-ms-discriminator-value": "DockerBuildRequest"
      },
      "DockerBuildStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskStepProperties"
          }
        ],
        "description": "The Docker build step.",
        "properties": {
          "arguments": {
            "description": "The collection of override arguments to be used when executing this build step.",
            "items": {
              "$ref": "#/components/schemas/Argument"
            },
            "type": "array",
            "x-ms-identifiers": [
              "name"
            ]
          },
          "dockerFilePath": {
            "description": "The Docker file path relative to the source context.",
            "type": "string"
          },
          "imageNames": {
            "description": "The fully qualified image names including the repository and tag.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isPushEnabled": {
            "default": true,
            "description": "The value of this property indicates whether the image built should be pushed to the registry or not.",
            "type": "boolean"
          },
          "noCache": {
            "default": false,
            "description": "The value of this property indicates whether the image cache is enabled or not.",
            "type": "boolean"
          },
          "target": {
            "description": "The name of the target build stage for the docker build.",
            "type": "string"
          }
        },
        "required": [
          "dockerFilePath",
          "type"
        ],
        "type": "object",
        "x-ms-discriminator-value": "Docker"
      },
      "DockerBuildStepUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskStepUpdateParameters"
          }
        ],
        "description": "The properties for updating a docker build step.",
        "properties": {
          "arguments": {
            "description": "The collection of override arguments to be used when executing this build step.",
            "items": {
              "$ref": "#/components/schemas/Argument"
            },
            "type": "array",
            "x-ms-identifiers": [
              "name"
            ]
          },
          "dockerFilePath": {
            "description": "The Docker file path relative to the source context.",
            "type": "string"
          },
          "imageNames": {
            "description": "The fully qualified image names including the repository and tag.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isPushEnabled": {
            "description": "The value of this property indicates whether the image built should be pushed to the registry or not.",
            "type": "boolean"
          },
          "noCache": {
            "description": "The value of this property indicates whether the image cache is enabled or not.",
            "type": "boolean"
          },
          "target": {
            "description": "The name of the target build stage for the docker build.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "x-ms-discriminator-value": "Docker"
      },
      "EncodedTaskRunRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RunRequest"
          }
        ],
        "description": "The parameters for a quick task run request.",
        "properties": {
          "agentConfiguration": {
            "$ref": "#/components/schemas/AgentProperties",
            "description": "The machine configuration of the run agent."
          },
          "credentials": {
            "$ref": "#/components/schemas/Credentials",
            "description": "The properties that describes a set of credentials that will be used when this run is invoked."
          },
          "encodedTaskContent": {
            "description": "Base64 encoded value of the template/definition file content.",
            "type": "string"
          },
          "encodedValuesContent": {
            "description": "Base64 encoded value of the parameters/values file content.",
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformProperties",
            "description": "The platform properties against which the run has to happen."
          },
          "sourceLocation": {
            "description": "The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\r\nIf it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.",
            "type": "string"
          },
          "timeout": {
            "default": 3600,
            "description": "Run timeout in seconds.",
            "format": "int32",
            "maximum": 28800,
            "minimum": 300,
            "type": "integer"
          },
          "values": {
            "description": "The collection of overridable values that can be passed when running a task.",
            "items": {
              "$ref": "#/components/schemas/SetValue"
            },
            "type": "array",
            "x-ms-identifiers": []
          }
        },
        "required": [
          "type",
          "encodedTaskContent",
          "platform"
        ],
        "type": "object",
        "x-ms-discriminator-value": "EncodedTaskRunRequest"
      },
      "EncodedTaskStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskStepProperties"
          }
        ],
        "description": "The properties of a encoded task step.",
        "properties": {
          "encodedTaskContent": {
            "description": "Base64 encoded value of the template/definition file content.",
            "type": "string"
          },
          "encodedValuesContent": {
            "description": "Base64 encoded value of the parameters/values file content.",
            "type": "string"
          },
          "values": {
            "description": "The collection of overridable values that can be passed when running a task.",
            "items": {
              "$ref": "#/components/schemas/SetValue"
            },
            "type": "array",
            "x-ms-identifiers": []
          }
        },
        "required": [
          "encodedTaskContent",
          "type"
        ],
        "type": "object",
        "x-ms-discriminator-value": "EncodedTask"
      },
      "EncodedTaskStepUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskStepUpdateParameters"
          }
        ],
        "description": "The properties for updating encoded task step.",
        "properties": {
          "encodedTaskContent": {
            "description": "Base64 encoded value of the template/definition file content.",
            "type": "string"
          },
          "encodedValuesContent": {
            "description": "Base64 encoded value of the parameters/values file content.",
            "type": "string"
          },
          "values": {
            "description": "The collection of overridable values that can be passed when running a task.",
            "items": {
              "$ref": "#/components/schemas/SetValue"
            },
            "type": "array",
            "x-ms-identifiers": []
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "x-ms-discriminator-value": "EncodedTask"
      },
      "ErrorResponse": {
        "description": "An error response from the Azure Container Registry service.",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorResponseBody",
            "description": "Azure container registry build API error body."
          }
        },
        "type": "object"
      },
      "ErrorResponseBody": {
        "description": "An error response from the Azure Container Registry service.",
        "properties": {
          "code": {
            "description": "error code.",
            "type": "string"
          },
          "details": {
            "description": "an array of additional nested error response info objects, as described by this contract.",
            "items": {
              "$ref": "#/components/schemas/InnerErrorDescription"
            },
            "type": "array",
            "x-ms-identifiers": [
              "message",
              "target"
            ]
          },
          "message": {
            "description": "error message.",
            "type": "string"
          },
          "target": {
            "description": "target of the particular error.",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "FileTaskRunRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RunRequest"
          }
        ],
        "description": "The request parameters for a scheduling run against a task file.",
        "properties": {
          "agentConfiguration": {
            "$ref": "#/components/schemas/AgentProperties",
            "description": "The machine configuration of the run agent."
          },
          "credentials": {
            "$ref": "#/components/schemas/Credentials",
            "description": "The properties that describes a set of credentials that will be used when this run is invoked."
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformProperties",
            "description": "The platform properties against which the run has to happen."
          },
          "sourceLocation": {
            "description": "The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\r\nIf it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.",
            "type": "string"
          },
          "taskFilePath": {
            "description": "The template/definition file path relative to the source.",
            "type": "string"
          },
          "timeout": {
            "default": 3600,
            "description": "Run timeout in seconds.",
            "format": "int32",
            "maximum": 28800,
            "minimum": 300,
            "type": "integer"
          },
          "values": {
            "description": "The collection of overridable values that can be passed when running a task.",
            "items": {
              "$ref": "#/components/schemas/SetValue"
            },
            "type": "array",
            "x-ms-identifiers": []
          },
          "valuesFilePath": {
            "description": "The values/parameters file path relative to the source.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "taskFilePath",
          "platform"
        ],
        "type": "object",
        "x-ms-discriminator-value": "FileTaskRunRequest"
      },
      "FileTaskStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskStepProperties"
          }
        ],
        "description": "The properties of a task step.",
        "properties": {
          "taskFilePath": {
            "description": "The task template/definition file path relative to the source context.",
            "type": "string"
          },
          "values": {
            "description": "The collection of overridable values that can be passed when running a task.",
            "items": {
              "$ref": "#/components/schemas/SetValue"
            },
            "type": "array",
            "x-ms-identifiers": []
          },
          "valuesFilePath": {
            "description": "The task values/parameters file path relative to the source context.",
            "type": "string"
          }
        },
        "required": [
          "taskFilePath",
          "type"
        ],
        "type": "object",
        "x-ms-discriminator-value": "FileTask"
      },
      "FileTaskStepUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskStepUpdateParameters"
          }
        ],
        "description": "The properties of updating a task step.",
        "properties": {
          "taskFilePath": {
            "description": "The task template/definition file path relative to the source context.",
            "type": "string"
          },
          "values": {
            "description": "The collection of overridable values that can be passed when running a task.",
            "items": {
              "$ref": "#/components/schemas/SetValue"
            },
            "type": "array",
            "x-ms-identifiers": []
          },
          "valuesFilePath": {
            "description": "The values/parameters file path relative to the source context.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "x-ms-discriminator-value": "FileTask"
      },
      "IdentityProperties": {
        "description": "Managed identity for the resource.",
        "properties": {
          "principalId": {
            "description": "The principal ID of resource identity.",
            "type": "string"
          },
          "tenantId": {
            "description": "The tenant ID of resource.",
            "type": "string"
          },
          "type": {
            "description": "The identity type.",
            "enum": [
              "SystemAssigned",
              "UserAssigned",
              "SystemAssigned, UserAssigned",
              "None"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ResourceIdentityType"
            }
          },
          "userAssignedIdentities": {
            "additionalProperties": {
              "$ref": "#/components/schemas/UserIdentityProperties"
            },
            "description": "The list of user identities associated with the resource. The user identity \r\ndictionary key references will be ARM resource ids in the form: \r\n'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/\r\n    providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "ImageDescriptor": {
        "description": "Properties for a registry image.",
        "properties": {
          "digest": {
            "description": "The sha256-based digest of the image manifest.",
            "type": "string"
          },
          "registry": {
            "description": "The registry login server.",
            "type": "string"
          },
          "repository": {
            "description": "The repository name.",
            "type": "string"
          },
          "tag": {
            "description": "The tag name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImageUpdateTrigger": {
        "description": "The image update trigger that caused a build.",
        "properties": {
          "id": {
            "description": "The unique ID of the trigger.",
            "type": "string"
          },
          "images": {
            "description": "The list of image updates that caused the build.",
            "items": {
              "$ref": "#/components/schemas/ImageDescriptor"
            },
            "type": "array",
            "x-ms-identifiers": [
              "registry"
            ]
          },
          "timestamp": {
            "description": "The timestamp when the image update happened.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InnerErrorDescription": {
        "description": "inner error.",
        "properties": {
          "code": {
            "description": "error code.",
            "type": "string"
          },
          "message": {
            "description": "error message.",
            "type": "string"
          },
          "target": {
            "description": "target of the particular error.",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "OverrideTaskStepProperties": {
        "properties": {
          "arguments": {
            "description": "Gets or sets the collection of override arguments to be used when\r\nexecuting a build step.",
            "items": {
              "$ref": "#/components/schemas/Argument"
            },
            "type": "array",
            "x-ms-identifiers": [
              "name"
            ]
          },
          "contextPath": {
            "description": "The source context against which run has to be queued.",
            "type": "string"
          },
          "file": {
            "description": "The file against which run has to be queued.",
            "type": "string"
          },
          "target": {
            "description": "The name of the target build stage for the docker build.",
            "type": "string"
          },
          "updateTriggerToken": {
            "description": "Base64 encoded update trigger token that will be attached with the base image trigger webhook.",
            "type": "string"
          },
          "values": {
            "description": "The collection of overridable values that can be passed when running a Task.",
            "items": {
              "$ref": "#/components/schemas/SetValue"
            },
            "type": "array",
            "x-ms-identifiers": []
          }
        },
        "type": "object"
      },
      "PlatformProperties": {
        "description": "The platform properties against which the run has to happen.",
        "properties": {
          "architecture": {
            "description": "The OS architecture.",
            "enum": [
              "amd64",
              "x86",
              "386",
              "arm",
              "arm64"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "Architecture"
            }
          },
          "os": {
            "description": "The operating system type required for the run.",
            "enum": [
              "Windows",
              "Linux"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "OS"
            }
          },
          "variant": {
            "description": "Variant of the CPU.",
            "enum": [
              "v6",
              "v7",
              "v8"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "Variant"
            }
          }
        },
        "required": [
          "os"
        ],
        "type": "object"
      },
      "PlatformUpdateParameters": {
        "description": "The properties for updating the platform configuration.",
        "properties": {
          "architecture": {
            "description": "The OS architecture.",
            "enum": [
              "amd64",
              "x86",
              "386",
              "arm",
              "arm64"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "Architecture"
            }
          },
          "os": {
            "description": "The operating system type required for the run.",
            "enum": [
              "Windows",
              "Linux"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "OS"
            }
          },
          "variant": {
            "description": "Variant of the CPU.",
            "enum": [
              "v6",
              "v7",
              "v8"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "Variant"
            }
          }
        },
        "type": "object"
      },
      "ProxyResource": {
        "description": "The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.",
        "properties": {
          "id": {
            "description": "The resource ID.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the resource.",
            "readOnly": true,
            "type": "string"
          },
          "systemData": {
            "$ref": "#/components/schemas/SystemData",
            "description": "Metadata pertaining to creation and last modification of the resource.",
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "description": "The type of the resource.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      },
      "Resource": {
        "description": "An Azure resource.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The tags of the resource.",
            "type": "object"
          },
          "id": {
            "description": "The resource ID.",
            "readOnly": true,
            "type": "string"
          },
          "location": {
            "description": "The location of the resource. This cannot be changed after the resource is created.",
            "type": "string",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          },
          "name": {
            "description": "The name of the resource.",
            "readOnly": true,
            "type": "string"
          },
          "systemData": {
            "$ref": "#/components/schemas/SystemData",
            "description": "Metadata pertaining to creation and last modification of the resource.",
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "description": "The type of the resource.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "location"
        ],
        "type": "object",
        "x-ms-azure-resource": true
      },
      "Run": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProxyResource"
          }
        ],
        "description": "Run resource properties",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RunProperties",
            "description": "The properties of a run.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "RunFilter": {
        "description": "Properties that are enabled for Odata querying on runs.",
        "properties": {
          "agentPoolName": {
            "description": "The name of the agent pool that the run corresponds to.",
            "type": "string"
          },
          "createTime": {
            "description": "The create time for a run.",
            "format": "date-time",
            "type": "string"
          },
          "finishTime": {
            "description": "The time the run finished.",
            "format": "date-time",
            "type": "string"
          },
          "isArchiveEnabled": {
            "description": "The value that indicates whether archiving is enabled or not.",
            "type": "boolean"
          },
          "outputImageManifests": {
            "description": "The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of\r\nbuild type.",
            "type": "string"
          },
          "runId": {
            "description": "The unique identifier for the run.",
            "type": "string"
          },
          "runType": {
            "description": "The type of run.",
            "enum": [
              "QuickBuild",
              "QuickRun",
              "AutoBuild",
              "AutoRun"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "RunType"
            }
          },
          "status": {
            "description": "The current status of the run.",
            "enum": [
              "Queued",
              "Started",
              "Running",
              "Succeeded",
              "Failed",
              "Canceled",
              "Error",
              "Timeout"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "RunStatus"
            }
          },
          "taskName": {
            "description": "The name of the task that the run corresponds to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RunGetLogResult": {
        "description": "The result of get log link operation.",
        "properties": {
          "logArtifactLink": {
            "description": "The link to logs in registry for a run on a azure container registry.",
            "type": "string"
          },
          "logLink": {
            "description": "The link to logs for a run on a azure container registry.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RunListResult": {
        "description": "Collection of runs.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next set of paged results.",
            "type": "string"
          },
          "value": {
            "description": "The collection value.",
            "items": {
              "$ref": "#/components/schemas/Run"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RunProperties": {
        "description": "The properties for a run.",
        "properties": {
          "agentConfiguration": {
            "$ref": "#/components/schemas/AgentProperties",
            "description": "The machine configuration of the run agent."
          },
          "agentPoolName": {
            "description": "The dedicated agent pool for the run.",
            "type": "string"
          },
          "createTime": {
            "description": "The time the run was scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "customRegistries": {
            "description": "The list of custom registries that were logged in during this run.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "finishTime": {
            "description": "The time the run finished.",
            "format": "date-time",
            "type": "string"
          },
          "imageUpdateTrigger": {
            "$ref": "#/components/schemas/ImageUpdateTrigger",
            "description": "The image update trigger that caused the run. This is applicable if the task has base image trigger configured."
          },
          "isArchiveEnabled": {
            "default": false,
            "description": "The value that indicates whether archiving is enabled or not.",
            "type": "boolean"
          },
          "lastUpdatedTime": {
            "description": "The last updated time for the run.",
            "format": "date-time",
            "type": "string"
          },
          "logArtifact": {
            "$ref": "#/components/schemas/ImageDescriptor",
            "description": "The image description for the log artifact.",
            "readOnly": true
          },
          "outputImages": {
            "description": "The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.",
            "items": {
              "$ref": "#/components/schemas/ImageDescriptor"
            },
            "type": "array",
            "x-ms-identifiers": [
              "registry"
            ]
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformProperties",
            "description": "The platform properties against which the run will happen."
          },
          "provisioningState": {
            "description": "The provisioning state of a run.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Failed",
              "Canceled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ProvisioningState"
            }
          },
          "runErrorMessage": {
            "description": "The error message received from backend systems after the run is scheduled.",
            "readOnly": true,
            "type": "string"
          },
          "runId": {
            "description": "The unique identifier for the run.",
            "type": "string"
          },
          "runType": {
            "description": "The type of run.",
            "enum": [
              "QuickBuild",
              "QuickRun",
              "AutoBuild",
              "AutoRun"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "RunType"
            }
          },
          "sourceRegistryAuth": {
            "description": "The scope of the credentials that were used to login to the source registry during this run.",
            "type": "string"
          },
          "sourceTrigger": {
            "$ref": "#/components/schemas/SourceTriggerDescriptor",
            "description": "The source trigger that caused the run."
          },
          "startTime": {
            "description": "The time the run started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The current status of the run.",
            "enum": [
              "Queued",
              "Started",
              "Running",
              "Succeeded",
              "Failed",
              "Canceled",
              "Error",
              "Timeout"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "RunStatus"
            }
          },
          "task": {
            "description": "The task against which run was scheduled.",
            "type": "string"
          },
          "timerTrigger": {
            "$ref": "#/components/schemas/TimerTriggerDescriptor",
            "description": "The timer trigger that caused the run."
          },
          "updateTriggerToken": {
            "description": "The update trigger token passed for the Run.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RunRequest": {
        "description": "The request parameters for scheduling a run.",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "agentPoolName": {
            "description": "The dedicated agent pool for the run.",
            "type": "string"
          },
          "isArchiveEnabled": {
            "default": false,
            "description": "The value that indicates whether archiving is enabled for the run or not.",
            "type": "boolean"
          },
          "logTemplate": {
            "description": "The template that describes the repository and tag information for run log artifact.",
            "type": "string"
          },
          "type": {
            "description": "The type of the run request.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RunUpdateParameters": {
        "description": "The set of run properties that can be updated.",
        "properties": {
          "isArchiveEnabled": {
            "description": "The value that indicates whether archiving is enabled or not.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretObject": {
        "description": "Describes the properties of a secret object value.",
        "properties": {
          "type": {
            "description": "The type of the secret object which determines how the value of the secret object has to be\r\ninterpreted.",
            "enum": [
              "Opaque",
              "Vaultsecret"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SecretObjectType"
            }
          },
          "value": {
            "description": "The value of the secret. The format of this value will be determined\r\nbased on the type of the secret object. If the type is Opaque, the value will be\r\nused as is without any modification.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SetValue": {
        "description": "The properties of a overridable value that can be passed to a task template.",
        "properties": {
          "isSecret": {
            "default": false,
            "description": "Flag to indicate whether the value represents a secret or not.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the overridable value.",
            "type": "string"
          },
          "value": {
            "description": "The overridable value.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "SourceProperties": {
        "description": "The properties of the source code repository.",
        "properties": {
          "branch": {
            "description": "The branch name of the source code.",
            "type": "string"
          },
          "repositoryUrl": {
            "description": "The full URL to the source code repository",
            "type": "string"
          },
          "sourceControlAuthProperties": {
            "$ref": "#/components/schemas/AuthInfo",
            "description": "The authorization properties for accessing the source code repository and to set up\r\nwebhooks for notifications."
          },
          "sourceControlType": {
            "description": "The type of source control service.",
            "enum": [
              "Github",
              "VisualStudioTeamService"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SourceControlType"
            }
          }
        },
        "required": [
          "sourceControlType",
          "repositoryUrl"
        ],
        "type": "object"
      },
      "SourceRegistryCredentials": {
        "description": "Describes the credential parameters for accessing the source registry.",
        "properties": {
          "loginMode": {
            "description": "The authentication mode which determines the source registry login scope. The credentials for the source registry\r\nwill be generated using the given scope. These credentials will be used to login to\r\nthe source registry during the run.",
            "enum": [
              "None",
              "Default"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SourceRegistryLoginMode"
            }
          }
        },
        "type": "object"
      },
      "SourceTrigger": {
        "description": "The properties of a source based trigger.",
        "properties": {
          "name": {
            "description": "The name of the trigger.",
            "type": "string"
          },
          "sourceRepository": {
            "$ref": "#/components/schemas/SourceProperties",
            "description": "The properties that describes the source(code) for the task."
          },
          "sourceTriggerEvents": {
            "description": "The source event corresponding to the trigger.",
            "items": {
              "enum": [
                "commit",
                "pullrequest"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "SourceTriggerEvent"
              }
            },
            "type": "array"
          },
          "status": {
            "default": "Enabled",
            "description": "The current status of trigger.",
            "enum": [
              "Disabled",
              "Enabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TriggerStatus"
            }
          }
        },
        "required": [
          "sourceRepository",
          "sourceTriggerEvents",
          "name"
        ],
        "type": "object"
      },
      "SourceTriggerDescriptor": {
        "description": "The source trigger that caused a run.",
        "properties": {
          "branchName": {
            "description": "The branch name in the repository.",
            "type": "string"
          },
          "commitId": {
            "description": "The unique ID that identifies a commit.",
            "type": "string"
          },
          "eventType": {
            "description": "The event type of the trigger.",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the trigger.",
            "type": "string"
          },
          "providerType": {
            "description": "The source control provider type.",
            "type": "string"
          },
          "pullRequestId": {
            "description": "The unique ID that identifies pull request.",
            "type": "string"
          },
          "repositoryUrl": {
            "description": "The repository URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SourceTriggerUpdateParameters": {
        "description": "The properties for updating a source based trigger.",
        "properties": {
          "name": {
            "description": "The name of the trigger.",
            "type": "string"
          },
          "sourceRepository": {
            "$ref": "#/components/schemas/SourceUpdateParameters",
            "description": "The properties that describes the source(code) for the task."
          },
          "sourceTriggerEvents": {
            "description": "The source event corresponding to the trigger.",
            "items": {
              "enum": [
                "commit",
                "pullrequest"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "SourceTriggerEvent"
              }
            },
            "type": "array"
          },
          "status": {
            "default": "Enabled",
            "description": "The current status of trigger.",
            "enum": [
              "Disabled",
              "Enabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TriggerStatus"
            }
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SourceUpdateParameters": {
        "description": "The properties for updating the source code repository.",
        "properties": {
          "branch": {
            "description": "The branch name of the source code.",
            "type": "string"
          },
          "repositoryUrl": {
            "description": "The full URL to the source code repository",
            "type": "string"
          },
          "sourceControlAuthProperties": {
            "$ref": "#/components/schemas/AuthInfoUpdateParameters",
            "description": "The authorization properties for accessing the source code repository and to set up\r\nwebhooks for notifications."
          },
          "sourceControlType": {
            "description": "The type of source control service.",
            "enum": [
              "Github",
              "VisualStudioTeamService"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SourceControlType"
            }
          }
        },
        "type": "object"
      },
      "SourceUploadDefinition": {
        "description": "The properties of a response to source upload request.",
        "properties": {
          "relativePath": {
            "description": "The relative path to the source. This is used to submit the subsequent queue build request.",
            "type": "string"
          },
          "uploadUrl": {
            "description": "The URL where the client can upload the source.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SystemData": {
        "description": "Metadata pertaining to creation and last modification of the resource.",
        "properties": {
          "createdAt": {
            "description": "The timestamp of resource creation (UTC).",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "The identity that created the resource.",
            "type": "string"
          },
          "createdByType": {
            "description": "The type of identity that created the resource.",
            "enum": [
              "User",
              "Application",
              "ManagedIdentity",
              "Key"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "createdByType"
            }
          },
          "lastModifiedAt": {
            "description": "The timestamp of resource modification (UTC).",
            "format": "date-time",
            "type": "string"
          },
          "lastModifiedBy": {
            "description": "The identity that last modified the resource.",
            "type": "string"
          },
          "lastModifiedByType": {
            "description": "The type of identity that last modified the resource.",
            "enum": [
              "User",
              "Application",
              "ManagedIdentity",
              "Key"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "lastModifiedByType"
            }
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "Task": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "The task that has the ARM resource and task properties. \r\nThe task will have all information to schedule a run against it.",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/IdentityProperties",
            "description": "Identity for the resource."
          },
          "properties": {
            "$ref": "#/components/schemas/TaskProperties",
            "description": "The properties of a task.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "TaskListResult": {
        "description": "The collection of tasks.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next set of paged results.",
            "type": "string"
          },
          "value": {
            "description": "The collection value.",
            "items": {
              "$ref": "#/components/schemas/Task"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaskProperties": {
        "description": "The properties of a task.",
        "properties": {
          "agentConfiguration": {
            "$ref": "#/components/schemas/AgentProperties",
            "description": "The machine configuration of the run agent."
          },
          "agentPoolName": {
            "description": "The dedicated agent pool for the task.",
            "type": "string"
          },
          "creationDate": {
            "description": "The creation date of task.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/Credentials",
            "description": "The properties that describes a set of credentials that will be used when this run is invoked."
          },
          "isSystemTask": {
            "default": false,
            "description": "The value of this property indicates whether the task resource is system task or not.",
            "type": "boolean"
          },
          "logTemplate": {
            "description": "The template that describes the repository and tag information for run log artifact.",
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformProperties",
            "description": "The platform properties against which the run has to happen."
          },
          "provisioningState": {
            "description": "The provisioning state of the task.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Failed",
              "Canceled"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ProvisioningState"
            }
          },
          "status": {
            "description": "The current status of task.",
            "enum": [
              "Disabled",
              "Enabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TaskStatus"
            }
          },
          "step": {
            "$ref": "#/components/schemas/TaskStepProperties",
            "description": "The properties of a task step."
          },
          "timeout": {
            "default": 3600,
            "description": "Run timeout in seconds.",
            "format": "int32",
            "maximum": 28800,
            "minimum": 300,
            "type": "integer"
          },
          "trigger": {
            "$ref": "#/components/schemas/TriggerProperties",
            "description": "The properties that describe all triggers for the task."
          }
        },
        "type": "object"
      },
      "TaskPropertiesUpdateParameters": {
        "description": "The properties for updating a task.",
        "properties": {
          "agentConfiguration": {
            "$ref": "#/components/schemas/AgentProperties",
            "description": "The machine configuration of the run agent."
          },
          "agentPoolName": {
            "description": "The dedicated agent pool for the task.",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/Credentials",
            "description": "The parameters that describes a set of credentials that will be used when this run is invoked."
          },
          "logTemplate": {
            "description": "The template that describes the repository and tag information for run log artifact.",
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformUpdateParameters",
            "description": "The platform properties against which the run has to happen."
          },
          "status": {
            "description": "The current status of task.",
            "enum": [
              "Disabled",
              "Enabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TaskStatus"
            }
          },
          "step": {
            "$ref": "#/components/schemas/TaskStepUpdateParameters",
            "description": "The properties for updating a task step."
          },
          "timeout": {
            "description": "Run timeout in seconds.",
            "format": "int32",
            "type": "integer"
          },
          "trigger": {
            "$ref": "#/components/schemas/TriggerUpdateParameters",
            "description": "The properties for updating trigger properties."
          }
        },
        "type": "object"
      },
      "TaskRun": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProxyResource"
          }
        ],
        "description": "The task run that has the ARM resource and properties. \r\nThe task run will have the information of request and result of a run.",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/IdentityProperties",
            "description": "Identity for the resource."
          },
          "location": {
            "description": "The location of the resource",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/TaskRunProperties",
            "description": "The properties associated with the task run, i.e., request and result of the run",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "TaskRunListResult": {
        "description": "The collection of task runs.",
        "properties": {
          "nextLink": {
            "description": "The URI that can be used to request the next set of paged results.",
            "type": "string"
          },
          "value": {
            "description": "The collection value.",
            "items": {
              "$ref": "#/components/schemas/TaskRun"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaskRunProperties": {
        "description": "The properties of task run.",
        "properties": {
          "forceUpdateTag": {
            "description": "How the run should be forced to rerun even if the run request configuration has not changed",
            "type": "string"
          },
          "provisioningState": {
            "description": "The provisioning state of this task run",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Failed",
              "Canceled"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ProvisioningState"
            }
          },
          "runRequest": {
            "$ref": "#/components/schemas/RunRequest",
            "description": "The request (parameters) for the run"
          },
          "runResult": {
            "$ref": "#/components/schemas/Run",
            "description": "The result of this task run",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "TaskRunPropertiesUpdateParameters": {
        "description": "The properties of a task run update parameters.",
        "properties": {
          "forceUpdateTag": {
            "description": "How the run should be forced to rerun even if the run request configuration has not changed",
            "type": "string"
          },
          "runRequest": {
            "$ref": "#/components/schemas/RunRequest",
            "description": "The request (parameters) for the new run"
          }
        },
        "type": "object"
      },
      "TaskRunRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RunRequest"
          }
        ],
        "description": "The parameters for a task run request.",
        "properties": {
          "overrideTaskStepProperties": {
            "$ref": "#/components/schemas/OverrideTaskStepProperties",
            "description": "Set of overridable parameters that can be passed when running a Task."
          },
          "taskId": {
            "description": "The resource ID of task against which run has to be queued.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "taskId"
        ],
        "type": "object",
        "x-ms-discriminator-value": "TaskRunRequest"
      },
      "TaskRunUpdateParameters": {
        "description": "The parameters for updating a task run.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The ARM resource tags.",
            "type": "object"
          },
          "identity": {
            "$ref": "#/components/schemas/IdentityProperties",
            "description": "Identity for the resource."
          },
          "location": {
            "description": "The location of the resource",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/TaskRunPropertiesUpdateParameters",
            "description": "The properties for updating a task run.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "TaskStepProperties": {
        "description": "Base properties for any task step.",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "baseImageDependencies": {
            "description": "List of base image dependencies for a step.",
            "items": {
              "$ref": "#/components/schemas/BaseImageDependency"
            },
            "readOnly": true,
            "type": "array",
            "x-ms-identifiers": []
          },
          "contextAccessToken": {
            "description": "The token (git PAT or SAS token of storage account blob) associated with the context for a step.",
            "type": "string"
          },
          "contextPath": {
            "description": "The URL(absolute or relative) of the source context for the task step.",
            "type": "string"
          },
          "type": {
            "description": "The type of the step.",
            "enum": [
              "Docker",
              "FileTask",
              "EncodedTask"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "StepType"
            }
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "TaskStepUpdateParameters": {
        "description": "Base properties for updating any task step.",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "contextAccessToken": {
            "description": "The token (git PAT or SAS token of storage account blob) associated with the context for a step.",
            "type": "string"
          },
          "contextPath": {
            "description": "The URL(absolute or relative) of the source context for the task step.",
            "type": "string"
          },
          "type": {
            "description": "The type of the step.",
            "enum": [
              "Docker",
              "FileTask",
              "EncodedTask"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "StepType"
            }
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "TaskUpdateParameters": {
        "description": "The parameters for updating a task.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The ARM resource tags.",
            "type": "object"
          },
          "identity": {
            "$ref": "#/components/schemas/IdentityProperties",
            "description": "Identity for the resource."
          },
          "properties": {
            "$ref": "#/components/schemas/TaskPropertiesUpdateParameters",
            "description": "The properties for updating a task.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "TimerTrigger": {
        "description": "The properties of a timer trigger.",
        "properties": {
          "name": {
            "description": "The name of the trigger.",
            "type": "string"
          },
          "schedule": {
            "description": "The CRON expression for the task schedule",
            "type": "string"
          },
          "status": {
            "default": "Enabled",
            "description": "The current status of trigger.",
            "enum": [
              "Disabled",
              "Enabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TriggerStatus"
            }
          }
        },
        "required": [
          "schedule",
          "name"
        ],
        "type": "object"
      },
      "TimerTriggerDescriptor": {
        "properties": {
          "scheduleOccurrence": {
            "description": "The occurrence that triggered the run.",
            "type": "string"
          },
          "timerTriggerName": {
            "description": "The timer trigger name that caused the run.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimerTriggerUpdateParameters": {
        "description": "The properties for updating a timer trigger.",
        "properties": {
          "name": {
            "description": "The name of the trigger.",
            "type": "string"
          },
          "schedule": {
            "description": "The CRON expression for the task schedule",
            "type": "string"
          },
          "status": {
            "default": "Enabled",
            "description": "The current status of trigger.",
            "enum": [
              "Disabled",
              "Enabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TriggerStatus"
            }
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "TriggerProperties": {
        "description": "The properties of a trigger.",
        "properties": {
          "baseImageTrigger": {
            "$ref": "#/components/schemas/BaseImageTrigger",
            "description": "The trigger based on base image dependencies."
          },
          "sourceTriggers": {
            "description": "The collection of triggers based on source code repository.",
            "items": {
              "$ref": "#/components/schemas/SourceTrigger"
            },
            "type": "array",
            "x-ms-identifiers": [
              "name",
              "sourceRepository/repositoryUrl"
            ]
          },
          "timerTriggers": {
            "description": "The collection of timer triggers.",
            "items": {
              "$ref": "#/components/schemas/TimerTrigger"
            },
            "type": "array",
            "x-ms-identifiers": [
              "name"
            ]
          }
        },
        "type": "object"
      },
      "TriggerUpdateParameters": {
        "description": "The properties for updating triggers.",
        "properties": {
          "baseImageTrigger": {
            "$ref": "#/components/schemas/BaseImageTriggerUpdateParameters",
            "description": "The trigger based on base image dependencies."
          },
          "sourceTriggers": {
            "description": "The collection of triggers based on source code repository.",
            "items": {
              "$ref": "#/components/schemas/SourceTriggerUpdateParameters"
            },
            "type": "array",
            "x-ms-identifiers": [
              "name"
            ]
          },
          "timerTriggers": {
            "description": "The collection of timer triggers.",
            "items": {
              "$ref": "#/components/schemas/TimerTriggerUpdateParameters"
            },
            "type": "array",
            "x-ms-identifiers": [
              "name"
            ]
          }
        },
        "type": "object"
      },
      "UserIdentityProperties": {
        "properties": {
          "clientId": {
            "description": "The client id of user assigned identity.",
            "type": "string"
          },
          "principalId": {
            "description": "The principal id of user assigned identity.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}