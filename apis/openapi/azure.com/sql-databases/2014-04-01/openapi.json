{
  "openapi": "3.0.0",
  "info": {
    "description": "Provides create, read, update and delete functionality for Azure SQL Databases.",
    "title": "Azure SQL Database",
    "version": "2014-04-01",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/databases.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "$ref": "#/components/parameters/DatabaseExpandParameter"
          },
          {
            "description": "An OData filter expression that describes a subset of databases to return.",
            "in": "query",
            "name": "$filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseListResult"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Databases"
        ],
        "description": "Returns a list of databases in a server.",
        "operationId": "Databases_ListByServer",
        "x-ms-examples": {
          "List databases by server": {
            "$ref": "./examples/DatabaseList.json"
          },
          "List databases by server with filter": {
            "$ref": "./examples/DatabaseListWithFilter.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the database to be deleted.",
            "in": "path",
            "name": "databaseName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "NoContent"
          }
        },
        "tags": [
          "Databases"
        ],
        "description": "Deletes a database.",
        "operationId": "Databases_Delete",
        "x-ms-examples": {
          "Delete a database": {
            "$ref": "./examples/DatabaseDelete.json"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the database to be retrieved.",
            "in": "path",
            "name": "databaseName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/DatabaseExpandParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Databases"
        ],
        "description": "Gets a database.",
        "operationId": "Databases_Get",
        "x-ms-examples": {
          "Get a database": {
            "$ref": "./examples/DatabaseGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the database to be updated.",
            "in": "path",
            "name": "databaseName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          }
        },
        "tags": [
          "Databases"
        ],
        "description": "Updates an existing database.",
        "operationId": "Databases_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseUpdate"
              }
            }
          },
          "description": "The required parameters for updating a database.",
          "required": true
        },
        "x-ms-examples": {
          "Update a database max": {
            "$ref": "./examples/DatabaseUpdateMaxPatch.json"
          },
          "Update a database min": {
            "$ref": "./examples/DatabaseUpdateMin.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the database to be operated on (updated or created).",
            "in": "path",
            "name": "databaseName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          }
        },
        "tags": [
          "Databases"
        ],
        "description": "Creates a new database or updates an existing database.",
        "operationId": "Databases_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Database"
              }
            }
          },
          "description": "The required parameters for creating or updating a database.",
          "required": true
        },
        "x-ms-examples": {
          "Create a database as a copy": {
            "$ref": "./examples/DatabaseCreateCopy.json"
          },
          "Create a database as a dropped database restore to a specific point in time": {
            "$ref": "./examples/DatabaseCreateDroppedDatabaseRestoreToPointInTime.json"
          },
          "Create a database as a dropped database restore to deletion time": {
            "$ref": "./examples/DatabaseCreateDroppedDatabaseRestore.json"
          },
          "Create a database as a geo restore": {
            "$ref": "./examples/DatabaseCreateGeoRestore.json"
          },
          "Create a database as a non-readable secondary": {
            "$ref": "./examples/DatabaseCreateNonReadableSecondary.json"
          },
          "Create a database as a point in time restore": {
            "$ref": "./examples/DatabaseCreatePointInTimeRestore.json"
          },
          "Create a database as an online secondary": {
            "$ref": "./examples/DatabaseCreateOnlineSecondary.json"
          },
          "Create a database from a long term retention backup": {
            "$ref": "./examples/DatabaseCreateLongTermRetentionRestore.json"
          },
          "Create a database max": {
            "$ref": "./examples/DatabaseCreateMax.json"
          },
          "Create a database min": {
            "$ref": "./examples/DatabaseCreateOrUpdateMin.json"
          },
          "Update a database max": {
            "$ref": "./examples/DatabaseUpdateMaxPut.json"
          },
          "Update a database's elastic pool'": {
            "$ref": "./examples/DatabaseUpdateElasticPool.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause": {
      "post": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the data warehouse to pause.",
            "in": "path",
            "name": "databaseName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          }
        },
        "tags": [
          "DatabaseActivation"
        ],
        "description": "Pauses a data warehouse.",
        "operationId": "Databases_Pause",
        "x-ms-examples": {
          "Pause a data warehouse": {
            "$ref": "./examples/DatabasePause.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume": {
      "post": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the data warehouse to resume.",
            "in": "path",
            "name": "databaseName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          }
        },
        "tags": [
          "DatabaseActivation"
        ],
        "description": "Resumes a data warehouse.",
        "operationId": "Databases_Resume",
        "x-ms-examples": {
          "Resume a data warehouse": {
            "$ref": "./examples/DatabaseResume.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the elastic pool to be retrieved.",
            "in": "path",
            "name": "elasticPoolName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseListResult"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Databases"
        ],
        "description": "Returns a list of databases in an elastic pool.",
        "operationId": "Databases_ListByElasticPool",
        "x-ms-examples": {
          "Gets databases in an elastic pool": {
            "$ref": "./examples/DatabaseListByElasticPool.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases/{databaseName}": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the elastic pool to be retrieved.",
            "in": "path",
            "name": "elasticPoolName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the database to be retrieved.",
            "in": "path",
            "name": "databaseName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "ElasticPools"
        ],
        "description": "Gets a database inside of an elastic pool.",
        "operationId": "Databases_GetByElasticPool",
        "x-ms-examples": {
          "Get a database in an elastic pool": {
            "$ref": "./examples/DatabaseGetByElasticPool.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}/databases": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the recommended elastic pool to be retrieved.",
            "in": "path",
            "name": "recommendedElasticPoolName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseListResult"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Databases"
        ],
        "description": "Returns a list of databases inside a recommended elastic pool.",
        "operationId": "Databases_ListByRecommendedElasticPool",
        "x-ms-examples": {
          "Gets databases in an elastic pool": {
            "$ref": "./examples/DatabaseListByRecommendedElasticPool.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}/databases/{databaseName}": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "description": "The name of the elastic pool to be retrieved.",
            "in": "path",
            "name": "recommendedElasticPoolName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the database to be retrieved.",
            "in": "path",
            "name": "databaseName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Databases"
        ],
        "description": "Gets a database inside of a recommended elastic pool.",
        "operationId": "Databases_GetByRecommendedElasticPool",
        "x-ms-examples": {
          "Get a database in a recommended elastic pool": {
            "$ref": "./examples/DatabaseGetByRecommendedElasticPool.json"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "DatabaseExpandParameter": {
        "description": "A comma separated list of child objects to expand in the response. Possible properties: serviceTierAdvisors, transparentDataEncryption.",
        "in": "query",
        "name": "$expand",
        "required": false,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "ServerNameParameter": {
        "description": "The name of the server.",
        "in": "path",
        "name": "serverName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "TransparentDataEncryptionNameParameter": {
        "description": "The name of the transparent data encryption configuration.",
        "in": "path",
        "name": "transparentDataEncryptionName",
        "required": true,
        "schema": {
          "enum": [
            "current"
          ],
          "type": "string"
        },
        "x-ms-enum": {
          "modelAsString": true,
          "name": "TransparentDataEncryptionName"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "schemas": {
      "Database": {
        "allOf": [
          {
            "$ref": "../../../common/v1/types.json#/definitions/TrackedResource"
          }
        ],
        "description": "Represents a database.",
        "properties": {
          "kind": {
            "description": "Kind of database.  This is metadata used for the Azure portal experience.",
            "readOnly": true,
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/DatabaseProperties",
            "description": "The properties representing the resource.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "DatabaseListResult": {
        "description": "Represents the response to a list database request.",
        "properties": {
          "value": {
            "description": "The list of databases housed in the server.",
            "items": {
              "$ref": "#/components/schemas/Database"
            },
            "type": "array"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "DatabaseProperties": {
        "description": "Represents the properties of a database.",
        "properties": {
          "collation": {
            "description": "The collation of the database. If createMode is not Default, this value is ignored.",
            "type": "string",
            "x-ms-mutability": [
              "create",
              "read"
            ]
          },
          "containmentState": {
            "description": "The containment state of the database.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "createMode": {
            "description": "Specifies the mode of database creation.\n\nDefault: regular database creation.\n\nCopy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.\n\nOnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.\n\nPointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.\n\nRecovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.\n\nRestore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.\n\nRestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.\n\nCopy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.",
            "enum": [
              "Copy",
              "Default",
              "NonReadableSecondary",
              "OnlineSecondary",
              "PointInTimeRestore",
              "Recovery",
              "Restore",
              "RestoreLongTermRetentionBackup"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "CreateMode"
            },
            "x-ms-mutability": [
              "create"
            ]
          },
          "creationDate": {
            "description": "The creation date of the database (ISO8601 format).",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "currentServiceObjectiveId": {
            "description": "The current service level objective ID of the database. This is the ID of the service level objective that is currently active.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "databaseId": {
            "description": "The ID of the database.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "defaultSecondaryLocation": {
            "description": "The default secondary region for this database.",
            "readOnly": true,
            "type": "string"
          },
          "earliestRestoreDate": {
            "description": "This records the earliest start date and time that restore is available for this database (ISO8601 format).",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "edition": {
            "description": "The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.\r\n\r\nThe list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:\r\n\r\n```azurecli\r\naz sql db list-editions -l <location> -o table\r\n````\r\n\r\n```powershell\r\nGet-AzSqlServerServiceObjective -Location <location>\r\n````\r\n",
            "enum": [
              "Web",
              "Business",
              "Basic",
              "Standard",
              "Premium",
              "PremiumRS",
              "Free",
              "Stretch",
              "DataWarehouse",
              "System",
              "System2",
              "GeneralPurpose",
              "BusinessCritical",
              "Hyperscale"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "DatabaseEdition"
            }
          },
          "elasticPoolName": {
            "description": "The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition.",
            "type": "string"
          },
          "failoverGroupId": {
            "description": "The resource identifier of the failover group containing this database.",
            "readOnly": true,
            "type": "string"
          },
          "maxSizeBytes": {
            "description": "The max size of the database expressed in bytes. If createMode is not Default, this value is ignored. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: \"Capabilities_ListByLocation.\"",
            "type": "string"
          },
          "readScale": {
            "description": "Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition.",
            "enum": [
              "Enabled",
              "Disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ReadScale"
            }
          },
          "recommendedIndex": {
            "description": "The recommended indices for this database.",
            "items": {
              "$ref": "./sql.core.json#/definitions/RecommendedIndex"
            },
            "readOnly": true,
            "type": "array"
          },
          "recoveryServicesRecoveryPointResourceId": {
            "description": "Conditional. If createMode is RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery point to restore from.",
            "type": "string",
            "x-ms-mutability": [
              "create"
            ]
          },
          "requestedServiceObjectiveId": {
            "description": "The configured service level objective ID of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.\r\n\r\nThe list of SKUs may vary by region and support offer. To determine the service objective ids that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API.",
            "format": "uuid",
            "type": "string"
          },
          "requestedServiceObjectiveName": {
            "description": "The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property. \r\n\r\nThe list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:\r\n\r\n```azurecli\r\naz sql db list-editions -l <location> -o table\r\n````\r\n\r\n```powershell\r\nGet-AzSqlServerServiceObjective -Location <location>\r\n````\r\n",
            "enum": [
              "System",
              "System0",
              "System1",
              "System2",
              "System3",
              "System4",
              "System2L",
              "System3L",
              "System4L",
              "Free",
              "Basic",
              "S0",
              "S1",
              "S2",
              "S3",
              "S4",
              "S6",
              "S7",
              "S9",
              "S12",
              "P1",
              "P2",
              "P3",
              "P4",
              "P6",
              "P11",
              "P15",
              "PRS1",
              "PRS2",
              "PRS4",
              "PRS6",
              "DW100",
              "DW200",
              "DW300",
              "DW400",
              "DW500",
              "DW600",
              "DW1000",
              "DW1200",
              "DW1000c",
              "DW1500",
              "DW1500c",
              "DW2000",
              "DW2000c",
              "DW3000",
              "DW2500c",
              "DW3000c",
              "DW6000",
              "DW5000c",
              "DW6000c",
              "DW7500c",
              "DW10000c",
              "DW15000c",
              "DW30000c",
              "DS100",
              "DS200",
              "DS300",
              "DS400",
              "DS500",
              "DS600",
              "DS1000",
              "DS1200",
              "DS1500",
              "DS2000",
              "ElasticPool"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ServiceObjectiveName"
            }
          },
          "restorePointInTime": {
            "description": "Conditional. If createMode is PointInTimeRestore, this value is required. If createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value.",
            "format": "date-time",
            "type": "string",
            "x-ms-mutability": [
              "create"
            ]
          },
          "sampleName": {
            "description": "Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.",
            "enum": [
              "AdventureWorksLT"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SampleName"
            },
            "x-ms-mutability": [
              "create"
            ]
          },
          "serviceLevelObjective": {
            "description": "The current service level objective of the database.",
            "enum": [
              "System",
              "System0",
              "System1",
              "System2",
              "System3",
              "System4",
              "System2L",
              "System3L",
              "System4L",
              "Free",
              "Basic",
              "S0",
              "S1",
              "S2",
              "S3",
              "S4",
              "S6",
              "S7",
              "S9",
              "S12",
              "P1",
              "P2",
              "P3",
              "P4",
              "P6",
              "P11",
              "P15",
              "PRS1",
              "PRS2",
              "PRS4",
              "PRS6",
              "DW100",
              "DW200",
              "DW300",
              "DW400",
              "DW500",
              "DW600",
              "DW1000",
              "DW1200",
              "DW1000c",
              "DW1500",
              "DW1500c",
              "DW2000",
              "DW2000c",
              "DW3000",
              "DW2500c",
              "DW3000c",
              "DW6000",
              "DW5000c",
              "DW6000c",
              "DW7500c",
              "DW10000c",
              "DW15000c",
              "DW30000c",
              "DS100",
              "DS200",
              "DS300",
              "DS400",
              "DS500",
              "DS600",
              "DS1000",
              "DS1200",
              "DS1500",
              "DS2000",
              "ElasticPool"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ServiceObjectiveName"
            }
          },
          "serviceTierAdvisors": {
            "description": "The list of service tier advisors for this database. Expanded property",
            "items": {
              "$ref": "./sql.core.json#/definitions/ServiceTierAdvisor"
            },
            "readOnly": true,
            "type": "array"
          },
          "sourceDatabaseDeletionDate": {
            "description": "Conditional. If createMode is Restore and sourceDatabaseId is the deleted database's original resource id when it existed (as opposed to its current restorable dropped database id), then this value is required. Specifies the time that the database was deleted.",
            "format": "date-time",
            "type": "string",
            "x-ms-mutability": [
              "create"
            ]
          },
          "sourceDatabaseId": {
            "description": "Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source database must be the same as the new database being created.",
            "type": "string",
            "x-ms-mutability": [
              "create"
            ]
          },
          "status": {
            "description": "The status of the database.",
            "readOnly": true,
            "type": "string"
          },
          "transparentDataEncryption": {
            "description": "The transparent data encryption info for this database.",
            "items": {
              "$ref": "./sql.core.json#/definitions/TransparentDataEncryption"
            },
            "readOnly": true,
            "type": "array"
          },
          "zoneRedundant": {
            "description": "Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DatabaseUpdate": {
        "allOf": [
          {
            "$ref": "../../../common/v1/types.json#/definitions/Resource"
          }
        ],
        "description": "Represents a database update.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource tags.",
            "type": "object"
          },
          "properties": {
            "$ref": "#/components/schemas/DatabaseProperties",
            "description": "The properties representing the resource.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  }
}