{
  "openapi": "3.0.0",
  "info": {
    "description": "REST API for Azure Redis Cache Service.",
    "title": "RedisManagementClient",
    "version": "2017-02-01",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/redis/resource-manager/Microsoft.Cache/stable/2017-02-01/redis.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/providers/Microsoft.Cache/operations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationListResult"
                }
              }
            },
            "description": "Success. The response describes the list of operations."
          }
        },
        "tags": [
          "Operations"
        ],
        "description": "Lists all of the available REST API operations of the Microsoft.Cache provider.",
        "operationId": "Operations_List",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Cache/Redis/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisListResult"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Gets all Redis caches in the specified subscription.",
        "operationId": "Redis_List",
        "x-ms-examples": {
          "RedisCacheList": {
            "$ref": "./examples/RedisCacheList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/": {
      "get": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisListResult"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Lists all Redis caches in a resource group.",
        "operationId": "Redis_ListByResourceGroup",
        "x-ms-examples": {
          "RedisCacheListByResourceGroup": {
            "$ref": "./examples/RedisCacheListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "cacheName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisFirewallRuleListResult"
                }
              }
            },
            "description": "Successfully got the current rules"
          }
        },
        "tags": [
          "Redis",
          "FirewallRules"
        ],
        "description": "Gets all firewall rules in the specified redis cache.",
        "operationId": "FirewallRules_ListByRedisResource",
        "x-ms-examples": {
          "RedisCacheFirewallRulesList": {
            "$ref": "./examples/RedisCacheFirewallRulesList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "cacheName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the firewall rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the rule"
          },
          "204": {
            "description": "Successfully deleted the rule"
          }
        },
        "tags": [
          "Redis",
          "FirewallRules"
        ],
        "description": "Deletes a single firewall rule in a specified redis cache.",
        "operationId": "FirewallRules_Delete",
        "x-ms-examples": {
          "RedisCacheFirewallRuleDelete": {
            "$ref": "./examples/RedisCacheFirewallRuleDelete.json"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "cacheName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the firewall rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisFirewallRule"
                }
              }
            },
            "description": "Successfully found the rule"
          }
        },
        "tags": [
          "Redis",
          "FirewallRules"
        ],
        "description": "Gets a single firewall rule in a specified redis cache.",
        "operationId": "FirewallRules_Get",
        "x-ms-examples": {
          "RedisCacheFirewallRuleGet": {
            "$ref": "./examples/RedisCacheFirewallRuleGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "cacheName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the firewall rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisFirewallRule"
                }
              }
            },
            "description": "Resource was successfully updated"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisFirewallRule"
                }
              }
            },
            "description": "Resource was successfully created"
          }
        },
        "tags": [
          "Redis",
          "FirewallRules"
        ],
        "description": "Create or update a redis cache firewall rule",
        "operationId": "FirewallRules_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisFirewallRule"
              }
            }
          },
          "description": "Parameters supplied to the create or update redis firewall rule operation.",
          "required": true
        },
        "x-ms-examples": {
          "RedisCacheFirewallRuleCreate": {
            "$ref": "./examples/RedisCacheFirewallRuleCreate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Deletes a Redis cache.",
        "operationId": "Redis_Delete",
        "x-ms-examples": {
          "RedisCacheDelete": {
            "$ref": "./examples/RedisCacheDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisResource"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Gets a Redis cache (resource description).",
        "operationId": "Redis_Get",
        "x-ms-examples": {
          "RedisCacheGet": {
            "$ref": "./examples/RedisCacheGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisResource"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Update an existing Redis cache.",
        "operationId": "Redis_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisUpdateParameters"
              }
            }
          },
          "description": "Parameters supplied to the Update Redis operation.",
          "required": true
        },
        "x-ms-examples": {
          "RedisCacheUpdate": {
            "$ref": "./examples/RedisCacheUpdate.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisResource"
                }
              }
            },
            "description": "The existing redis cache was successfully updated. Check provisioningStatus to see detailed status."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisResource"
                }
              }
            },
            "description": "The new redis cache was successfully created. Check provisioningStatus to see detailed status."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.",
        "operationId": "Redis_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisCreateParameters"
              }
            }
          },
          "description": "Parameters supplied to the Create Redis operation.",
          "required": true
        },
        "x-ms-examples": {
          "RedisCacheCreate": {
            "$ref": "./examples/RedisCacheCreate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/export": {
      "post": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Export operation succeeded."
          },
          "202": {
            "description": "Export operation successfully enqueued; follow the Location header to poll for final outcome."
          },
          "204": {
            "description": "Export operation succeeded."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Export data from the redis cache to blobs in a container.",
        "operationId": "Redis_ExportData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRDBParameters"
              }
            }
          },
          "description": "Parameters for Redis export operation.",
          "required": true
        },
        "x-ms-examples": {
          "RedisCacheExport": {
            "$ref": "./examples/RedisCacheExport.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/forceReboot": {
      "post": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisForceRebootResponse"
                }
              }
            },
            "description": "Reboot operation successfully enqueued"
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.",
        "operationId": "Redis_ForceReboot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisRebootParameters"
              }
            }
          },
          "description": "Specifies which Redis node(s) to reboot.",
          "required": true
        },
        "x-ms-examples": {
          "RedisCacheForceReboot": {
            "$ref": "./examples/RedisCacheForceReboot.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/import": {
      "post": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Import operation succeeded."
          },
          "202": {
            "description": "Import operation successfully enqueued; follow the Location header to poll for final outcome."
          },
          "204": {
            "description": "Import operation succeeded."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Import data into Redis cache.",
        "operationId": "Redis_ImportData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportRDBParameters"
              }
            }
          },
          "description": "Parameters for Redis import operation.",
          "required": true
        },
        "x-ms-examples": {
          "RedisCacheImport": {
            "$ref": "./examples/RedisCacheImport.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers": {
      "get": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisLinkedServerWithPropertiesList"
                }
              }
            },
            "description": "Response of get linked servers."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Gets the list of linked servers associated with this redis cache (requires Premium SKU).",
        "operationId": "RedisLinkedServer_List",
        "x-ms-examples": {
          "RedisLinkedServer_List": {
            "$ref": "./examples/RedisCacheLinkedServer_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the linked server that is being added to the Redis cache.",
            "in": "path",
            "name": "linkedServerName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Linked server was successfully deleted."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Deletes the linked server from a redis cache (requires Premium SKU).",
        "operationId": "RedisLinkedServer_Delete",
        "x-ms-examples": {
          "RedisLinkedServerDelete": {
            "$ref": "./examples/RedisCacheLinkedServer_Delete.json"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the linked server.",
            "in": "path",
            "name": "linkedServerName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisLinkedServerWithProperties"
                }
              }
            },
            "description": "Response of get linked server."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Gets the detailed information about a linked server of a redis cache (requires Premium SKU).",
        "operationId": "RedisLinkedServer_Get",
        "x-ms-examples": {
          "RedisLinkedServer_Get": {
            "$ref": "./examples/RedisCacheLinkedServer_Get.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the linked server that is being added to the Redis cache.",
            "in": "path",
            "name": "linkedServerName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisLinkedServerWithProperties"
                }
              }
            },
            "description": "The linked server was successfully added."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisLinkedServerWithProperties"
                }
              }
            },
            "description": "The linked server was successfully added."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Adds a linked server to the Redis cache (requires Premium SKU).",
        "operationId": "RedisLinkedServer_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisLinkedServerCreateParameters"
              }
            }
          },
          "description": "Parameters supplied to the Create Linked server operation.",
          "required": true
        },
        "x-ms-examples": {
          "RedisLinkedServer_Create": {
            "$ref": "./examples/RedisCacheLinkedServer_Create.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listKeys": {
      "post": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisAccessKeys"
                }
              }
            },
            "description": "Lists the keys for the specified Redis cache."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Retrieve a Redis cache's access keys. This operation requires write permission to the cache resource.",
        "operationId": "Redis_ListKeys",
        "x-ms-examples": {
          "RedisCacheListKeys": {
            "$ref": "./examples/RedisCacheListKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/default": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "204": {
            "description": "Success."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Deletes the patching schedule of a redis cache (requires Premium SKU).",
        "operationId": "PatchSchedules_Delete",
        "x-ms-examples": {
          "RedisCachePatchSchedulesDelete": {
            "$ref": "./examples/RedisCachePatchSchedulesDelete.json"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisPatchSchedule"
                }
              }
            },
            "description": "Response of get patch schedules."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Gets the patching schedule of a redis cache (requires Premium SKU).",
        "operationId": "PatchSchedules_Get",
        "x-ms-examples": {
          "RedisCachePatchSchedulesGet": {
            "$ref": "./examples/RedisCachePatchSchedulesGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisPatchSchedule"
                }
              }
            },
            "description": "The patch schedule was successfully updated."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisPatchSchedule"
                }
              }
            },
            "description": "The patch schedule was successfully created."
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Create or replace the patching schedule for Redis cache (requires Premium SKU).",
        "operationId": "PatchSchedules_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisPatchSchedule"
              }
            }
          },
          "description": "Parameters to set the patching schedule for Redis cache.",
          "required": true
        },
        "x-ms-examples": {
          "RedisCachePatchSchedulesCreateOrUpdate": {
            "$ref": "./examples/RedisCachePatchSchedulesCreateOrUpdate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/regenerateKey": {
      "post": {
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Redis cache.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedisAccessKeys"
                }
              }
            },
            "description": "Lists the regenerated keys for Redis Cache"
          }
        },
        "tags": [
          "Redis"
        ],
        "description": "Regenerate Redis cache's access keys. This operation requires write permission to the cache resource.",
        "operationId": "Redis_RegenerateKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisRegenerateKeyParameters"
              }
            }
          },
          "description": "Specifies which key to regenerate.",
          "required": true
        },
        "x-ms-examples": {
          "RedisCacheRegenerateKey": {
            "$ref": "./examples/RedisCacheRegenerateKey.json"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "ApiVersionParameter": {
        "description": "Client Api Version.",
        "in": "query",
        "name": "api-version",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SubscriptionIdParameter": {
        "description": "Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
        "in": "path",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "ExportRDBParameters": {
        "description": "Parameters for Redis export operation.",
        "properties": {
          "container": {
            "description": "Container name to export to.",
            "type": "string"
          },
          "format": {
            "description": "File format.",
            "type": "string"
          },
          "prefix": {
            "description": "Prefix to use for exported files.",
            "type": "string"
          }
        },
        "required": [
          "container",
          "prefix"
        ],
        "type": "object"
      },
      "ImportRDBParameters": {
        "description": "Parameters for Redis import operation.",
        "properties": {
          "files": {
            "description": "files to import.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "format": {
            "description": "File format.",
            "type": "string"
          }
        },
        "required": [
          "files"
        ],
        "type": "object"
      },
      "Operation": {
        "description": "REST API operation",
        "properties": {
          "display": {
            "description": "The object that describes the operation.",
            "properties": {
              "description": {
                "description": "Friendly name of the operation",
                "type": "string"
              },
              "operation": {
                "description": "Operation type: read, write, delete, listKeys/action, etc.",
                "type": "string"
              },
              "provider": {
                "description": "Friendly name of the resource provider",
                "type": "string"
              },
              "resource": {
                "description": "Resource type on which the operation is performed.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "Operation name: {provider}/{resource}/{operation}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OperationListResult": {
        "description": "Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results.",
        "properties": {
          "nextLink": {
            "description": "URL to get the next set of operation list results if there are any.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "List of operations supported by the resource provider.",
            "items": {
              "$ref": "#/components/schemas/Operation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProxyResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "The resource model definition for a ARM proxy resource. It will have everything other than required location and tags"
      },
      "RedisAccessKeys": {
        "description": "Redis cache access keys.",
        "properties": {
          "primaryKey": {
            "description": "The current primary key that clients can use to authenticate with Redis cache.",
            "readOnly": true,
            "type": "string"
          },
          "secondaryKey": {
            "description": "The current secondary key that clients can use to authenticate with Redis cache.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedisCreateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "Parameters supplied to the Create Redis operation.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RedisCreateProperties",
            "description": "Redis cache properties.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "RedisCreateProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RedisProperties"
          }
        ],
        "description": "Properties supplied to Create Redis operation.",
        "properties": {
          "sku": {
            "$ref": "#/components/schemas/Sku",
            "description": "The SKU of the Redis cache to deploy."
          }
        },
        "required": [
          "sku"
        ],
        "type": "object"
      },
      "RedisFirewallRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProxyResource"
          }
        ],
        "description": "A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RedisFirewallRuleProperties",
            "description": "redis cache firewall rule properties",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "RedisFirewallRuleListResult": {
        "description": "The response of list firewall rules Redis operation.",
        "properties": {
          "nextLink": {
            "description": "Link for next set of locations.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "Results of the list firewall rules operation.",
            "items": {
              "$ref": "#/components/schemas/RedisFirewallRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RedisFirewallRuleProperties": {
        "description": "Specifies a range of IP addresses permitted to connect to the cache",
        "properties": {
          "endIP": {
            "description": "highest IP address included in the range",
            "type": "string"
          },
          "startIP": {
            "description": "lowest IP address included in the range",
            "type": "string"
          }
        },
        "required": [
          "startIP",
          "endIP"
        ],
        "type": "object"
      },
      "RedisForceRebootResponse": {
        "description": "Response to force reboot for Redis cache.",
        "properties": {
          "Message": {
            "description": "Status message",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedisLinkedServer": {
        "description": "Linked server Id",
        "properties": {
          "id": {
            "description": "Linked server Id.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedisLinkedServerCreateParameters": {
        "description": "Parameter required for creating a linked server to redis cache.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RedisLinkedServerCreateProperties",
            "description": "Properties required to create a linked server.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "RedisLinkedServerCreateProperties": {
        "description": "Create properties for a linked server",
        "properties": {
          "linkedRedisCacheId": {
            "description": "Fully qualified resourceId of the linked redis cache.",
            "type": "string"
          },
          "linkedRedisCacheLocation": {
            "description": "Location of the linked redis cache.",
            "type": "string"
          },
          "serverRole": {
            "description": "Role of the linked server.",
            "enum": [
              "Primary",
              "Secondary"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ReplicationRole"
            }
          }
        },
        "required": [
          "linkedRedisCacheId",
          "linkedRedisCacheLocation",
          "serverRole"
        ],
        "type": "object"
      },
      "RedisLinkedServerList": {
        "description": "List of linked server Ids of a Redis cache.",
        "properties": {
          "value": {
            "description": "List of linked server Ids of a Redis cache.",
            "items": {
              "$ref": "#/components/schemas/RedisLinkedServer"
            },
            "type": "array"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "RedisLinkedServerProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RedisLinkedServerCreateProperties"
          }
        ],
        "description": "Properties of a linked server to be returned in get/put response",
        "properties": {
          "provisioningState": {
            "description": "Terminal state of the link between primary and secondary redis cache.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedisLinkedServerWithProperties": {
        "description": "Response to put/get linked server (with properties) for Redis cache.",
        "properties": {
          "id": {
            "description": "Resource ID.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Resource name.",
            "readOnly": true,
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/RedisLinkedServerProperties",
            "description": "Properties of the linked server.",
            "x-ms-client-flatten": true
          },
          "type": {
            "description": "Resource type.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedisLinkedServerWithPropertiesList": {
        "description": "List of linked servers (with properties) of a Redis cache.",
        "properties": {
          "value": {
            "description": "List of linked servers (with properties) of a Redis cache.",
            "items": {
              "$ref": "#/components/schemas/RedisLinkedServerWithProperties"
            },
            "type": "array"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "RedisListResult": {
        "description": "The response of list Redis operation.",
        "properties": {
          "nextLink": {
            "description": "Link for next set of locations.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "List of Redis cache instances.",
            "items": {
              "$ref": "#/components/schemas/RedisResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RedisPatchSchedule": {
        "description": "Response to put/get patch schedules for Redis cache.",
        "properties": {
          "id": {
            "description": "Resource ID.",
            "readOnly": true,
            "type": "string"
          },
          "location": {
            "description": "Resource location.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Resource name.",
            "readOnly": true,
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/ScheduleEntries",
            "description": "List of patch schedules for a Redis cache.",
            "x-ms-client-flatten": true
          },
          "type": {
            "description": "Resource type.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "RedisProperties": {
        "description": "Properties supplied to Create or Update Redis operation.",
        "properties": {
          "enableNonSslPort": {
            "description": "Specifies whether the non-ssl Redis server port (6379) is enabled.",
            "type": "boolean"
          },
          "redisConfiguration": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.",
            "type": "object"
          },
          "shardCount": {
            "description": "The number of shards to be created on a Premium Cluster Cache.",
            "format": "int32",
            "type": "integer"
          },
          "staticIP": {
            "description": "Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.",
            "pattern": "^\\d+\\.\\d+\\.\\d+\\.\\d+$",
            "type": "string"
          },
          "subnetId": {
            "description": "The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1",
            "pattern": "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$",
            "type": "string"
          },
          "tenantSettings": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "tenantSettings",
            "type": "object"
          }
        },
        "type": "object",
        "x-ms-external": true
      },
      "RedisRebootParameters": {
        "description": "Specifies which Redis node(s) to reboot.",
        "properties": {
          "rebootType": {
            "description": "Which Redis node(s) to reboot. Depending on this value data loss is possible.",
            "enum": [
              "PrimaryNode",
              "SecondaryNode",
              "AllNodes"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "RebootType"
            }
          },
          "shardId": {
            "description": "If clustering is enabled, the ID of the shard to be rebooted.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "rebootType"
        ],
        "type": "object"
      },
      "RedisRegenerateKeyParameters": {
        "description": "Specifies which Redis access keys to reset.",
        "properties": {
          "keyType": {
            "description": "The Redis access key to regenerate.",
            "enum": [
              "Primary",
              "Secondary"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "RedisKeyType"
            }
          }
        },
        "required": [
          "keyType"
        ],
        "type": "object"
      },
      "RedisResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "A single Redis item in List or Get Operation.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RedisResourceProperties",
            "description": "Redis cache properties.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "RedisResourceProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RedisProperties"
          }
        ],
        "description": "Parameters describing a Redis instance.",
        "properties": {
          "accessKeys": {
            "$ref": "#/components/schemas/RedisAccessKeys",
            "description": "The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache",
            "readOnly": true
          },
          "hostName": {
            "description": "Redis host name.",
            "readOnly": true,
            "type": "string"
          },
          "linkedServers": {
            "$ref": "#/components/schemas/RedisLinkedServerList",
            "description": "List of the linked servers associated with the cache",
            "readOnly": true
          },
          "port": {
            "description": "Redis non-SSL port.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "provisioningState": {
            "description": "Redis instance provisioning status.",
            "readOnly": true,
            "type": "string"
          },
          "redisVersion": {
            "description": "Redis version.",
            "readOnly": true,
            "type": "string"
          },
          "sku": {
            "$ref": "#/components/schemas/Sku",
            "description": "The SKU of the Redis cache to deploy."
          },
          "sslPort": {
            "description": "Redis SSL port.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RedisUpdateParameters": {
        "description": "Parameters supplied to the Update Redis operation.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource tags.",
            "type": "object"
          },
          "properties": {
            "$ref": "#/components/schemas/RedisUpdateProperties",
            "description": "Redis cache properties.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "RedisUpdateProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RedisProperties"
          }
        ],
        "description": "Properties supplied to Update Redis operation.",
        "properties": {
          "sku": {
            "$ref": "#/components/schemas/Sku",
            "description": "The SKU of the Redis cache to deploy."
          }
        },
        "type": "object"
      },
      "Resource": {
        "description": "The Resource definition.",
        "properties": {
          "id": {
            "description": "Resource ID.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Resource name.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Resource type.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      },
      "ScheduleEntries": {
        "description": "List of patch schedules for a Redis cache.",
        "properties": {
          "scheduleEntries": {
            "description": "List of patch schedules for a Redis cache.",
            "items": {
              "$ref": "#/components/schemas/ScheduleEntry"
            },
            "type": "array"
          }
        },
        "required": [
          "scheduleEntries"
        ],
        "type": "object"
      },
      "ScheduleEntry": {
        "description": "Patch schedule entry for a Premium Redis Cache.",
        "properties": {
          "dayOfWeek": {
            "description": "Day of the week when a cache can be patched.",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday",
              "Everyday",
              "Weekend"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "DayOfWeek"
            }
          },
          "maintenanceWindow": {
            "description": "ISO8601 timespan specifying how much time cache patching can take. ",
            "format": "duration",
            "type": "string"
          },
          "startHourUtc": {
            "description": "Start hour after which cache patching can start.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "dayOfWeek",
          "startHourUtc"
        ],
        "type": "object"
      },
      "Sku": {
        "description": "SKU parameters supplied to the create Redis operation.",
        "properties": {
          "capacity": {
            "description": "The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).",
            "format": "int32",
            "type": "integer"
          },
          "family": {
            "description": "The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).",
            "enum": [
              "C",
              "P"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SkuFamily"
            }
          },
          "name": {
            "description": "The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)",
            "enum": [
              "Basic",
              "Standard",
              "Premium"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "SkuName"
            }
          }
        },
        "required": [
          "name",
          "family",
          "capacity"
        ],
        "type": "object"
      },
      "TrackedResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "The resource model definition for a ARM tracked top level resource",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource tags.",
            "type": "object",
            "x-ms-mutability": [
              "read",
              "create",
              "update"
            ]
          },
          "location": {
            "description": "The geo-location where the resource lives",
            "type": "string",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          }
        },
        "required": [
          "location"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow.",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}