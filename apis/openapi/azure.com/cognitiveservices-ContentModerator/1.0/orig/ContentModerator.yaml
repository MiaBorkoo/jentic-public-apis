openapi: 3.0.0
info:
  description: "You use the API to scan your content as it's generated. Content Moderator then processes your content and sends the results, along with relevant information, either back to your systems or to the built-in review tool. You can use this information to make decisions, like taking it down or sending it to a human judge.\r\n\r\nWhen you're using the API, images need to have a minimum of 128 pixels and a maximum file size of 4 MB. \r\nText can be at most 1,024 characters long. \r\nIf the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs you about the issue."
  title: Content Moderator Client
  version: '1.0'
servers:
  - url: '{Endpoint}'
    variables:
      Endpoint:
        description: >-
          Supported Azure Cognitive Services endpoints (protocol and host name,
          such as https://westus.api.cognitive.microsoft.com).
        x-ms-parameter-location: client
        x-ms-skip-url-encoding: true
paths:
  /contentmoderator/lists/v1.0/imagelists:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageLists'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImageLists
      description: Gets all the image lists.
      operationId: ListManagementImageLists_GetAllImageLists
      x-ms-examples:
        Get All Imagelists request:
          $ref: ../v1.0/examples/GetImageListsResource.JSON
    post:
      parameters:
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageList'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImageLists
      description: Creates an image list.
      operationId: ListManagementImageLists_Create
      requestBody:
        $ref: '#/components/requestBodies/ListManagementImageLists_UpdateBody'
      x-ms-examples:
        Create Imagelist request:
          $ref: ../v1.0/examples/CreateImageListResource.JSON
  '/contentmoderator/lists/v1.0/imagelists/{listId}':
    delete:
      parameters:
        - $ref: '#/components/parameters/listId'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImageLists
      description: Deletes the image list with listId equal to the passed list ID.
      operationId: ListManagementImageLists_Delete
      x-ms-examples:
        Delete Imagelist request:
          $ref: ../v1.0/examples/DeleteImageListResource.JSON
    get:
      parameters:
        - $ref: '#/components/parameters/listId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageList'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImageLists
      description: >-
        Returns the details of the image list with listId equal to the passed
        list ID.
      operationId: ListManagementImageLists_GetDetails
      x-ms-examples:
        Get List Id Details request:
          $ref: ../v1.0/examples/GetImageListIdDetailsResource.JSON
    put:
      parameters:
        - $ref: '#/components/parameters/listId'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageList'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImageLists
      description: Updates an image list with listId equal to the passed list ID.
      operationId: ListManagementImageLists_Update
      requestBody:
        content:
          application/json:
            schema:
              properties:
                Description:
                  description: Description of the list.
                  type: string
                Metadata:
                  additionalProperties:
                    type: string
                  description: Metadata of the list.
                  type: object
                Name:
                  description: Name of the list.
                  type: string
              type: object
        description: Schema of the body.
        required: true
      x-ms-examples:
        Update Imagelist request:
          $ref: ../v1.0/examples/UpdateImageListResource.JSON
  '/contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex':
    post:
      parameters:
        - $ref: '#/components/parameters/listId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshIndex'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImageLists
      description: Refreshes the index of the list with listId equal to the passed list ID.
      operationId: ListManagementImageLists_RefreshIndex
      x-ms-examples:
        Refresh Image Index request:
          $ref: ../v1.0/examples/RefreshImageIndexResource.JSON
  '/contentmoderator/lists/v1.0/imagelists/{listId}/images':
    delete:
      parameters:
        - $ref: '#/components/parameters/listId'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImage
      description: >-
        Deletes all images from the list with listId equal to the passed list
        ID.
      operationId: ListManagementImage_DeleteAllImages
      x-ms-examples:
        Delete All Images request:
          $ref: ../v1.0/examples/DeleteAllImagesResource.JSON
    get:
      parameters:
        - $ref: '#/components/parameters/listId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageIds'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImage
      description: >-
        Gets all image IDs from the list with listId equal to the passed list
        ID.
      operationId: ListManagementImage_GetAllImageIds
      x-ms-examples:
        Get All Image Ids request:
          $ref: ../v1.0/examples/GetAllImageIdsResource.JSON
    post:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/label'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImage
      description: Add an image to the list with listId equal to the passed list ID.
      operationId: ListManagementImage_AddImage
      x-ms-examples:
        Add Image request:
          $ref: ./examples/AddImageResource.JSON
  '/contentmoderator/lists/v1.0/imagelists/{listId}/images/{ImageId}':
    delete:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/ImageId'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImage
      description: Deletes an image from the list with the passed list ID and image ID.
      operationId: ListManagementImage_DeleteImage
      x-ms-examples:
        Delete Image request:
          $ref: ../v1.0/examples/DeleteImageResource.JSON
  /contentmoderator/lists/v1.0/termlists:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermLists'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTermLists
      description: Gets all the term lists.
      operationId: ListManagementTermLists_GetAllTermLists
      x-ms-examples:
        Get All Termlists request:
          $ref: ../v1.0/examples/GetTermListsResource.JSON
    post:
      parameters:
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermList'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTermLists
      description: Creates a term list.
      operationId: ListManagementTermLists_Create
      requestBody:
        $ref: '#/components/requestBodies/ListManagementImageLists_UpdateBody'
      x-ms-examples:
        Create Termlist request:
          $ref: ../v1.0/examples/CreateTermListResource.JSON
  '/contentmoderator/lists/v1.0/termlists/{listId}':
    delete:
      parameters:
        - $ref: '#/components/parameters/listId'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTermLists
      description: Deletes the term list with listId equal to the passed list ID.
      operationId: ListManagementTermLists_Delete
      x-ms-examples:
        Delete Termlist request:
          $ref: ../v1.0/examples/DeleteTermListResource.JSON
    get:
      parameters:
        - $ref: '#/components/parameters/listId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermList'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTermLists
      description: >-
        Returns list ID details of the term list with listId equal to the passed
        list ID.
      operationId: ListManagementTermLists_GetDetails
      x-ms-examples:
        Get Term ListId Details request:
          $ref: ../v1.0/examples/GetTermListIdDetailsResource.JSON
    put:
      parameters:
        - $ref: '#/components/parameters/listId'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermList'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTermLists
      description: Updates a term list.
      operationId: ListManagementTermLists_Update
      requestBody:
        content:
          application/json:
            schema:
              properties:
                Description:
                  description: Description of the list.
                  type: string
                Metadata:
                  additionalProperties:
                    type: string
                  description: Metadata of the list.
                  type: object
                Name:
                  description: Name of the list.
                  type: string
              type: object
        description: Schema of the body.
        required: true
      x-ms-examples:
        Update Termlist request:
          $ref: ../v1.0/examples/UpdateTermListResource.JSON
  '/contentmoderator/lists/v1.0/termlists/{listId}/RefreshIndex':
    post:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshIndex'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTermLists
      description: Refreshes the index of the list with listId equal to the passed list ID.
      operationId: ListManagementTermLists_RefreshIndex
      x-ms-examples:
        Refresh Term Index request:
          $ref: ../v1.0/examples/RefreshTermIndexResource.JSON
  '/contentmoderator/lists/v1.0/termlists/{listId}/terms':
    delete:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/language'
      responses:
        '204':
          content:
            application/json:
              schema:
                type: string
          description: No content.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTerm
      description: Deletes all terms from the list with listId equal to the passed list ID.
      operationId: ListManagementTerm_DeleteAllTerms
      x-ms-examples:
        Delete AllTerms request:
          $ref: ../v1.0/examples/DeleteAllTermsResource.JSON
    get:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/language'
        - description: Pagination start index.
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Maximum number.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Terms'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTerm
      description: Gets all terms from the list with listId equal to the passed list ID.
      operationId: ListManagementTerm_GetAllTerms
      x-ms-examples:
        Get All Terms request:
          $ref: ../v1.0/examples/GetAllTermsResource.JSON
  '/contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}':
    delete:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/term'
        - $ref: '#/components/parameters/language'
      responses:
        '204':
          content:
            application/json:
              schema:
                type: string
          description: No content.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTerm
      description: Deletes a term from the list with listId equal to the passed list ID.
      operationId: ListManagementTerm_DeleteTerm
      x-ms-examples:
        Delete Term request:
          $ref: ../v1.0/examples/DeleteTermResource.JSON
    post:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/term'
        - $ref: '#/components/parameters/language'
      responses:
        '201':
          description: Created.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementTerm
      description: Adds a term to the term list with listId equal to the passed list ID.
      operationId: ListManagementTerm_AddTerm
      x-ms-examples:
        Add Term request:
          $ref: ../v1.0/examples/AddTermResource.JSON
  /contentmoderator/moderate/v1.0/ProcessImage/Evaluate:
    post:
      parameters:
        - $ref: '#/components/parameters/CacheImage'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluate'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: Returns probabilities of the image containing racy or adult content.
      operationId: ImageModeration_Evaluate
  /contentmoderator/moderate/v1.0/ProcessImage/FindFaces:
    post:
      parameters:
        - $ref: '#/components/parameters/CacheImage'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoundFaces'
          description: List of faces found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: Returns the list of faces found.
      operationId: ImageModeration_FindFaces
  /contentmoderator/moderate/v1.0/ProcessImage/Match:
    post:
      parameters:
        - $ref: '#/components/parameters/listIdQueryParameter'
        - $ref: '#/components/parameters/CacheImage'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
          description: "Supported values for tags are:\r\n<ul>\r\n<li>101: Nudity</li>\r\n<li>102: Sexual Content</li>\r\n<li>201: Alcohol</li>\r\n<li>202: Tobacco</li>\r\n<li>203: Drugs</li>\r\n<li>301: Child Exploitation</li>\r\n<li>401: Violence</li>\r\n<li>402: Weapons</li>\r\n<li>403: Gore</li>\r\n<li>501: Profanity</li>\r\n<li>502: Vulgarity</li>\r\n</ul>."
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: "Fuzzily match an image against one of your custom image lists. You can create and manage your custom image lists by using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this API</a>. \r\n\r\nReturns the ID and tags of a matching image.<br/>\r\n<br/>\r\nNote: You must refresh the index on the corresponding image list to ensure that additions and removals are reflected in the response."
      operationId: ImageModeration_Match
  /contentmoderator/moderate/v1.0/ProcessImage/OCR:
    post:
      parameters:
        - $ref: '#/components/parameters/language'
        - $ref: '#/components/parameters/CacheImage'
        - $ref: '#/components/parameters/enhanced'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OCR'
          description: Text found and list of candidate text details.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: >-
        Returns any text found in the image for the specified language. If no
        language is specified in the input, the detection defaults to English.
      operationId: ImageModeration_OCR
  /contentmoderator/moderate/v1.0/ProcessText/DetectLanguage:
    post:
      parameters:
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
              - text/plain
              - text/html
              - text/xml
              - text/markdown
            type: string
          x-ms-client-name: textContentType
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectedLanguage'
          description: Detected language result.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - TextModeration
      description: >-
        This operation detects the language of input content. It returns the <a
        href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3 code</a> for
        the predominant language in the submitted text. More than 110 languages
        are supported.
      operationId: TextModeration_DetectLanguage
      requestBody:
        $ref: '#/components/requestBodies/TextModeration_ScreenTextTextContent'
      x-ms-examples:
        Detect Language request:
          $ref: ../v1.0/examples/DetectLanguageResource.JSON
  /contentmoderator/moderate/v1.0/ProcessText/Screen/:
    post:
      parameters:
        - $ref: '#/components/parameters/textLanguage'
        - $ref: '#/components/parameters/autocorrect'
        - $ref: '#/components/parameters/PII'
        - $ref: '#/components/parameters/listIdQueryParameter'
        - $ref: '#/components/parameters/classify'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
              - text/plain
              - text/html
              - text/xml
              - text/markdown
            type: string
          x-ms-client-name: textContentType
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Screen'
          description: Status 200.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - TextModeration
      description: >-
        Detects profanity in more than 100 languages and matches against custom
        and shared blocklists.
      operationId: TextModeration_ScreenText
      requestBody:
        $ref: '#/components/requestBodies/TextModeration_ScreenTextTextContent'
      summary: Detect profanity and match against custom and shared blocklists
      x-ms-examples:
        Detect Language request:
          $ref: ../v1.0/examples/ScreenTextResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/jobs':
    post:
      parameters:
        - $ref: '#/components/parameters/teamName'
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/ContentId'
        - $ref: '#/components/parameters/WorkflowName'
        - $ref: '#/components/parameters/CallBackEndpoint'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
              - application/json
              - image/jpeg
            type: string
          x-ms-client-name: jobContentType
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobId'
            text/json:
              schema:
                $ref: '#/components/schemas/JobId'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
            text/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: "A job ID will be returned for the content posted on this endpoint. \r\n\r\nAfter the content is evaluated against the provided workflow, the review will be created or ignored based on the workflow expression.\r\n\r\n<h3>CallBack Schemas </h3>\r\n\r\n<p>\r\n<h4>Job Completion CallBack Sample</h4><br/>\r\n\r\n{<br/>\r\n  \"JobId\": \"<Job ID>,<br/>\r\n  \"ReviewId\": \"<Review ID, if the job resulted in a review to be created>\",<br/>\r\n  \"WorkFlowId\": \"default\",<br/>\r\n  \"Status\": \"<One of Complete, InProgress, or Error>\",<br/>\r\n  \"ContentType\": \"Image\",<br/>\r\n  \"ContentId\": \"<ContentId value that was specified on input>\",<br/>\r\n  \"CallBackType\": \"Job\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>\r\n<p>\r\n<h4>Review Completion CallBack Sample</h4><br/>\r\n\r\n{\r\n  \"ReviewId\": \"<Review ID>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<ContentId value that was specified on input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>."
      operationId: Reviews_CreateJob
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ContentValue:
                  description: Content to evaluate for a job.
                  type: string
              required:
                - ContentValue
              type: object
          image/jpeg:
            schema:
              properties:
                ContentValue:
                  description: Content to evaluate for a job.
                  type: string
              required:
                - ContentValue
              type: object
        description: Content to evaluate.
        required: true
      x-ms-examples:
        Create Job request:
          $ref: ../v1.0/examples/CreateJobResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}':
    get:
      parameters:
        - description: Your team name.
          in: path
          name: teamName
          required: true
          schema:
            type: string
        - description: ID of the job.
          in: path
          name: JobId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: Get the job details for a job ID.
      operationId: Reviews_GetJobDetails
      x-ms-examples:
        Get Job Details request:
          $ref: ../v1.0/examples/GetJobDetailsResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews':
    post:
      parameters:
        - description: Content type.
          in: header
          name: UrlContentType
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/teamName'
        - $ref: '#/components/parameters/subTeam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewList'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: "The created reviews appear for reviewers on your team. As reviewers finish reviewing, results of the reviews are posted (that is, HTTP POST) on the specified CallBackEndpoint value.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review ID>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<ContentId value that was specified on input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>."
      operationId: Reviews_CreateReviews
      requestBody:
        content:
          application/json:
            schema:
              description: Schema of the body.
              items:
                description: Schema items of the body.
                properties:
                  CallbackEndpoint:
                    description: Callback endpoint.
                    type: string
                  Content:
                    description: Content to review.
                    type: string
                  ContentId:
                    description: Content identifier.
                    type: string
                  Metadata:
                    description: Metadata details.
                    items:
                      properties:
                        Key:
                          description: Your key parameter.
                          type: string
                        Value:
                          description: Your value parameter.
                          type: string
                      required:
                        - Key
                        - Value
                      type: object
                    type: array
                  Type:
                    description: Type of the content.
                    enum:
                      - Image
                      - Text
                    type: string
                required:
                  - Content
                  - ContentId
                  - Type
                type: object
              type: array
        description: Body of the API for creating reviews.
        required: true
      x-ms-examples:
        Create Review request:
          $ref: ../v1.0/examples/CreateReviewResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}':
    get:
      parameters:
        - description: Your team name.
          in: path
          name: teamName
          required: true
          schema:
            type: string
        - description: ID of the review.
          in: path
          name: reviewId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: Returns review details for the passed review ID.
      operationId: Reviews_GetReview
      x-ms-examples:
        Get Review request:
          $ref: ../v1.0/examples/GetReviewResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames':
    get:
      parameters:
        - $ref: '#/components/parameters/teamName'
        - $ref: '#/components/parameters/reviewId'
        - description: >-
            Time stamp of the frame from where you want to start fetching the
            frames.
          in: query
          name: startSeed
          schema:
            type: integer
        - description: Number of frames to fetch.
          in: query
          name: noOfRecords
          schema:
            type: integer
        - description: Get frames filtered by tags.
          in: query
          name: filter
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Frames'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: "The created reviews appear for reviewers on your team. As reviewers finish reviewing, results of the reviews are posted (that is, HTTP POST) on the specified CallBackEndpoint value.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review ID>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<ContentId value that was specified on input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>."
      operationId: Reviews_GetVideoFrames
      x-ms-examples:
        Get Frames Request:
          $ref: ./examples/GetFramesResource.JSON
    post:
      parameters:
        - $ref: '#/components/parameters/teamName'
        - description: ID of the review.
          in: path
          name: reviewId
          required: true
          schema:
            type: string
        - description: Timescale of the video that you're adding frames to.
          in: query
          name: timescale
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: "The created reviews appear for reviewers on your team. As reviewers finish reviewing, results of the reviews are posted (that is, HTTP POST) on the specified CallBackEndpoint value.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review ID>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<ContentId value that was specified on input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>."
      operationId: Reviews_AddVideoFrame
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish':
    post:
      parameters:
        - $ref: '#/components/parameters/teamName'
        - $ref: '#/components/parameters/reviewId'
      responses:
        '204':
          description: No content.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: Publish a video review.
      operationId: Reviews_PublishVideoReview
      x-ms-examples:
        publish video request:
          $ref: ../v1.0/examples/PublishVideoReviewResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript':
    put:
      parameters:
        - $ref: '#/components/parameters/teamName'
        - $ref: '#/components/parameters/reviewId'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
              - text/plain
            type: string
          x-ms-client-name: ContentType
      responses:
        '204':
          description: No content.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: >-
        This API adds a transcript file (text version of all the words spoken in
        a video) to a video review. The file should be in a valid WebVTT format.
      operationId: Reviews_AddVideoTranscript
      requestBody:
        content:
          text/plain:
            schema:
              format: file
              type: object
        description: Transcript file of the video.
        required: true
      x-ms-examples:
        Add transcript request:
          $ref: ../v1.0/examples/AddVideoTranscriptResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult':
    put:
      parameters:
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          x-ms-client-name: ContentType
        - $ref: '#/components/parameters/teamName'
        - $ref: '#/components/parameters/reviewId'
      responses:
        '204':
          description: No content.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: >-
        This API adds a transcript screen text result file for a video review.
        The transcript screen text result file is a result of the Screen Text
        API. To generate a transcript screen text result file, you must screen a
        transcript file for profanity by using the Screen Text API.
      operationId: Reviews_AddVideoTranscriptModerationResult
      requestBody:
        content:
          application/json:
            schema:
              description: Schema of the body.
              items:
                description: Schema items of the body.
                properties:
                  Terms:
                    description: Metadata details.
                    items:
                      properties:
                        Index:
                          description: Index of the word.
                          type: integer
                        Term:
                          description: Detected word.
                          type: string
                      required:
                        - Index
                        - Term
                      type: object
                    type: array
                  Timestamp:
                    description: Time stamp of the image.
                    type: string
                required:
                  - Timestamp
                  - Terms
                type: object
              type: array
        description: Body of the API for adding video transcript moderation results.
        required: true
      x-ms-examples:
        Transcript moderation result request:
          $ref: ../v1.0/examples/TranscriptModerationResult.JSON
components:
  parameters:
    CacheImage:
      description: >-
        Whether to retain the submitted image for future use. If it's omitted,
        the default is false.
      in: query
      name: CacheImage
      schema:
        type: boolean
      x-ms-parameter-location: method
    CallBackEndpoint:
      description: Callback endpoint for posting the result of creating a job.
      in: query
      name: CallBackEndpoint
      schema:
        type: string
      x-ms-parameter-location: method
    ContentId:
      description: ID or name to identify the submitted content.
      in: query
      name: ContentId
      required: true
      schema:
        type: string
      x-ms-parameter-location: method
    ContentType:
      description: 'Image, text or video.'
      in: query
      name: ContentType
      required: true
      schema:
        enum:
          - Image
          - Text
          - Video
        type: string
      x-ms-parameter-location: method
    Endpoint:
      description: >-
        Supported Azure Cognitive Services endpoints (protocol and host name,
        such as https://westus.api.cognitive.microsoft.com).
      x-ms-parameter-location: client
      x-ms-skip-url-encoding: true
    ImageId:
      description: Image ID.
      in: path
      name: ImageId
      required: true
      schema:
        type: string
      x-ms-parameter-location: method
    PII:
      description: Detect personal identifiable information.
      in: query
      name: PII
      required: false
      schema:
        default: false
        type: boolean
      x-ms-parameter-location: method
    WorkflowName:
      description: Workflow name that you want to invoke.
      in: query
      name: WorkflowName
      required: true
      schema:
        type: string
      x-ms-parameter-location: method
    autocorrect:
      description: Autocorrect text.
      in: query
      name: autocorrect
      required: false
      schema:
        default: false
        type: boolean
      x-ms-parameter-location: method
    classify:
      description: Classify input.
      in: query
      name: classify
      required: false
      schema:
        default: false
        type: boolean
      x-ms-parameter-location: method
    enhanced:
      description: >-
        When it's set to true, the image goes through additional processing to
        come with additional candidates.


        The image or TIFF file is not supported when enhanced is set to true.


        Note: This affects the response time.
      in: query
      name: enhanced
      schema:
        default: false
        type: boolean
      x-ms-parameter-location: method
    label:
      description: Image label.
      in: query
      name: label
      required: false
      schema:
        type: string
      x-ms-parameter-location: method
    language:
      description: Language of the terms.
      in: query
      name: language
      required: true
      schema:
        type: string
      x-ms-parameter-location: method
    listId:
      description: List ID of the image list.
      in: path
      name: listId
      required: true
      schema:
        type: string
      x-ms-parameter-location: method
    listIdQueryParameter:
      description: List ID.
      in: query
      name: listId
      schema:
        type: string
      x-ms-parameter-location: method
    reviewId:
      description: ID of the review.
      in: path
      name: reviewId
      required: true
      schema:
        type: string
      x-ms-parameter-location: method
    subTeam:
      description: Subteam that you want to assign the created review to.
      in: query
      name: subTeam
      required: false
      schema:
        type: string
      x-ms-parameter-location: method
    tag:
      description: Tag for the image.
      in: query
      name: tag
      required: false
      schema:
        type: integer
      x-ms-parameter-location: method
    teamName:
      description: Your team name.
      in: path
      name: teamName
      required: true
      schema:
        type: string
      x-ms-parameter-location: method
    term:
      description: Term to be deleted
      in: path
      name: term
      required: true
      schema:
        type: string
      x-ms-parameter-location: method
    textLanguage:
      description: Language of the text.
      in: query
      name: language
      schema:
        type: string
      x-ms-parameter-location: method
    timescale:
      description: Timescale of the video.
      in: query
      name: timescale
      required: false
      schema:
        type: integer
      x-ms-parameter-location: method
  requestBodies:
    ImageModeration_FindFacesFileInputImagestream:
      content:
        image/bmp:
          schema:
            format: file
            type: object
        image/gif:
          schema:
            format: file
            type: object
        image/jpeg:
          schema:
            format: file
            type: object
        image/png:
          schema:
            format: file
            type: object
        image/tiff:
          schema:
            format: file
            type: object
      description: Image file.
      required: true
    ImageModeration_FindFacesUrlInputImageurl:
      content:
        application/json:
          schema:
            properties:
              DataRepresentation:
                default: URL
                type: string
              Value:
                type: string
            type: object
      description: Image URL.
      required: true
    ListManagementImageLists_UpdateBody:
      content:
        application/json:
          schema:
            properties:
              Description:
                description: Description of the list.
                type: string
              Metadata:
                additionalProperties:
                  type: string
                description: Metadata of the list.
                type: object
              Name:
                description: Name of the list.
                type: string
            type: object
      description: Schema of the body.
      required: true
    TextModeration_ScreenTextTextContent:
      content:
        text/html:
          schema:
            format: file
            type: object
        text/markdown:
          schema:
            format: file
            type: object
        text/plain:
          schema:
            format: file
            type: object
        text/xml:
          schema:
            format: file
            type: object
      description: Content to screen.
      required: true
  schemas:
    APIError:
      description: Error information that the API returns.
      properties:
        Error:
          $ref: '#/components/schemas/Error'
      type: object
    Address:
      description: Address details.
      properties:
        Index:
          description: Index (location) of the address in the input text content.
          type: integer
        Text:
          description: Detected address.
          type: string
      type: object
    Candidate:
      description: Optical character recognition (OCR) candidate text.
      properties:
        Confidence:
          description: Confidence level.
          type: number
        Text:
          description: Text found.
          type: string
      type: object
    Classification:
      description: Classification details of the text.
      properties:
        Category1:
          description: >-
            Category1 score details of the text. For more details on category
            classification, see <a
            href="https://aka.ms/textClassifyCategories">this article</a>.
          properties:
            Score:
              description: Category1 score.
              type: number
          type: object
        Category2:
          description: >-
            Category2 score details of the text. For more details on category
            classification, see <a
            href="https://aka.ms/textClassifyCategories">this article</a>.
          properties:
            Score:
              description: Category2 score.
              type: number
          type: object
        Category3:
          description: >-
            Category3 score details of the text. For more details on category
            classification, see <a
            href="https://aka.ms/textClassifyCategories">this article</a>.
          properties:
            Score:
              description: Category3 score.
              type: number
          type: object
        ReviewRecommended:
          description: Review-recommended flag.
          type: boolean
      type: object
    DetectedLanguage:
      description: Detected language result.
      properties:
        DetectedLanguage:
          description: Detected language.
          type: string
        Status:
          $ref: '#/components/schemas/Status'
          description: Detected language status.
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    DetectedTerms:
      description: Detected term details.
      properties:
        Index:
          description: >-
            Index (location) of the detected profanity term in the input text
            content.
          type: integer
        ListId:
          description: Matched ID in the term list.
          type: integer
        OriginalIndex:
          description: >-
            Original index (location) of the detected profanity term in the
            input text content.
          type: integer
        Term:
          description: Detected profanity term.
          type: string
      type: object
    Email:
      description: Email address details.
      properties:
        Detected:
          description: Detected email address from the input text content.
          type: string
        Index:
          description: Index (location) of the email address in the input text content.
          type: integer
        SubType:
          description: Subtype of the detected email address.
          type: string
        Text:
          description: Email address in the input text content.
          type: string
      type: object
    Error:
      description: Error body.
      properties:
        Code:
          type: string
        Message:
          type: string
      type: object
    Evaluate:
      description: Evaluation response object.
      properties:
        AdultClassificationScore:
          description: Adult classification score.
          type: number
        AdvancedInfo:
          description: Advanced info.
          items:
            $ref: '#/components/schemas/KeyValuePair'
          type: array
        CacheID:
          description: Cache ID.
          type: string
        IsImageAdultClassified:
          description: Indicates if an image is classified as adult.
          type: boolean
        IsImageRacyClassified:
          description: Indicates if the image is classified as racy.
          type: boolean
        RacyClassificationScore:
          description: Racy classification score.
          type: number
        Result:
          description: Evaluation result.
          type: boolean
        Status:
          $ref: '#/components/schemas/Status'
          description: Evaluation status.
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    Face:
      description: Coordinates to the found face.
      properties:
        Bottom:
          description: Bottom coordinate.
          type: integer
        Left:
          description: Left coordinate.
          type: integer
        Right:
          description: Right coordinate.
          type: integer
        Top:
          description: Top coordinate.
          type: integer
      type: object
    FoundFaces:
      description: Request object that contains found faces.
      properties:
        AdvancedInfo:
          description: Advanced info.
          items:
            $ref: '#/components/schemas/KeyValuePair'
          type: array
        CacheId:
          description: Cache ID.
          type: string
        Count:
          description: Number of faces found.
          type: integer
        Faces:
          description: List of faces.
          items:
            $ref: '#/components/schemas/Face'
          type: array
        Result:
          description: True if a result was found.
          type: boolean
        Status:
          $ref: '#/components/schemas/Status'
          description: Evaluation status.
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    Frame:
      description: Video frame property details.
      properties:
        FrameImage:
          description: Frame image.
          type: string
        Metadata:
          description: Array of key/value pairs.
          items:
            $ref: '#/components/schemas/KeyValuePair'
          type: array
        ReviewerResultTags:
          description: Reviewer result tags.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        Timestamp:
          description: Time stamp of the frame.
          type: string
      type: object
    Frames:
      description: Response for a request to get frames.
      properties:
        ReviewId:
          description: ID of the review.
          type: string
        VideoFrames:
          items:
            $ref: '#/components/schemas/Frame'
          type: array
      type: object
    IPA:
      description: IP address details.
      properties:
        Index:
          description: Index (location) of the IP address in the input text content.
          type: integer
        SubType:
          description: Subtype of the detected IP address.
          type: string
        Text:
          description: Detected IP address.
          type: string
      type: object
    Image:
      description: Image properties.
      properties:
        AdditionalInfo:
          description: Advanced info list.
          items:
            properties:
              Key:
                description: Key parameter.
                type: string
              Value:
                description: Value parameter.
                type: string
            type: object
          type: array
        ContentId:
          description: Content ID.
          type: string
        Status:
          $ref: '#/components/schemas/Status'
          description: Status details.
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    ImageIds:
      description: Image ID properties.
      properties:
        ContentIds:
          description: ID of the content.
          items:
            type: integer
          type: array
        ContentSource:
          description: Source of the content.
          type: string
        Status:
          $ref: '#/components/schemas/Status'
          description: Get Image status.
          type: object
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    ImageList:
      description: Image list properties.
      properties:
        Description:
          description: Description for the image list.
          type: string
        Id:
          description: Image list ID.
          type: integer
        Metadata:
          additionalProperties:
            type: string
          description: Image list metadata.
          type: object
        Name:
          description: Image list name.
          type: string
      type: object
    ImageLists:
      items:
        $ref: '#/components/schemas/ImageList'
      type: array
    Job:
      description: Job object.
      properties:
        CallBackEndpoint:
          description: Callback endpoint.
          type: string
        Id:
          description: Job ID.
          type: string
        JobExecutionReport:
          description: Array of key/value pair objects in the job execution report.
          items:
            $ref: '#/components/schemas/JobExecutionReportDetails'
          type: array
        ResultMetaData:
          description: Array of key/value pairs.
          items:
            $ref: '#/components/schemas/KeyValuePair'
          type: array
        ReviewId:
          description: Review ID if one is created.
          type: string
        Status:
          description: Status string.
          type: string
        TeamName:
          description: Team name associated with the job.
          type: string
        Type:
          description: Type of the content.
          type: string
        WorkflowId:
          description: ID of the workflow.
          type: string
      type: object
    JobExecutionReportDetails:
      description: Values in the job execution report.
      properties:
        Msg:
          description: Message details.
          type: string
        Ts:
          description: Time details.
          type: string
      type: object
    JobId:
      properties:
        JobId:
          description: ID of the created job.
          type: string
      type: object
    JobListResult:
      description: List of job IDs.
      properties:
        Value:
          description: Job ID.
          items:
            type: string
          type: array
      type: object
    KeyValuePair:
      description: Key/value pair object properties.
      properties:
        Key:
          description: Key parameter.
          type: string
        Value:
          description: Value parameter.
          type: string
      type: object
    Match:
      description: Match details.
      properties:
        Label:
          description: Label.
          type: string
        MatchId:
          description: Match ID.
          type: integer
        Score:
          description: Confidence score of the image match.
          type: number
        Source:
          description: Source.
          type: string
        Tags:
          description: Tags for match details.
          items:
            type: integer
          type: array
      type: object
    MatchResponse:
      description: Response for a match request.
      properties:
        CacheID:
          description: Cache ID.
          type: string
        IsMatch:
          description: Indicates if there is a match.
          type: boolean
        Matches:
          description: Match details.
          items:
            $ref: '#/components/schemas/Match'
          type: array
        Status:
          $ref: '#/components/schemas/Status'
          description: Evaluation status.
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    OCR:
      description: Contains the text found in an image for the specified language.
      properties:
        CacheId:
          description: Cache ID.
          type: string
        Candidates:
          description: List of candidate text.
          items:
            $ref: '#/components/schemas/Candidate'
          type: array
        Language:
          description: ISO 639-3 code.
          type: string
        Metadata:
          description: Array of key/value pairs.
          items:
            $ref: '#/components/schemas/KeyValuePair'
          type: array
        Status:
          $ref: '#/components/schemas/Status'
          description: Evaluation status.
        Text:
          description: Found text.
          type: string
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    PII:
      description: Details about personally identifiable information.
      properties:
        Address:
          items:
            $ref: '#/components/schemas/Address'
          type: array
        Email:
          items:
            $ref: '#/components/schemas/Email'
          type: array
        IPA:
          items:
            $ref: '#/components/schemas/IPA'
          type: array
        Phone:
          items:
            $ref: '#/components/schemas/Phone'
          type: array
        SSN:
          items:
            $ref: '#/components/schemas/SSN'
          type: array
      type: object
    Phone:
      description: Phone property details.
      properties:
        CountryCode:
          description: Country/region code of the detected phone number.
          type: string
        Index:
          description: Index (location) of the phone number in the input text content.
          type: integer
        Text:
          description: Detected phone number.
          type: string
      type: object
    RefreshIndex:
      description: Response after you refresh the index.
      properties:
        AdvancedInfo:
          description: Advanced info list.
          items:
            additionalProperties:
              type: string
            type: object
          type: array
        ContentSourceId:
          description: Content source ID.
          type: string
        IsUpdateSuccess:
          description: Update success status.
          type: boolean
        Status:
          $ref: '#/components/schemas/Status'
          description: Status of refreshing the index.
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    Review:
      description: Review object.
      properties:
        CallbackEndpoint:
          description: Callback endpoint.
          type: string
        Content:
          description: Content value.
          type: string
        ContentId:
          description: ID of the content.
          type: string
        CreatedBy:
          description: Reviewer name.
          type: string
        Metadata:
          description: Array of key/value pairs.
          items:
            $ref: '#/components/schemas/KeyValuePair'
          type: array
        ReviewId:
          description: ID of the review.
          type: string
        ReviewerResultTags:
          description: Array of key/value pairs with reviewer-set tags.
          items:
            $ref: '#/components/schemas/KeyValuePair'
          type: array
        Status:
          description: 'Status string (<Pending, Complete>).'
          type: string
        SubTeam:
          description: Name of the subteam.
          type: string
        Type:
          description: Type of content.
          type: string
      type: object
    ReviewList:
      description: List of review IDs.
      items:
        type: string
      type: array
    SSN:
      description: Details about a detected social security number.
      properties:
        Index:
          description: >-
            Index (location) of the social security number in the input text
            content.
          type: integer
        Text:
          description: Detected social security number in the input text content.
          type: string
      type: object
    Screen:
      description: Response for a screen text request.
      properties:
        AutoCorrectedText:
          description: Autocorrected text.
          type: string
        Classification:
          $ref: '#/components/schemas/Classification'
          description: Classification details of the text.
        Language:
          description: Language of the input text content.
          type: string
        Misrepresentation:
          description: Misrepresentation text.
          items:
            type: string
          type: array
        NormalizedText:
          description: Normalized text.
          type: string
        OriginalText:
          description: Original text.
          type: string
        PII:
          $ref: '#/components/schemas/PII'
          description: Details about personally identifiable information.
        Status:
          $ref: '#/components/schemas/Status'
          description: Evaluation status.
        Terms:
          items:
            $ref: '#/components/schemas/DetectedTerms'
          type: array
        TrackingId:
          description: Unique Content Moderator transaction ID.
          type: string
      type: object
    Status:
      description: Status properties.
      properties:
        Code:
          description: Status code.
          type: integer
        Description:
          description: Status description.
          type: string
        Exception:
          description: Exception status.
          type: string
      type: object
    Tag:
      description: Tag details.
      properties:
        Key:
          description: Key parameter.
          type: string
        Value:
          description: Value parameter.
          type: string
      type: object
    TermList:
      description: Term list properties.
      properties:
        Description:
          description: Description for the term list.
          type: string
        Id:
          description: Term list ID.
          type: integer
        Metadata:
          additionalProperties:
            type: string
          description: Term list metadata.
          type: object
        Name:
          description: Term list name.
          type: string
      type: object
    TermLists:
      items:
        $ref: '#/components/schemas/TermList'
      type: array
    Terms:
      description: Term properties.
      properties:
        Data:
          $ref: '#/components/schemas/TermsData'
          description: Term data details.
        Paging:
          description: Paging details.
          properties:
            Limit:
              description: Limit details.
              type: integer
            Offset:
              description: Offset details.
              type: integer
            Returned:
              description: Returned text details.
              type: integer
            Total:
              description: Total details.
              type: integer
          type: object
      type: object
    TermsData:
      description: All term ID response properties.
      properties:
        Language:
          description: Language of the terms.
          type: string
        Status:
          $ref: '#/components/schemas/Status'
          description: Term status.
          type: object
        Terms:
          description: List of terms.
          items:
            $ref: '#/components/schemas/TermsInList'
          type: array
        TrackingId:
          description: Tracking ID.
          type: string
      type: object
    TermsInList:
      description: Terms in the passed list ID.
      properties:
        Term:
          description: Added term details.
          type: string
      type: object
  securitySchemes:
    apim_key:
      in: header
      name: Ocp-Apim-Subscription-Key
      type: apiKey
security:
  - apim_key: []
x-ms-paths:
  '/contentmoderator/lists/v1.0/imagelists/{listId}/images?overload=stream':
    post:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/label'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImage
      description: Add an image to the list with listId equal to the passed list ID.
      operationId: ListManagementImage_AddImageFileInput
      requestBody:
        content:
          image/bmp:
            schema:
              format: file
              type: object
          image/gif:
            schema:
              format: file
              type: object
          image/jpeg:
            schema:
              format: file
              type: object
          image/png:
            schema:
              format: file
              type: object
          image/tiff:
            schema:
              format: file
              type: object
        description: Image file.
        required: true
  '/contentmoderator/lists/v1.0/imagelists/{listId}/images?overload=url':
    post:
      parameters:
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/label'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ListManagementImage
      description: Add an image to the list with listId equal to the passed list ID.
      operationId: ListManagementImage_AddImageUrlInput
      requestBody:
        content:
          application/json:
            schema:
              properties:
                DataRepresentation:
                  default: URL
                  type: string
                Value:
                  type: string
              type: object
        description: Image URL.
        required: true
      x-ms-examples:
        Add Image request:
          $ref: ./examples/AddImageResource.JSON
  /contentmoderator/moderate/v1.0/ProcessImage/Evaluate?overload=stream:
    post:
      parameters:
        - $ref: '#/components/parameters/CacheImage'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluate'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: Returns probabilities of the image containing racy or adult content.
      operationId: ImageModeration_EvaluateFileInput
      requestBody:
        content:
          image/bmp:
            schema:
              format: file
              type: object
          image/gif:
            schema:
              format: file
              type: object
          image/jpeg:
            schema:
              format: file
              type: object
          image/png:
            schema:
              format: file
              type: object
          image/tiff:
            schema:
              format: file
              type: object
        description: Image file.
        required: true
  /contentmoderator/moderate/v1.0/ProcessImage/Evaluate?overload=url:
    post:
      parameters:
        - $ref: '#/components/parameters/CacheImage'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluate'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: Returns probabilities of the image containing racy or adult content.
      operationId: ImageModeration_EvaluateUrlInput
      requestBody:
        content:
          application/json:
            schema:
              properties:
                DataRepresentation:
                  default: URL
                  type: string
                Value:
                  type: string
              type: object
        description: Image URL.
        required: true
      x-ms-examples:
        Evaluate Image request:
          $ref: ./examples/EvaluateImageResource.JSON
  /contentmoderator/moderate/v1.0/ProcessImage/FindFaces?overload=stream:
    post:
      parameters:
        - $ref: '#/components/parameters/CacheImage'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoundFaces'
          description: List of faces found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: Returns the list of faces found.
      operationId: ImageModeration_FindFacesFileInput
      requestBody:
        content:
          image/bmp:
            schema:
              format: file
              type: object
          image/gif:
            schema:
              format: file
              type: object
          image/jpeg:
            schema:
              format: file
              type: object
          image/png:
            schema:
              format: file
              type: object
          image/tiff:
            schema:
              format: file
              type: object
        description: Image file.
        required: true
  /contentmoderator/moderate/v1.0/ProcessImage/FindFaces?overload=url:
    post:
      parameters:
        - $ref: '#/components/parameters/CacheImage'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoundFaces'
          description: List of faces found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: Returns the list of faces found.
      operationId: ImageModeration_FindFacesUrlInput
      requestBody:
        content:
          application/json:
            schema:
              properties:
                DataRepresentation:
                  default: URL
                  type: string
                Value:
                  type: string
              type: object
        description: Image URL.
        required: true
      x-ms-examples:
        Find Faces request:
          $ref: ./examples/FindFacesResource.JSON
  /contentmoderator/moderate/v1.0/ProcessImage/Match?overload=stream:
    post:
      parameters:
        - $ref: '#/components/parameters/listIdQueryParameter'
        - $ref: '#/components/parameters/CacheImage'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
          description: "Supported values for tags are:\r\n<ul>\r\n<li>101: Nudity</li>\r\n<li>102: Sexual Content</li>\r\n<li>201: Alcohol</li>\r\n<li>202: Tobacco</li>\r\n<li>203: Drugs</li>\r\n<li>301: Child Exploitation</li>\r\n<li>401: Violence</li>\r\n<li>402: Weapons</li>\r\n<li>403: Gore</li>\r\n<li>501: Profanity</li>\r\n<li>502: Vulgarity</li>\r\n</ul>."
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: "Fuzzily match an image against one of your custom image lists. You can create and manage your custom image lists by using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this API</a>. \r\n\r\nReturns the ID and tags of a matching image.<br/>\r\n<br/>\r\nNote: You must refresh the index on the corresponding image list to ensure that additions and removals are reflected in the response."
      operationId: ImageModeration_MatchFileInput
      requestBody:
        content:
          image/bmp:
            schema:
              format: file
              type: object
          image/gif:
            schema:
              format: file
              type: object
          image/jpeg:
            schema:
              format: file
              type: object
          image/png:
            schema:
              format: file
              type: object
          image/tiff:
            schema:
              format: file
              type: object
        description: Image file.
        required: true
  /contentmoderator/moderate/v1.0/ProcessImage/Match?overload=url:
    post:
      parameters:
        - $ref: '#/components/parameters/listIdQueryParameter'
        - $ref: '#/components/parameters/CacheImage'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
          description: "Supported values for tags are:\r\n<ul>\r\n<li>101: Nudity</li>\r\n<li>102: Sexual Content</li>\r\n<li>201: Alcohol</li>\r\n<li>202: Tobacco</li>\r\n<li>203: Drugs</li>\r\n<li>301: Child Exploitation</li>\r\n<li>401: Violence</li>\r\n<li>402: Weapons</li>\r\n<li>403: Gore</li>\r\n<li>501: Profanity</li>\r\n<li>502: Vulgarity</li>\r\n</ul>."
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: "Fuzzily match an image against one of your custom image lists. You can create and manage your custom image lists by using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this API</a>. \r\n\r\nReturns the ID and tags of a matching image.<br/>\r\n<br/>\r\nNote: You must refresh the index on the corresponding image list to ensure that additions and removals are reflected in the response."
      operationId: ImageModeration_MatchUrlInput
      requestBody:
        content:
          application/json:
            schema:
              properties:
                DataRepresentation:
                  default: URL
                  type: string
                Value:
                  type: string
              type: object
        description: Image URL.
        required: true
      x-ms-examples:
        Match Image request:
          $ref: ../v1.0/examples/MatchImageResource.JSON
  /contentmoderator/moderate/v1.0/ProcessImage/OCR?overload=stream:
    post:
      parameters:
        - $ref: '#/components/parameters/language'
        - $ref: '#/components/parameters/CacheImage'
        - $ref: '#/components/parameters/enhanced'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OCR'
          description: Found text and list of candidate text.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: >-
        Returns any text found in the image for the specified language. If no
        language is specified in the input, the detection defaults to English.
      operationId: ImageModeration_OCRFileInput
      requestBody:
        content:
          image/bmp:
            schema:
              format: file
              type: object
          image/gif:
            schema:
              format: file
              type: object
          image/jpeg:
            schema:
              format: file
              type: object
          image/png:
            schema:
              format: file
              type: object
          image/tiff:
            schema:
              format: file
              type: object
        description: Image file.
        required: true
  /contentmoderator/moderate/v1.0/ProcessImage/OCR?overload=url:
    post:
      parameters:
        - $ref: '#/components/parameters/language'
        - $ref: '#/components/parameters/CacheImage'
        - $ref: '#/components/parameters/enhanced'
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OCR'
          description: Found text and list of candidate text.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - ImageModeration
      description: >-
        Returns any text found in the image for the specified language. If no
        language is specified in the input, the detection defaults to English.
      operationId: ImageModeration_OCRUrlInput
      requestBody:
        content:
          application/json:
            schema:
              properties:
                DataRepresentation:
                  default: URL
                  type: string
                Value:
                  type: string
              type: object
        description: Image URL.
        required: true
      x-ms-examples:
        Image OCR request:
          $ref: ../v1.0/examples/OCRResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames?overload=stream':
    post:
      parameters:
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - description: Your team name.
          in: path
          name: teamName
          required: true
          schema:
            type: string
        - description: ID of the review.
          in: path
          name: reviewId
          required: true
          schema:
            type: string
        - description: Timescale of the video.
          in: query
          name: timescale
          required: false
          schema:
            type: integer
      responses:
        '204':
          description: No content.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: >-
        Use this method to add frames for a video review. The timescale
        parameter is a factor that's used to convert the timestamp on a frame
        into milliseconds. Timescale is provided in the output of the Content
        Moderator video media processor on the Azure Media Services platform.
        Timescale in the video moderation output is Ticks/Second.
      operationId: Reviews_AddVideoFrameStream
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                frameMetadata:
                  description: Metadata of the frame.
                  type: string
              required:
                - frameMetadata
              type: object
        required: true
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames?overload=url':
    post:
      parameters:
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/teamName'
        - $ref: '#/components/parameters/reviewId'
        - $ref: '#/components/parameters/timescale'
      responses:
        '204':
          description: No content.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: >-
        Use this method to add frames for a video review. The timescale
        parameter is a factor that's used to convert the time stamp on a frame
        into milliseconds. Timescale is provided in the output of the Content
        Moderator video media processor on the Azure Media Services platform.
        Timescale in the video moderation output is Ticks/Second.
      operationId: Reviews_AddVideoFrameUrl
      requestBody:
        content:
          application/json:
            schema:
              description: Schema of the body.
              items:
                description: Schema items of the body.
                properties:
                  FrameImage:
                    description: Content to review.
                    type: string
                  Metadata:
                    description: Metadata details.
                    items:
                      properties:
                        Key:
                          description: Your key parameter.
                          type: string
                        Value:
                          description: Your value parameter.
                          type: string
                      required:
                        - Key
                        - Value
                      type: object
                    type: array
                  ReviewerResultTags:
                    items:
                      properties:
                        Key:
                          description: Your key parameter.
                          type: string
                        Value:
                          description: Your value parameter.
                          type: string
                      required:
                        - Key
                        - Value
                      type: object
                    type: array
                  Timestamp:
                    description: Time stamp of the frame.
                    type: string
                required:
                  - Timestamp
                  - FrameImage
                type: object
              type: array
        description: Body of the API for adding video frames.
        required: true
      x-ms-examples:
        Add video frame url input request:
          $ref: ./examples/AddFrameResource.JSON
  '/contentmoderator/review/v1.0/teams/{teamName}/reviews?overload=video':
    post:
      parameters:
        - description: Content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/teamName'
        - $ref: '#/components/parameters/subTeam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewList'
          description: OK.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Error response.
      tags:
        - Reviews
      description: "The created reviews appear for reviewers on your team. As reviewers finish reviewing, results of the reviews are posted (that is, HTTP POST) on the specified CallBackEndpoint value.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review ID>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<ContentId that was specified on input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>."
      operationId: Reviews_CreateVideoReviews
      requestBody:
        content:
          application/json:
            schema:
              description: Schema of the body.
              items:
                description: Schema items of the body.
                properties:
                  CallbackEndpoint:
                    description: Callback endpoint.
                    type: string
                  Content:
                    description: Video content URL to review.
                    type: string
                  ContentId:
                    description: Content identifier.
                    type: string
                  Metadata:
                    description: Metadata details.
                    items:
                      properties:
                        Key:
                          description: Your key parameter.
                          type: string
                        Value:
                          description: Your value parameter.
                          type: string
                      required:
                        - Key
                        - Value
                      type: object
                    type: array
                  Status:
                    description: Status of the video.
                    enum:
                      - Complete
                      - Unpublished
                      - Pending
                    type: string
                  Timescale:
                    description: Timescale of the video.
                    type: integer
                  Type:
                    description: Type of the content.
                    enum:
                      - Video
                    type: string
                  VideoFrames:
                    description: Metadata details.
                    items:
                      properties:
                        FrameImage:
                          description: Frame image URL.
                          type: string
                        Id:
                          description: ID of the frame.
                          type: string
                        Metadata:
                          description: Metadata details.
                          items:
                            properties:
                              Key:
                                description: Your key parameter.
                                type: string
                              Value:
                                description: Your value parameter.
                                type: string
                            required:
                              - Key
                              - Value
                            type: object
                          type: array
                        ReviewerResultTags:
                          items:
                            properties:
                              Key:
                                description: Your key parameter.
                                type: string
                              Value:
                                description: Your value parameter.
                                type: string
                            required:
                              - Key
                              - Value
                            type: object
                          type: array
                        Timestamp:
                          description: Time stamp of the frame.
                          type: integer
                      required:
                        - Id
                        - Timestamp
                        - FrameImage
                      type: object
                    type: array
                required:
                  - Content
                  - ContentId
                  - Type
                  - Status
                type: object
              type: array
        description: Body of the API for creating reviews.
        required: true
      x-ms-examples:
        Create video review request:
          $ref: ../v1.0/examples/CreateVideoReviewResource.JSON

