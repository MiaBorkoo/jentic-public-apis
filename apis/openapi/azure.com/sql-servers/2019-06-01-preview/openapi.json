{
  "openapi": "3.0.0",
  "info": {
    "description": "The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.",
    "title": "SqlManagementClient",
    "version": "2019-06-01-preview",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/sql/resource-manager/Microsoft.Sql/preview/2019-06-01-preview/servers.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/checkNameAvailability": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckNameAvailabilityResponse"
                }
              }
            },
            "description": "Successfully completed the availability check."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 InvalidNameAvailabilityRequest - The check name availability request is invalid.\n\n * 400 UnknownNameType - Unknown resource type specified for a subscription level name availability check."
          }
        },
        "tags": [
          "Servers"
        ],
        "description": "Determines whether a resource can be created with the specified name.",
        "operationId": "Servers_CheckNameAvailability",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckNameAvailabilityRequest"
              }
            }
          },
          "description": "The name availability request parameters.",
          "required": true
        },
        "x-ms-examples": {
          "Check for a server name that already exists": {
            "$ref": "./examples/CheckNameAvailabilityServerAlreadyExists.json"
          },
          "Check for a server name that is available": {
            "$ref": "./examples/CheckNameAvailabilityServerAvailable.json"
          },
          "Check for a server name that is invalid": {
            "$ref": "./examples/CheckNameAvailabilityServerInvalid.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/servers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerListResult"
                }
              }
            },
            "description": "Successfully retrieved the list of servers."
          },
          "default": {
            "description": "*** Error Responses: ***"
          }
        },
        "tags": [
          "Servers"
        ],
        "description": "Gets a list of all servers in the subscription.",
        "operationId": "Servers_List",
        "x-ms-examples": {
          "List servers": {
            "$ref": "./examples/ServerList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerListResult"
                }
              }
            },
            "description": "Successfully retrieved the list of servers."
          },
          "default": {
            "description": "*** Error Responses: ***"
          }
        },
        "tags": [
          "Servers"
        ],
        "description": "Gets a list of servers in a resource groups.",
        "operationId": "Servers_ListByResourceGroup",
        "x-ms-examples": {
          "List servers by resource group": {
            "$ref": "./examples/ServerListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the server."
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "The specified server does not exist."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 SubscriptionNotFound - The requested subscription was not found.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources."
          }
        },
        "tags": [
          "Servers"
        ],
        "description": "Deletes a server.",
        "operationId": "Servers_Delete",
        "x-ms-examples": {
          "Delete server": {
            "$ref": "./examples/ServerDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Successfully retrieved the specified server."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 404 ResourceNotFound - The requested resource was not found."
          }
        },
        "tags": [
          "Servers"
        ],
        "description": "Gets a server.",
        "operationId": "Servers_Get",
        "x-ms-examples": {
          "Get server": {
            "$ref": "./examples/ServerGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Successfully updated the server."
          },
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 NameAlreadyExists - The provided name already exists.\n\n * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes\n\n * 400 InvalidLoginName - The provided login name is invalid.\n\n * 400 InvalidUsername - Supplied user name contains invalid characters.\n\n * 400 PasswordTooShort - The provided password is too short\n\n * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.\n\n * 400 PasswordTooLong - The provided password is too long.\n\n * 400 PasswordNotComplex - The provided password is not complex enough.\n\n * 400 SubscriptionNotFound - The requested subscription was not found.\n\n * 400 InvalidParameterValue - An invalid value was given to a parameter.\n\n * 400 InvalidLocation - An invalid location was specified.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.\n\n * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ServerDisabled - Server is disabled.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.\n\n * 409 ServerAlreadyExists - Duplicate server name.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources."
          }
        },
        "tags": [
          "Servers"
        ],
        "description": "Updates a server.",
        "operationId": "Servers_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerUpdate"
              }
            }
          },
          "description": "The requested server resource state.",
          "required": true
        },
        "x-ms-examples": {
          "Update a server": {
            "$ref": "./examples/ServerUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/components/parameters/ServerNameParameter"
          },
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Successfully updated the server."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Successfully created the server."
          },
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 NameAlreadyExists - The provided name already exists.\n\n * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes\n\n * 400 InvalidLoginName - The provided login name is invalid.\n\n * 400 InvalidUsername - Supplied user name contains invalid characters.\n\n * 400 PasswordTooShort - The provided password is too short\n\n * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.\n\n * 400 PasswordTooLong - The provided password is too long.\n\n * 400 PasswordNotComplex - The provided password is not complex enough.\n\n * 400 SubscriptionNotFound - The requested subscription was not found.\n\n * 400 InvalidParameterValue - An invalid value was given to a parameter.\n\n * 400 InvalidLocation - An invalid location was specified.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.\n\n * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ServerDisabled - Server is disabled.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.\n\n * 409 ServerAlreadyExists - Duplicate server name.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources."
          }
        },
        "tags": [
          "Servers"
        ],
        "description": "Creates or updates a server.",
        "operationId": "Servers_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Server"
              }
            }
          },
          "description": "The requested server resource state.",
          "required": true
        },
        "x-ms-examples": {
          "Create server": {
            "$ref": "./examples/ServerCreate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "components": {
    "parameters": {
      "ApiVersionParameter": {
        "description": "The API version to use for the request.",
        "in": "query",
        "name": "api-version",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "client"
      },
      "BlobAuditingPolicyNameParameter": {
        "description": "The name of the blob auditing policy.",
        "in": "path",
        "name": "blobAuditingPolicyName",
        "required": true,
        "schema": {
          "enum": [
            "default"
          ],
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "DatabaseNameParameter": {
        "description": "The name of the database.",
        "in": "path",
        "name": "databaseName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "ManagedInstanceNameParameter": {
        "description": "The name of the managed instance.",
        "in": "path",
        "name": "managedInstanceName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "ResourceGroupParameter": {
        "description": "The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.",
        "in": "path",
        "name": "resourceGroupName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "ServerNameParameter": {
        "description": "The name of the server.",
        "in": "path",
        "name": "serverName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "SqlVirtualMachineContainerNameParameter": {
        "description": "The name of the SqlVirtualMachineContainer.",
        "in": "path",
        "name": "sqlVirtualMachineContainerName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "SqlVirtualMachineInstanceNameParameter": {
        "description": "The name of the SqlVirtualMachineInstance.",
        "in": "path",
        "name": "sqlVirtualMachineInstanceName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "SubscriptionIdParameter": {
        "description": "The subscription ID that identifies an Azure subscription.",
        "in": "path",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "client"
      },
      "VirtualClusterNameParameter": {
        "description": "The name of the virtual cluster.",
        "in": "path",
        "name": "virtualClusterName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "schemas": {
      "CheckNameAvailabilityRequest": {
        "description": "A request to check whether the specified name for a resource is available.",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Microsoft.Sql/servers"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "CheckNameAvailabilityResourceType"
            }
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "CheckNameAvailabilityResponse": {
        "description": "The result of a name availability check.",
        "properties": {
          "available": {
            "description": "True if the name is available, otherwise false.",
            "readOnly": true,
            "type": "boolean"
          },
          "message": {
            "description": "A message explaining why the name is unavailable. Will be undefined if the name is available.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name whose availability was checked.",
            "readOnly": true,
            "type": "string"
          },
          "reason": {
            "description": "The reason code explaining why the name is unavailable. Will be undefined if the name is available.",
            "enum": [
              "Invalid",
              "AlreadyExists"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "CheckNameAvailabilityReason"
            }
          }
        },
        "type": "object"
      },
      "PrivateEndpointConnectionProperties": {
        "description": "Properties of a private endpoint connection.",
        "properties": {
          "privateEndpoint": {
            "$ref": "#/components/schemas/PrivateEndpointProperty",
            "description": "Private endpoint which the connection belongs to."
          },
          "privateLinkServiceConnectionState": {
            "$ref": "#/components/schemas/PrivateLinkServiceConnectionStateProperty",
            "description": "Connection state of the private endpoint connection."
          },
          "provisioningState": {
            "description": "State of the private endpoint connection.",
            "enum": [
              "Approving",
              "Ready",
              "Dropping",
              "Failed",
              "Rejecting"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PrivateEndpointProvisioningState"
            }
          }
        },
        "type": "object"
      },
      "PrivateEndpointProperty": {
        "properties": {
          "id": {
            "description": "Resource id of the private endpoint.",
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      },
      "PrivateLinkServiceConnectionStateProperty": {
        "properties": {
          "actionsRequired": {
            "description": "The actions required for private link service connection.",
            "enum": [
              "None"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PrivateLinkServiceConnectionStateActionsRequire"
            }
          },
          "description": {
            "description": "The private link service connection description.",
            "type": "string"
          },
          "status": {
            "description": "The private link service connection status.",
            "enum": [
              "Approved",
              "Pending",
              "Rejected",
              "Disconnected"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PrivateLinkServiceConnectionStateStatus"
            }
          }
        },
        "required": [
          "status",
          "description"
        ],
        "type": "object"
      },
      "Resource": {
        "description": "ARM resource.",
        "properties": {
          "id": {
            "description": "Resource ID.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Resource name.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Resource type.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      },
      "Server": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "An Azure SQL Database server.",
        "properties": {
          "identity": {
            "$ref": "../../../common/v1/types.json#/definitions/ResourceIdentity",
            "description": "The Azure Active Directory identity of the server.",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          },
          "kind": {
            "description": "Kind of sql server. This is metadata used for the Azure portal experience.",
            "readOnly": true,
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/ServerProperties",
            "description": "Resource properties.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "location"
        ],
        "type": "object"
      },
      "ServerListResult": {
        "description": "A list of servers.",
        "properties": {
          "nextLink": {
            "description": "Link to retrieve next page of results.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "Array of results.",
            "items": {
              "$ref": "#/components/schemas/Server"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerPrivateEndpointConnection": {
        "description": "A private endpoint connection under a server",
        "properties": {
          "id": {
            "description": "Resource ID.",
            "readOnly": true,
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/PrivateEndpointConnectionProperties",
            "description": "Private endpoint connection properties",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "ServerProperties": {
        "description": "The properties of a server.",
        "properties": {
          "administratorLogin": {
            "description": "Administrator username for the server. Once created it cannot be changed.",
            "type": "string",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          },
          "administratorLoginPassword": {
            "description": "The administrator login password (required for server creation).",
            "type": "string",
            "x-ms-mutability": [
              "create",
              "update"
            ]
          },
          "fullyQualifiedDomainName": {
            "description": "The fully qualified domain name of the server.",
            "readOnly": true,
            "type": "string"
          },
          "minimalTlsVersion": {
            "description": "Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'",
            "type": "string"
          },
          "privateEndpointConnections": {
            "description": "List of private endpoint connections on a server",
            "items": {
              "$ref": "#/components/schemas/ServerPrivateEndpointConnection"
            },
            "readOnly": true,
            "type": "array"
          },
          "publicNetworkAccess": {
            "description": "Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'",
            "enum": [
              "Enabled",
              "Disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ServerPublicNetworkAccess"
            }
          },
          "state": {
            "description": "The state of the server.",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "description": "The version of the server.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServerUpdate": {
        "description": "An update request for an Azure SQL Database server.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource tags.",
            "type": "object"
          },
          "properties": {
            "$ref": "#/components/schemas/ServerProperties",
            "description": "Resource properties.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "TrackedResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "ARM tracked top level resource.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource tags.",
            "type": "object"
          },
          "location": {
            "description": "Resource location.",
            "type": "string",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          }
        },
        "required": [
          "location"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": []
    }
  ]
}