{
  "openapi": "3.0.0",
  "info": {
    "description": "The Admin Storage Management Client.",
    "title": "StorageManagementClient",
    "version": "2019-08-08-preview",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/azsadmin/resource-manager/storage/Microsoft.Storage.Admin/preview/2019-08-08/storageaccounts.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/reclaimStorageCapacity": {
      "post": {
        "parameters": [
          {
            "$ref": "storage.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/components/parameters/LocationParameter"
          },
          {
            "$ref": "storage.json#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Reclaim storage capacity has completed."
          },
          "202": {
            "description": "Accepted -- reclaim storage capacity operation triggered; operation will complete asynchronously."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "storage.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error Response."
          }
        },
        "tags": [
          "StorageAccounts"
        ],
        "description": "Start reclaim storage capacity on deleted storage objects.",
        "operationId": "StorageAccounts_ReclaimStorageCapacity",
        "x-ms-examples": {
          "Start reclaim storage capacity on deleted storage objects.": {
            "$ref": "./examples/StorageAccounts/ReclaimStorageCapacity.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/storageAccounts": {
      "get": {
        "parameters": [
          {
            "$ref": "storage.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/components/parameters/LocationParameter"
          },
          {
            "$ref": "storage.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/SummaryParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageAccountList"
                }
              }
            },
            "description": "OK -- The list of storage accounts has been returned."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "storage.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error Response."
          }
        },
        "tags": [
          "StorageAccounts"
        ],
        "description": "Returns a list of storage accounts.",
        "operationId": "StorageAccounts_List",
        "x-ms-examples": {
          "Returns a list of storage accounts.": {
            "$ref": "./examples/StorageAccounts/List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/storageAccounts/{accountId}": {
      "get": {
        "parameters": [
          {
            "$ref": "storage.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/components/parameters/LocationParameter"
          },
          {
            "$ref": "#/components/parameters/AccountIdParameter"
          },
          {
            "$ref": "storage.json#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageAccount"
                }
              }
            },
            "description": "OK -- The storage account has been returned."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "storage.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error Response."
          }
        },
        "tags": [
          "StorageAccounts"
        ],
        "description": "Returns the requested storage account.",
        "operationId": "StorageAccounts_Get",
        "x-ms-examples": {
          "Returns the requested storage account.": {
            "$ref": "./examples/StorageAccounts/Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/storageAccounts/{accountId}/undelete": {
      "post": {
        "parameters": [
          {
            "$ref": "storage.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "storage.json#/components/parameters/LocationParameter"
          },
          {
            "$ref": "#/components/parameters/AccountIdParameter"
          },
          {
            "$ref": "storage.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/NewAccountNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Undelete either has been performed or account was not deleted."
          },
          "202": {
            "description": "Accepted -- undelete operation trigged; operation will complete asynchronously."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "storage.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error Response."
          }
        },
        "tags": [
          "StorageAccounts"
        ],
        "description": "Undelete a deleted storage account with new account name if the a new name is provided.",
        "operationId": "StorageAccounts_Undelete",
        "x-ms-examples": {
          "Undelete a deleted storage account.": {
            "$ref": "./examples/StorageAccounts/Undelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    }
  },
  "components": {
    "parameters": {
      "AccountIdParameter": {
        "description": "Internal storage account ID, which is not visible to tenant.",
        "in": "path",
        "name": "accountId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "FilterParameter": {
        "description": "Filter string",
        "in": "query",
        "name": "$filter",
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "NewAccountNameParameter": {
        "description": "New storage account name when doing undelete storage account operation.",
        "in": "query",
        "name": "newAccountName",
        "required": false,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "SummaryParameter": {
        "description": "Switch for whether summary or detailed information is returned.",
        "in": "query",
        "name": "summary",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "schemas": {
      "EncryptionKeySource": {
        "description": "Encryption Key Source",
        "enum": [
          "Microsoft.Storage"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "EncryptionKeySource"
        }
      },
      "LocationStatus": {
        "description": "Gets the status indicating whether the primary location of the storage account is available or unavailable.",
        "enum": [
          "Available",
          "Unavailable"
        ],
        "readOnly": true,
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "LocationStatus"
        }
      },
      "StorageAccount": {
        "allOf": [
          {
            "$ref": "storage.json#/definitions/Resource"
          }
        ],
        "description": "Properties of the storage account.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource tags.",
            "readOnly": true,
            "type": "object"
          },
          "kind": {
            "$ref": "#/components/schemas/StorageAccountKind",
            "description": "Indicates the type of storage account",
            "readOnly": true
          },
          "properties": {
            "$ref": "#/components/schemas/StorageAccountProperties",
            "description": "Properties of the storage account.",
            "readOnly": true,
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "StorageAccountAccessTier": {
        "description": "Access tier for storage account",
        "enum": [
          "Hot",
          "Cool"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "StorageAccountAccessTier"
        }
      },
      "StorageAccountHealthState": {
        "description": "Health state for storage account",
        "enum": [
          "Healthy",
          "Suspended",
          "OverQuota",
          "SuspendedAndOverQuota"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "StorageAccountHealthState"
        }
      },
      "StorageAccountKind": {
        "description": "The kind of storage account",
        "enum": [
          "Storage",
          "StorageV2",
          "BlobStorage"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "StorageAccountKind"
        }
      },
      "StorageAccountList": {
        "description": "Pageable list of storage accounts.",
        "properties": {
          "@odata.nextLink": {
            "description": "URI to the next page.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "List of storage accounts.",
            "items": {
              "$ref": "#/components/schemas/StorageAccount"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "StorageAccountProperties": {
        "description": "Properties of a storage account.",
        "properties": {
          "accessTier": {
            "$ref": "#/components/schemas/StorageAccountAccessTier",
            "description": "Required for storage accounts where kind = BlobStorage.",
            "readOnly": true
          },
          "accountId": {
            "description": "Internal storage account ID, which is not visible to tenant.",
            "readOnly": true,
            "type": "string"
          },
          "accountStatus": {
            "$ref": "#/components/schemas/StorageAccountStatus",
            "description": "The status of storage account."
          },
          "accountType": {
            "$ref": "#/components/schemas/StorageAccountType",
            "description": "Storage account type.",
            "readOnly": true
          },
          "creationTime": {
            "description": "The creation date and time of storage account in UTC.",
            "readOnly": true,
            "type": "string"
          },
          "deletedTime": {
            "description": "The date-time when the storage account was deleted.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "encryption": {
            "$ref": "#/components/schemas/StorageEncryption",
            "description": "The storage encryption setting",
            "readOnly": true
          },
          "faultDomain": {
            "description": "The fault domain for the storage account.",
            "readOnly": true,
            "type": "string"
          },
          "healthState": {
            "$ref": "#/components/schemas/StorageAccountHealthState",
            "description": "The internal health state for storage account.",
            "readOnly": true
          },
          "primaryEndpoints": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The URLs that are used to perform a retrieval of a public BLOB, queue, or table object.",
            "readOnly": true,
            "type": "object"
          },
          "primaryLocation": {
            "description": "The primary location for the storage account.",
            "readOnly": true,
            "type": "string"
          },
          "provisioningState": {
            "$ref": "#/components/schemas/StorageAccountState",
            "description": "The provisioning state of storage account.",
            "readOnly": true
          },
          "statusOfPrimary": {
            "$ref": "#/components/schemas/LocationStatus",
            "description": "The status of primary location of storage account.",
            "readOnly": true
          },
          "supportsHttpsTrafficOnly": {
            "description": "Storage account supports https traffic only or not",
            "readOnly": true,
            "type": "boolean"
          },
          "tenantResourceGroupName": {
            "description": "The name of resource group under which the storage account locates.",
            "readOnly": true,
            "type": "string"
          },
          "tenantStorageAccountName": {
            "description": "Storage account name from tenant view.",
            "readOnly": true,
            "type": "string"
          },
          "tenantSubscriptionId": {
            "description": "Subscription ID of the subscription under which the storage account locates.",
            "readOnly": true,
            "type": "string"
          },
          "tenantViewId": {
            "description": "Resource URI of storage account from tenant view.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageAccountState": {
        "description": "Storage account state.",
        "enum": [
          "Creating",
          "Succeeded"
        ],
        "readOnly": true,
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "StorageAccountState"
        }
      },
      "StorageAccountStatus": {
        "description": "The state of storage account in WAC.",
        "enum": [
          "Active",
          "Deleted"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "StorageAccountStatus"
        }
      },
      "StorageAccountType": {
        "description": "Storage account type.",
        "enum": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_ZRS",
          "Standard_RAGRS",
          "Premium_LRS"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "StorageAccountType"
        }
      },
      "StorageEncryption": {
        "description": "Storage encryption setting",
        "properties": {
          "keySource": {
            "$ref": "#/components/schemas/EncryptionKeySource",
            "description": "Encryption keySource",
            "readOnly": true
          },
          "services": {
            "$ref": "#/components/schemas/StorageEncryptionServices",
            "description": "Services for which encryption setting is mentioned",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "StorageEncryptionServices": {
        "description": "Services for which encryption setting is mentioned.",
        "properties": {
          "blob": {
            "$ref": "#/components/schemas/StorageEncryptionSetting",
            "description": "Blob service.",
            "readOnly": true
          },
          "queue": {
            "$ref": "#/components/schemas/StorageEncryptionSetting",
            "description": "Queue service",
            "readOnly": true
          },
          "table": {
            "$ref": "#/components/schemas/StorageEncryptionSetting",
            "description": "Table service.",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "StorageEncryptionSetting": {
        "description": "Storage Encryption setting",
        "properties": {
          "enabled": {
            "description": "Bool to indicate whether enabled or not.",
            "readOnly": true,
            "type": "boolean"
          },
          "lastEnabledTime": {
            "description": "A rough estimate of the date/time when the encryption was last enabled by the user.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UndeleteStorageAccount": {
        "description": "Undelete storage account information.",
        "properties": {
          "accountId": {
            "description": "The internal wac id for storage account.",
            "readOnly": true,
            "type": "string"
          },
          "newAccountName": {
            "description": "The new account name for the restored account if defined.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Authorization uses an Azure Active Directory OAuth2 flow.",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}