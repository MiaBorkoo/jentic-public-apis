{
  "openapi": "3.0.0",
  "info": {
    "description": "Azure Cosmos DB Database Service Resource Provider REST API",
    "title": "Cosmos DB",
    "version": "2019-08-01",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2019-08-01/cosmos-db.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}": {
      "head": {
        "parameters": [
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The account name is valid but is already in use."
          },
          "404": {
            "description": "Not Found. The account name is available and valid."
          }
        },
        "description": "Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.",
        "operationId": "DatabaseAccounts_CheckNameExists",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountCheckNameExists": {
            "$ref": "./examples/CosmosDBDatabaseAccountCheckNameExists.json"
          }
        }
      }
    },
    "/providers/Microsoft.DocumentDB/operations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationListResult"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Operations"
        ],
        "description": "Lists all of the available Cosmos DB Resource Provider operations.",
        "operationId": "Operations_List",
        "x-ms-examples": {
          "CosmosDBOperationsList": {
            "$ref": "./examples/CosmosDBOperationsList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountsListResult"
                }
              }
            },
            "description": "The operation completed successfully."
          }
        },
        "description": "Lists all the Azure Cosmos DB database accounts available under the subscription.",
        "operationId": "DatabaseAccounts_List",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountList": {
            "$ref": "./examples/CosmosDBDatabaseAccountList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountsListResult"
                }
              }
            },
            "description": "The operation completed successfully."
          }
        },
        "description": "Lists all the Azure Cosmos DB database accounts available under the given resource group.",
        "operationId": "DatabaseAccounts_ListByResourceGroup",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountListByResourceGroup": {
            "$ref": "./examples/CosmosDBDatabaseAccountListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The database account delete operation will complete asynchronously."
          },
          "204": {
            "description": "The specified account does not exist in the subscription."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_Delete",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountDelete": {
            "$ref": "./examples/CosmosDBDatabaseAccountDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountGetResults"
                }
              }
            },
            "description": "The database account properties were retrieved successfully."
          }
        },
        "description": "Retrieves the properties of an existing Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_Get",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountGet": {
            "$ref": "./examples/CosmosDBDatabaseAccountGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountGetResults"
                }
              }
            },
            "description": "The database account update operation will complete asynchronously."
          }
        },
        "description": "Updates the properties of an existing Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseAccountUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current database account.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBDatabaseAccountPatch": {
            "$ref": "./examples/CosmosDBDatabaseAccountPatch.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountGetResults"
                }
              }
            },
            "description": "The database account create or update operation will complete asynchronously."
          }
        },
        "description": "Creates or updates an Azure Cosmos DB database account. The \"Update\" method is preferred when performing updates on an account.",
        "operationId": "DatabaseAccounts_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseAccountCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current database account.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBDatabaseAccountCreateMax": {
            "$ref": "./examples/CosmosDBDatabaseAccountCreateMax.json"
          },
          "CosmosDBDatabaseAccountCreateMin": {
            "$ref": "./examples/CosmosDBDatabaseAccountCreateMin.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CassandraKeyspaceListResult"
                }
              }
            },
            "description": "The Cassandra keyspace properties were retrieved successfully."
          }
        },
        "description": "Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.",
        "operationId": "CassandraResources_ListCassandraKeyspaces",
        "x-ms-examples": {
          "CosmosDBCassandraKeyspaceList": {
            "$ref": "./examples/CosmosDBCassandraKeyspaceList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The Cassandra keyspace delete operation will complete asynchronously."
          },
          "204": {
            "description": "The Cassandra keyspace delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB Cassandra keyspace.",
        "operationId": "CassandraResources_DeleteCassandraKeyspace",
        "x-ms-examples": {
          "CosmosDBCassandraKeyspaceDelete": {
            "$ref": "./examples/CosmosDBCassandraKeyspaceDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CassandraKeyspaceGetResults"
                }
              }
            },
            "description": "The Cassandra keyspace property was retrieved successfully."
          }
        },
        "description": "Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "CassandraResources_GetCassandraKeyspace",
        "x-ms-examples": {
          "CosmosDBCassandraKeyspaceGet": {
            "$ref": "./examples/CosmosDBCassandraKeyspaceGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CassandraKeyspaceGetResults"
                }
              }
            },
            "description": "The Cassandra keyspace create or update operation was completed successfully."
          },
          "202": {
            "description": "The Cassandra keyspace create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB Cassandra keyspace",
        "operationId": "CassandraResources_CreateUpdateCassandraKeyspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CassandraKeyspaceCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current Cassandra keyspace.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBCassandraKeyspaceCreateUpdate": {
            "$ref": "./examples/CosmosDBCassandraKeyspaceCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CassandraTableListResult"
                }
              }
            },
            "description": "The Cassandra table properties were retrieved successfully."
          }
        },
        "description": "Lists the Cassandra table under an existing Azure Cosmos DB database account.",
        "operationId": "CassandraResources_ListCassandraTables",
        "x-ms-examples": {
          "CosmosDBCassandraTableList": {
            "$ref": "./examples/CosmosDBCassandraTableList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The Cassandra table delete operation will complete asynchronously."
          },
          "204": {
            "description": "The Cassandra table delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB Cassandra table.",
        "operationId": "CassandraResources_DeleteCassandraTable",
        "x-ms-examples": {
          "CosmosDBCassandraTableDelete": {
            "$ref": "./examples/CosmosDBCassandraTableDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CassandraTableGetResults"
                }
              }
            },
            "description": "The Cassandra table property was retrieved successfully."
          }
        },
        "description": "Gets the Cassandra table under an existing Azure Cosmos DB database account.",
        "operationId": "CassandraResources_GetCassandraTable",
        "x-ms-examples": {
          "CosmosDBCassandraTableGet": {
            "$ref": "./examples/CosmosDBCassandraTableGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CassandraTableGetResults"
                }
              }
            },
            "description": "The Cassandra Table create or update operation was completed successfully."
          },
          "202": {
            "description": "The Cassandra Table create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB Cassandra Table",
        "operationId": "CassandraResources_CreateUpdateCassandraTable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CassandraTableCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current Cassandra Table.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBCassandraTableCreateUpdate": {
            "$ref": "./examples/CosmosDBCassandraTableCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Cassandra table was retrieved successfully."
          }
        },
        "description": "Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "CassandraResources_GetCassandraTableThroughput",
        "x-ms-examples": {
          "CosmosDBCassandraTableThroughputGet": {
            "$ref": "./examples/CosmosDBCassandraTableThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Cassandra table update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the Cassandra table update operation will complete asynchronously."
          }
        },
        "description": "Update RUs per second of an Azure Cosmos DB Cassandra table",
        "operationId": "CassandraResources_UpdateCassandraTableThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The RUs per second of the parameters to provide for the current Cassandra table.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBCassandraTableThroughputUpdate": {
            "$ref": "./examples/CosmosDBCassandraTableThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Cassandra Keyspace was retrieved successfully."
          }
        },
        "description": "Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "CassandraResources_GetCassandraKeyspaceThroughput",
        "x-ms-examples": {
          "CosmosDBCassandraKeyspaceThroughputGet": {
            "$ref": "./examples/CosmosDBCassandraKeyspaceThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/keyspaceNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Cassandra Keyspace update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the Cassandra Keyspace update operation will complete asynchronously."
          }
        },
        "description": "Update RUs per second of an Azure Cosmos DB Cassandra Keyspace",
        "operationId": "CassandraResources_UpdateCassandraKeyspaceThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The RUs per second of the parameters to provide for the current Cassandra Keyspace.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBCassandraKeyspaceThroughputUpdate": {
            "$ref": "./examples/CosmosDBCassandraKeyspaceThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricDefinitionsListResult"
                }
              }
            },
            "description": "The metric definitions for the collection were retrieved successfully."
          }
        },
        "description": "Retrieves metric definitions for the given collection.",
        "operationId": "Collection_ListMetricDefinitions",
        "x-ms-examples": {
          "CosmosDBCollectionGetMetricDefinitions": {
            "$ref": "./examples/CosmosDBCollectionGetMetricDefinitions.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricListResult"
                }
              }
            },
            "description": "The metrics for the database account were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given database account and collection.",
        "operationId": "Collection_ListMetrics",
        "x-ms-examples": {
          "CosmosDBCollectionGetMetrics": {
            "$ref": "./examples/CosmosDBCollectionGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/partitionKeyRangeIdParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartitionMetricListResult"
                }
              }
            },
            "description": "The partition-level metrics for the partition key range id were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given partition key range id.",
        "operationId": "PartitionKeyRangeId_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegionGetMetrics": {
            "$ref": "./examples/CosmosDBPKeyRangeIdGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartitionMetricListResult"
                }
              }
            },
            "description": "The partition-level metrics for the collection were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given collection, split by partition.",
        "operationId": "CollectionPartition_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegionGetMetrics": {
            "$ref": "./examples/CosmosDBCollectionPartitionGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/usageFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartitionUsagesResult"
                }
              }
            },
            "description": "The usages for the collection, per partition were retrieved successfully."
          }
        },
        "description": "Retrieves the usages (most recent storage data) for the given collection, split by partition.",
        "operationId": "CollectionPartition_ListUsages",
        "x-ms-examples": {
          "CosmosDBCollectionGetUsages": {
            "$ref": "./examples/CosmosDBCollectionPartitionGetUsages.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/usageFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsagesResult"
                }
              }
            },
            "description": "The usages for the collection were retrieved successfully."
          }
        },
        "description": "Retrieves the usages (most recent storage data) for the given collection.",
        "operationId": "Collection_ListUsages",
        "x-ms-examples": {
          "CosmosDBCollectionGetUsages": {
            "$ref": "./examples/CosmosDBCollectionGetUsages.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricDefinitionsListResult"
                }
              }
            },
            "description": "The metric definitions for the database were retrieved successfully."
          }
        },
        "description": "Retrieves metric definitions for the given database.",
        "operationId": "Database_ListMetricDefinitions",
        "x-ms-examples": {
          "CosmosDBDatabaseGetMetricDefinitions": {
            "$ref": "./examples/CosmosDBDatabaseGetMetricDefinitions.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricListResult"
                }
              }
            },
            "description": "The metrics for the database account were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given database account and database.",
        "operationId": "Database_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseGetMetrics": {
            "$ref": "./examples/CosmosDBDatabaseGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/usageFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsagesResult"
                }
              }
            },
            "description": "The usages for the database were retrieved successfully."
          }
        },
        "description": "Retrieves the usages (most recent data) for the given database.",
        "operationId": "Database_ListUsages",
        "x-ms-examples": {
          "CosmosDBDatabaseGetUsages": {
            "$ref": "./examples/CosmosDBDatabaseGetUsages.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange": {
      "post": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. The failover policy change operation will complete asynchronously."
          },
          "204": {
            "description": "No Content"
          }
        },
        "description": "Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
        "operationId": "DatabaseAccounts_FailoverPriorityChange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailoverPolicies"
              }
            }
          },
          "description": "The new failover policies for the database account.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBDatabaseAccountFailoverPriorityChange": {
            "$ref": "./examples/CosmosDBDatabaseAccountFailoverPriorityChange.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GremlinDatabaseListResult"
                }
              }
            },
            "description": "The Gremlin database properties were retrieved successfully."
          }
        },
        "description": "Lists the Gremlin databases under an existing Azure Cosmos DB database account.",
        "operationId": "GremlinResources_ListGremlinDatabases",
        "x-ms-examples": {
          "CosmosDBGremlinDatabaseList": {
            "$ref": "./examples/CosmosDBGremlinDatabaseList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The Gremlin database delete operation will complete asynchronously."
          },
          "204": {
            "description": "The Gremlin database delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB Gremlin database.",
        "operationId": "GremlinResources_DeleteGremlinDatabase",
        "x-ms-examples": {
          "CosmosDBGremlinDatabaseDelete": {
            "$ref": "./examples/CosmosDBGremlinDatabaseDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GremlinDatabaseGetResults"
                }
              }
            },
            "description": "The Gremlin database property was retrieved successfully."
          }
        },
        "description": "Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "GremlinResources_GetGremlinDatabase",
        "x-ms-examples": {
          "CosmosDBGremlinDatabaseGet": {
            "$ref": "./examples/CosmosDBGremlinDatabaseGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GremlinDatabaseGetResults"
                }
              }
            },
            "description": "The Gremlin database create or update operation was completed successfully."
          },
          "202": {
            "description": "The Gremlin database create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB Gremlin database",
        "operationId": "GremlinResources_CreateUpdateGremlinDatabase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GremlinDatabaseCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current Gremlin database.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBGremlinDatabaseCreateUpdate": {
            "$ref": "./examples/CosmosDBGremlinDatabaseCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GremlinGraphListResult"
                }
              }
            },
            "description": "The Gremlin graph properties were retrieved successfully."
          }
        },
        "description": "Lists the Gremlin graph under an existing Azure Cosmos DB database account.",
        "operationId": "GremlinResources_ListGremlinGraphs",
        "x-ms-examples": {
          "CosmosDBGremlinGraphList": {
            "$ref": "./examples/CosmosDBGremlinGraphList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/graphNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The Gremlin graph delete operation will complete asynchronously."
          },
          "204": {
            "description": "The Gremlin graph delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB Gremlin graph.",
        "operationId": "GremlinResources_DeleteGremlinGraph",
        "x-ms-examples": {
          "CosmosDBGremlinGraphDelete": {
            "$ref": "./examples/CosmosDBGremlinGraphDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/graphNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GremlinGraphGetResults"
                }
              }
            },
            "description": "The Gremlin graph property was retrieved successfully."
          }
        },
        "description": "Gets the Gremlin graph under an existing Azure Cosmos DB database account.",
        "operationId": "GremlinResources_GetGremlinGraph",
        "x-ms-examples": {
          "CosmosDBGremlinGraphGet": {
            "$ref": "./examples/CosmosDBGremlinGraphGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/graphNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GremlinGraphGetResults"
                }
              }
            },
            "description": "The Gremlin graph create or update operation was completed successfully."
          },
          "202": {
            "description": "The Gremlin graph create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB Gremlin graph",
        "operationId": "GremlinResources_CreateUpdateGremlinGraph",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GremlinGraphCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current Gremlin graph.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBGremlinGraphCreateUpdate": {
            "$ref": "./examples/CosmosDBGremlinGraphCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/graphNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Gremlin graph was retrieved successfully."
          }
        },
        "description": "Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "GremlinResources_GetGremlinGraphThroughput",
        "x-ms-examples": {
          "CosmosDBGremlinGraphThroughputGet": {
            "$ref": "./examples/CosmosDBGremlinGraphThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/graphNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Gremlin graph update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the Gremlin graph update operation will complete asynchronously."
          }
        },
        "description": "Update RUs per second of an Azure Cosmos DB Gremlin graph",
        "operationId": "GremlinResources_UpdateGremlinGraphThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The RUs per second of the parameters to provide for the current Gremlin graph.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBGremlinGraphThroughputUpdate": {
            "$ref": "./examples/CosmosDBGremlinGraphThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Gremlin database was retrieved successfully."
          }
        },
        "description": "Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "GremlinResources_GetGremlinDatabaseThroughput",
        "x-ms-examples": {
          "CosmosDBGremlinDatabaseThroughputGet": {
            "$ref": "./examples/CosmosDBGremlinDatabaseThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Gremlin database update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the Gremlin database update operation will complete asynchronously."
          }
        },
        "description": "Update RUs per second of an Azure Cosmos DB Gremlin database",
        "operationId": "GremlinResources_UpdateGremlinDatabaseThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The RUs per second of the parameters to provide for the current Gremlin database.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBGremlinDatabaseThroughputUpdate": {
            "$ref": "./examples/CosmosDBGremlinDatabaseThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings": {
      "post": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountListConnectionStringsResult"
                }
              }
            },
            "description": "The operation completed successfully."
          }
        },
        "description": "Lists the connection strings for the specified Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_ListConnectionStrings",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountListConnectionStrings": {
            "$ref": "./examples/CosmosDBDatabaseAccountListConnectionStrings.json"
          },
          "CosmosDBDatabaseAccountListConnectionStringsMongo": {
            "$ref": "./examples/CosmosDBDatabaseAccountListConnectionStringsMongo.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys": {
      "post": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountListKeysResult"
                }
              }
            },
            "description": "The operation completed successfully."
          }
        },
        "description": "Lists the access keys for the specified Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_ListKeys",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountListKeys": {
            "$ref": "./examples/CosmosDBDatabaseAccountListKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricDefinitionsListResult"
                }
              }
            },
            "description": "The metric definitions for the database account were retrieved successfully."
          }
        },
        "description": "Retrieves metric definitions for the given database account.",
        "operationId": "DatabaseAccounts_ListMetricDefinitions",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountGetMetricDefinitions": {
            "$ref": "./examples/CosmosDBDatabaseAccountGetMetricDefinitions.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricListResult"
                }
              }
            },
            "description": "The metrics for the database account were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given database account.",
        "operationId": "DatabaseAccounts_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountGetMetrics": {
            "$ref": "./examples/CosmosDBDatabaseAccountGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MongoDBDatabaseListResult"
                }
              }
            },
            "description": "The MongoDB database properties were retrieved successfully."
          }
        },
        "description": "Lists the MongoDB databases under an existing Azure Cosmos DB database account.",
        "operationId": "MongoDBResources_ListMongoDBDatabases",
        "x-ms-examples": {
          "CosmosDBMongoDBDatabaseList": {
            "$ref": "./examples/CosmosDBMongoDBDatabaseList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The MongoDB database delete operation will complete asynchronously."
          },
          "204": {
            "description": "The MongoDB database delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB MongoDB database.",
        "operationId": "MongoDBResources_DeleteMongoDBDatabase",
        "x-ms-examples": {
          "CosmosDBMongoDBDatabaseDelete": {
            "$ref": "./examples/CosmosDBMongoDBDatabaseDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MongoDBDatabaseGetResults"
                }
              }
            },
            "description": "The MongoDB database property was retrieved successfully."
          }
        },
        "description": "Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "MongoDBResources_GetMongoDBDatabase",
        "x-ms-examples": {
          "CosmosDBMongoDBDatabaseGet": {
            "$ref": "./examples/CosmosDBMongoDBDatabaseGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MongoDBDatabaseGetResults"
                }
              }
            },
            "description": "The MongoDB database create or update operation was completed successfully."
          },
          "202": {
            "description": "The MongoDB database create or update operation will complete asynchronously."
          }
        },
        "description": "Create or updates Azure Cosmos DB MongoDB database",
        "operationId": "MongoDBResources_CreateUpdateMongoDBDatabase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MongoDBDatabaseCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current MongoDB database.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBMongoDBDatabaseCreateUpdate": {
            "$ref": "./examples/CosmosDBMongoDBDatabaseCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MongoDBCollectionListResult"
                }
              }
            },
            "description": "The MongoDB collection properties were retrieved successfully."
          }
        },
        "description": "Lists the MongoDB collection under an existing Azure Cosmos DB database account.",
        "operationId": "MongoDBResources_ListMongoDBCollections",
        "x-ms-examples": {
          "CosmosDBMongoDBCollectionList": {
            "$ref": "./examples/CosmosDBMongoDBCollectionList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/collectionNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The MongoDB collection delete operation will complete asynchronously."
          },
          "204": {
            "description": "The MongoDB collection delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB MongoDB Collection.",
        "operationId": "MongoDBResources_DeleteMongoDBCollection",
        "x-ms-examples": {
          "CosmosDBMongoDBCollectionDelete": {
            "$ref": "./examples/CosmosDBMongoDBCollectionDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/collectionNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MongoDBCollectionGetResults"
                }
              }
            },
            "description": "The MongoDB collection property was retrieved successfully."
          }
        },
        "description": "Gets the MongoDB collection under an existing Azure Cosmos DB database account.",
        "operationId": "MongoDBResources_GetMongoDBCollection",
        "x-ms-examples": {
          "CosmosDBMongoDBCollectionGet": {
            "$ref": "./examples/CosmosDBMongoDBCollectionGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/collectionNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MongoDBCollectionGetResults"
                }
              }
            },
            "description": "The MongoDB Collection create or update operation was completed successfully."
          },
          "202": {
            "description": "The MongoDB Collection create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB MongoDB Collection",
        "operationId": "MongoDBResources_CreateUpdateMongoDBCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MongoDBCollectionCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current MongoDB Collection.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBMongoDBCollectionCreateUpdate": {
            "$ref": "./examples/CosmosDBMongoDBCollectionCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/collectionNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the MongoDB collection was retrieved successfully."
          }
        },
        "description": "Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "MongoDBResources_GetMongoDBCollectionThroughput",
        "x-ms-examples": {
          "CosmosDBMongoDBCollectionThroughputGet": {
            "$ref": "./examples/CosmosDBMongoDBCollectionThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/collectionNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the MongoDB collection update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the MongoDB collection update operation will complete asynchronously."
          }
        },
        "description": "Update the RUs per second of an Azure Cosmos DB MongoDB collection",
        "operationId": "MongoDBResources_UpdateMongoDBCollectionThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The RUs per second of the parameters to provide for the current MongoDB collection.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBMongoDBCollectionThroughputUpdate": {
            "$ref": "./examples/CosmosDBMongoDBCollectionThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the MongoDB database was retrieved successfully."
          }
        },
        "description": "Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "MongoDBResources_GetMongoDBDatabaseThroughput",
        "x-ms-examples": {
          "CosmosDBMongoDBDatabaseThroughputGet": {
            "$ref": "./examples/CosmosDBMongoDBDatabaseThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the MongoDB database update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the MongoDB database update operation will complete asynchronously."
          }
        },
        "description": "Update RUs per second of the an Azure Cosmos DB MongoDB database",
        "operationId": "MongoDBResources_UpdateMongoDBDatabaseThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The RUs per second of the parameters to provide for the current MongoDB database.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBMongoDBDatabaseThroughputUpdate": {
            "$ref": "./examples/CosmosDBMongoDBDatabaseThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion": {
      "post": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The offline region operation is completed successfully."
          },
          "202": {
            "description": "Accepted. The offline region operation will complete asynchronously."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "description": "Offline the specified region for the specified Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_OfflineRegion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegionForOnlineOffline"
              }
            }
          },
          "description": "Cosmos DB region to offline for the database account.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBDatabaseAccountOfflineRegion": {
            "$ref": "./examples/CosmosDBDatabaseAccountOfflineRegion.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion": {
      "post": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The online region operation is completed successfully."
          },
          "202": {
            "description": "Accepted. The online region operation will complete asynchronously."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "description": "Online the specified region for the specified Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_OnlineRegion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegionForOnlineOffline"
              }
            }
          },
          "description": "Cosmos DB region to online for the database account.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBDatabaseAccountOnlineRegion": {
            "$ref": "./examples/CosmosDBDatabaseAccountOnlineRegion.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PercentileMetricListResult"
                }
              }
            },
            "description": "The percentile metrics for the account were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data",
        "operationId": "Percentile_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegionGetMetrics": {
            "$ref": "./examples/CosmosDBPercentileGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountListReadOnlyKeysResult"
                }
              }
            },
            "description": "The operation completed successfully."
          }
        },
        "description": "Lists the read-only access keys for the specified Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_GetReadOnlyKeys",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountListReadOnlyKeys": {
            "$ref": "./examples/CosmosDBDatabaseAccountListReadOnlyKeys.json"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseAccountListReadOnlyKeysResult"
                }
              }
            },
            "description": "The operation completed successfully."
          }
        },
        "description": "Lists the read-only access keys for the specified Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_ListReadOnlyKeys",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountListReadOnlyKeys": {
            "$ref": "./examples/CosmosDBDatabaseAccountListReadOnlyKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey": {
      "post": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted. The regenerate key operation will complete asynchronously."
          }
        },
        "description": "Regenerates an access key for the specified Azure Cosmos DB database account.",
        "operationId": "DatabaseAccounts_RegenerateKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseAccountRegenerateKeyParameters"
              }
            }
          },
          "description": "The name of the key to regenerate.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegenerateKey": {
            "$ref": "./examples/CosmosDBDatabaseAccountRegenerateKey.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/regionParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricListResult"
                }
              }
            },
            "description": "The metrics for the database account were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given database account, collection and region.",
        "operationId": "CollectionRegion_ListMetrics",
        "x-ms-examples": {
          "CosmosDBRegionCollectionGetMetrics": {
            "$ref": "./examples/CosmosDBRegionCollectionGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/regionParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/partitionKeyRangeIdParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartitionMetricListResult"
                }
              }
            },
            "description": "The partition-level metrics for the partition key range id and region were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given partition key range id and region.",
        "operationId": "PartitionKeyRangeIdRegion_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegionGetMetrics": {
            "$ref": "./examples/CosmosDBPKeyRangeIdRegionGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/regionParameter"
          },
          {
            "$ref": "#/components/parameters/databaseRidParameter"
          },
          {
            "$ref": "#/components/parameters/collectionRidParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartitionMetricListResult"
                }
              }
            },
            "description": "The partition-level metrics for the collection and region were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given collection and region, split by partition.",
        "operationId": "CollectionPartitionRegion_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegionGetMetrics": {
            "$ref": "./examples/CosmosDBCollectionPartitionRegionGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/regionParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricListResult"
                }
              }
            },
            "description": "The metrics for the database account were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given database account and region.",
        "operationId": "DatabaseAccountRegion_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegionGetMetrics": {
            "$ref": "./examples/CosmosDBDatabaseAccountRegionGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/sourceRegionParameter"
          },
          {
            "$ref": "#/components/parameters/targetRegionParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PercentileMetricListResult"
                }
              }
            },
            "description": "The percentile metrics for the account, source and target regions were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data",
        "operationId": "PercentileSourceTarget_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegionGetMetrics": {
            "$ref": "./examples/CosmosDBPercentileSourceTargetGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlDatabaseListResult"
                }
              }
            },
            "description": "The SQL database properties were retrieved successfully."
          }
        },
        "description": "Lists the SQL databases under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_ListSqlDatabases",
        "x-ms-examples": {
          "CosmosDBSqlDatabaseList": {
            "$ref": "./examples/CosmosDBSqlDatabaseList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The SQL database delete operation will complete asynchronously."
          },
          "204": {
            "description": "The SQL database delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB SQL database.",
        "operationId": "SqlResources_DeleteSqlDatabase",
        "x-ms-examples": {
          "CosmosDBSqlDatabaseDelete": {
            "$ref": "./examples/CosmosDBSqlDatabaseDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlDatabaseGetResults"
                }
              }
            },
            "description": "The SQL database property was retrieved successfully."
          }
        },
        "description": "Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "SqlResources_GetSqlDatabase",
        "x-ms-examples": {
          "CosmosDBSqlDatabaseGet": {
            "$ref": "./examples/CosmosDBSqlDatabaseGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlDatabaseGetResults"
                }
              }
            },
            "description": "The SQL database create or update operation was completed successfully."
          },
          "202": {
            "description": "The SQL database create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB SQL database",
        "operationId": "SqlResources_CreateUpdateSqlDatabase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlDatabaseCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current SQL database.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBSqlDatabaseCreateUpdate": {
            "$ref": "./examples/CosmosDBSqlDatabaseCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlContainerListResult"
                }
              }
            },
            "description": "The SQL container properties were retrieved successfully."
          }
        },
        "description": "Lists the SQL container under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_ListSqlContainers",
        "x-ms-examples": {
          "CosmosDBSqlContainerList": {
            "$ref": "./examples/CosmosDBSqlContainerList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The SQL container delete operation will complete asynchronously."
          },
          "204": {
            "description": "The SQL container delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB SQL container.",
        "operationId": "SqlResources_DeleteSqlContainer",
        "x-ms-examples": {
          "CosmosDBSqlContainerDelete": {
            "$ref": "./examples/CosmosDBSqlContainerDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlContainerGetResults"
                }
              }
            },
            "description": "The SQL container property was retrieved successfully."
          }
        },
        "description": "Gets the SQL container under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_GetSqlContainer",
        "x-ms-examples": {
          "CosmosDBSqlContainerGet": {
            "$ref": "./examples/CosmosDBSqlContainerGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlContainerGetResults"
                }
              }
            },
            "description": "The SQL container create or update operation was completed successfully."
          },
          "202": {
            "description": "The SQL container create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB SQL container",
        "operationId": "SqlResources_CreateUpdateSqlContainer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlContainerCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current SQL container.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBSqlContainerCreateUpdate": {
            "$ref": "./examples/CosmosDBSqlContainerCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlStoredProcedureListResult"
                }
              }
            },
            "description": "The SQL stored procedure properties were retrieved successfully."
          }
        },
        "description": "Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_ListSqlStoredProcedures",
        "x-ms-examples": {
          "CosmosDBSqlStoredProcedureList": {
            "$ref": "./examples/CosmosDBSqlStoredProcedureList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/storedProcedureNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The SQL storedProcedure delete operation will complete asynchronously."
          },
          "204": {
            "description": "The SQL storedProcedure delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB SQL storedProcedure.",
        "operationId": "SqlResources_DeleteSqlStoredProcedure",
        "x-ms-examples": {
          "CosmosDBSqlStoredProcedureDelete": {
            "$ref": "./examples/CosmosDBSqlStoredProcedureDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/storedProcedureNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlStoredProcedureGetResults"
                }
              }
            },
            "description": "The SQL storedProcedure property was retrieved successfully."
          }
        },
        "description": "Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_GetSqlStoredProcedure",
        "x-ms-examples": {
          "CosmosDBSqlStoredProcedureGet": {
            "$ref": "./examples/CosmosDBSqlStoredProcedureGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/storedProcedureNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlStoredProcedureGetResults"
                }
              }
            },
            "description": "The SQL storedProcedure create or update operation was completed successfully."
          },
          "202": {
            "description": "The SQL storedProcedure create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB SQL storedProcedure",
        "operationId": "SqlResources_CreateUpdateSqlStoredProcedure",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlStoredProcedureCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current SQL storedProcedure.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBSqlStoredProcedureCreateUpdate": {
            "$ref": "./examples/CosmosDBSqlStoredProcedureCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the SQL container was retrieved successfully."
          }
        },
        "description": "Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_GetSqlContainerThroughput",
        "x-ms-examples": {
          "CosmosDBSqlContainerThroughputGet": {
            "$ref": "./examples/CosmosDBSqlContainerThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the SQL container update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the SQL container update operation will complete asynchronously."
          }
        },
        "description": "Update RUs per second of an Azure Cosmos DB SQL container",
        "operationId": "SqlResources_UpdateSqlContainerThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the RUs per second of the current SQL container.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBSqlContainerThroughputUpdate": {
            "$ref": "./examples/CosmosDBSqlContainerThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlTriggerListResult"
                }
              }
            },
            "description": "The SQL trigger properties were retrieved successfully."
          }
        },
        "description": "Lists the SQL trigger under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_ListSqlTriggers",
        "x-ms-examples": {
          "CosmosDBSqlTriggerList": {
            "$ref": "./examples/CosmosDBSqlTriggerList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/triggerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The SQL trigger delete operation will complete asynchronously."
          },
          "204": {
            "description": "The SQL trigger delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB SQL trigger.",
        "operationId": "SqlResources_DeleteSqlTrigger",
        "x-ms-examples": {
          "CosmosDBSqlTriggerDelete": {
            "$ref": "./examples/CosmosDBSqlTriggerDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/triggerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlTriggerGetResults"
                }
              }
            },
            "description": "The SQL trigger property was retrieved successfully."
          }
        },
        "description": "Gets the SQL trigger under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_GetSqlTrigger",
        "x-ms-examples": {
          "CosmosDBSqlTriggerGet": {
            "$ref": "./examples/CosmosDBSqlTriggerGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/triggerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlTriggerGetResults"
                }
              }
            },
            "description": "The SQL trigger create or update operation was completed successfully."
          },
          "202": {
            "description": "The SQL trigger create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB SQL trigger",
        "operationId": "SqlResources_CreateUpdateSqlTrigger",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlTriggerCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current SQL trigger.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBSqlTriggerCreateUpdate": {
            "$ref": "./examples/CosmosDBSqlTriggerCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlUserDefinedFunctionListResult"
                }
              }
            },
            "description": "The SQL userDefinedFunction properties were retrieved successfully."
          }
        },
        "description": "Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_ListSqlUserDefinedFunctions",
        "x-ms-examples": {
          "CosmosDBSqlUserDefinedFunctionList": {
            "$ref": "./examples/CosmosDBSqlUserDefinedFunctionList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/userDefinedFunctionNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The SQL userDefinedFunction delete operation will complete asynchronously."
          },
          "204": {
            "description": "The SQL userDefinedFunction delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB SQL userDefinedFunction.",
        "operationId": "SqlResources_DeleteSqlUserDefinedFunction",
        "x-ms-examples": {
          "CosmosDBSqlUserDefinedFunctionDelete": {
            "$ref": "./examples/CosmosDBSqlUserDefinedFunctionDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/userDefinedFunctionNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlUserDefinedFunctionGetResults"
                }
              }
            },
            "description": "The SQL userDefinedFunction property was retrieved successfully."
          }
        },
        "description": "Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.",
        "operationId": "SqlResources_GetSqlUserDefinedFunction",
        "x-ms-examples": {
          "CosmosDBSqlUserDefinedFunctionGet": {
            "$ref": "./examples/CosmosDBSqlUserDefinedFunctionGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/containerNameParameter"
          },
          {
            "$ref": "#/components/parameters/userDefinedFunctionNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlUserDefinedFunctionGetResults"
                }
              }
            },
            "description": "The SQL userDefinedFunction create or update operation was completed successfully."
          },
          "202": {
            "description": "The SQL userDefinedFunction create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB SQL userDefinedFunction",
        "operationId": "SqlResources_CreateUpdateSqlUserDefinedFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlUserDefinedFunctionCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current SQL userDefinedFunction.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBSqlUserDefinedFunctionCreateUpdate": {
            "$ref": "./examples/CosmosDBSqlUserDefinedFunctionCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the SQL database was retrieved successfully."
          }
        },
        "description": "Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "SqlResources_GetSqlDatabaseThroughput",
        "x-ms-examples": {
          "CosmosDBSqlDatabaseThroughputGet": {
            "$ref": "./examples/CosmosDBSqlDatabaseThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/databaseNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the SQL database update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the SQL database update operation will complete asynchronously."
          }
        },
        "description": "Update RUs per second of an Azure Cosmos DB SQL database",
        "operationId": "SqlResources_UpdateSqlDatabaseThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the RUs per second of the current SQL database.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBSqlDatabaseThroughputUpdate": {
            "$ref": "./examples/CosmosDBSqlDatabaseThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableListResult"
                }
              }
            },
            "description": "The Table properties were retrieved successfully."
          }
        },
        "description": "Lists the Tables under an existing Azure Cosmos DB database account.",
        "operationId": "TableResources_ListTables",
        "x-ms-examples": {
          "CosmosDBTableList": {
            "$ref": "./examples/CosmosDBTableList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The Table delete operation will complete asynchronously."
          },
          "204": {
            "description": "The Table delete operation was completed successfully."
          }
        },
        "description": "Deletes an existing Azure Cosmos DB Table.",
        "operationId": "TableResources_DeleteTable",
        "x-ms-examples": {
          "CosmosDBTableDelete": {
            "$ref": "./examples/CosmosDBTableDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableGetResults"
                }
              }
            },
            "description": "The Table property was retrieved successfully."
          }
        },
        "description": "Gets the Tables under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "TableResources_GetTable",
        "x-ms-examples": {
          "CosmosDBTableGet": {
            "$ref": "./examples/CosmosDBTableGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableGetResults"
                }
              }
            },
            "description": "The Table create or update operation was completed successfully."
          },
          "202": {
            "description": "The Table create or update operation will complete asynchronously."
          }
        },
        "description": "Create or update an Azure Cosmos DB Table",
        "operationId": "TableResources_CreateUpdateTable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableCreateUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the current Table.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBTableReplace": {
            "$ref": "./examples/CosmosDBTableCreateUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Table was retrieved successfully."
          }
        },
        "description": "Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.",
        "operationId": "TableResources_GetTableThroughput",
        "x-ms-examples": {
          "CosmosDBTableThroughputGet": {
            "$ref": "./examples/CosmosDBTableThroughputGet.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/tableNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThroughputSettingsGetResults"
                }
              }
            },
            "description": "The RUs per second of the Table update operation was completed successfully."
          },
          "202": {
            "description": "The RUs per second of the Table update operation will complete asynchronously."
          }
        },
        "description": "Update RUs per second of an Azure Cosmos DB Table",
        "operationId": "TableResources_UpdateTableThroughput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThroughputSettingsUpdateParameters"
              }
            }
          },
          "description": "The parameters to provide for the RUs per second of the current Table.",
          "required": true
        },
        "x-ms-examples": {
          "CosmosDBTableThroughputUpdate": {
            "$ref": "./examples/CosmosDBTableThroughputUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/targetRegionParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PercentileMetricListResult"
                }
              }
            },
            "description": "The percentile metrics for the account and target regions were retrieved successfully."
          }
        },
        "description": "Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data",
        "operationId": "PercentileTarget_ListMetrics",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountRegionGetMetrics": {
            "$ref": "./examples/CosmosDBPercentileTargetGetMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages": {
      "get": {
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/accountNameParameter"
          },
          {
            "$ref": "#/components/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/usageFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsagesResult"
                }
              }
            },
            "description": "The usages for the database account were retrieved successfully."
          }
        },
        "description": "Retrieves the usages (most recent data) for the given database account.",
        "operationId": "DatabaseAccounts_ListUsages",
        "x-ms-examples": {
          "CosmosDBDatabaseAccountGetUsages": {
            "$ref": "./examples/CosmosDBDatabaseAccountGetUsages.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    }
  },
  "components": {
    "parameters": {
      "accountNameParameter": {
        "description": "Cosmos DB database account name.",
        "in": "path",
        "name": "accountName",
        "required": true,
        "schema": {
          "maxLength": 50,
          "minLength": 3,
          "pattern": "^[a-z0-9]+(-[a-z0-9]+)*",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "apiVersionParameter": {
        "description": "Version of the API to be used with the client request. The current version is 2019-08-01.",
        "in": "query",
        "name": "api-version",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "collectionNameParameter": {
        "description": "Cosmos DB collection name.",
        "in": "path",
        "name": "collectionName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "collectionRidParameter": {
        "description": "Cosmos DB collection rid.",
        "in": "path",
        "name": "collectionRid",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "containerNameParameter": {
        "description": "Cosmos DB container name.",
        "in": "path",
        "name": "containerName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "databaseNameParameter": {
        "description": "Cosmos DB database name.",
        "in": "path",
        "name": "databaseName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "databaseRidParameter": {
        "description": "Cosmos DB database rid.",
        "in": "path",
        "name": "databaseRid",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "filterParameter": {
        "description": "An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.",
        "in": "query",
        "name": "$filter",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "graphNameParameter": {
        "description": "Cosmos DB graph name.",
        "in": "path",
        "name": "graphName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "keyspaceNameParameter": {
        "description": "Cosmos DB keyspace name.",
        "in": "path",
        "name": "keyspaceName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "partitionKeyRangeIdParameter": {
        "description": "Partition Key Range Id for which to get data.",
        "in": "path",
        "name": "partitionKeyRangeId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "regionParameter": {
        "description": "Cosmos DB region, with spaces between words and each word capitalized.",
        "in": "path",
        "name": "region",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "resourceGroupNameParameter": {
        "description": "Name of an Azure resource group.",
        "in": "path",
        "name": "resourceGroupName",
        "required": true,
        "schema": {
          "maxLength": 90,
          "minLength": 1,
          "pattern": "^[-\\w\\._\\(\\)]+$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "sourceRegionParameter": {
        "description": "Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.",
        "in": "path",
        "name": "sourceRegion",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "storedProcedureNameParameter": {
        "description": "Cosmos DB storedProcedure name.",
        "in": "path",
        "name": "storedProcedureName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "tableNameParameter": {
        "description": "Cosmos DB table name.",
        "in": "path",
        "name": "tableName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "targetRegionParameter": {
        "description": "Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.",
        "in": "path",
        "name": "targetRegion",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "triggerNameParameter": {
        "description": "Cosmos DB trigger name.",
        "in": "path",
        "name": "triggerName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "usageFilterParameter": {
        "description": "An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).",
        "in": "query",
        "name": "$filter",
        "required": false,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "userDefinedFunctionNameParameter": {
        "description": "Cosmos DB userDefinedFunction name.",
        "in": "path",
        "name": "userDefinedFunctionName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "schemas": {
      "ARMProxyResource": {
        "description": "The resource model definition for a ARM proxy resource. It will have everything other than required location and tags",
        "properties": {
          "id": {
            "description": "The unique resource identifier of the database account.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the database account.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of Azure resource.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      },
      "ARMResourceProperties": {
        "description": "The core properties of ARM resources.",
        "properties": {
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "id": {
            "description": "The unique resource identifier of the ARM resource.",
            "readOnly": true,
            "type": "string"
          },
          "location": {
            "description": "The location of the resource group to which the resource belongs.",
            "type": "string"
          },
          "name": {
            "description": "The name of the ARM resource.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of Azure resource.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      },
      "Capability": {
        "description": "Cosmos DB capability object",
        "properties": {
          "name": {
            "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CassandraKeyspaceCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB Cassandra keyspace.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/CassandraKeyspaceCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB Cassandra keyspace.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "CassandraKeyspaceCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB Cassandra keyspace.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/CassandraKeyspaceResource",
            "description": "The standard JSON format of a Cassandra keyspace"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "CassandraKeyspaceGetProperties": {
        "description": "The properties of an Azure Cosmos DB Cassandra keyspace",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CassandraKeyspaceResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "CassandraKeyspaceGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB Cassandra keyspace.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/CassandraKeyspaceGetProperties",
            "description": "The properties of an Azure Cosmos DB Cassandra keyspace",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "CassandraKeyspaceListResult": {
        "description": "The List operation response, that contains the Cassandra keyspaces and their properties.",
        "properties": {
          "value": {
            "description": "List of Cassandra keyspaces and their properties.",
            "items": {
              "$ref": "#/components/schemas/CassandraKeyspaceGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "CassandraKeyspaceResource": {
        "description": "Cosmos DB Cassandra keyspace resource object",
        "properties": {
          "id": {
            "description": "Name of the Cosmos DB Cassandra keyspace",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "CassandraPartitionKey": {
        "description": "Cosmos DB Cassandra table partition key",
        "properties": {
          "name": {
            "description": "Name of the Cosmos DB Cassandra table partition key",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CassandraSchema": {
        "description": "Cosmos DB Cassandra table schema",
        "properties": {
          "clusterKeys": {
            "description": "List of cluster key.",
            "items": {
              "$ref": "#/components/schemas/ClusterKey"
            },
            "type": "array"
          },
          "columns": {
            "description": "List of Cassandra table columns.",
            "items": {
              "$ref": "#/components/schemas/Column"
            },
            "type": "array"
          },
          "partitionKeys": {
            "description": "List of partition key.",
            "items": {
              "$ref": "#/components/schemas/CassandraPartitionKey"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CassandraTableCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB Cassandra table.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/CassandraTableCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB Cassandra table.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "CassandraTableCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB Cassandra table.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/CassandraTableResource",
            "description": "The standard JSON format of a Cassandra table"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "CassandraTableGetProperties": {
        "description": "The properties of an Azure Cosmos DB Cassandra table",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CassandraTableResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "CassandraTableGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB Cassandra table.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/CassandraTableGetProperties",
            "description": "The properties of an Azure Cosmos DB Cassandra table",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "CassandraTableListResult": {
        "description": "The List operation response, that contains the Cassandra tables and their properties.",
        "properties": {
          "value": {
            "description": "List of Cassandra tables and their properties.",
            "items": {
              "$ref": "#/components/schemas/CassandraTableGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "CassandraTableResource": {
        "description": "Cosmos DB Cassandra table resource object",
        "properties": {
          "defaultTtl": {
            "description": "Time to live of the Cosmos DB Cassandra table",
            "type": "integer"
          },
          "id": {
            "description": "Name of the Cosmos DB Cassandra table",
            "type": "string"
          },
          "schema": {
            "$ref": "#/components/schemas/CassandraSchema",
            "description": "Schema of the Cosmos DB Cassandra table"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ClusterKey": {
        "description": "Cosmos DB Cassandra table cluster key",
        "properties": {
          "name": {
            "description": "Name of the Cosmos DB Cassandra table cluster key",
            "type": "string"
          },
          "orderBy": {
            "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Column": {
        "description": "Cosmos DB Cassandra table column",
        "properties": {
          "name": {
            "description": "Name of the Cosmos DB Cassandra table column",
            "type": "string"
          },
          "type": {
            "description": "Type of the Cosmos DB Cassandra table column",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompositePath": {
        "properties": {
          "order": {
            "description": "Sort order for composite paths.",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "CompositePathSortOrder"
            }
          },
          "path": {
            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompositePathList": {
        "description": "List of composite path",
        "items": {
          "$ref": "#/components/schemas/CompositePath"
        },
        "type": "array"
      },
      "ConflictResolutionPolicy": {
        "description": "The conflict resolution policy for the container.",
        "properties": {
          "conflictResolutionPath": {
            "description": "The conflict resolution path in the case of LastWriterWins mode.",
            "type": "string"
          },
          "conflictResolutionProcedure": {
            "description": "The procedure to resolve conflicts in the case of custom mode.",
            "type": "string"
          },
          "mode": {
            "default": "LastWriterWins",
            "description": "Indicates the conflict resolution mode.",
            "enum": [
              "LastWriterWins",
              "Custom"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ConflictResolutionMode"
            }
          }
        },
        "type": "object"
      },
      "ConnectorOffer": {
        "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
        "enum": [
          "Small"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "ConnectorOffer"
        }
      },
      "ConsistencyPolicy": {
        "description": "The consistency policy for the Cosmos DB database account.",
        "properties": {
          "defaultConsistencyLevel": {
            "description": "The default consistency level and configuration settings of the Cosmos DB account.",
            "enum": [
              "Eventual",
              "Session",
              "BoundedStaleness",
              "Strong",
              "ConsistentPrefix"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "DefaultConsistencyLevel"
            }
          },
          "maxIntervalInSeconds": {
            "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
            "format": "int32",
            "maximum": 86400,
            "minimum": 5,
            "type": "integer"
          },
          "maxStalenessPrefix": {
            "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
            "format": "int64",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "defaultConsistencyLevel"
        ],
        "type": "object"
      },
      "ContainerPartitionKey": {
        "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
        "properties": {
          "paths": {
            "description": "List of paths using which data within the container can be partitioned",
            "items": {
              "$ref": "#/components/schemas/Path"
            },
            "type": "array"
          },
          "kind": {
            "default": "Hash",
            "description": "Indicates the kind of algorithm used for partitioning",
            "enum": [
              "Hash",
              "Range"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PartitionKind"
            }
          },
          "version": {
            "description": "Indicates the version of the partition key definition",
            "format": "int32",
            "maximum": 2,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateUpdateOptions": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
        "type": "object"
      },
      "DatabaseAccountConnectionString": {
        "description": "Connection string for the Cosmos DB account",
        "properties": {
          "connectionString": {
            "description": "Value of the connection string",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the connection string",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatabaseAccountCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB database accounts.",
        "properties": {
          "kind": {
            "default": "GlobalDocumentDB",
            "description": "Indicates the type of database account. This can only be set at database account creation.",
            "enum": [
              "GlobalDocumentDB",
              "MongoDB",
              "Parse"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "DatabaseAccountKind"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/DatabaseAccountCreateUpdateProperties",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "DatabaseAccountCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB database accounts.",
        "properties": {
          "capabilities": {
            "description": "List of Cosmos DB capabilities for the account",
            "items": {
              "$ref": "#/components/schemas/Capability"
            },
            "type": "array"
          },
          "connectorOffer": {
            "$ref": "#/components/schemas/ConnectorOffer",
            "description": "The cassandra connector offer type for the Cosmos DB database C* account."
          },
          "consistencyPolicy": {
            "$ref": "#/components/schemas/ConsistencyPolicy",
            "description": "The consistency policy for the Cosmos DB account."
          },
          "databaseAccountOfferType": {
            "$ref": "#/components/schemas/DatabaseAccountOfferType",
            "description": "The offer type for the database"
          },
          "disableKeyBasedMetadataWriteAccess": {
            "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
            "type": "boolean"
          },
          "enableAutomaticFailover": {
            "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
            "type": "boolean"
          },
          "enableCassandraConnector": {
            "description": "Enables the cassandra connector on the Cosmos DB C* account",
            "type": "boolean"
          },
          "enableMultipleWriteLocations": {
            "description": "Enables the account to write in multiple locations",
            "type": "boolean"
          },
          "ipRangeFilter": {
            "$ref": "#/components/schemas/IPRangeFilter",
            "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces."
          },
          "isVirtualNetworkFilterEnabled": {
            "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
            "type": "boolean"
          },
          "locations": {
            "description": "An array that contains the georeplication locations enabled for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "type": "array"
          },
          "virtualNetworkRules": {
            "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/VirtualNetworkRule"
            },
            "type": "array"
          }
        },
        "required": [
          "locations",
          "databaseAccountOfferType"
        ],
        "type": "object"
      },
      "DatabaseAccountGetProperties": {
        "description": "Properties for the database account.",
        "properties": {
          "capabilities": {
            "description": "List of Cosmos DB capabilities for the account",
            "items": {
              "$ref": "#/components/schemas/Capability"
            },
            "type": "array"
          },
          "connectorOffer": {
            "$ref": "#/components/schemas/ConnectorOffer",
            "description": "The cassandra connector offer type for the Cosmos DB database C* account."
          },
          "consistencyPolicy": {
            "$ref": "#/components/schemas/ConsistencyPolicy",
            "description": "The consistency policy for the Cosmos DB database account."
          },
          "databaseAccountOfferType": {
            "$ref": "#/components/schemas/DatabaseAccountOfferType",
            "description": "The offer type for the Cosmos DB database account. Default value: Standard.",
            "readOnly": true
          },
          "disableKeyBasedMetadataWriteAccess": {
            "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
            "type": "boolean"
          },
          "documentEndpoint": {
            "description": "The connection endpoint for the Cosmos DB database account.",
            "readOnly": true,
            "type": "string"
          },
          "enableAutomaticFailover": {
            "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
            "type": "boolean"
          },
          "enableCassandraConnector": {
            "description": "Enables the cassandra connector on the Cosmos DB C* account",
            "type": "boolean"
          },
          "enableMultipleWriteLocations": {
            "description": "Enables the account to write in multiple locations",
            "type": "boolean"
          },
          "failoverPolicies": {
            "description": "An array that contains the regions ordered by their failover priorities.",
            "items": {
              "$ref": "#/components/schemas/FailoverPolicy"
            },
            "readOnly": true,
            "type": "array"
          },
          "ipRangeFilter": {
            "$ref": "#/components/schemas/IPRangeFilter",
            "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces."
          },
          "isVirtualNetworkFilterEnabled": {
            "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
            "type": "boolean"
          },
          "locations": {
            "description": "An array that contains all of the locations enabled for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "readOnly": true,
            "type": "array"
          },
          "provisioningState": {
            "$ref": "#/components/schemas/ProvisioningState"
          },
          "readLocations": {
            "description": "An array that contains of the read locations enabled for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "readOnly": true,
            "type": "array"
          },
          "virtualNetworkRules": {
            "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/VirtualNetworkRule"
            },
            "type": "array"
          },
          "writeLocations": {
            "description": "An array that contains the write location for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "DatabaseAccountGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB database account.",
        "properties": {
          "kind": {
            "default": "GlobalDocumentDB",
            "description": "Indicates the type of database account. This can only be set at database account creation.",
            "enum": [
              "GlobalDocumentDB",
              "MongoDB",
              "Parse"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "DatabaseAccountKind"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/DatabaseAccountGetProperties",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "DatabaseAccountListConnectionStringsResult": {
        "description": "The connection strings for the given database account.",
        "properties": {
          "connectionStrings": {
            "description": "An array that contains the connection strings for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/DatabaseAccountConnectionString"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DatabaseAccountListKeysResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatabaseAccountListReadOnlyKeysResult"
          }
        ],
        "description": "The access keys for the given database account.",
        "properties": {
          "primaryMasterKey": {
            "description": "Base 64 encoded value of the primary read-write key.",
            "readOnly": true,
            "type": "string"
          },
          "secondaryMasterKey": {
            "description": "Base 64 encoded value of the secondary read-write key.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatabaseAccountListReadOnlyKeysResult": {
        "description": "The read-only access keys for the given database account.",
        "properties": {
          "primaryReadonlyMasterKey": {
            "description": "Base 64 encoded value of the primary read-only key.",
            "readOnly": true,
            "type": "string"
          },
          "secondaryReadonlyMasterKey": {
            "description": "Base 64 encoded value of the secondary read-only key.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatabaseAccountOfferType": {
        "description": "The offer type for the Cosmos DB database account.",
        "enum": [
          "Standard"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": false,
          "name": "DatabaseAccountOfferType"
        }
      },
      "DatabaseAccountRegenerateKeyParameters": {
        "description": "Parameters to regenerate the keys within the database account.",
        "properties": {
          "keyKind": {
            "description": "The access key to regenerate.",
            "enum": [
              "primary",
              "secondary",
              "primaryReadonly",
              "secondaryReadonly"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "KeyKind"
            }
          }
        },
        "required": [
          "keyKind"
        ],
        "type": "object"
      },
      "DatabaseAccountUpdateParameters": {
        "description": "Parameters for patching Azure Cosmos DB database account properties.",
        "properties": {
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "location": {
            "description": "The location of the resource group to which the resource belongs.",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/DatabaseAccountUpdateProperties",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "DatabaseAccountUpdateProperties": {
        "description": "Properties to update Azure Cosmos DB database accounts.",
        "properties": {
          "capabilities": {
            "description": "List of Cosmos DB capabilities for the account",
            "items": {
              "$ref": "#/components/schemas/Capability"
            },
            "type": "array"
          },
          "connectorOffer": {
            "$ref": "#/components/schemas/ConnectorOffer",
            "description": "The cassandra connector offer type for the Cosmos DB database C* account."
          },
          "consistencyPolicy": {
            "$ref": "#/components/schemas/ConsistencyPolicy",
            "description": "The consistency policy for the Cosmos DB account."
          },
          "disableKeyBasedMetadataWriteAccess": {
            "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
            "type": "boolean"
          },
          "enableAutomaticFailover": {
            "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
            "type": "boolean"
          },
          "enableCassandraConnector": {
            "description": "Enables the cassandra connector on the Cosmos DB C* account",
            "type": "boolean"
          },
          "enableMultipleWriteLocations": {
            "description": "Enables the account to write in multiple locations",
            "type": "boolean"
          },
          "ipRangeFilter": {
            "$ref": "#/components/schemas/IPRangeFilter",
            "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces."
          },
          "isVirtualNetworkFilterEnabled": {
            "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
            "type": "boolean"
          },
          "locations": {
            "description": "An array that contains the georeplication locations enabled for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "type": "array"
          },
          "virtualNetworkRules": {
            "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
            "items": {
              "$ref": "#/components/schemas/VirtualNetworkRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DatabaseAccountsListResult": {
        "description": "The List operation response, that contains the database accounts and their properties.",
        "properties": {
          "value": {
            "description": "List of database account and their properties.",
            "items": {
              "$ref": "#/components/schemas/DatabaseAccountGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "description": "Error Response.",
        "properties": {
          "code": {
            "description": "Error code.",
            "type": "string"
          },
          "message": {
            "description": "Error message indicating why the operation failed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExcludedPath": {
        "properties": {
          "path": {
            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtendedResourceProperties": {
        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
        "properties": {
          "_etag": {
            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
            "readOnly": true,
            "type": "string"
          },
          "_rid": {
            "description": "A system generated property. A unique identifier.",
            "readOnly": true,
            "type": "string"
          },
          "_ts": {
            "description": "A system generated property that denotes the last updated timestamp of the resource.",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "FailoverPolicies": {
        "description": "The list of new failover policies for the failover priority change.",
        "properties": {
          "failoverPolicies": {
            "description": "List of failover policies.",
            "items": {
              "$ref": "#/components/schemas/FailoverPolicy"
            },
            "type": "array"
          }
        },
        "required": [
          "failoverPolicies"
        ],
        "type": "object"
      },
      "FailoverPolicy": {
        "description": "The failover policy for a given region of a database account.",
        "properties": {
          "failoverPriority": {
            "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "description": "The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
            "readOnly": true,
            "type": "string"
          },
          "locationName": {
            "description": "The name of the region in which the database account exists.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GremlinDatabaseCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB Gremlin database.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/GremlinDatabaseCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB Gremlin database.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "GremlinDatabaseCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB Gremlin database.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/GremlinDatabaseResource",
            "description": "The standard JSON format of a Gremlin database"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "GremlinDatabaseGetProperties": {
        "description": "The properties of an Azure Cosmos DB SQL database",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GremlinDatabaseResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "GremlinDatabaseGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB Gremlin database.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/GremlinDatabaseGetProperties",
            "description": "The properties of an Azure Cosmos DB SQL database",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "GremlinDatabaseListResult": {
        "description": "The List operation response, that contains the Gremlin databases and their properties.",
        "properties": {
          "value": {
            "description": "List of Gremlin databases and their properties.",
            "items": {
              "$ref": "#/components/schemas/GremlinDatabaseGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "GremlinDatabaseResource": {
        "description": "Cosmos DB Gremlin database resource object",
        "properties": {
          "id": {
            "description": "Name of the Cosmos DB Gremlin database",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "GremlinGraphCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB Gremlin graph.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/GremlinGraphCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB Gremlin graph.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "GremlinGraphCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB Gremlin graph.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/GremlinGraphResource",
            "description": "The standard JSON format of a Gremlin graph"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "GremlinGraphGetProperties": {
        "description": "The properties of an Azure Cosmos DB Gremlin graph",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GremlinGraphResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "GremlinGraphGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB Gremlin graph.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/GremlinGraphGetProperties",
            "description": "The properties of an Azure Cosmos DB Gremlin graph",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "GremlinGraphListResult": {
        "description": "The List operation response, that contains the graphs and their properties.",
        "properties": {
          "value": {
            "description": "List of graphs and their properties.",
            "items": {
              "$ref": "#/components/schemas/GremlinGraphGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "GremlinGraphResource": {
        "description": "Cosmos DB Gremlin graph resource object",
        "properties": {
          "conflictResolutionPolicy": {
            "$ref": "#/components/schemas/ConflictResolutionPolicy",
            "description": "The conflict resolution policy for the graph."
          },
          "defaultTtl": {
            "description": "Default time to live",
            "type": "integer"
          },
          "id": {
            "description": "Name of the Cosmos DB Gremlin graph",
            "type": "string"
          },
          "indexingPolicy": {
            "$ref": "#/components/schemas/IndexingPolicy",
            "description": "The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph"
          },
          "partitionKey": {
            "$ref": "#/components/schemas/ContainerPartitionKey",
            "description": "The configuration of the partition key to be used for partitioning data into multiple partitions"
          },
          "uniqueKeyPolicy": {
            "$ref": "#/components/schemas/UniqueKeyPolicy",
            "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "IPRangeFilter": {
        "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
        "type": "string"
      },
      "IncludedPath": {
        "description": "The paths that are included in indexing",
        "properties": {
          "indexes": {
            "description": "List of indexes for this path",
            "items": {
              "$ref": "#/components/schemas/Indexes"
            },
            "type": "array"
          },
          "path": {
            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Indexes": {
        "description": "The indexes for the path.",
        "properties": {
          "dataType": {
            "default": "String",
            "description": "The datatype for which the indexing behavior is applied to.",
            "enum": [
              "String",
              "Number",
              "Point",
              "Polygon",
              "LineString",
              "MultiPolygon"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "DataType"
            }
          },
          "kind": {
            "default": "Hash",
            "description": "Indicates the type of index.",
            "enum": [
              "Hash",
              "Range",
              "Spatial"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "IndexKind"
            }
          },
          "precision": {
            "description": "The precision of the index. -1 is maximum precision.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IndexingPolicy": {
        "description": "Cosmos DB indexing policy",
        "properties": {
          "automatic": {
            "description": "Indicates if the indexing policy is automatic",
            "type": "boolean"
          },
          "compositeIndexes": {
            "description": "List of composite path list",
            "items": {
              "$ref": "#/components/schemas/CompositePathList"
            },
            "type": "array"
          },
          "excludedPaths": {
            "description": "List of paths to exclude from indexing",
            "items": {
              "$ref": "#/components/schemas/ExcludedPath"
            },
            "type": "array"
          },
          "includedPaths": {
            "description": "List of paths to include in the indexing",
            "items": {
              "$ref": "#/components/schemas/IncludedPath"
            },
            "type": "array"
          },
          "indexingMode": {
            "default": "Consistent",
            "description": "Indicates the indexing mode.",
            "enum": [
              "Consistent",
              "Lazy",
              "None"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "IndexingMode"
            }
          },
          "spatialIndexes": {
            "description": "List of spatial specifics",
            "items": {
              "$ref": "#/components/schemas/SpatialSpec"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Key": {
        "description": "A Key.",
        "type": "string"
      },
      "Location": {
        "description": "A region in which the Azure Cosmos DB database account is deployed.",
        "properties": {
          "documentEndpoint": {
            "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
            "readOnly": true,
            "type": "string"
          },
          "failoverPriority": {
            "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
            "readOnly": true,
            "type": "string"
          },
          "isZoneRedundant": {
            "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
            "type": "boolean"
          },
          "locationName": {
            "description": "The name of the region.",
            "type": "string"
          },
          "provisioningState": {
            "$ref": "#/components/schemas/ProvisioningState"
          }
        },
        "type": "object"
      },
      "Metric": {
        "description": "Metric data",
        "properties": {
          "endTime": {
            "description": "The end time for the metric (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metricValues": {
            "description": "The metric values for the specified time window and timestep.",
            "items": {
              "$ref": "#/components/schemas/MetricValue"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/MetricName",
            "description": "The name information for the metric.",
            "readOnly": true
          },
          "startTime": {
            "description": "The start time for the metric (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "timeGrain": {
            "description": "The time grain to be used to summarize the metric values.",
            "readOnly": true,
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitType",
            "description": "The unit of the metric."
          }
        },
        "type": "object"
      },
      "MetricAvailability": {
        "description": "The availability of the metric.",
        "properties": {
          "retention": {
            "description": "The retention for the metric values.",
            "readOnly": true,
            "type": "string"
          },
          "timeGrain": {
            "description": "The time grain to be used to summarize the metric values.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricDefinition": {
        "description": "The definition of a metric.",
        "properties": {
          "metricAvailabilities": {
            "description": "The list of metric availabilities for the account.",
            "items": {
              "$ref": "#/components/schemas/MetricAvailability"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/MetricName",
            "description": "The name information for the metric.",
            "readOnly": true
          },
          "primaryAggregationType": {
            "description": "The primary aggregation type of the metric.",
            "enum": [
              "None",
              "Average",
              "Total",
              "Minimum",
              "Maximum",
              "Last"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PrimaryAggregationType"
            }
          },
          "resourceUri": {
            "description": "The resource uri of the database.",
            "readOnly": true,
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitType",
            "description": "The unit of the metric."
          }
        },
        "type": "object"
      },
      "MetricDefinitionsListResult": {
        "description": "The response to a list metric definitions request.",
        "properties": {
          "value": {
            "description": "The list of metric definitions for the account.",
            "items": {
              "$ref": "#/components/schemas/MetricDefinition"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricListResult": {
        "description": "The response to a list metrics request.",
        "properties": {
          "value": {
            "description": "The list of metrics for the account.",
            "items": {
              "$ref": "#/components/schemas/Metric"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricName": {
        "description": "A metric name.",
        "properties": {
          "localizedValue": {
            "description": "The friendly name of the metric.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "The name of the metric.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricValue": {
        "description": "Represents metrics values.",
        "properties": {
          "_count": {
            "description": "The number of values for the metric.",
            "format": "int32",
            "readOnly": true,
            "type": "number"
          },
          "average": {
            "description": "The average value of the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "maximum": {
            "description": "The max value of the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "minimum": {
            "description": "The min value of the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "timestamp": {
            "description": "The metric timestamp (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "description": "The total value of the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "MongoDBCollectionCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB MongoDB collection.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/MongoDBCollectionCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB MongoDB collection.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "MongoDBCollectionCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB MongoDB collection.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/MongoDBCollectionResource",
            "description": "The standard JSON format of a MongoDB collection"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "MongoDBCollectionGetProperties": {
        "description": "The properties of an Azure Cosmos DB MongoDB collection",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MongoDBCollectionResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "MongoDBCollectionGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB MongoDB collection.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/MongoDBCollectionGetProperties",
            "description": "The properties of an Azure Cosmos DB MongoDB collection",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "MongoDBCollectionListResult": {
        "description": "The List operation response, that contains the MongoDB collections and their properties.",
        "properties": {
          "value": {
            "description": "List of MongoDB collections and their properties.",
            "items": {
              "$ref": "#/components/schemas/MongoDBCollectionGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "MongoDBCollectionResource": {
        "description": "Cosmos DB MongoDB collection resource object",
        "properties": {
          "id": {
            "description": "Name of the Cosmos DB MongoDB collection",
            "type": "string"
          },
          "indexes": {
            "description": "List of index keys",
            "items": {
              "$ref": "#/components/schemas/MongoIndex"
            },
            "type": "array"
          },
          "shardKey": {
            "$ref": "#/components/schemas/ShardKeys",
            "description": "A key-value pair of shard keys to be applied for the request."
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MongoDBDatabaseCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB MongoDB database.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/MongoDBDatabaseCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB MongoDB database.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "MongoDBDatabaseCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB MongoDB database.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/MongoDBDatabaseResource",
            "description": "The standard JSON format of a MongoDB database"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "MongoDBDatabaseGetProperties": {
        "description": "The properties of an Azure Cosmos DB MongoDB database",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MongoDBDatabaseResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "MongoDBDatabaseGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB MongoDB database.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/MongoDBDatabaseGetProperties",
            "description": "The properties of an Azure Cosmos DB MongoDB database",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "MongoDBDatabaseListResult": {
        "description": "The List operation response, that contains the MongoDB databases and their properties.",
        "properties": {
          "value": {
            "description": "List of MongoDB databases and their properties.",
            "items": {
              "$ref": "#/components/schemas/MongoDBDatabaseGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "MongoDBDatabaseResource": {
        "description": "Cosmos DB MongoDB database resource object",
        "properties": {
          "id": {
            "description": "Name of the Cosmos DB MongoDB database",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MongoIndex": {
        "description": "Cosmos DB MongoDB collection index key",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/MongoIndexKeys",
            "description": "Cosmos DB MongoDB collection index keys"
          },
          "options": {
            "$ref": "#/components/schemas/MongoIndexOptions",
            "description": "Cosmos DB MongoDB collection index key options"
          }
        },
        "type": "object"
      },
      "MongoIndexKeys": {
        "description": "Cosmos DB MongoDB collection resource object",
        "properties": {
          "keys": {
            "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
            "items": {
              "$ref": "#/components/schemas/Key"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MongoIndexOptions": {
        "description": "Cosmos DB MongoDB collection index options",
        "properties": {
          "expireAfterSeconds": {
            "description": "Expire after seconds",
            "type": "integer"
          },
          "unique": {
            "description": "Is unique or not",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Operation": {
        "description": "REST API operation",
        "properties": {
          "display": {
            "description": "The object that represents the operation.",
            "properties": {
              "Description": {
                "description": "Description of operation",
                "type": "string"
              },
              "Operation": {
                "description": "Operation type: Read, write, delete, etc.",
                "type": "string"
              },
              "Provider": {
                "description": "Service provider: Microsoft.ResourceProvider",
                "type": "string"
              },
              "Resource": {
                "description": "Resource on which the operation is performed: Profile, endpoint, etc.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "Operation name: {provider}/{resource}/{operation}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OperationListResult": {
        "description": "Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results.",
        "properties": {
          "nextLink": {
            "description": "URL to get the next set of operation list results if there are any.",
            "type": "string"
          },
          "value": {
            "description": "List of operations supported by the Resource Provider.",
            "items": {
              "$ref": "#/components/schemas/Operation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartitionMetric": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Metric"
          }
        ],
        "description": "The metric values for a single partition.",
        "properties": {
          "partitionId": {
            "description": "The partition id (GUID identifier) of the metric values.",
            "readOnly": true,
            "type": "string"
          },
          "partitionKeyRangeId": {
            "description": "The partition key range id (integer identifier) of the metric values.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartitionMetricListResult": {
        "description": "The response to a list partition metrics request.",
        "properties": {
          "value": {
            "description": "The list of partition-level metrics for the account.",
            "items": {
              "$ref": "#/components/schemas/PartitionMetric"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartitionUsage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Usage"
          }
        ],
        "description": "The partition level usage data for a usage request.",
        "properties": {
          "partitionId": {
            "description": "The partition id (GUID identifier) of the usages.",
            "readOnly": true,
            "type": "string"
          },
          "partitionKeyRangeId": {
            "description": "The partition key range id (integer identifier) of the usages.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartitionUsagesResult": {
        "description": "The response to a list partition level usage request.",
        "properties": {
          "value": {
            "description": "The list of partition-level usages for the database. A usage is a point in time metric",
            "items": {
              "$ref": "#/components/schemas/PartitionUsage"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Path": {
        "description": "A path. These typically start with root (/path)",
        "type": "string"
      },
      "PercentileMetric": {
        "description": "Percentile Metric data",
        "properties": {
          "endTime": {
            "description": "The end time for the metric (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metricValues": {
            "description": "The percentile metric values for the specified time window and timestep.",
            "items": {
              "$ref": "#/components/schemas/PercentileMetricValue"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/MetricName",
            "description": "The name information for the metric.",
            "readOnly": true
          },
          "startTime": {
            "description": "The start time for the metric (ISO-8601 format).",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "timeGrain": {
            "description": "The time grain to be used to summarize the metric values.",
            "readOnly": true,
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitType",
            "description": "The unit of the metric."
          }
        },
        "type": "object"
      },
      "PercentileMetricListResult": {
        "description": "The response to a list percentile metrics request.",
        "properties": {
          "value": {
            "description": "The list of percentile metrics for the account.",
            "items": {
              "$ref": "#/components/schemas/PercentileMetric"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "PercentileMetricValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricValue"
          }
        ],
        "description": "Represents percentile metrics values.",
        "properties": {
          "P10": {
            "description": "The 10th percentile value for the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "P25": {
            "description": "The 25th percentile value for the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "P50": {
            "description": "The 50th percentile value for the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "P75": {
            "description": "The 75th percentile value for the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "P90": {
            "description": "The 90th percentile value for the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "P95": {
            "description": "The 95th percentile value for the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "P99": {
            "description": "The 99th percentile value for the metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "ProvisioningState": {
        "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
        "readOnly": true,
        "type": "string"
      },
      "RegionForOnlineOffline": {
        "description": "Cosmos DB region to online or offline.",
        "properties": {
          "region": {
            "description": "Cosmos DB region, with spaces between words and each word capitalized.",
            "type": "string"
          }
        },
        "required": [
          "region"
        ],
        "type": "object"
      },
      "ShardKeys": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The shard key and partition kind pair, only support \"Hash\" partition kind",
        "type": "object"
      },
      "SpatialSpec": {
        "properties": {
          "path": {
            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
            "type": "string"
          },
          "types": {
            "description": "List of path's spatial type",
            "items": {
              "$ref": "#/components/schemas/SpatialType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SpatialType": {
        "description": "Indicates the spatial type of index.",
        "enum": [
          "Point",
          "LineString",
          "Polygon",
          "MultiPolygon"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "SpatialType"
        }
      },
      "SqlContainerCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB container.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlContainerCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB container.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "SqlContainerCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB container.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/SqlContainerResource",
            "description": "The standard JSON format of a container"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "SqlContainerGetProperties": {
        "description": "The properties of an Azure Cosmos DB container",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SqlContainerResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "SqlContainerGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB container.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlContainerGetProperties",
            "description": "The properties of an Azure Cosmos DB container",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "SqlContainerListResult": {
        "description": "The List operation response, that contains the containers and their properties.",
        "properties": {
          "value": {
            "description": "List of containers and their properties.",
            "items": {
              "$ref": "#/components/schemas/SqlContainerGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SqlContainerResource": {
        "description": "Cosmos DB SQL container resource object",
        "properties": {
          "conflictResolutionPolicy": {
            "$ref": "#/components/schemas/ConflictResolutionPolicy",
            "description": "The conflict resolution policy for the container."
          },
          "defaultTtl": {
            "description": "Default time to live",
            "type": "integer"
          },
          "id": {
            "description": "Name of the Cosmos DB SQL container",
            "type": "string"
          },
          "indexingPolicy": {
            "$ref": "#/components/schemas/IndexingPolicy",
            "description": "The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container"
          },
          "partitionKey": {
            "$ref": "#/components/schemas/ContainerPartitionKey",
            "description": "The configuration of the partition key to be used for partitioning data into multiple partitions"
          },
          "uniqueKeyPolicy": {
            "$ref": "#/components/schemas/UniqueKeyPolicy",
            "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "SqlDatabaseCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB SQL database.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlDatabaseCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB SQL database.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "SqlDatabaseCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB SQL database.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/SqlDatabaseResource",
            "description": "The standard JSON format of a SQL database"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "SqlDatabaseGetProperties": {
        "description": "The properties of an Azure Cosmos DB SQL database",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SqlDatabaseResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ],
            "properties": {
              "_colls": {
                "description": "A system generated property that specified the addressable path of the collections resource.",
                "type": "string"
              },
              "_users": {
                "description": "A system generated property that specifies the addressable path of the users resource.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SqlDatabaseGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB SQL database.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlDatabaseGetProperties",
            "description": "The properties of an Azure Cosmos DB SQL database",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "SqlDatabaseListResult": {
        "description": "The List operation response, that contains the SQL databases and their properties.",
        "properties": {
          "value": {
            "description": "List of SQL databases and their properties.",
            "items": {
              "$ref": "#/components/schemas/SqlDatabaseGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SqlDatabaseResource": {
        "description": "Cosmos DB SQL database resource object",
        "properties": {
          "id": {
            "description": "Name of the Cosmos DB SQL database",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "SqlStoredProcedureCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB storedProcedure.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlStoredProcedureCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB storedProcedure.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "SqlStoredProcedureCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB storedProcedure.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/SqlStoredProcedureResource",
            "description": "The standard JSON format of a storedProcedure"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "SqlStoredProcedureGetProperties": {
        "description": "The properties of an Azure Cosmos DB StoredProcedure",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SqlStoredProcedureResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "SqlStoredProcedureGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB storedProcedure.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlStoredProcedureGetProperties",
            "description": "The properties of an Azure Cosmos DB storedProcedure",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "SqlStoredProcedureListResult": {
        "description": "The List operation response, that contains the storedProcedures and their properties.",
        "properties": {
          "value": {
            "description": "List of storedProcedures and their properties.",
            "items": {
              "$ref": "#/components/schemas/SqlStoredProcedureGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SqlStoredProcedureResource": {
        "description": "Cosmos DB SQL storedProcedure resource object",
        "properties": {
          "body": {
            "description": "Body of the Stored Procedure",
            "type": "string"
          },
          "id": {
            "description": "Name of the Cosmos DB SQL storedProcedure",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "SqlTriggerCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB trigger.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlTriggerCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB trigger.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "SqlTriggerCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB trigger.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/SqlTriggerResource",
            "description": "The standard JSON format of a trigger"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "SqlTriggerGetProperties": {
        "description": "The properties of an Azure Cosmos DB trigger",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SqlTriggerResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "SqlTriggerGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB trigger.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlTriggerGetProperties",
            "description": "The properties of an Azure Cosmos DB trigger",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "SqlTriggerListResult": {
        "description": "The List operation response, that contains the triggers and their properties.",
        "properties": {
          "value": {
            "description": "List of triggers and their properties.",
            "items": {
              "$ref": "#/components/schemas/SqlTriggerGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SqlTriggerResource": {
        "description": "Cosmos DB SQL trigger resource object",
        "properties": {
          "body": {
            "description": "Body of the Trigger",
            "type": "string"
          },
          "id": {
            "description": "Name of the Cosmos DB SQL trigger",
            "type": "string"
          },
          "triggerOperation": {
            "description": "The operation the trigger is associated with",
            "enum": [
              "All",
              "Create",
              "Update",
              "Delete",
              "Replace"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "triggerOperation"
            }
          },
          "triggerType": {
            "description": "Type of the Trigger",
            "enum": [
              "Pre",
              "Post"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "triggerType"
            }
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "SqlUserDefinedFunctionCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB userDefinedFunction.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlUserDefinedFunctionCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB userDefinedFunction.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "SqlUserDefinedFunctionCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB userDefinedFunction.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/SqlUserDefinedFunctionResource",
            "description": "The standard JSON format of a userDefinedFunction"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "SqlUserDefinedFunctionGetProperties": {
        "description": "The properties of an Azure Cosmos DB userDefinedFunction",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SqlUserDefinedFunctionResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "SqlUserDefinedFunctionGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB userDefinedFunction.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SqlUserDefinedFunctionGetProperties",
            "description": "The properties of an Azure Cosmos DB userDefinedFunction",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "SqlUserDefinedFunctionListResult": {
        "description": "The List operation response, that contains the userDefinedFunctions and their properties.",
        "properties": {
          "value": {
            "description": "List of userDefinedFunctions and their properties.",
            "items": {
              "$ref": "#/components/schemas/SqlUserDefinedFunctionGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SqlUserDefinedFunctionResource": {
        "description": "Cosmos DB SQL userDefinedFunction resource object",
        "properties": {
          "body": {
            "description": "Body of the User Defined Function",
            "type": "string"
          },
          "id": {
            "description": "Name of the Cosmos DB SQL userDefinedFunction",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "TableCreateUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to create and update Cosmos DB Table.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/TableCreateUpdateProperties",
            "description": "Properties to create and update Azure Cosmos DB Table.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "TableCreateUpdateProperties": {
        "description": "Properties to create and update Azure Cosmos DB Table.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CreateUpdateOptions",
            "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request."
          },
          "resource": {
            "$ref": "#/components/schemas/TableResource",
            "description": "The standard JSON format of a Table"
          }
        },
        "required": [
          "resource",
          "options"
        ],
        "type": "object"
      },
      "TableGetProperties": {
        "description": "The properties of an Azure Cosmos Table",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TableResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "TableGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB Table.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/TableGetProperties",
            "description": "The properties of an Azure Cosmos DB Table",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "TableListResult": {
        "description": "The List operation response, that contains the Table and their properties.",
        "properties": {
          "value": {
            "description": "List of Table and their properties.",
            "items": {
              "$ref": "#/components/schemas/TableGetResults"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "TableResource": {
        "description": "Cosmos DB table resource object",
        "properties": {
          "id": {
            "description": "Name of the Cosmos DB table",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Tags": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
        "type": "object"
      },
      "ThroughputSettingsGetProperties": {
        "description": "The properties of an Azure Cosmos DB resource throughput",
        "properties": {
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ThroughputSettingsResource"
              },
              {
                "$ref": "#/components/schemas/ExtendedResourceProperties"
              }
            ]
          }
        },
        "type": "object"
      },
      "ThroughputSettingsGetResults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "An Azure Cosmos DB resource throughput.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/ThroughputSettingsGetProperties",
            "description": "The properties of an Azure Cosmos DB resource throughput",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "ThroughputSettingsResource": {
        "description": "Cosmos DB resource throughput object",
        "properties": {
          "minimumThroughput": {
            "description": "The minimum throughput of the resource",
            "readOnly": true,
            "type": "string"
          },
          "offerReplacePending": {
            "description": "The throughput replace is pending",
            "readOnly": true,
            "type": "string"
          },
          "throughput": {
            "description": "Value of the Cosmos DB resource throughput",
            "type": "integer"
          }
        },
        "required": [
          "throughput"
        ],
        "type": "object"
      },
      "ThroughputSettingsUpdateParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ARMResourceProperties"
          }
        ],
        "description": "Parameters to update Cosmos DB resource throughput.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/ThroughputSettingsUpdateProperties",
            "description": "Properties to update Azure Cosmos DB resource throughput.",
            "x-ms-client-flatten": true
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "ThroughputSettingsUpdateProperties": {
        "description": "Properties to update Azure Cosmos DB resource throughput.",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ThroughputSettingsResource",
            "description": "The standard JSON format of a resource throughput"
          }
        },
        "required": [
          "resource"
        ],
        "type": "object"
      },
      "UniqueKey": {
        "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
        "properties": {
          "paths": {
            "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
            "items": {
              "$ref": "#/components/schemas/Path"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UniqueKeyPolicy": {
        "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
        "properties": {
          "uniqueKeys": {
            "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
            "items": {
              "$ref": "#/components/schemas/UniqueKey"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UnitType": {
        "description": "The unit of the metric.",
        "enum": [
          "Count",
          "Bytes",
          "Seconds",
          "Percent",
          "CountPerSecond",
          "BytesPerSecond",
          "Milliseconds"
        ],
        "readOnly": true,
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true,
          "name": "UnitType"
        }
      },
      "Usage": {
        "description": "The usage data for a usage request.",
        "properties": {
          "currentValue": {
            "description": "Current value for this metric",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "limit": {
            "description": "Maximum value for this metric",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "name": {
            "$ref": "#/components/schemas/MetricName",
            "description": "The name information for the metric.",
            "readOnly": true
          },
          "quotaPeriod": {
            "description": "The quota period used to summarize the usage values.",
            "readOnly": true,
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitType",
            "description": "The unit of the metric."
          }
        },
        "type": "object"
      },
      "UsagesResult": {
        "description": "The response to a list usage request.",
        "properties": {
          "value": {
            "description": "The list of usages for the database. A usage is a point in time metric",
            "items": {
              "$ref": "#/components/schemas/Usage"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "VirtualNetworkRule": {
        "description": "Virtual Network ACL Rule object",
        "properties": {
          "id": {
            "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
            "type": "string"
          },
          "ignoreMissingVNetServiceEndpoint": {
            "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "Impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}