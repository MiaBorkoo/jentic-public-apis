{
  "openapi": "3.0.0",
  "info": {
    "description": "Azure EventGrid Management Client",
    "title": "EventGridManagementClient",
    "version": "2020-04-01-preview",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/eventgrid/resource-manager/Microsoft.EventGrid/preview/2020-04-01-preview/EventGrid.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/providers/Microsoft.EventGrid/operations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Operations"
        ],
        "description": "List the available operations supported by the Microsoft.EventGrid resource provider.",
        "operationId": "Operations_List",
        "summary": "List available operations.",
        "x-ms-examples": {
          "Operations_List": {
            "$ref": "./examples/Operations_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/providers/Microsoft.EventGrid/partnerRegistrations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerRegistrationsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerRegistrations"
        ],
        "description": "List all partners registrations.",
        "operationId": "PartnerRegistrations_List",
        "summary": "List all available partners registrations.",
        "x-ms-examples": {
          "PartnerRegistrations_List": {
            "$ref": "./examples/PartnerRegistrations_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/providers/Microsoft.EventGrid/topicTypes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicTypesListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "TopicTypes"
        ],
        "description": "List all registered topic types.",
        "operationId": "TopicTypes_List",
        "summary": "List topic types.",
        "x-ms-examples": {
          "TopicTypes_List": {
            "$ref": "./examples/TopicTypes_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}": {
      "get": {
        "parameters": [
          {
            "description": "Name of the topic type.",
            "in": "path",
            "name": "topicTypeName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicTypeInfo"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "TopicTypes"
        ],
        "description": "Get information about a topic type.",
        "operationId": "TopicTypes_Get",
        "summary": "Get a topic type.",
        "x-ms-examples": {
          "TopicTypes_Get": {
            "$ref": "./examples/TopicTypes_Get.json"
          }
        }
      }
    },
    "/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes": {
      "get": {
        "parameters": [
          {
            "description": "Name of the topic type.",
            "in": "path",
            "name": "topicTypeName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypesListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "TopicTypes"
        ],
        "description": "List event types for a topic type.",
        "operationId": "TopicTypes_ListEventTypes",
        "summary": "List event types.",
        "x-ms-examples": {
          "TopicTypes_ListEventTypes": {
            "$ref": "./examples/TopicTypes_ListEventTypes.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/domains": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Domains"
        ],
        "description": "List all the domains under an Azure subscription.",
        "operationId": "Domains_ListBySubscription",
        "summary": "List domains under an Azure subscription.",
        "x-ms-examples": {
          "Domains_ListBySubscription": {
            "$ref": "./examples/Domains_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all aggregated global event subscriptions under a specific Azure subscription.",
        "operationId": "EventSubscriptions_ListGlobalBySubscription",
        "summary": "Get an aggregated list of all global event subscriptions under an Azure subscription.",
        "x-ms-examples": {
          "EventSubscriptions_ListGlobalBySubscription": {
            "$ref": "./examples/EventSubscriptions_ListGlobalBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Name of the location.",
            "in": "path",
            "name": "location",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all event subscriptions from the given location under a specific Azure subscription.",
        "operationId": "EventSubscriptions_ListRegionalBySubscription",
        "summary": "List all regional event subscriptions under an Azure subscription.",
        "x-ms-examples": {
          "EventSubscriptions_ListRegionalBySubscription": {
            "$ref": "./examples/EventSubscriptions_ListRegionalBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Name of the location.",
            "in": "path",
            "name": "location",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic type.",
            "in": "path",
            "name": "topicTypeName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all event subscriptions from the given location under a specific Azure subscription and topic type.",
        "operationId": "EventSubscriptions_ListRegionalBySubscriptionForTopicType",
        "summary": "List all regional event subscriptions under an Azure subscription for a topic type.",
        "x-ms-examples": {
          "EventSubscriptions_ListRegionalBySubscriptionForTopicType": {
            "$ref": "./examples/EventSubscriptions_ListRegionalBySubscriptionForTopicType.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerNamespaces": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerNamespacesListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerNamespaces"
        ],
        "description": "List all the partner namespaces under an Azure subscription.",
        "operationId": "PartnerNamespaces_ListBySubscription",
        "summary": "List partner namespaces under an Azure subscription.",
        "x-ms-examples": {
          "PartnerNamespaces_ListBySubscription": {
            "$ref": "./examples/PartnerNamespaces_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerRegistrations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerRegistrationsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerRegistrations"
        ],
        "description": "List all the partner registrations under an Azure subscription.",
        "operationId": "PartnerRegistrations_ListBySubscription",
        "summary": "List partner registrations under an Azure subscription.",
        "x-ms-examples": {
          "PartnerRegistrations_ListBySubscription": {
            "$ref": "./examples/PartnerRegistrations_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerTopics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerTopicsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerTopics"
        ],
        "description": "List all the partner topics under an Azure subscription.",
        "operationId": "PartnerTopics_ListBySubscription",
        "summary": "List partner topics under an Azure subscription.",
        "x-ms-examples": {
          "PartnerTopics_ListBySubscription": {
            "$ref": "./examples/PartnerTopics_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/systemTopics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemTopicsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "SystemTopics"
        ],
        "description": "List all the system topics under an Azure subscription.",
        "operationId": "SystemTopics_ListBySubscription",
        "summary": "List system topics under an Azure subscription.",
        "x-ms-examples": {
          "SystemTopics_ListBySubscription": {
            "$ref": "./examples/SystemTopics_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Name of the topic type.",
            "in": "path",
            "name": "topicTypeName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all global event subscriptions under an Azure subscription for a topic type.",
        "operationId": "EventSubscriptions_ListGlobalBySubscriptionForTopicType",
        "summary": "List all global event subscriptions for a topic type.",
        "x-ms-examples": {
          "EventSubscriptions_ListGlobalBySubscriptionForTopicType": {
            "$ref": "./examples/EventSubscriptions_ListGlobalBySubscriptionForTopicType.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "List all the topics under an Azure subscription.",
        "operationId": "Topics_ListBySubscription",
        "summary": "List topics under an Azure subscription.",
        "x-ms-examples": {
          "Topics_ListBySubscription": {
            "$ref": "./examples/Topics_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Domains"
        ],
        "description": "List all the domains under a resource group.",
        "operationId": "Domains_ListByResourceGroup",
        "summary": "List domains under a resource group.",
        "x-ms-examples": {
          "Domains_ListByResourceGroup": {
            "$ref": "./examples/Domains_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Domains"
        ],
        "description": "Delete existing domain.",
        "operationId": "Domains_Delete",
        "summary": "Delete a domain.",
        "x-ms-examples": {
          "Domains_Delete": {
            "$ref": "./examples/Domains_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Domains"
        ],
        "description": "Get properties of a domain.",
        "operationId": "Domains_Get",
        "summary": "Get a domain.",
        "x-ms-examples": {
          "Domains_Get": {
            "$ref": "./examples/Domains_Get.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            },
            "description": "Domain update request accepted."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Domains"
        ],
        "description": "Asynchronously updates a domain with the specified parameters.",
        "operationId": "Domains_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainUpdateParameters"
              }
            }
          },
          "description": "Domain update information.",
          "required": true
        },
        "summary": "Update a domain.",
        "x-ms-examples": {
          "Domains_Update": {
            "$ref": "./examples/Domains_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Domains"
        ],
        "description": "Asynchronously creates or updates a new domain with the specified parameters.",
        "operationId": "Domains_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domain"
              }
            }
          },
          "description": "Domain information.",
          "required": true
        },
        "summary": "Create or update a domain.",
        "x-ms-examples": {
          "Domains_CreateOrUpdate": {
            "$ref": "./examples/Domains_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/listKeys": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainSharedAccessKeys"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Domains"
        ],
        "description": "List the two keys used to publish to a domain.",
        "operationId": "Domains_ListSharedAccessKeys",
        "summary": "List keys for a domain.",
        "x-ms-examples": {
          "Domains_ListSharedAccessKeys": {
            "$ref": "./examples/Domains_ListSharedAccessKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/regenerateKey": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainSharedAccessKeys"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Domains"
        ],
        "description": "Regenerate a shared access key for a domain.",
        "operationId": "Domains_RegenerateKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainRegenerateKeyRequest"
              }
            }
          },
          "description": "Request body to regenerate key.",
          "required": true
        },
        "summary": "Regenerate key for a domain.",
        "x-ms-examples": {
          "Domains_RegenerateKey": {
            "$ref": "./examples/Domains_RegenerateKey.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Domain name.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainTopicsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "DomainTopics"
        ],
        "description": "List all the topics in a domain.",
        "operationId": "DomainTopics_ListByDomain",
        "summary": "List domain topics.",
        "x-ms-examples": {
          "DomainTopics_ListByDomain": {
            "$ref": "./examples/DomainTopics_ListByDomain.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain topic.",
            "in": "path",
            "name": "domainTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "DomainTopics"
        ],
        "description": "Delete existing domain topic.",
        "operationId": "DomainTopics_Delete",
        "summary": "Delete a domain topic.",
        "x-ms-examples": {
          "DomainTopics_Delete": {
            "$ref": "./examples/DomainTopics_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic.",
            "in": "path",
            "name": "domainTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainTopic"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "DomainTopics"
        ],
        "description": "Get properties of a domain topic.",
        "operationId": "DomainTopics_Get",
        "summary": "Get a domain topic.",
        "x-ms-examples": {
          "DomainTopics_Get": {
            "$ref": "./examples/DomainTopics_Get.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain topic.",
            "in": "path",
            "name": "domainTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainTopic"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "DomainTopics"
        ],
        "description": "Asynchronously creates or updates a new domain topic with the specified parameters.",
        "operationId": "DomainTopics_CreateOrUpdate",
        "summary": "Create or update a domain topic.",
        "x-ms-examples": {
          "DomainTopics_CreateOrUpdate": {
            "$ref": "./examples/DomainTopics_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/providers/Microsoft.EventGrid/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the top level domain.",
            "in": "path",
            "name": "domainName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the domain topic.",
            "in": "path",
            "name": "topicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all event subscriptions that have been created for a specific domain topic.",
        "operationId": "EventSubscriptions_ListByDomainTopic",
        "summary": "List all event subscriptions for a specific domain topic.",
        "x-ms-examples": {
          "EventSubscriptions_ListByDomainTopic": {
            "$ref": "./examples/EventSubscriptions_ListByDomainTopic.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all global event subscriptions under a specific Azure subscription and resource group.",
        "operationId": "EventSubscriptions_ListGlobalByResourceGroup",
        "summary": "List all global event subscriptions under an Azure subscription and resource group.",
        "x-ms-examples": {
          "EventSubscriptions_ListGlobalByResourceGroup": {
            "$ref": "./examples/EventSubscriptions_ListGlobalByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the location.",
            "in": "path",
            "name": "location",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all event subscriptions from the given location under a specific Azure subscription and resource group.",
        "operationId": "EventSubscriptions_ListRegionalByResourceGroup",
        "summary": "List all regional event subscriptions under an Azure subscription and resource group.",
        "x-ms-examples": {
          "EventSubscriptions_ListRegionalByResourceGroup": {
            "$ref": "./examples/EventSubscriptions_ListRegionalByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the location.",
            "in": "path",
            "name": "location",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic type.",
            "in": "path",
            "name": "topicTypeName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.",
        "operationId": "EventSubscriptions_ListRegionalByResourceGroupForTopicType",
        "summary": "List all regional event subscriptions under an Azure subscription and resource group for a topic type.",
        "x-ms-examples": {
          "EventSubscriptions_ListRegionalByResourceGroupForTopicType": {
            "$ref": "./examples/EventSubscriptions_ListRegionalByResourceGroupForTopicType.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerNamespacesListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerNamespaces"
        ],
        "description": "List all the partner namespaces under a resource group.",
        "operationId": "PartnerNamespaces_ListByResourceGroup",
        "summary": "List partner namespaces under a resource group.",
        "x-ms-examples": {
          "PartnerNamespaces_ListByResourceGroup": {
            "$ref": "./examples/PartnerNamespaces_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerNamespaces"
        ],
        "description": "Delete existing partner namespace.",
        "operationId": "PartnerNamespaces_Delete",
        "summary": "Delete a partner namespace.",
        "x-ms-examples": {
          "PartnerNamespaces_Delete": {
            "$ref": "./examples/PartnerNamespaces_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerNamespace"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerNamespaces"
        ],
        "description": "Get properties of a partner namespace.",
        "operationId": "PartnerNamespaces_Get",
        "summary": "Get a partner namespace.",
        "x-ms-examples": {
          "PartnerNamespaces_Get": {
            "$ref": "./examples/PartnerNamespaces_Get.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerNamespace"
                }
              }
            },
            "description": "Partner namespace update request accepted."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerNamespaces"
        ],
        "description": "Asynchronously updates a partner namespace with the specified parameters.",
        "operationId": "PartnerNamespaces_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerNamespaceUpdateParameters"
              }
            }
          },
          "description": "Partner namespace update information.",
          "required": true
        },
        "summary": "Update a partner namespace.",
        "x-ms-examples": {
          "PartnerNamespaces_Update": {
            "$ref": "./examples/PartnerNamespaces_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerNamespace"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerNamespaces"
        ],
        "description": "Asynchronously creates a new partner namespace with the specified parameters.",
        "operationId": "PartnerNamespaces_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerNamespace"
              }
            }
          },
          "description": "PartnerNamespace information.",
          "required": true
        },
        "summary": "Create a partner namespace.",
        "x-ms-examples": {
          "PartnerNamespaces_CreateOrUpdate": {
            "$ref": "./examples/PartnerNamespaces_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventChannelsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventChannels"
        ],
        "description": "List all the event channels in a partner namespace.",
        "operationId": "EventChannels_ListByPartnerNamespace",
        "summary": "List event channels.",
        "x-ms-examples": {
          "EventChannels_ListByPartnerNamespace": {
            "$ref": "./examples/EventChannels_ListByPartnerNamespace.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event channel.",
            "in": "path",
            "name": "eventChannelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventChannels"
        ],
        "description": "Delete existing event channel.",
        "operationId": "EventChannels_Delete",
        "summary": "Delete an event channel.",
        "x-ms-examples": {
          "EventChannels_Delete": {
            "$ref": "./examples/EventChannels_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event channel.",
            "in": "path",
            "name": "eventChannelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventChannel"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventChannels"
        ],
        "description": "Get properties of an event channel.",
        "operationId": "EventChannels_Get",
        "summary": "Get an event channel.",
        "x-ms-examples": {
          "EventChannels_Get": {
            "$ref": "./examples/EventChannels_Get.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event channel.",
            "in": "path",
            "name": "eventChannelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventChannel"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventChannels"
        ],
        "description": "Asynchronously creates a new event channel with the specified parameters.",
        "operationId": "EventChannels_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventChannel"
              }
            }
          },
          "description": "EventChannel information.",
          "required": true
        },
        "summary": "Create an event channel.",
        "x-ms-examples": {
          "EventChannels_CreateOrUpdate": {
            "$ref": "./examples/EventChannels_CreateOrUpdate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/listKeys": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerNamespaceSharedAccessKeys"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerNamespaces"
        ],
        "description": "List the two keys used to publish to a partner namespace.",
        "operationId": "PartnerNamespaces_ListSharedAccessKeys",
        "summary": "List keys for a partner namespace.",
        "x-ms-examples": {
          "PartnerNamespaces_ListSharedAccessKeys": {
            "$ref": "./examples/PartnerNamespaces_ListSharedAccessKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/regenerateKey": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner namespace.",
            "in": "path",
            "name": "partnerNamespaceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerNamespaceSharedAccessKeys"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerNamespaces"
        ],
        "description": "Regenerate a shared access key for a partner namespace.",
        "operationId": "PartnerNamespaces_RegenerateKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerNamespaceRegenerateKeyRequest"
              }
            }
          },
          "description": "Request body to regenerate key.",
          "required": true
        },
        "summary": "Regenerate key for a partner namespace.",
        "x-ms-examples": {
          "PartnerNamespaces_RegenerateKey": {
            "$ref": "./examples/PartnerNamespaces_RegenerateKey.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerRegistrationsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerRegistrations"
        ],
        "description": "List all the partner registrations under a resource group.",
        "operationId": "PartnerRegistrations_ListByResourceGroup",
        "summary": "List partner registrations under a resource group.",
        "x-ms-examples": {
          "PartnerRegistrations_ListByResourceGroup": {
            "$ref": "./examples/PartnerRegistrations_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner registration.",
            "in": "path",
            "name": "partnerRegistrationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerRegistrations"
        ],
        "description": "Deletes a partner registration with the specified parameters.",
        "operationId": "PartnerRegistrations_Delete",
        "summary": "Delete a partner registration.",
        "x-ms-examples": {
          "PartnerRegistrations_Delete": {
            "$ref": "./examples/PartnerRegistrations_Delete.json"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner registration.",
            "in": "path",
            "name": "partnerRegistrationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerRegistration"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerRegistrations"
        ],
        "description": "Gets a partner registration with the specified parameters.",
        "operationId": "PartnerRegistrations_Get",
        "summary": "Get a partner registration.",
        "x-ms-examples": {
          "PartnerRegistrations_Get": {
            "$ref": "./examples/PartnerRegistrations_Get.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner registration.",
            "in": "path",
            "name": "partnerRegistrationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerRegistration"
                }
              }
            },
            "description": "Partner registration update request accepted."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerRegistrations"
        ],
        "description": "Updates a partner registration with the specified parameters.",
        "operationId": "PartnerRegistrations_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerRegistrationUpdateParameters"
              }
            }
          },
          "description": "Partner registration update information.",
          "required": true
        },
        "summary": "Update a partner registration.",
        "x-ms-examples": {
          "PartnerRegistrations_Update": {
            "$ref": "./examples/PartnerRegistrations_Update.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner registration.",
            "in": "path",
            "name": "partnerRegistrationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerRegistration"
                }
              }
            },
            "description": "OK"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerRegistration"
                }
              }
            },
            "description": "Accepted"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerRegistrations"
        ],
        "description": "Creates a new partner registration with the specified parameters.",
        "operationId": "PartnerRegistrations_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerRegistration"
              }
            }
          },
          "description": "PartnerRegistration information.",
          "required": true
        },
        "summary": "Create a partner registration.",
        "x-ms-examples": {
          "PartnerRegistrations_CreateOrUpdate": {
            "$ref": "./examples/PartnerRegistrations_CreateOrUpdate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerTopicsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerTopics"
        ],
        "description": "List all the partner topics under a resource group.",
        "operationId": "PartnerTopics_ListByResourceGroup",
        "summary": "List partner topics under a resource group.",
        "x-ms-examples": {
          "PartnerTopics_ListByResourceGroup": {
            "$ref": "./examples/PartnerTopics_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerTopics"
        ],
        "description": "Delete existing partner topic.",
        "operationId": "PartnerTopics_Delete",
        "summary": "Delete a partner topic.",
        "x-ms-examples": {
          "PartnerTopics_Delete": {
            "$ref": "./examples/PartnerTopics_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerTopic"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerTopics"
        ],
        "description": "Get properties of a partner topic.",
        "operationId": "PartnerTopics_Get",
        "summary": "Get a partner topic.",
        "x-ms-examples": {
          "PartnerTopics_Get": {
            "$ref": "./examples/PartnerTopics_Get.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerTopic"
                }
              }
            },
            "description": "Partner Topic update request accepted."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerTopics"
        ],
        "description": "Asynchronously updates a partner topic with the specified parameters.",
        "operationId": "PartnerTopics_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerTopicUpdateParameters"
              }
            }
          },
          "description": "PartnerTopic update information.",
          "required": true
        },
        "summary": "Update a partner topic.",
        "x-ms-examples": {
          "PartnerTopics_Update": {
            "$ref": "./examples/PartnerTopics_Update.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/activate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerTopic"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerTopics"
        ],
        "description": "Activate a newly created partner topic.",
        "operationId": "PartnerTopics_Activate",
        "summary": "Activate a partner topic.",
        "x-ms-examples": {
          "PartnerTopics_Activate": {
            "$ref": "./examples/PartnerTopics_Activate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/deactivate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerTopic"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PartnerTopics"
        ],
        "description": "Deactivate specific partner topic.",
        "operationId": "PartnerTopics_Deactivate",
        "summary": "Deactivate a partner topic.",
        "x-ms-examples": {
          "PartnerTopics_Deactivate": {
            "$ref": "./examples/PartnerTopics_Deactivate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List event subscriptions that belong to a specific partner topic.",
        "operationId": "PartnerTopicEventSubscriptions_ListByPartnerTopic",
        "summary": "List event subscriptions of a partner topic.",
        "x-ms-examples": {
          "PartnerTopicEventSubscriptions_ListByPartnerTopic": {
            "$ref": "./examples/PartnerTopicEventSubscriptions_ListByPartnerTopic.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions/{eventSubscriptionName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Delete an event subscription of a partner topic.",
        "operationId": "PartnerTopicEventSubscriptions_Delete",
        "summary": "Delete an event subscription of a partner topic.",
        "x-ms-examples": {
          "PartnerTopicEventSubscriptions_Delete": {
            "$ref": "./examples/PartnerTopicEventSubscriptions_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be found. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Get an event subscription of a partner topic.",
        "operationId": "PartnerTopicEventSubscriptions_Get",
        "summary": "Get an event subscription of a partner topic.",
        "x-ms-examples": {
          "PartnerTopicEventSubscriptions_Get": {
            "$ref": "./examples/PartnerTopicEventSubscriptions_Get.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Update event subscription of a partner topic.",
        "operationId": "PartnerTopicEventSubscriptions_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionUpdateParameters"
              }
            }
          },
          "description": "Updated event subscription information.",
          "required": true
        },
        "summary": "Update event subscription of a partner topic.",
        "x-ms-examples": {
          "PartnerTopicEventSubscriptions_Update": {
            "$ref": "./examples/PartnerTopicEventSubscriptions_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Asynchronously creates or updates an event subscription of a partner topic with the specified parameters. Existing event subscriptions will be updated with this API.",
        "operationId": "PartnerTopicEventSubscriptions_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscription"
              }
            }
          },
          "description": "Event subscription properties containing the destination and filter information.",
          "required": true
        },
        "summary": "Create or update an event subscription of a partner topic.",
        "x-ms-examples": {
          "PartnerTopicEventSubscriptions_CreateOrUpdate": {
            "$ref": "./examples/PartnerTopicEventSubscriptions_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the partner topic.",
            "in": "path",
            "name": "partnerTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionFullUrl"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Get the full endpoint URL for an event subscription of a partner topic.",
        "operationId": "PartnerTopicEventSubscriptions_GetFullUrl",
        "summary": "Get full URL of an event subscription of a partner topic.",
        "x-ms-examples": {
          "PartnerTopicEventSubscriptions_GetFullUrl": {
            "$ref": "./examples/PartnerTopicEventSubscriptions_GetFullUrl.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemTopicsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "SystemTopics"
        ],
        "description": "List all the system topics under a resource group.",
        "operationId": "SystemTopics_ListByResourceGroup",
        "summary": "List system topics under a resource group.",
        "x-ms-examples": {
          "SystemTopics_ListByResourceGroup": {
            "$ref": "./examples/SystemTopics_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "SystemTopics"
        ],
        "description": "Delete existing system topic.",
        "operationId": "SystemTopics_Delete",
        "summary": "Delete a system topic.",
        "x-ms-examples": {
          "SystemTopics_Delete": {
            "$ref": "./examples/SystemTopics_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemTopic"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "SystemTopics"
        ],
        "description": "Get properties of a system topic.",
        "operationId": "SystemTopics_Get",
        "summary": "Get a system topic.",
        "x-ms-examples": {
          "SystemTopics_Get": {
            "$ref": "./examples/SystemTopics_Get.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemTopic"
                }
              }
            },
            "description": "System Topic update request accepted."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemTopic"
                }
              }
            },
            "description": "System Topic update request accepted."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "SystemTopics"
        ],
        "description": "Asynchronously updates a system topic with the specified parameters.",
        "operationId": "SystemTopics_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemTopicUpdateParameters"
              }
            }
          },
          "description": "SystemTopic update information.",
          "required": true
        },
        "summary": "Update a system topic.",
        "x-ms-examples": {
          "SystemTopics_Update": {
            "$ref": "./examples/SystemTopics_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemTopic"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemTopic"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "SystemTopics"
        ],
        "description": "Asynchronously creates a new system topic with the specified parameters.",
        "operationId": "SystemTopics_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemTopic"
              }
            }
          },
          "description": "System Topic information.",
          "required": true
        },
        "summary": "Create a system topic.",
        "x-ms-examples": {
          "SystemTopics_CreateOrUpdate": {
            "$ref": "./examples/SystemTopics_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List event subscriptions that belong to a specific system topic.",
        "operationId": "SystemTopicEventSubscriptions_ListBySystemTopic",
        "summary": "List event subscriptions of a system topic.",
        "x-ms-examples": {
          "SystemTopicEventSubscriptions_ListBySystemTopic": {
            "$ref": "./examples/SystemTopicEventSubscriptions_ListBySystemTopic.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Delete an event subscription of a system topic.",
        "operationId": "SystemTopicEventSubscriptions_Delete",
        "summary": "Delete an event subscription of a system topic.",
        "x-ms-examples": {
          "SystemTopicEventSubscriptions_Delete": {
            "$ref": "./examples/SystemTopicEventSubscriptions_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Get an event subscription.",
        "operationId": "SystemTopicEventSubscriptions_Get",
        "summary": "Get an event subscription of a system topic.",
        "x-ms-examples": {
          "SystemTopicEventSubscriptions_Get": {
            "$ref": "./examples/SystemTopicEventSubscriptions_Get.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Update event subscription of a system topic.",
        "operationId": "SystemTopicEventSubscriptions_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionUpdateParameters"
              }
            }
          },
          "description": "Updated event subscription information.",
          "required": true
        },
        "summary": "Update event subscription of a system topic.",
        "x-ms-examples": {
          "SystemTopicEventSubscriptions_Update": {
            "$ref": "./examples/SystemTopicEventSubscriptions_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Asynchronously creates or updates an event subscription with the specified parameters. Existing event subscriptions will be updated with this API.",
        "operationId": "SystemTopicEventSubscriptions_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscription"
              }
            }
          },
          "description": "Event subscription properties containing the destination and filter information.",
          "required": true
        },
        "summary": "Create or update an event subscription for a system topic.",
        "x-ms-examples": {
          "SystemTopicEventSubscriptions_CreateOrUpdate": {
            "$ref": "./examples/SystemTopicEventSubscriptions_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the system topic.",
            "in": "path",
            "name": "systemTopicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionFullUrl"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Get the full endpoint URL for an event subscription of a system topic.",
        "operationId": "SystemTopicEventSubscriptions_GetFullUrl",
        "summary": "Get full URL of an event subscription of a system topic",
        "x-ms-examples": {
          "SystemTopicEventSubscriptions_GetFullUrl": {
            "$ref": "./examples/SystemTopicEventSubscriptions_GetFullUrl.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic type.",
            "in": "path",
            "name": "topicTypeName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all global event subscriptions under a resource group for a specific topic type.",
        "operationId": "EventSubscriptions_ListGlobalByResourceGroupForTopicType",
        "summary": "List all global event subscriptions under a resource group for a topic type.",
        "x-ms-examples": {
          "EventSubscriptions_ListGlobalByResourceGroupForTopicType": {
            "$ref": "./examples/EventSubscriptions_ListGlobalByResourceGroupForTopicType.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "List all the topics under a resource group.",
        "operationId": "Topics_ListByResourceGroup",
        "summary": "List topics under a resource group.",
        "x-ms-examples": {
          "Topics_ListByResourceGroup": {
            "$ref": "./examples/Topics_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic.",
            "in": "path",
            "name": "topicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "Delete existing topic.",
        "operationId": "Topics_Delete",
        "summary": "Delete a topic.",
        "x-ms-examples": {
          "Topics_Delete": {
            "$ref": "./examples/Topics_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic.",
            "in": "path",
            "name": "topicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "Get properties of a topic.",
        "operationId": "Topics_Get",
        "summary": "Get a topic.",
        "x-ms-examples": {
          "Topics_Get": {
            "$ref": "./examples/Topics_Get.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic.",
            "in": "path",
            "name": "topicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            },
            "description": "Topic update request accepted."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "Asynchronously updates a topic with the specified parameters.",
        "operationId": "Topics_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicUpdateParameters"
              }
            }
          },
          "description": "Topic update information.",
          "required": true
        },
        "summary": "Update a topic.",
        "x-ms-examples": {
          "Topics_Update": {
            "$ref": "./examples/Topics_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic.",
            "in": "path",
            "name": "topicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "Asynchronously creates a new topic with the specified parameters.",
        "operationId": "Topics_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Topic"
              }
            }
          },
          "description": "Topic information.",
          "required": true
        },
        "summary": "Create a topic.",
        "x-ms-examples": {
          "Topics_CreateOrUpdate": {
            "$ref": "./examples/Topics_CreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/listKeys": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic.",
            "in": "path",
            "name": "topicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicSharedAccessKeys"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "List the two keys used to publish to a topic.",
        "operationId": "Topics_ListSharedAccessKeys",
        "summary": "List keys for a topic.",
        "x-ms-examples": {
          "Topics_ListSharedAccessKeys": {
            "$ref": "./examples/Topics_ListSharedAccessKeys.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/regenerateKey": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic.",
            "in": "path",
            "name": "topicName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicSharedAccessKeys"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "Regenerate a shared access key for a topic.",
        "operationId": "Topics_RegenerateKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicRegenerateKeyRequest"
              }
            }
          },
          "description": "Request body to regenerate key.",
          "required": true
        },
        "summary": "Regenerate key for a topic.",
        "x-ms-examples": {
          "Topics_RegenerateKey": {
            "$ref": "./examples/Topics_RegenerateKey.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateEndpointConnections": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "in": "path",
            "name": "parentType",
            "required": true,
            "schema": {
              "enum": [
                "topics",
                "domains"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "in": "path",
            "name": "parentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateEndpointConnectionListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Get all private endpoint connections under a topic or domain.",
        "operationId": "PrivateEndpointConnections_ListByResource",
        "summary": "Lists all private endpoint connections under a resource.",
        "x-ms-examples": {
          "PrivateEndpointConnections_ListByResource": {
            "$ref": "./examples/PrivateEndpointConnections_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateEndpointConnections/{privateEndpointConnectionName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "in": "path",
            "name": "parentType",
            "required": true,
            "schema": {
              "enum": [
                "topics",
                "domains"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "in": "path",
            "name": "parentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the private endpoint connection connection.",
            "in": "path",
            "name": "privateEndpointConnectionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Delete a specific private endpoint connection under a topic or domain.",
        "operationId": "PrivateEndpointConnections_Delete",
        "summary": "Delete a specific private endpoint connection.",
        "x-ms-examples": {
          "PrivateEndpointConnections_Delete": {
            "$ref": "./examples/PrivateEndpointConnections_Delete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "in": "path",
            "name": "parentType",
            "required": true,
            "schema": {
              "enum": [
                "topics",
                "domains"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "in": "path",
            "name": "parentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the private endpoint connection connection.",
            "in": "path",
            "name": "privateEndpointConnectionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateEndpointConnection"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Get a specific private endpoint connection under a topic or domain.",
        "operationId": "PrivateEndpointConnections_Get",
        "summary": "Get a specific private endpoint connection.",
        "x-ms-examples": {
          "PrivateEndpointConnections_Get": {
            "$ref": "./examples/PrivateEndpointConnections_Get.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "in": "path",
            "name": "parentType",
            "required": true,
            "schema": {
              "enum": [
                "topics",
                "domains"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "in": "path",
            "name": "parentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the private endpoint connection connection.",
            "in": "path",
            "name": "privateEndpointConnectionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateEndpointConnection"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateEndpointConnection"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Update a specific private endpoint connection under a topic or domain.",
        "operationId": "PrivateEndpointConnections_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivateEndpointConnection"
              }
            }
          },
          "description": "The private endpoint connection object to update.",
          "required": true
        },
        "summary": "Update a specific private endpoint connection.",
        "x-ms-examples": {
          "PrivateEndpointConnections_Update": {
            "$ref": "./examples/PrivateEndpointConnections_Update.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateLinkResources": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "in": "path",
            "name": "parentType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "in": "path",
            "name": "parentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateLinkResourcesListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PrivateLinkResources"
        ],
        "description": "List all the private link resources under a topic or domain.",
        "operationId": "PrivateLinkResources_ListByResource",
        "summary": "List private link resources under specific topic or domain.",
        "x-ms-examples": {
          "PrivateLinkResources_ListByResource": {
            "$ref": "./examples/PrivateLinkResources_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateLinkResources/{privateLinkResourceName}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the parent resource. This can be either \\'topics\\' or \\'domains\\'.",
            "in": "path",
            "name": "parentType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the parent resource (namely, either, the topic name or domain name).",
            "in": "path",
            "name": "parentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of private link resource.",
            "in": "path",
            "name": "privateLinkResourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateLinkResource"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "PrivateLinkResources"
        ],
        "description": "Get properties of a private link resource.",
        "operationId": "PrivateLinkResources_Get",
        "summary": "Get a private link resource.",
        "x-ms-examples": {
          "PrivateLinkResources_Get": {
            "$ref": "./examples/PrivateLinkResources_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Namespace of the provider of the topic.",
            "in": "path",
            "name": "providerNamespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the resource type.",
            "in": "path",
            "name": "resourceTypeName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the resource.",
            "in": "path",
            "name": "resourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/FilterParameter"
          },
          {
            "$ref": "#/components/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionsListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "List all event subscriptions that have been created for a specific topic.",
        "operationId": "EventSubscriptions_ListByResource",
        "summary": "List all event subscriptions for a specific topic.",
        "x-ms-examples": {
          "EventSubscriptions_ListByResource": {
            "$ref": "./examples/EventSubscriptions_ListByResource.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventTypes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionIdParameter"
          },
          {
            "description": "The name of the resource group within the user's subscription.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Namespace of the provider of the topic.",
            "in": "path",
            "name": "providerNamespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic type.",
            "in": "path",
            "name": "resourceTypeName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the topic.",
            "in": "path",
            "name": "resourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypesListResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "List event types for a topic.",
        "operationId": "Topics_ListEventTypes",
        "summary": "List topic event types.",
        "x-ms-examples": {
          "Topics_ListEventTypes": {
            "$ref": "./examples/Topics_ListEventTypes.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}": {
      "delete": {
        "parameters": [
          {
            "allowReserved": true,
            "description": "The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "in": "path",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-skip-url-encoding": true
          },
          {
            "description": "Name of the event subscription.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Delete an existing event subscription.",
        "operationId": "EventSubscriptions_Delete",
        "summary": "Delete an event subscription.",
        "x-ms-examples": {
          "EventSubscriptions_DeleteForCustomTopic": {
            "$ref": "./examples/EventSubscriptions_DeleteForCustomTopic.json"
          },
          "EventSubscriptions_DeleteForResource": {
            "$ref": "./examples/EventSubscriptions_DeleteForResource.json"
          },
          "EventSubscriptions_DeleteForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_DeleteForResourceGroup.json"
          },
          "EventSubscriptions_DeleteForSubscription": {
            "$ref": "./examples/EventSubscriptions_DeleteForSubscription.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "allowReserved": true,
            "description": "The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "in": "path",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-skip-url-encoding": true
          },
          {
            "description": "Name of the event subscription.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Get properties of an event subscription.",
        "operationId": "EventSubscriptions_Get",
        "summary": "Get an event subscription.",
        "x-ms-examples": {
          "EventSubscriptions_GetForCustomTopic": {
            "$ref": "./examples/EventSubscriptions_GetForCustomTopic.json"
          },
          "EventSubscriptions_GetForResource": {
            "$ref": "./examples/EventSubscriptions_GetForResource.json"
          },
          "EventSubscriptions_GetForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_GetForResourceGroup.json"
          },
          "EventSubscriptions_GetForSubscription": {
            "$ref": "./examples/EventSubscriptions_GetForSubscription.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "allowReserved": true,
            "description": "The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "in": "path",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-skip-url-encoding": true
          },
          {
            "description": "Name of the event subscription to be updated.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "EventSubscription update request accepted."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Asynchronously updates an existing event subscription.",
        "operationId": "EventSubscriptions_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionUpdateParameters"
              }
            }
          },
          "description": "Updated event subscription information.",
          "required": true
        },
        "summary": "Update an event subscription.",
        "x-ms-examples": {
          "EventSubscriptions_UpdateForCustomTopic": {
            "$ref": "./examples/EventSubscriptions_UpdateForCustomTopic.json"
          },
          "EventSubscriptions_UpdateForResource": {
            "$ref": "./examples/EventSubscriptions_UpdateForResource.json"
          },
          "EventSubscriptions_UpdateForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_UpdateForResourceGroup.json"
          },
          "EventSubscriptions_UpdateForSubscription": {
            "$ref": "./examples/EventSubscriptions_UpdateForSubscription.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "allowReserved": true,
            "description": "The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "in": "path",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-skip-url-encoding": true
          },
          {
            "description": "Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            },
            "description": "EventSubscription CreateOrUpdate request accepted."
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.",
        "operationId": "EventSubscriptions_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscription"
              }
            }
          },
          "description": "Event subscription properties containing the destination and filter information.",
          "required": true
        },
        "summary": "Create or update an event subscription.",
        "x-ms-examples": {
          "EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination.json"
          },
          "EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination.json"
          },
          "EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination.json"
          },
          "EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination.json"
          },
          "EventSubscriptions_CreateOrUpdateForResource": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForResource.json"
          },
          "EventSubscriptions_CreateOrUpdateForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForResourceGroup.json"
          },
          "EventSubscriptions_CreateOrUpdateForSubscription": {
            "$ref": "./examples/EventSubscriptions_CreateOrUpdateForSubscription.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl": {
      "post": {
        "parameters": [
          {
            "allowReserved": true,
            "description": "The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "in": "path",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-skip-url-encoding": true
          },
          {
            "description": "Name of the event subscription.",
            "in": "path",
            "name": "eventSubscriptionName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionFullUrl"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "EventSubscriptions"
        ],
        "description": "Get the full endpoint URL for an event subscription.",
        "operationId": "EventSubscriptions_GetFullUrl",
        "summary": "Get full URL of an event subscription.",
        "x-ms-examples": {
          "EventSubscriptions_GetFullUrlForCustomTopic": {
            "$ref": "./examples/EventSubscriptions_GetFullUrlForCustomTopic.json"
          },
          "EventSubscriptions_GetFullUrlForResource": {
            "$ref": "./examples/EventSubscriptions_GetFullUrlForResource.json"
          },
          "EventSubscriptions_GetFullUrlForResourceGroup": {
            "$ref": "./examples/EventSubscriptions_GetFullUrlForResourceGroup.json"
          },
          "EventSubscriptions_GetFullUrlForSubscription": {
            "$ref": "./examples/EventSubscriptions_GetFullUrlForSubscription.json"
          }
        }
      }
    },
    "/{scope}/providers/Microsoft.EventGrid/extensionTopics/default": {
      "get": {
        "parameters": [
          {
            "description": "The identifier of the resource to which extension topic is queried. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for Azure resource.",
            "in": "path",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionTopic"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 500 Internal Server Error."
          }
        },
        "tags": [
          "Topics"
        ],
        "description": "Get the properties of an extension topic.",
        "operationId": "ExtensionTopics_Get",
        "summary": "Get properties of an extension topic.",
        "x-ms-examples": {
          "ExtensionTopics_Get": {
            "$ref": "./examples/ExtensionTopics_Get.json"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "ApiVersionParameter": {
        "description": "Version of the API to be used with the client request.",
        "in": "query",
        "name": "api-version",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "FilterParameter": {
        "description": "The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.",
        "in": "query",
        "name": "$filter",
        "required": false,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "SubscriptionIdParameter": {
        "description": "Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
        "in": "path",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "TopParameter": {
        "description": "The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.",
        "in": "query",
        "name": "$top",
        "required": false,
        "schema": {
          "format": "int32",
          "type": "integer"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "requestBodies": {
      "EventSubscription": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EventSubscription"
            }
          }
        },
        "description": "Event subscription properties containing the destination and filter information.",
        "required": true
      },
      "EventSubscriptionUpdateParameters": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EventSubscriptionUpdateParameters"
            }
          }
        },
        "description": "Updated event subscription information.",
        "required": true
      }
    },
    "schemas": {
      "AdvancedFilter": {
        "description": "This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.",
        "discriminator": {
          "propertyName": "operatorType"
        },
        "properties": {
          "key": {
            "description": "The field/property in the event based on which you want to filter.",
            "type": "string"
          },
          "operatorType": {
            "description": "The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.",
            "enum": [
              "NumberIn",
              "NumberNotIn",
              "NumberLessThan",
              "NumberGreaterThan",
              "NumberLessThanOrEquals",
              "NumberGreaterThanOrEquals",
              "BoolEquals",
              "StringIn",
              "StringNotIn",
              "StringBeginsWith",
              "StringEndsWith",
              "StringContains"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "AdvancedFilterOperatorType"
            }
          }
        },
        "required": [
          "operatorType"
        ],
        "type": "object"
      },
      "AzureFunctionEventSubscriptionDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        ],
        "description": "Information about the azure function destination for an event subscription.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/AzureFunctionEventSubscriptionDestinationProperties",
            "description": "Azure Function Properties of the event subscription destination.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "AzureFunction"
      },
      "AzureFunctionEventSubscriptionDestinationProperties": {
        "description": "The properties that represent the Azure Function destination of an event subscription.",
        "properties": {
          "maxEventsPerBatch": {
            "default": 1,
            "description": "Maximum number of events per batch.",
            "format": "int32",
            "type": "integer"
          },
          "preferredBatchSizeInKilobytes": {
            "default": 64,
            "description": "Preferred batch size in Kilobytes.",
            "format": "int32",
            "type": "integer"
          },
          "resourceId": {
            "description": "The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BoolEqualsAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "BoolEquals Advanced Filter.",
        "properties": {
          "value": {
            "description": "The boolean filter value.",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "BoolEquals"
      },
      "ConnectionState": {
        "description": "ConnectionState information.",
        "properties": {
          "actionsRequired": {
            "description": "Actions required (if any).",
            "type": "string"
          },
          "description": {
            "description": "Description of the connection state.",
            "type": "string"
          },
          "status": {
            "description": "Status of the connection.",
            "enum": [
              "Pending",
              "Approved",
              "Rejected",
              "Disconnected"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PersistedConnectionStatus"
            }
          }
        },
        "type": "object"
      },
      "DeadLetterDestination": {
        "description": "Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.",
        "discriminator": {
          "propertyName": "endpointType"
        },
        "properties": {
          "endpointType": {
            "description": "Type of the endpoint for the dead letter destination",
            "enum": [
              "StorageBlob"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "DeadLetterEndPointType"
            }
          }
        },
        "required": [
          "endpointType"
        ],
        "type": "object"
      },
      "DeadLetterWithResourceIdentity": {
        "description": "Information about the deadletter destination with resource identity.",
        "properties": {
          "deadLetterDestination": {
            "$ref": "#/components/schemas/DeadLetterDestination",
            "description": "Information about the destination where events have to be delivered for the event subscription.\r\nUses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "identity": {
            "$ref": "#/components/schemas/EventSubscriptionIdentity",
            "description": "The identity to use when dead-lettering events."
          }
        },
        "type": "object"
      },
      "DeliveryWithResourceIdentity": {
        "description": "Information about the delivery for an event subscription with resource identity.",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/EventSubscriptionDestination",
            "description": "Information about the destination where events have to be delivered for the event subscription.\r\nUses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "identity": {
            "$ref": "#/components/schemas/EventSubscriptionIdentity",
            "description": "The identity to use when delivering events."
          }
        },
        "type": "object"
      },
      "Domain": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "EventGrid Domain.",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/IdentityInfo",
            "description": "Identity information for the resource."
          },
          "properties": {
            "$ref": "#/components/schemas/DomainProperties",
            "description": "Properties of the domain.",
            "x-ms-client-flatten": true
          },
          "sku": {
            "$ref": "#/components/schemas/ResourceSku",
            "default": "Basic",
            "description": "The Sku pricing tier for the domain."
          }
        },
        "type": "object"
      },
      "DomainProperties": {
        "description": "Properties of the Domain.",
        "properties": {
          "endpoint": {
            "description": "Endpoint for the domain.",
            "readOnly": true,
            "type": "string"
          },
          "inboundIpRules": {
            "description": "This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
            "items": {
              "$ref": "#/components/schemas/InboundIpRule"
            },
            "type": "array"
          },
          "inputSchema": {
            "default": "EventGridSchema",
            "description": "This determines the format that Event Grid should expect for incoming events published to the domain.",
            "enum": [
              "EventGridSchema",
              "CustomEventSchema",
              "CloudEventSchemaV1_0"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "InputSchema"
            }
          },
          "inputSchemaMapping": {
            "$ref": "#/components/schemas/InputSchemaMapping",
            "description": "Information about the InputSchemaMapping which specified the info about mapping event payload."
          },
          "metricResourceId": {
            "description": "Metric resource id for the domain.",
            "readOnly": true,
            "type": "string"
          },
          "privateEndpointConnections": {
            "description": "List of private endpoint connections.",
            "items": {
              "$ref": "#/components/schemas/PrivateEndpointConnection"
            },
            "type": "array"
          },
          "provisioningState": {
            "description": "Provisioning state of the domain.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "DomainProvisioningState"
            }
          },
          "publicNetworkAccess": {
            "default": "Enabled",
            "description": "This determines if traffic is allowed over public network. By default it is enabled. \r\nYou can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules\" />",
            "enum": [
              "Enabled",
              "Disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PublicNetworkAccess"
            }
          }
        },
        "type": "object"
      },
      "DomainRegenerateKeyRequest": {
        "description": "Domain regenerate share access key request.",
        "properties": {
          "keyName": {
            "description": "Key name to regenerate key1 or key2.",
            "type": "string"
          }
        },
        "required": [
          "keyName"
        ],
        "type": "object"
      },
      "DomainSharedAccessKeys": {
        "description": "Shared access keys of the Domain.",
        "properties": {
          "key1": {
            "description": "Shared access key1 for the domain.",
            "type": "string"
          },
          "key2": {
            "description": "Shared access key2 for the domain.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DomainTopic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "Domain Topic.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/DomainTopicProperties",
            "description": "Properties of the Domain Topic.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "DomainTopicProperties": {
        "description": "Properties of the Domain Topic.",
        "properties": {
          "provisioningState": {
            "description": "Provisioning state of the domain topic.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "DomainTopicProvisioningState"
            }
          }
        },
        "type": "object"
      },
      "DomainTopicsListResult": {
        "description": "Result of the List Domain Topics operation",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of domain topics",
            "type": "string"
          },
          "value": {
            "description": "A collection of Domain Topics",
            "items": {
              "$ref": "#/components/schemas/DomainTopic"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DomainUpdateParameterProperties": {
        "description": "Information of domain update parameter properties.",
        "properties": {
          "inboundIpRules": {
            "description": "This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
            "items": {
              "$ref": "#/components/schemas/InboundIpRule"
            },
            "type": "array"
          },
          "publicNetworkAccess": {
            "default": "Enabled",
            "description": "This determines if traffic is allowed over public network. By default it is enabled. \r\nYou can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainUpdateParameterProperties.InboundIpRules\" />",
            "enum": [
              "Enabled",
              "Disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PublicNetworkAccess"
            }
          }
        },
        "type": "object"
      },
      "DomainUpdateParameters": {
        "description": "Properties of the Domain update.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags of the domains resource.",
            "type": "object"
          },
          "identity": {
            "$ref": "#/components/schemas/IdentityInfo",
            "description": "Identity information for the resource."
          },
          "properties": {
            "$ref": "#/components/schemas/DomainUpdateParameterProperties",
            "description": "Properties of the resource.",
            "x-ms-client-flatten": true
          },
          "sku": {
            "$ref": "#/components/schemas/ResourceSku",
            "description": "The Sku pricing tier for the domain."
          }
        },
        "type": "object"
      },
      "DomainsListResult": {
        "description": "Result of the List Domains operation",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of domains",
            "type": "string"
          },
          "value": {
            "description": "A collection of Domains",
            "items": {
              "$ref": "#/components/schemas/Domain"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventChannel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "Event Channel.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/EventChannelProperties",
            "description": "Properties of the EventChannel.",
            "x-ms-client-flatten": true
          },
          "systemData": {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
            "description": "The system metadata relating to Event Channel resource.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "EventChannelDestination": {
        "description": "Properties of the destination of an event channel.",
        "properties": {
          "azureSubscriptionId": {
            "description": "Azure subscription ID of the customer creating the event channel. The partner topic\r\nassociated with the event channel will be created under this Azure subscription.",
            "type": "string"
          },
          "partnerTopicName": {
            "description": "Name of the partner topic associated with the event channel.",
            "type": "string"
          },
          "resourceGroup": {
            "description": "Azure Resource Group of the customer creating the event channel. The partner topic\r\nassociated with the event channel will be created under this resource group.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventChannelFilter": {
        "description": "Filter for the Event Channel.",
        "properties": {
          "advancedFilters": {
            "description": "An array of advanced filters that are used for filtering event channels.",
            "items": {
              "$ref": "#/components/schemas/AdvancedFilter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventChannelProperties": {
        "description": "Properties of the Event Channel.",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/EventChannelDestination",
            "description": "Represents the destination of an event channel."
          },
          "expirationTimeIfNotActivatedUtc": {
            "description": "Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,\r\nthe event channel and corresponding partner topic are deleted.",
            "format": "date-time",
            "type": "string"
          },
          "filter": {
            "$ref": "#/components/schemas/EventChannelFilter",
            "description": "Information about the filter for the event channel."
          },
          "partnerTopicFriendlyDescription": {
            "description": "Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.\r\nThis will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.",
            "type": "string"
          },
          "partnerTopicReadinessState": {
            "description": "The readiness state of the corresponding partner topic.",
            "enum": [
              "NotActivatedByUserYet",
              "ActivatedByUser",
              "DeactivatedByUser",
              "DeletedByUser"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PartnerTopicReadinessState"
            }
          },
          "provisioningState": {
            "description": "Provisioning state of the event channel.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "EventChannelProvisioningState"
            }
          },
          "source": {
            "$ref": "#/components/schemas/EventChannelSource",
            "description": "Source of the event channel. This represents a unique resource in the partner's resource model."
          }
        },
        "type": "object"
      },
      "EventChannelSource": {
        "description": "Properties of the source of an event channel.",
        "properties": {
          "source": {
            "description": "The identifier of the resource that's the source of the events.\r\nThis represents a unique resource in the partner's resource model.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventChannelsListResult": {
        "description": "Result of the List Event Channels operation",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of event channels",
            "type": "string"
          },
          "value": {
            "description": "A collection of Event Channels",
            "items": {
              "$ref": "#/components/schemas/EventChannel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventHubEventSubscriptionDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        ],
        "description": "Information about the event hub destination for an event subscription.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/EventHubEventSubscriptionDestinationProperties",
            "description": "Event Hub Properties of the event subscription destination.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "EventHub"
      },
      "EventHubEventSubscriptionDestinationProperties": {
        "description": "The properties for a event hub destination.",
        "properties": {
          "resourceId": {
            "description": "The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "Event Subscription",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/EventSubscriptionProperties",
            "description": "Properties of the event subscription.",
            "x-ms-client-flatten": true
          },
          "systemData": {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
            "description": "The system metadata relating to Event Subscription resource.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "EventSubscriptionDestination": {
        "description": "Information about the destination for an event subscription.",
        "discriminator": {
          "propertyName": "endpointType"
        },
        "properties": {
          "endpointType": {
            "description": "Type of the endpoint for the event subscription destination.",
            "enum": [
              "WebHook",
              "EventHub",
              "StorageQueue",
              "HybridConnection",
              "ServiceBusQueue",
              "ServiceBusTopic",
              "AzureFunction"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "EndpointType"
            }
          }
        },
        "required": [
          "endpointType"
        ],
        "type": "object"
      },
      "EventSubscriptionFilter": {
        "description": "Filter for the Event Subscription.",
        "properties": {
          "advancedFilters": {
            "description": "An array of advanced filters that are used for filtering event subscriptions.",
            "items": {
              "$ref": "#/components/schemas/AdvancedFilter"
            },
            "type": "array"
          },
          "includedEventTypes": {
            "description": "A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isSubjectCaseSensitive": {
            "default": false,
            "description": "Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter\r\nshould be compared in a case sensitive manner.",
            "type": "boolean"
          },
          "subjectBeginsWith": {
            "description": "An optional string to filter events for an event subscription based on a resource path prefix.\r\nThe format of this depends on the publisher of the events.\r\nWildcard characters are not supported in this path.",
            "type": "string"
          },
          "subjectEndsWith": {
            "description": "An optional string to filter events for an event subscription based on a resource path suffix.\r\nWildcard characters are not supported in this path.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionFullUrl": {
        "description": "Full endpoint url of an event subscription",
        "properties": {
          "endpointUrl": {
            "description": "The URL that represents the endpoint of the destination of an event subscription.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionIdentity": {
        "description": "The identity information with the event subscription.",
        "properties": {
          "type": {
            "description": "The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.",
            "enum": [
              "SystemAssigned",
              "UserAssigned"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "EventSubscriptionIdentityType"
            }
          },
          "userAssignedIdentity": {
            "description": "The user identity associated with the resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionProperties": {
        "description": "Properties of the Event Subscription.",
        "properties": {
          "deadLetterDestination": {
            "$ref": "#/components/schemas/DeadLetterDestination",
            "description": "The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.\r\nUses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "deadLetterWithResourceIdentity": {
            "$ref": "#/components/schemas/DeadLetterWithResourceIdentity",
            "description": "The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.\r\nUses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "deliveryWithResourceIdentity": {
            "$ref": "#/components/schemas/DeliveryWithResourceIdentity",
            "description": "Information about the destination where events have to be delivered for the event subscription.\r\nUses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "destination": {
            "$ref": "#/components/schemas/EventSubscriptionDestination",
            "description": "Information about the destination where events have to be delivered for the event subscription.\r\nUses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "eventDeliverySchema": {
            "default": "EventGridSchema",
            "description": "The event delivery schema for the event subscription.",
            "enum": [
              "EventGridSchema",
              "CustomInputSchema",
              "CloudEventSchemaV1_0"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "EventDeliverySchema"
            }
          },
          "expirationTimeUtc": {
            "description": "Expiration time of the event subscription.",
            "format": "date-time",
            "type": "string"
          },
          "filter": {
            "$ref": "#/components/schemas/EventSubscriptionFilter",
            "description": "Information about the filter for the event subscription."
          },
          "labels": {
            "description": "List of user defined labels.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "provisioningState": {
            "description": "Provisioning state of the event subscription.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed",
              "AwaitingManualAction"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "EventSubscriptionProvisioningState"
            }
          },
          "retryPolicy": {
            "$ref": "#/components/schemas/RetryPolicy",
            "description": "The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events."
          },
          "topic": {
            "description": "Name of the topic of the event subscription.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionUpdateParameters": {
        "description": "Properties of the Event Subscription update.",
        "properties": {
          "deadLetterDestination": {
            "$ref": "#/components/schemas/DeadLetterDestination",
            "description": "The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.\r\nUses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "deadLetterWithResourceIdentity": {
            "$ref": "#/components/schemas/DeadLetterWithResourceIdentity",
            "description": "The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.\r\nUses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "deliveryWithResourceIdentity": {
            "$ref": "#/components/schemas/DeliveryWithResourceIdentity",
            "description": "Information about the destination where events have to be delivered for the event subscription.\r\nUses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "destination": {
            "$ref": "#/components/schemas/EventSubscriptionDestination",
            "description": "Information about the destination where events have to be delivered for the event subscription.\r\nUses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering."
          },
          "eventDeliverySchema": {
            "description": "The event delivery schema for the event subscription.",
            "enum": [
              "EventGridSchema",
              "CustomInputSchema",
              "CloudEventSchemaV1_0"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "EventDeliverySchema"
            }
          },
          "expirationTimeUtc": {
            "description": "Information about the expiration time for the event subscription.",
            "format": "date-time",
            "type": "string"
          },
          "filter": {
            "$ref": "#/components/schemas/EventSubscriptionFilter",
            "description": "Information about the filter for the event subscription."
          },
          "labels": {
            "description": "List of user defined labels.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "retryPolicy": {
            "$ref": "#/components/schemas/RetryPolicy",
            "description": "The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events."
          }
        },
        "type": "object"
      },
      "EventSubscriptionsListResult": {
        "description": "Result of the List EventSubscriptions operation",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of event subscriptions",
            "type": "string"
          },
          "value": {
            "description": "A collection of EventSubscriptions",
            "items": {
              "$ref": "#/components/schemas/EventSubscription"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "Event Type for a subject under a topic",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/EventTypeProperties",
            "description": "Properties of the event type.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "EventTypeProperties": {
        "description": "Properties of the event type",
        "properties": {
          "description": {
            "description": "Description of the event type.",
            "type": "string"
          },
          "displayName": {
            "description": "Display name of the event type.",
            "type": "string"
          },
          "isInDefaultSet": {
            "description": "IsInDefaultSet flag of the event type.",
            "type": "boolean"
          },
          "schemaUrl": {
            "description": "Url of the schema for this event type.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventTypesListResult": {
        "description": "Result of the List Event Types operation",
        "properties": {
          "value": {
            "description": "A collection of event types",
            "items": {
              "$ref": "#/components/schemas/EventType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExtensionTopic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "Event grid Extension Topic. This is used for getting Event Grid related metrics for Azure resources.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/ExtensionTopicProperties",
            "description": "Properties of the extension topic",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "ExtensionTopicProperties": {
        "description": "Properties of the Extension Topic",
        "properties": {
          "description": {
            "description": "Description of the extension topic.",
            "type": "string"
          },
          "systemTopic": {
            "description": "System topic resource id which is mapped to the source.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HybridConnectionEventSubscriptionDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        ],
        "description": "Information about the HybridConnection destination for an event subscription.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/HybridConnectionEventSubscriptionDestinationProperties",
            "description": "Hybrid connection Properties of the event subscription destination.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "HybridConnection"
      },
      "HybridConnectionEventSubscriptionDestinationProperties": {
        "description": "The properties for a hybrid connection destination.",
        "properties": {
          "resourceId": {
            "description": "The Azure Resource ID of an hybrid connection that is the destination of an event subscription.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IdentityInfo": {
        "description": "The identity information for the resource.",
        "properties": {
          "principalId": {
            "description": "The principal ID of resource identity.",
            "type": "string"
          },
          "tenantId": {
            "description": "The tenant ID of resource.",
            "type": "string"
          },
          "type": {
            "description": "The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.",
            "enum": [
              "None",
              "SystemAssigned",
              "UserAssigned",
              "SystemAssigned, UserAssigned"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "IdentityType"
            }
          },
          "userAssignedIdentities": {
            "additionalProperties": {
              "$ref": "#/components/schemas/UserIdentityProperties"
            },
            "description": "The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:\r\n'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.\r\nThis property is currently not used and reserved for future usage.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "InboundIpRule": {
        "properties": {
          "action": {
            "description": "Action to perform based on the match or no match of the IpMask.",
            "enum": [
              "Allow"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "IpActionType"
            }
          },
          "ipMask": {
            "description": "IP Address in CIDR notation e.g., 10.0.0.0/8.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InputSchemaMapping": {
        "description": "By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.",
        "discriminator": {
          "propertyName": "inputSchemaMappingType"
        },
        "properties": {
          "inputSchemaMappingType": {
            "description": "Type of the custom mapping",
            "enum": [
              "Json"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "InputSchemaMappingType"
            }
          }
        },
        "required": [
          "inputSchemaMappingType"
        ],
        "type": "object"
      },
      "JsonField": {
        "description": "This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.",
        "properties": {
          "sourceField": {
            "description": "Name of a field in the input event schema that's to be used as the source of a mapping.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JsonFieldWithDefault": {
        "description": "This is used to express the source of an input schema mapping for a single target field\r\nin the Event Grid Event schema. This is currently used in the mappings for the 'subject',\r\n'eventtype' and 'dataversion' properties. This represents a field in the input event schema\r\nalong with a default value to be used, and at least one of these two properties should be provided.",
        "properties": {
          "defaultValue": {
            "description": "The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.",
            "type": "string"
          },
          "sourceField": {
            "description": "Name of a field in the input event schema that's to be used as the source of a mapping.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JsonInputSchemaMapping": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InputSchemaMapping"
          }
        ],
        "description": "This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/JsonInputSchemaMappingProperties",
            "description": "JSON Properties of the input schema mapping",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "Json"
      },
      "JsonInputSchemaMappingProperties": {
        "description": "This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.",
        "properties": {
          "dataVersion": {
            "$ref": "#/components/schemas/JsonFieldWithDefault",
            "description": "The mapping information for the DataVersion property of the Event Grid Event."
          },
          "eventTime": {
            "$ref": "#/components/schemas/JsonField",
            "description": "The mapping information for the EventTime property of the Event Grid Event."
          },
          "eventType": {
            "$ref": "#/components/schemas/JsonFieldWithDefault",
            "description": "The mapping information for the EventType property of the Event Grid Event."
          },
          "id": {
            "$ref": "#/components/schemas/JsonField",
            "description": "The mapping information for the Id property of the Event Grid Event."
          },
          "subject": {
            "$ref": "#/components/schemas/JsonFieldWithDefault",
            "description": "The mapping information for the Subject property of the Event Grid Event."
          },
          "topic": {
            "$ref": "#/components/schemas/JsonField",
            "description": "The mapping information for the Topic property of the Event Grid Event."
          }
        },
        "type": "object"
      },
      "NumberGreaterThanAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "NumberGreaterThan Advanced Filter.",
        "properties": {
          "value": {
            "description": "The filter value.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "NumberGreaterThan"
      },
      "NumberGreaterThanOrEqualsAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "NumberGreaterThanOrEquals Advanced Filter.",
        "properties": {
          "value": {
            "description": "The filter value.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "NumberGreaterThanOrEquals"
      },
      "NumberInAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "NumberIn Advanced Filter.",
        "properties": {
          "values": {
            "description": "The set of filter values.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "NumberIn"
      },
      "NumberLessThanAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "NumberLessThan Advanced Filter.",
        "properties": {
          "value": {
            "description": "The filter value.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "NumberLessThan"
      },
      "NumberLessThanOrEqualsAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "NumberLessThanOrEquals Advanced Filter.",
        "properties": {
          "value": {
            "description": "The filter value.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "NumberLessThanOrEquals"
      },
      "NumberNotInAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "NumberNotIn Advanced Filter.",
        "properties": {
          "values": {
            "description": "The set of filter values.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "NumberNotIn"
      },
      "Operation": {
        "description": "Represents an operation returned by the GetOperations request",
        "properties": {
          "display": {
            "$ref": "#/components/schemas/OperationInfo",
            "description": "Display name of the operation"
          },
          "name": {
            "description": "Name of the operation",
            "type": "string"
          },
          "origin": {
            "description": "Origin of the operation",
            "type": "string"
          },
          "properties": {
            "description": "Properties of the operation",
            "type": "object",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "OperationInfo": {
        "description": "Information about an operation",
        "properties": {
          "description": {
            "description": "Description of the operation",
            "type": "string"
          },
          "operation": {
            "description": "Name of the operation",
            "type": "string"
          },
          "provider": {
            "description": "Name of the provider",
            "type": "string"
          },
          "resource": {
            "description": "Name of the resource type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OperationsListResult": {
        "description": "Result of the List Operations operation",
        "properties": {
          "value": {
            "description": "A collection of operations",
            "items": {
              "$ref": "#/components/schemas/Operation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartnerNamespace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "EventGrid Partner Namespace.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/PartnerNamespaceProperties",
            "description": "Properties of the partner namespace.",
            "x-ms-client-flatten": true
          },
          "systemData": {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
            "description": "The system metadata relating to Partner Namespace resource.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PartnerNamespaceProperties": {
        "description": "Properties of the partner namespace.",
        "properties": {
          "endpoint": {
            "description": "Endpoint for the partner namespace.",
            "readOnly": true,
            "type": "string"
          },
          "partnerRegistrationFullyQualifiedId": {
            "description": "The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:\r\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.",
            "type": "string"
          },
          "provisioningState": {
            "description": "Provisioning state of the partner namespace.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PartnerNamespaceProvisioningState"
            }
          }
        },
        "type": "object"
      },
      "PartnerNamespaceRegenerateKeyRequest": {
        "description": "PartnerNamespace regenerate shared access key request.",
        "properties": {
          "keyName": {
            "description": "Key name to regenerate (key1 or key2).",
            "type": "string"
          }
        },
        "required": [
          "keyName"
        ],
        "type": "object"
      },
      "PartnerNamespaceSharedAccessKeys": {
        "description": "Shared access keys of the partner namespace.",
        "properties": {
          "key1": {
            "description": "Shared access key1 for the partner namespace.",
            "type": "string"
          },
          "key2": {
            "description": "Shared access key2 for the partner namespace.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartnerNamespaceUpdateParameters": {
        "description": "Properties of the PartnerNamespace update.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags of the partner namespace.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "PartnerNamespacesListResult": {
        "description": "Result of the List Partner Namespaces operation",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of partner namespaces.",
            "type": "string"
          },
          "value": {
            "description": "A collection of partner namespaces.",
            "items": {
              "$ref": "#/components/schemas/PartnerNamespace"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartnerRegistration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "Information about a partner registration.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/PartnerRegistrationProperties",
            "description": "Properties of the partner registration.",
            "x-ms-client-flatten": true
          },
          "systemData": {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
            "description": "The system metadata relating to Partner Registration resource.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PartnerRegistrationEventTypesListResult": {
        "description": "Result of the List Partner Registration Event Types operation.",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of partner registration event types.",
            "type": "string"
          },
          "value": {
            "description": "A collection of partner registration event types.",
            "items": {
              "$ref": "#/components/schemas/EventType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartnerRegistrationProperties": {
        "description": "Properties of the partner registration.",
        "properties": {
          "authorizedAzureSubscriptionIds": {
            "description": "List of Azure subscription Ids that are authorized to create a partner namespace\r\nassociated with this partner registration. This is an optional property. Creating\r\npartner namespaces is always permitted under the same Azure subscription as the one used\r\nfor creating the partner registration.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "customerServiceUri": {
            "description": "The extension of the customer service URI of the publisher.",
            "type": "string"
          },
          "logoUri": {
            "description": "URI of the logo.",
            "type": "string"
          },
          "longDescription": {
            "description": "Long description for the custom scenarios and integration to be displayed in the portal if needed.\r\nLength of this description should not exceed 2048 characters.",
            "type": "string"
          },
          "partnerCustomerServiceExtension": {
            "description": "The extension of the customer service number of the publisher. Only digits are allowed and number of digits should not exceed 10.",
            "type": "string"
          },
          "partnerCustomerServiceNumber": {
            "description": "The customer service number of the publisher. The expected phone format should start with a '+' sign \r\nfollowed by the country code. The remaining digits are then followed. Only digits and spaces are allowed and its\r\nlength cannot exceed 16 digits including country code. Examples of valid phone numbers are: +1 515 123 4567 and\r\n+966 7 5115 2471. Examples of invalid phone numbers are: +1 (515) 123-4567, 1 515 123 4567 and +966 121 5115 24 7 551 1234 43",
            "type": "string"
          },
          "partnerName": {
            "description": "Official name of the partner name. For example: \"Contoso\".",
            "type": "string"
          },
          "partnerResourceTypeDescription": {
            "description": "Short description of the partner resource type. The length of this description should not exceed 256 characters.",
            "type": "string"
          },
          "partnerResourceTypeDisplayName": {
            "description": "Display name of the partner resource type.",
            "type": "string"
          },
          "partnerResourceTypeName": {
            "description": "Name of the partner resource type.",
            "type": "string"
          },
          "provisioningState": {
            "description": "Provisioning state of the partner registration.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PartnerRegistrationProvisioningState"
            }
          },
          "setupUri": {
            "description": "URI of the partner website that can be used by Azure customers to setup Event Grid\r\nintegration on an event source.",
            "type": "string"
          },
          "visibilityState": {
            "description": "Visibility state of the partner registration.",
            "enum": [
              "Hidden",
              "PublicPreview",
              "GenerallyAvailable"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PartnerRegistrationVisibilityState"
            }
          }
        },
        "type": "object"
      },
      "PartnerRegistrationUpdateParameters": {
        "description": "Properties of the Partner Registration update.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags of the partner registration resource.",
            "type": "object"
          },
          "authorizedAzureSubscriptionIds": {
            "description": "List of IDs of Azure AD applications that are authorized to create a partner namespace\r\nassociated with this partner registration. This is an optional property. Creating\r\npartner namespaces is always permitted under the same Azure subscription as the one used\r\nfor creating the partner registration.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logoUri": {
            "description": "URI of the partner logo.",
            "type": "string"
          },
          "partnerTopicTypeDescription": {
            "description": "Description of the partner topic type.",
            "type": "string"
          },
          "partnerTopicTypeDisplayName": {
            "description": "Display name of the partner topic type.",
            "type": "string"
          },
          "partnerTopicTypeName": {
            "description": "Name of the partner topic type.",
            "type": "string"
          },
          "setupUri": {
            "description": "URI of the partner website that can be used by Azure customers to setup Event Grid\r\nintegration on an event source.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartnerRegistrationsListResult": {
        "description": "Result of the List Partner Registrations operation.",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of partner registrations.",
            "type": "string"
          },
          "value": {
            "description": "A collection of partner registrations.",
            "items": {
              "$ref": "#/components/schemas/PartnerRegistration"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartnerTopic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "EventGrid Partner Topic.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/PartnerTopicProperties",
            "description": "Properties of the partner topic.",
            "x-ms-client-flatten": true
          },
          "systemData": {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
            "description": "The system metadata relating to Partner Topic resource.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PartnerTopicProperties": {
        "description": "Properties of the Partner Topic.",
        "properties": {
          "activationState": {
            "description": "Activation state of the partner topic.",
            "enum": [
              "NeverActivated",
              "Activated",
              "Deactivated"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PartnerTopicActivationState"
            }
          },
          "expirationTimeIfNotActivatedUtc": {
            "description": "Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,\r\nthe partner topic and corresponding event channel are deleted.",
            "format": "date-time",
            "type": "string"
          },
          "partnerTopicFriendlyDescription": {
            "description": "Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.\r\nThis will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.",
            "type": "string"
          },
          "provisioningState": {
            "description": "Provisioning state of the partner topic.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PartnerTopicProvisioningState"
            }
          },
          "source": {
            "description": "Source associated with this partner topic. This represents a unique partner resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartnerTopicType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "Properties of a partner topic type.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/PartnerTopicTypeProperties",
            "description": "Properties of the partner topic type.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "PartnerTopicTypeProperties": {
        "description": "Properties of a partner topic type.",
        "properties": {
          "authorizationState": {
            "description": "Status of whether the customer has authorized a partner to create partner topics\r\nin the customer's subscription.",
            "enum": [
              "NotApplicable",
              "NotAuthorized",
              "Authorized"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PartnerTopicTypeAuthorizationState"
            }
          },
          "description": {
            "description": "Description of the partner topic type.",
            "type": "string"
          },
          "displayName": {
            "description": "Display Name for the partner topic type.",
            "type": "string"
          },
          "partnerName": {
            "description": "Official name of the partner.",
            "type": "string"
          },
          "setupUri": {
            "description": "URI of the partner website that can be used by Azure customers to setup Event Grid\r\nintegration on an event source.",
            "type": "string"
          },
          "topicTypeName": {
            "description": "Name of the partner topic type. This name should be unique among all partner topic types names.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartnerTopicTypesListResult": {
        "description": "Result of the List Partner Topic Types operation.",
        "properties": {
          "value": {
            "description": "A collection of partner topic types.",
            "items": {
              "$ref": "#/components/schemas/PartnerTopicType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartnerTopicUpdateParameters": {
        "description": "Properties of the Partner Topic update.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags of the partner topic.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "PartnerTopicsListResult": {
        "description": "Result of the List Partner Topics operation.",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of partner topics.",
            "type": "string"
          },
          "value": {
            "description": "A collection of partner topics.",
            "items": {
              "$ref": "#/components/schemas/PartnerTopic"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PrivateEndpoint": {
        "description": "PrivateEndpoint information.",
        "properties": {
          "id": {
            "description": "The ARM identifier for Private Endpoint.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrivateEndpointConnection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/PrivateEndpointConnectionProperties",
            "description": "Properties of the PrivateEndpointConnection.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "PrivateEndpointConnectionListResult": {
        "description": "Result of the list of all private endpoint connections operation.",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of private endpoint connection resources.",
            "type": "string"
          },
          "value": {
            "description": "A collection of private endpoint connection resources.",
            "items": {
              "$ref": "#/components/schemas/PrivateEndpointConnection"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PrivateEndpointConnectionProperties": {
        "description": "Properties of the private endpoint connection resource.",
        "properties": {
          "groupIds": {
            "description": "GroupIds from the private link service resource.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "privateEndpoint": {
            "$ref": "#/components/schemas/PrivateEndpoint",
            "description": "The Private Endpoint resource for this Connection."
          },
          "privateLinkServiceConnectionState": {
            "$ref": "#/components/schemas/ConnectionState",
            "description": "Details about the state of the connection."
          },
          "provisioningState": {
            "description": "Provisioning state of the Private Endpoint Connection.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ResourceProvisioningState"
            }
          }
        },
        "type": "object"
      },
      "PrivateLinkResource": {
        "description": "Information of the private link resource.",
        "properties": {
          "id": {
            "description": "Fully qualified identifier of the resource.",
            "type": "string"
          },
          "name": {
            "description": "Name of the resource.",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/PrivateLinkResourceProperties",
            "description": "Properties of the private link resource.",
            "x-ms-client-flatten": true
          },
          "type": {
            "description": "Type of the resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrivateLinkResourceProperties": {
        "properties": {
          "displayName": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "requiredMembers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requiredZoneNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PrivateLinkResourcesListResult": {
        "description": "Result of the List private link resources operation.",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of private link resources.",
            "type": "string"
          },
          "value": {
            "description": "A collection of private link resources",
            "items": {
              "$ref": "#/components/schemas/PrivateLinkResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Resource": {
        "description": "Definition of a Resource",
        "properties": {
          "id": {
            "description": "Fully qualified identifier of the resource.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the resource.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Type of the resource.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      },
      "ResourceSku": {
        "description": "Describes an EventGrid Resource Sku.",
        "properties": {
          "name": {
            "description": "The Sku name of the resource. The possible values are: Basic or Premium.",
            "enum": [
              "Basic",
              "Premium"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "Sku"
            }
          }
        },
        "type": "object"
      },
      "RetryPolicy": {
        "description": "Information about the retry policy for an event subscription.",
        "properties": {
          "eventTimeToLiveInMinutes": {
            "description": "Time To Live (in minutes) for events.",
            "format": "int32",
            "type": "integer"
          },
          "maxDeliveryAttempts": {
            "description": "Maximum number of delivery retry attempts for events.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ServiceBusQueueEventSubscriptionDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        ],
        "description": "Information about the service bus destination for an event subscription.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/ServiceBusQueueEventSubscriptionDestinationProperties",
            "description": "Service Bus Properties of the event subscription destination.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "ServiceBusQueue"
      },
      "ServiceBusQueueEventSubscriptionDestinationProperties": {
        "description": "The properties that represent the Service Bus destination of an event subscription.",
        "properties": {
          "resourceId": {
            "description": "The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceBusTopicEventSubscriptionDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        ],
        "description": "Information about the service bus topic destination for an event subscription.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/ServiceBusTopicEventSubscriptionDestinationProperties",
            "description": "Service Bus Topic Properties of the event subscription destination.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "ServiceBusTopic"
      },
      "ServiceBusTopicEventSubscriptionDestinationProperties": {
        "description": "The properties that represent the Service Bus Topic destination of an event subscription.",
        "properties": {
          "resourceId": {
            "description": "The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageBlobDeadLetterDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeadLetterDestination"
          }
        ],
        "description": "Information about the storage blob based dead letter destination.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/StorageBlobDeadLetterDestinationProperties",
            "description": "The properties of the Storage Blob based deadletter destination",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "StorageBlob"
      },
      "StorageBlobDeadLetterDestinationProperties": {
        "description": "Properties of the storage blob based dead letter destination.",
        "properties": {
          "blobContainerName": {
            "description": "The name of the Storage blob container that is the destination of the deadletter events",
            "type": "string"
          },
          "resourceId": {
            "description": "The Azure Resource ID of the storage account that is the destination of the deadletter events",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageQueueEventSubscriptionDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        ],
        "description": "Information about the storage queue destination for an event subscription.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/StorageQueueEventSubscriptionDestinationProperties",
            "description": "Storage Queue Properties of the event subscription destination.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "StorageQueue"
      },
      "StorageQueueEventSubscriptionDestinationProperties": {
        "description": "The properties for a storage queue destination.",
        "properties": {
          "queueName": {
            "description": "The name of the Storage queue under a storage account that is the destination of an event subscription.",
            "type": "string"
          },
          "resourceId": {
            "description": "The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StringBeginsWithAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "StringBeginsWith Advanced Filter.",
        "properties": {
          "values": {
            "description": "The set of filter values.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "StringBeginsWith"
      },
      "StringContainsAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "StringContains Advanced Filter.",
        "properties": {
          "values": {
            "description": "The set of filter values.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "StringContains"
      },
      "StringEndsWithAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "StringEndsWith Advanced Filter.",
        "properties": {
          "values": {
            "description": "The set of filter values.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "StringEndsWith"
      },
      "StringInAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "StringIn Advanced Filter.",
        "properties": {
          "values": {
            "description": "The set of filter values.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "StringIn"
      },
      "StringNotInAdvancedFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancedFilter"
          }
        ],
        "description": "StringNotIn Advanced Filter.",
        "properties": {
          "values": {
            "description": "The set of filter values.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "StringNotIn"
      },
      "SystemTopic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "EventGrid System Topic.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/SystemTopicProperties",
            "description": "Properties of the system topic.",
            "x-ms-client-flatten": true
          },
          "systemData": {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
            "description": "The system metadata relating to System Topic resource.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "SystemTopicProperties": {
        "description": "Properties of the System Topic.",
        "properties": {
          "metricResourceId": {
            "description": "Metric resource id for the system topic.",
            "readOnly": true,
            "type": "string"
          },
          "provisioningState": {
            "description": "Provisioning state of the system topic.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ResourceProvisioningState"
            }
          },
          "source": {
            "description": "Source for the system topic.",
            "type": "string"
          },
          "topicType": {
            "description": "TopicType for the system topic.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SystemTopicUpdateParameters": {
        "description": "Properties of the System Topic update.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags of the system topic.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "SystemTopicsListResult": {
        "description": "Result of the List System topics operation.",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of topics.",
            "type": "string"
          },
          "value": {
            "description": "A collection of system Topics.",
            "items": {
              "$ref": "#/components/schemas/SystemTopic"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Topic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackedResource"
          }
        ],
        "description": "EventGrid Topic",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/IdentityInfo",
            "description": "Identity information for the resource."
          },
          "properties": {
            "$ref": "#/components/schemas/TopicProperties",
            "description": "Properties of the topic.",
            "x-ms-client-flatten": true
          },
          "sku": {
            "$ref": "#/components/schemas/ResourceSku",
            "default": "Basic",
            "description": "The Sku pricing tier for the topic."
          }
        },
        "type": "object"
      },
      "TopicProperties": {
        "description": "Properties of the Topic",
        "properties": {
          "endpoint": {
            "description": "Endpoint for the topic.",
            "readOnly": true,
            "type": "string"
          },
          "inboundIpRules": {
            "description": "This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
            "items": {
              "$ref": "#/components/schemas/InboundIpRule"
            },
            "type": "array"
          },
          "inputSchema": {
            "default": "EventGridSchema",
            "description": "This determines the format that Event Grid should expect for incoming events published to the topic.",
            "enum": [
              "EventGridSchema",
              "CustomEventSchema",
              "CloudEventSchemaV1_0"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "InputSchema"
            }
          },
          "inputSchemaMapping": {
            "$ref": "#/components/schemas/InputSchemaMapping",
            "description": "This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema."
          },
          "metricResourceId": {
            "description": "Metric resource id for the topic.",
            "readOnly": true,
            "type": "string"
          },
          "privateEndpointConnections": {
            "items": {
              "$ref": "#/components/schemas/PrivateEndpointConnection"
            },
            "type": "array"
          },
          "provisioningState": {
            "description": "Provisioning state of the topic.",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "readOnly": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TopicProvisioningState"
            }
          },
          "publicNetworkAccess": {
            "default": "Enabled",
            "description": "This determines if traffic is allowed over public network. By default it is enabled. \r\nYou can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules\" />",
            "enum": [
              "Enabled",
              "Disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PublicNetworkAccess"
            }
          }
        },
        "type": "object"
      },
      "TopicRegenerateKeyRequest": {
        "description": "Topic regenerate share access key request",
        "properties": {
          "keyName": {
            "description": "Key name to regenerate key1 or key2",
            "type": "string"
          }
        },
        "required": [
          "keyName"
        ],
        "type": "object"
      },
      "TopicSharedAccessKeys": {
        "description": "Shared access keys of the Topic",
        "properties": {
          "key1": {
            "description": "Shared access key1 for the topic.",
            "type": "string"
          },
          "key2": {
            "description": "Shared access key2 for the topic.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopicTypeInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "Properties of a topic type info.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/TopicTypeProperties",
            "description": "Properties of the topic type info",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "TopicTypeProperties": {
        "description": "Properties of a topic type.",
        "properties": {
          "description": {
            "description": "Description of the topic type.",
            "type": "string"
          },
          "displayName": {
            "description": "Display Name for the topic type.",
            "type": "string"
          },
          "provider": {
            "description": "Namespace of the provider of the topic type.",
            "type": "string"
          },
          "provisioningState": {
            "description": "Provisioning state of the topic type",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Canceled",
              "Failed"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "TopicTypeProvisioningState"
            }
          },
          "resourceRegionType": {
            "description": "Region type of the resource.",
            "enum": [
              "RegionalResource",
              "GlobalResource"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ResourceRegionType"
            }
          },
          "sourceResourceFormat": {
            "description": "Source resource format.",
            "type": "string"
          },
          "supportedLocations": {
            "description": "List of locations supported by this topic type.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TopicTypesListResult": {
        "description": "Result of the List Topic Types operation",
        "properties": {
          "value": {
            "description": "A collection of topic types",
            "items": {
              "$ref": "#/components/schemas/TopicTypeInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TopicUpdateParameterProperties": {
        "description": "Information of topic update parameter properties.",
        "properties": {
          "inboundIpRules": {
            "description": "This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
            "items": {
              "$ref": "#/components/schemas/InboundIpRule"
            },
            "type": "array"
          },
          "publicNetworkAccess": {
            "default": "Enabled",
            "description": "This determines if traffic is allowed over public network. By default it is enabled. \r\nYou can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicUpdateParameterProperties.InboundIpRules\" />",
            "enum": [
              "Enabled",
              "Disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PublicNetworkAccess"
            }
          }
        },
        "type": "object"
      },
      "TopicUpdateParameters": {
        "description": "Properties of the Topic update",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags of the resource.",
            "type": "object"
          },
          "identity": {
            "$ref": "#/components/schemas/IdentityInfo",
            "description": "Resource identity information."
          },
          "properties": {
            "$ref": "#/components/schemas/TopicUpdateParameterProperties",
            "description": "Properties of the resource.",
            "x-ms-client-flatten": true
          },
          "sku": {
            "$ref": "#/components/schemas/ResourceSku",
            "description": "The Sku pricing tier for the topic."
          }
        },
        "type": "object"
      },
      "TopicsListResult": {
        "description": "Result of the List Topics operation",
        "properties": {
          "nextLink": {
            "description": "A link for the next page of topics",
            "type": "string"
          },
          "value": {
            "description": "A collection of Topics",
            "items": {
              "$ref": "#/components/schemas/Topic"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TrackedResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "Definition of a Tracked Resource.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags of the resource.",
            "type": "object"
          },
          "location": {
            "description": "Location of the resource.",
            "type": "string",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          }
        },
        "required": [
          "location"
        ],
        "type": "object"
      },
      "UserIdentityProperties": {
        "description": "The information about the user identity.",
        "properties": {
          "clientId": {
            "description": "The client id of user assigned identity.",
            "type": "string"
          },
          "principalId": {
            "description": "The principal id of user assigned identity.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebHookEventSubscriptionDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        ],
        "description": "Information about the webhook destination for an event subscription.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/WebHookEventSubscriptionDestinationProperties",
            "description": "WebHook Properties of the event subscription destination.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "WebHook"
      },
      "WebHookEventSubscriptionDestinationProperties": {
        "description": "Information about the webhook destination properties for an event subscription.",
        "properties": {
          "azureActiveDirectoryApplicationIdOrUri": {
            "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.",
            "type": "string"
          },
          "azureActiveDirectoryTenantId": {
            "description": "The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.",
            "type": "string"
          },
          "endpointBaseUrl": {
            "description": "The base URL that represents the endpoint of the destination of an event subscription.",
            "readOnly": true,
            "type": "string"
          },
          "endpointUrl": {
            "description": "The URL that represents the endpoint of the destination of an event subscription.",
            "type": "string",
            "x-ms-secret": true
          },
          "maxEventsPerBatch": {
            "default": 1,
            "description": "Maximum number of events per batch.",
            "format": "int32",
            "type": "integer"
          },
          "preferredBatchSizeInKilobytes": {
            "default": 64,
            "description": "Preferred batch size in Kilobytes.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": []
    }
  ]
}