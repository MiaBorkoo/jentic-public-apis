{
  "openapi": "3.0.0",
  "info": {
    "description": "API for using the Azure IoT Hub Device Provisioning Service features.",
    "title": "iotDpsClient",
    "version": "2018-01-22",
    "x-ms-code-generation-settings": {
      "host": "management.azure.com"
    },
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2018-01-22/iotdps.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/providers/Microsoft.Devices/operations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationListResult"
                }
              }
            },
            "description": "OK. The request has succeeded."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "Operations"
        ],
        "description": "Lists all of the available Microsoft.Devices REST API operations.",
        "operationId": "Operations_List",
        "x-ms-examples": {
          "DPSOperations": {
            "$ref": "./examples/DPSOperations.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameAvailabilityInfo"
                }
              }
            },
            "description": "This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the provisioning service name is available. If the name is not available, the body contains the reason."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "POST"
        ],
        "description": "Check if a provisioning service name is available. This will validate if the name is syntactically valid and if the name is usable",
        "operationId": "IotDpsResource_CheckProvisioningServiceNameAvailability",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationInputs"
              }
            }
          },
          "description": "Set the name parameter in the OperationInputs structure to the name of the provisioning service to check.",
          "required": true
        },
        "summary": "Check if a provisioning service name is available.",
        "x-ms-examples": {
          "DPSCheckName": {
            "$ref": "./examples/DPSCheckNameAvailability.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningServiceDescriptionListResult"
                }
              }
            },
            "description": "This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the provisioning services in the subscription."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "GET"
        ],
        "description": "List all the provisioning services for a given subscription id.",
        "operationId": "IotDpsResource_ListBySubscription",
        "summary": "Get all the provisioning services in a subscription.",
        "x-ms-examples": {
          "DPSListBySubscription": {
            "$ref": "./examples/DPSListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group identifier.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningServiceDescriptionListResult"
                }
              }
            },
            "description": "List of provisioning services in the resource group."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "GET"
        ],
        "description": "Get a list of all provisioning services in the given resource group.",
        "operationId": "IotDpsResource_ListByResourceGroup",
        "x-ms-examples": {
          "DPSListByResourceGroup": {
            "$ref": "./examples/DPSListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}": {
      "delete": {
        "parameters": [
          {
            "description": "Name of provisioning service to delete.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group identifier.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state."
          },
          "202": {
            "description": "The provisioning service resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the provisioning service status directly, or query the operation resource."
          },
          "204": {
            "description": "Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the provisioning service metadata in the service and the status of the delete operation is set to a completed state."
          },
          "404": {
            "description": "After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the provisioning service metadata in the service."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "DELETE"
        ],
        "description": "Deletes the Provisioning Service.",
        "operationId": "IotDpsResource_Delete",
        "summary": "Delete the Provisioning Service",
        "x-ms-examples": {
          "DPSDelete": {
            "$ref": "./examples/DPSDelete.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "parameters": [
          {
            "description": "Name of the provisioning service to retrieve.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group name.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningServiceDescription"
                }
              }
            },
            "description": "Provisioning service description with no keys is included in the response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "tags": [
          "GET"
        ],
        "description": "Get the metadata of the provisioning service without SAS keys.",
        "operationId": "IotDpsResource_Get",
        "summary": "Get the non-security related metadata of the provisioning service.",
        "x-ms-examples": {
          "DPSGet": {
            "$ref": "./examples/DPSGet.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group identifier.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of provisioning service to create or update.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningServiceDescription"
                }
              }
            },
            "description": "Provisioning Service was successfully updated"
          }
        },
        "tags": [
          "PATCH"
        ],
        "description": "Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate method",
        "operationId": "IotDpsResource_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagsResource"
              }
            }
          },
          "description": "Updated tag information to set into the provisioning service instance.",
          "required": true
        },
        "summary": "Update an existing provisioning service's tags.",
        "x-ms-examples": {
          "DPSPatch": {
            "$ref": "./examples/DPSPatch.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group identifier.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of provisioning service to create or update.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningServiceDescription"
                }
              }
            },
            "description": "The body contains all the non-security properties of the provisioning service. Security-related properties are set to null."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningServiceDescription"
                }
              }
            },
            "description": "This is a long running operation. The operation returns a 201 if the validation is complete. The response includes an Azure-AsyncOperation header that contains a status URL. Clients are expected to poll the status URL for the status of the operation. If successful, the operation returns HTTP status code of 201 (OK)."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "PUT"
        ],
        "description": "Create or update the metadata of the provisioning service. The usual pattern to modify a property is to retrieve the provisioning service metadata and security metadata, and then combine them with the modified values in a new body to update the provisioning service.",
        "operationId": "IotDpsResource_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningServiceDescription"
              }
            }
          },
          "description": "Description of the provisioning service to create or update.",
          "required": true
        },
        "summary": "Create or update the metadata of the provisioning service.",
        "x-ms-examples": {
          "DPSCreate": {
            "$ref": "./examples/DPSCreate.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Name of resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of provisioning service to retrieve certificates for.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateListDescription"
                }
              }
            },
            "description": "List of certificate descriptions in a JSON-serialized array."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "GET"
        ],
        "description": "Get all the certificates tied to the provisioning service.",
        "operationId": "DpsCertificate_List",
        "x-ms-examples": {
          "DPSGetCertificates": {
            "$ref": "./examples/DPSGetCertificates.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group identifier.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ETag of the certificate",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the provisioning service.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by.",
            "in": "path",
            "name": "certificateName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is optional, and it is the Common Name of the certificate.",
            "in": "query",
            "name": "certificate.name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Raw data within the certificate.",
            "in": "query",
            "name": "certificate.rawBytes",
            "required": false,
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          {
            "description": "Indicates if certificate has been verified by owner of the private key.",
            "in": "query",
            "name": "certificate.isVerified",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "A description that mentions the purpose of the certificate.",
            "in": "query",
            "name": "certificate.purpose",
            "required": false,
            "schema": {
              "enum": [
                "clientAuthentication",
                "serverAuthentication"
              ],
              "type": "string"
            },
            "x-ms-enum": {
              "modelAsString": true,
              "name": "CertificatePurpose"
            }
          },
          {
            "description": "Time the certificate is created.",
            "in": "query",
            "name": "certificate.created",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Time the certificate is last updated.",
            "in": "query",
            "name": "certificate.lastUpdated",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Indicates if the certificate contains a private key.",
            "in": "query",
            "name": "certificate.hasPrivateKey",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Random number generated to indicate Proof of Possession.",
            "in": "query",
            "name": "certificate.nonce",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "204": {
            "description": "No content."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "DELETE"
        ],
        "description": "Deletes the specified certificate associated with the Provisioning Service",
        "operationId": "DpsCertificate_Delete",
        "summary": "Delete the Provisioning Service Certificate.",
        "x-ms-examples": {
          "DPSDeleteCertificate": {
            "$ref": "./examples/DPSDeleteCertificate.json"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "Name of the certificate to retrieve.",
            "in": "path",
            "name": "certificateName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group identifier.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the provisioning service the certificate is associated with.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ETag of the certificate.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              }
            },
            "description": "Metadata for the specified certificate."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "GET"
        ],
        "description": "Get the certificate from the provisioning service.",
        "operationId": "DpsCertificate_Get",
        "x-ms-examples": {
          "DPSGetCertificate": {
            "$ref": "./examples/DPSGetCertificate.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/api-version"
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group identifier.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the provisioning service.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the certificate create or update.",
            "in": "path",
            "name": "certificateName",
            "required": true,
            "schema": {
              "maxLength": 256,
              "type": "string"
            }
          },
          {
            "description": "ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              }
            },
            "description": "If certificate already exist and update was successful, the operation returns HTTP status code of 201 (OK)."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "PUT"
        ],
        "deprecated": false,
        "description": "Add new certificate or update an existing certificate.",
        "operationId": "DpsCertificate_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateBodyDescription"
              }
            }
          },
          "description": "The certificate body.",
          "required": true
        },
        "summary": "Upload the certificate to the provisioning service.",
        "x-ms-examples": {
          "DPSCreateOrUpdateCertificate": {
            "$ref": "./examples/DPSCertificateCreateOrUpdate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode": {
      "post": {
        "parameters": [
          {
            "description": "The mandatory logical name of the certificate, that the provisioning service uses to access.",
            "in": "path",
            "name": "certificateName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "name of resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of provisioning service.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Common Name for the certificate.",
            "in": "query",
            "name": "certificate.name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Raw data of certificate.",
            "in": "query",
            "name": "certificate.rawBytes",
            "required": false,
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          {
            "description": "Indicates if the certificate has been verified by owner of the private key.",
            "in": "query",
            "name": "certificate.isVerified",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Description mentioning the purpose of the certificate.",
            "in": "query",
            "name": "certificate.purpose",
            "required": false,
            "schema": {
              "enum": [
                "clientAuthentication",
                "serverAuthentication"
              ],
              "type": "string"
            },
            "x-ms-enum": {
              "modelAsString": true,
              "name": "CertificatePurpose"
            }
          },
          {
            "description": "Certificate creation time.",
            "in": "query",
            "name": "certificate.created",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Certificate last updated time.",
            "in": "query",
            "name": "certificate.lastUpdated",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Indicates if the certificate contains private key.",
            "in": "query",
            "name": "certificate.hasPrivateKey",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Random number generated to indicate Proof of Possession.",
            "in": "query",
            "name": "certificate.nonce",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationCodeResponse"
                }
              }
            },
            "description": "Generated verification code for that certificate is returned."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "POST"
        ],
        "description": "Generate verification code for Proof of Possession.",
        "operationId": "DpsCertificate_GenerateVerificationCode",
        "x-ms-examples": {
          "DPSGenerateVerificationCode": {
            "$ref": "./examples/DPSGenerateVerificationCode.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify": {
      "post": {
        "parameters": [
          {
            "description": "The mandatory logical name of the certificate, that the provisioning service uses to access.",
            "in": "path",
            "name": "certificateName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ETag of the certificate.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group name.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Provisioning service name.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Common Name for the certificate.",
            "in": "query",
            "name": "certificate.name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Raw data of certificate.",
            "in": "query",
            "name": "certificate.rawBytes",
            "required": false,
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          {
            "description": "Indicates if the certificate has been verified by owner of the private key.",
            "in": "query",
            "name": "certificate.isVerified",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Describe the purpose of the certificate.",
            "in": "query",
            "name": "certificate.purpose",
            "required": false,
            "schema": {
              "enum": [
                "clientAuthentication",
                "serverAuthentication"
              ],
              "type": "string"
            },
            "x-ms-enum": {
              "modelAsString": true,
              "name": "CertificatePurpose"
            }
          },
          {
            "description": "Certificate creation time.",
            "in": "query",
            "name": "certificate.created",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Certificate last updated time.",
            "in": "query",
            "name": "certificate.lastUpdated",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Indicates if the certificate contains private key.",
            "in": "query",
            "name": "certificate.hasPrivateKey",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Random number generated to indicate Proof of Possession.",
            "in": "query",
            "name": "certificate.nonce",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "POST"
        ],
        "description": "Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.",
        "operationId": "DpsCertificate_VerifyCertificate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationCodeRequest"
              }
            }
          },
          "description": "The name of the certificate",
          "required": true
        },
        "summary": "Verify certificate's private key possession.",
        "x-ms-examples": {
          "DPSVerifyCertificate": {
            "$ref": "./examples/DPSVerifyCertificate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys": {
      "post": {
        "parameters": [
          {
            "description": "Name of the provisioning service.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Logical key name to get key-values for.",
            "in": "path",
            "name": "keyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "The name of the resource group that contains the provisioning service.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedAccessSignatureAuthorizationRule_AccessRightsDescription_"
                }
              }
            },
            "description": "This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more provisioning service endpoints."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "POST"
        ],
        "description": "List primary and secondary keys for a specific key name",
        "operationId": "IotDpsResource_ListKeysForKeyName",
        "summary": "Get a shared access policy by name from a provisioning service.",
        "x-ms-examples": {
          "DPSGetKey": {
            "$ref": "./examples/DPSGetKey.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys": {
      "post": {
        "parameters": [
          {
            "description": "The provisioning service name to get the shared access keys for.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "resource group name",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedAccessSignatureAuthorizationRuleListResult"
                }
              }
            },
            "description": "This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the provisioning service endpoints."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "POST"
        ],
        "description": "List the primary and secondary keys for a provisioning service.",
        "operationId": "IotDpsResource_ListKeys",
        "summary": "Get the security metadata for a provisioning service.",
        "x-ms-examples": {
          "DPSListKeys": {
            "$ref": "./examples/DPSListKeys.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}": {
      "get": {
        "parameters": [
          {
            "description": "Operation id corresponding to long running operation. Use this to poll for the status.",
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Resource group identifier.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of provisioning service that the operation is running on.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Async header used to poll on the status of the operation, obtained while creating the long running operation.",
            "in": "query",
            "name": "asyncinfo",
            "required": true,
            "schema": {
              "default": "true",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResult"
                }
              }
            },
            "description": "The status of the long running operation."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "GET"
        ],
        "description": "Gets the status of a long running operation, such as create, update or delete a provisioning service.",
        "operationId": "IotDpsResource_GetOperationResult",
        "x-ms-examples": {
          "DPSGetOperationResult": {
            "$ref": "./examples/DPSGetOperationResult.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus": {
      "get": {
        "parameters": [
          {
            "description": "Name of provisioning service.",
            "in": "path",
            "name": "provisioningServiceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          },
          {
            "description": "Name of resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IotDpsSkuDefinitionListResult"
                }
              }
            },
            "description": "This is a synchronous operation. The body contains a JSON-serialized array of the valid SKUs for this provisioning service."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            },
            "description": "Default error response."
          }
        },
        "tags": [
          "GET"
        ],
        "description": "Gets the list of valid SKUs and tiers for a provisioning service.",
        "operationId": "IotDpsResource_listValidSkus",
        "summary": "Get the list of valid SKUs for a provisioning service.",
        "x-ms-examples": {
          "DPSGetValidSku": {
            "$ref": "./examples/DPSGetValidSku.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "components": {
    "parameters": {
      "api-version": {
        "description": "The version of the API.",
        "in": "query",
        "name": "api-version",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "subscriptionId": {
        "description": "The subscription identifier.",
        "in": "path",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "AsyncOperationResult": {
        "description": "Result of a long running operation.",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorMesssage",
            "description": "Error message containing code, description and details"
          },
          "status": {
            "description": "current status of a long running operation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateBodyDescription": {
        "description": "The JSON-serialized X509 Certificate.",
        "properties": {
          "certificate": {
            "description": "Base-64 representation of the X509 leaf certificate .cer file or just .pem file content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateListDescription": {
        "description": "The JSON-serialized array of Certificate objects.",
        "properties": {
          "value": {
            "description": "The array of Certificate objects.",
            "items": {
              "$ref": "#/components/schemas/CertificateResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateProperties": {
        "description": "The description of an X509 CA Certificate.",
        "properties": {
          "created": {
            "description": "The certificate's creation date and time.",
            "format": "date-time-rfc1123",
            "readOnly": true,
            "type": "string"
          },
          "expiry": {
            "description": "The certificate's expiration date and time.",
            "format": "date-time-rfc1123",
            "readOnly": true,
            "type": "string"
          },
          "isVerified": {
            "description": "Determines whether certificate has been verified.",
            "readOnly": true,
            "type": "boolean"
          },
          "subject": {
            "description": "The certificate's subject name.",
            "readOnly": true,
            "type": "string"
          },
          "thumbprint": {
            "description": "The certificate's thumbprint.",
            "readOnly": true,
            "type": "string"
          },
          "updated": {
            "description": "The certificate's last update date and time.",
            "format": "date-time-rfc1123",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateResponse": {
        "description": "The X509 Certificate.",
        "properties": {
          "etag": {
            "description": "The entity tag.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The resource identifier.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the certificate.",
            "readOnly": true,
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/CertificateProperties",
            "description": "properties of a certificate"
          },
          "type": {
            "description": "The resource type.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      },
      "ErrorDetails": {
        "description": "Error details.",
        "properties": {
          "code": {
            "description": "The error code.",
            "readOnly": true,
            "type": "string"
          },
          "details": {
            "description": "The error details.",
            "readOnly": true,
            "type": "string"
          },
          "httpStatusCode": {
            "description": "The HTTP status code.",
            "readOnly": true,
            "type": "string"
          },
          "message": {
            "description": "The error message.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorMesssage": {
        "description": "Error response containing message and code.",
        "properties": {
          "code": {
            "description": "standard error code",
            "type": "string"
          },
          "details": {
            "description": "detailed summary of error",
            "type": "string"
          },
          "message": {
            "description": "standard error description",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IotDpsPropertiesDescription": {
        "description": "the service specific properties of a provisioning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope",
        "properties": {
          "allocationPolicy": {
            "description": "Allocation policy to be used by this provisioning service.",
            "enum": [
              "Hashed",
              "GeoLatency",
              "Static"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "AllocationPolicy"
            }
          },
          "authorizationPolicies": {
            "description": "List of authorization keys for a provisioning service.",
            "items": {
              "$ref": "#/components/schemas/SharedAccessSignatureAuthorizationRule_AccessRightsDescription_"
            },
            "type": "array"
          },
          "deviceProvisioningHostName": {
            "description": "Device endpoint for this provisioning service.",
            "readOnly": true,
            "type": "string"
          },
          "idScope": {
            "description": "Unique identifier of this provisioning service.",
            "readOnly": true,
            "type": "string"
          },
          "iotHubs": {
            "description": "List of IoT hubs associated with this provisioning service.",
            "items": {
              "$ref": "#/components/schemas/IotHubDefinitionDescription"
            },
            "type": "array"
          },
          "provisioningState": {
            "description": "The ARM provisioning state of the provisioning service.",
            "type": "string"
          },
          "serviceOperationsHostName": {
            "description": "Service endpoint for provisioning service.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Current state of the provisioning service.",
            "enum": [
              "Activating",
              "Active",
              "Deleting",
              "Deleted",
              "ActivationFailed",
              "DeletionFailed",
              "Transitioning",
              "Suspending",
              "Suspended",
              "Resuming",
              "FailingOver",
              "FailoverFailed"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "state"
            }
          }
        },
        "type": "object"
      },
      "IotDpsSkuDefinition": {
        "description": "Available SKUs of tier and units.",
        "properties": {
          "name": {
            "description": "Sku name.",
            "enum": [
              "S1"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "IotDpsSku"
            }
          }
        },
        "type": "object"
      },
      "IotDpsSkuDefinitionListResult": {
        "description": "List of available SKUs.",
        "properties": {
          "nextLink": {
            "description": "The next link.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "The list of SKUs",
            "items": {
              "$ref": "#/components/schemas/IotDpsSkuDefinition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IotDpsSkuInfo": {
        "description": "List of possible provisioning service SKUs.",
        "properties": {
          "capacity": {
            "description": "The number of units to provision",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "Sku name.",
            "enum": [
              "S1"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "IotDpsSku"
            }
          },
          "tier": {
            "description": "Pricing tier name of the provisioning service.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IotHubDefinitionDescription": {
        "description": "Description of the IoT hub.",
        "properties": {
          "allocationWeight": {
            "description": "weight to apply for a given iot h.",
            "format": "int32",
            "type": "integer"
          },
          "applyAllocationPolicy": {
            "description": "flag for applying allocationPolicy or not for a given iot hub.",
            "type": "boolean"
          },
          "connectionString": {
            "description": "Connection string og the IoT hub.",
            "type": "string"
          },
          "location": {
            "description": "ARM region of the IoT hub.",
            "type": "string"
          },
          "name": {
            "description": "Host name of the IoT hub.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "connectionString",
          "location"
        ],
        "type": "object"
      },
      "NameAvailabilityInfo": {
        "description": "Description of name availability.",
        "properties": {
          "message": {
            "description": "message containing a detailed reason name is unavailable",
            "type": "string"
          },
          "nameAvailable": {
            "description": "specifies if a name is available or not",
            "type": "boolean"
          },
          "reason": {
            "description": "specifies the reason a name is unavailable",
            "enum": [
              "Invalid",
              "AlreadyExists"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "NameUnavailabilityReason"
            }
          }
        },
        "type": "object"
      },
      "Operation": {
        "description": "IoT Hub REST API operation.",
        "properties": {
          "display": {
            "description": "The object that represents the operation.",
            "properties": {
              "operation": {
                "description": "Name of the operation.",
                "readOnly": true,
                "type": "string"
              },
              "provider": {
                "description": "Service provider: Microsoft Devices.",
                "readOnly": true,
                "type": "string"
              },
              "resource": {
                "description": "Resource Type: ProvisioningServices.",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "Operation name: {provider}/{resource}/{read | write | action | delete}",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OperationInputs": {
        "description": "Input values for operation results call.",
        "properties": {
          "name": {
            "description": "The name of the Provisioning Service to check.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "OperationListResult": {
        "description": "Result of the request to list IoT Hub operations. It contains a list of operations and a URL link to get the next set of results.",
        "properties": {
          "nextLink": {
            "description": "URL to get the next set of operation list results if there are any.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "List of IoT Hub operations supported by the Microsoft.Devices resource provider.",
            "items": {
              "$ref": "#/components/schemas/Operation"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProvisioningServiceDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          }
        ],
        "description": "The description of the provisioning service.",
        "properties": {
          "etag": {
            "description": "The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/IotDpsPropertiesDescription",
            "description": "Service specific properties for a provisioning service"
          },
          "sku": {
            "$ref": "#/components/schemas/IotDpsSkuInfo",
            "description": "Sku info for a provisioning Service."
          }
        },
        "required": [
          "sku",
          "properties"
        ],
        "type": "object"
      },
      "ProvisioningServiceDescriptionListResult": {
        "description": "List of provisioning service descriptions.",
        "properties": {
          "nextLink": {
            "description": "the next link",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "List of provisioning service descriptions.",
            "items": {
              "$ref": "#/components/schemas/ProvisioningServiceDescription"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Resource": {
        "description": "The common properties of an Azure resource.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The resource tags.",
            "type": "object"
          },
          "id": {
            "description": "The resource identifier.",
            "readOnly": true,
            "type": "string"
          },
          "location": {
            "description": "The resource location.",
            "type": "string"
          },
          "name": {
            "description": "The resource name.",
            "pattern": "^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The resource type.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "location"
        ],
        "type": "object",
        "x-ms-azure-resource": true
      },
      "SharedAccessSignatureAuthorizationRuleListResult": {
        "description": "List of shared access keys.",
        "properties": {
          "nextLink": {
            "description": "The next link.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "The list of shared access policies.",
            "items": {
              "$ref": "#/components/schemas/SharedAccessSignatureAuthorizationRule_AccessRightsDescription_"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SharedAccessSignatureAuthorizationRule_AccessRightsDescription_": {
        "description": "Description of the shared access key.",
        "properties": {
          "keyName": {
            "description": "Name of the key.",
            "type": "string"
          },
          "primaryKey": {
            "description": "Primary SAS key value.",
            "type": "string"
          },
          "rights": {
            "description": "Rights that this key has.",
            "enum": [
              "ServiceConfig",
              "EnrollmentRead",
              "EnrollmentWrite",
              "DeviceConnect",
              "RegistrationStatusRead",
              "RegistrationStatusWrite"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "AccessRightsDescription"
            }
          },
          "secondaryKey": {
            "description": "Secondary SAS key value.",
            "type": "string"
          }
        },
        "required": [
          "keyName",
          "rights"
        ],
        "type": "object"
      },
      "TagsResource": {
        "description": "A container holding only the Tags for a resource, allowing the user to update the tags on a Provisioning Service instance.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource tags"
          }
        },
        "type": "object"
      },
      "VerificationCodeRequest": {
        "description": "The JSON-serialized leaf certificate",
        "properties": {
          "certificate": {
            "description": "base-64 representation of X509 certificate .cer file or just .pem file content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VerificationCodeResponse": {
        "description": "Description of the response of the verification code.",
        "properties": {
          "etag": {
            "description": "Request etag.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "The resource identifier.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of certificate.",
            "readOnly": true,
            "type": "string"
          },
          "properties": {
            "properties": {
              "created": {
                "description": "Certificate created time.",
                "type": "string"
              },
              "expiry": {
                "description": "Code expiry.",
                "type": "string"
              },
              "isVerified": {
                "description": "Indicate if the certificate is verified by owner of private key.",
                "type": "boolean"
              },
              "subject": {
                "description": "Certificate subject.",
                "type": "string"
              },
              "thumbprint": {
                "description": "Certificate thumbprint.",
                "type": "string"
              },
              "updated": {
                "description": "Certificate updated time.",
                "type": "string"
              },
              "verificationCode": {
                "description": "Verification code.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "The resource type.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-ms-azure-resource": true
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow.",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}