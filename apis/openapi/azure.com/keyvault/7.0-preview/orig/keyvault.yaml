openapi: 3.0.0
info:
  description: >-
    The key vault client performs cryptographic key operations and vault
    operations against the Key Vault service.
  title: KeyVaultClient
  version: 7.0-preview
servers:
  - url: '{vaultBaseUrl}'
    variables:
      vaultBaseUrl:
        default: ''
        description: 'The vault name, for example https://myvault.vault.azure.net.'
        x-ms-skip-url-encoding: true
paths:
  /certificates:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - description: >-
            Specifies whether to include certificates which are not completely
            provisioned.
          in: query
          name: includePending
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateListResult'
          description: >-
            A response message containing a list of certificates along with a
            link to the next page of certificates.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The GetCertificates operation returns the set of certificates resources
        in the specified key vault. This operation requires the
        certificates/list permission.
      operationId: GetCertificates
      summary: List certificates in a specified key vault
      x-ms-examples:
        GetCertificates:
          $ref: ./examples/GetCertificates-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  /certificates/contacts:
    delete:
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
          description: The contacts for the key vault certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Deletes the certificate contacts for a specified key vault certificate.
        This operation requires the certificates/managecontacts permission.
      operationId: DeleteCertificateContacts
      summary: Deletes the certificate contacts for a specified key vault.
      x-ms-examples:
        DeleteCertificateContacts:
          $ref: ./examples/DeleteCertificateContacts-example.json
    get:
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
          description: The contacts for the key vault certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The GetCertificateContacts operation returns the set of certificate
        contact resources in the specified key vault. This operation requires
        the certificates/managecontacts permission.
      operationId: GetCertificateContacts
      summary: Lists the certificate contacts for a specified key vault.
      x-ms-examples:
        GetCertificateContacts:
          $ref: ./examples/GetCertificateContacts-example.json
    put:
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
          description: The contacts for the key vault certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Sets the certificate contacts for the specified key vault. This
        operation requires the certificates/managecontacts permission.
      operationId: SetCertificateContacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contacts'
        description: The contacts for the key vault certificate.
        required: true
      summary: Sets the certificate contacts for the specified key vault.
      x-ms-examples:
        SetCertificateContacts:
          $ref: ./examples/SetCertificateContacts-example.json
  /certificates/issuers:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateIssuerListResult'
          description: >-
            A response message containing a list of certificate issuers in a key
            vault along with a link to the next page of certificate issuers.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The GetCertificateIssuers operation returns the set of certificate
        issuer resources in the specified key vault. This operation requires the
        certificates/manageissuers/getissuers permission.
      operationId: GetCertificateIssuers
      summary: List certificate issuers for a specified key vault.
      x-ms-examples:
        GetCertificateIssuers:
          $ref: ./examples/GetCertificateIssuers-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/certificates/issuers/{issuer-name}':
    delete:
      parameters:
        - description: The name of the issuer.
          in: path
          name: issuer-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerBundle'
          description: The issuer for the key vault certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The DeleteCertificateIssuer operation permanently removes the specified
        certificate issuer from the vault. This operation requires the
        certificates/manageissuers/deleteissuers permission.
      operationId: DeleteCertificateIssuer
      summary: Deletes the specified certificate issuer.
      x-ms-examples:
        DeleteCertificateIssuer:
          $ref: ./examples/DeleteCertificateIssuer-example.json
    get:
      parameters:
        - description: The name of the issuer.
          in: path
          name: issuer-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerBundle'
          description: The issuer for the key vault certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The GetCertificateIssuer operation returns the specified certificate
        issuer resources in the specified key vault. This operation requires the
        certificates/manageissuers/getissuers permission.
      operationId: GetCertificateIssuer
      summary: Lists the specified certificate issuer.
      x-ms-examples:
        GetCertificateIssuer:
          $ref: ./examples/GetCertificateIssuer-example.json
    patch:
      parameters:
        - description: The name of the issuer.
          in: path
          name: issuer-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerBundle'
          description: The issuer for the key vault certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The UpdateCertificateIssuer operation performs an update on the
        specified certificate issuer entity. This operation requires the
        certificates/setissuers permission.
      operationId: UpdateCertificateIssuer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateIssuerUpdateParameters'
        description: Certificate issuer update parameter.
        required: true
      summary: Updates the specified certificate issuer.
      x-ms-examples:
        UpdateCertificateIssuer:
          $ref: ./examples/UpdateCertificateIssuer-example.json
    put:
      parameters:
        - description: The name of the issuer.
          in: path
          name: issuer-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerBundle'
          description: The issuer for the key vault certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The SetCertificateIssuer operation adds or updates the specified
        certificate issuer. This operation requires the certificates/setissuers
        permission.
      operationId: SetCertificateIssuer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateIssuerSetParameters'
        description: Certificate issuer set parameter.
        required: true
      summary: Sets the specified certificate issuer.
      x-ms-examples:
        SetCertificateIssuer:
          $ref: ./examples/SetCertificateIssuer-example.json
  /certificates/restore:
    post:
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateBundle'
          description: Restored certificate bundle in the vault.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Restores a backed up certificate, and all its versions, to a vault. This
        operation requires the certificates/restore permission.
      operationId: RestoreCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateRestoreParameters'
        description: The parameters to restore the certificate.
        required: true
      summary: Restores a backed up certificate to a vault.
      x-ms-examples:
        RestoreCertificate:
          $ref: ./examples/RestoreCertificate-example.json
  '/certificates/{certificate-name}':
    delete:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedCertificateBundle'
          description: The deleted certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Deletes all versions of a certificate object along with its associated
        policy. Delete certificate cannot be used to remove individual versions
        of a certificate object. This operation requires the certificates/delete
        permission.
      operationId: DeleteCertificate
      summary: Deletes a certificate from a specified key vault.
      x-ms-examples:
        DeleteCertificate:
          $ref: ./examples/DeleteCertificate-example.json
  '/certificates/{certificate-name}/backup':
    post:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupCertificateResult'
          description: The backup blob containing the backed up certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Requests that a backup of the specified certificate be downloaded to the
        client. All versions of the certificate will be downloaded. This
        operation requires the certificates/backup permission.
      operationId: BackupCertificate
      summary: Backs up the specified certificate.
      x-ms-examples:
        BackupCertificate:
          $ref: ./examples/BackupCertificate-example.json
  '/certificates/{certificate-name}/create':
    post:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z-]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateOperation'
          description: Created certificate bundle.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        If this is the first version, the certificate resource is created. This
        operation requires the certificates/create permission.
      operationId: CreateCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateCreateParameters'
        description: The parameters to create a certificate.
        required: true
      summary: Creates a new certificate.
      x-ms-examples:
        CreateCertificate:
          $ref: ./examples/CreateCertificate-example.json
  '/certificates/{certificate-name}/import':
    post:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z-]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateBundle'
          description: Imported certificate bundle to the vault.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Imports an existing valid certificate, containing a private key, into
        Azure Key Vault. The certificate to be imported can be in either PFX or
        PEM format. If the certificate is in PEM format the PEM file must
        contain the key as well as x509 certificates. This operation requires
        the certificates/import permission.
      operationId: ImportCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateImportParameters'
        description: The parameters to import the certificate.
        required: true
      summary: Imports a certificate into a specified key vault.
      x-ms-examples:
        ImportCertificate:
          $ref: ./examples/ImportCertificate-example.json
  '/certificates/{certificate-name}/pending':
    delete:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateOperation'
          description: A message containing the certificate operation response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Deletes the creation operation for a specified certificate that is in
        the process of being created. The certificate is no longer created. This
        operation requires the certificates/update permission.
      operationId: DeleteCertificateOperation
      summary: Deletes the creation operation for a specific certificate.
      x-ms-examples:
        DeleteCertificateOperation:
          $ref: ./examples/DeleteCertificateOperation-example.json
    get:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateOperation'
          description: The certificate operation response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Gets the creation operation associated with a specified certificate.
        This operation requires the certificates/get permission.
      operationId: GetCertificateOperation
      summary: Gets the creation operation of a certificate.
      x-ms-examples:
        GetCertificateOperation:
          $ref: ./examples/GetCertificateOperation-example.json
    patch:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateOperation'
          description: A message containing the certificate operation response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Updates a certificate creation operation that is already in progress.
        This operation requires the certificates/update permission.
      operationId: UpdateCertificateOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateOperationUpdateParameter'
        description: The certificate operation response.
        required: true
      summary: Updates a certificate operation.
      x-ms-examples:
        UpdateCertificateOperation:
          $ref: ./examples/UpdateCertificateOperation-example.json
  '/certificates/{certificate-name}/pending/merge':
    post:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateBundle'
          description: Merged certificate bundle to the vault.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The MergeCertificate operation performs the merging of a certificate or
        certificate chain with a key pair currently available in the service.
        This operation requires the certificates/create permission.
      operationId: MergeCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateMergeParameters'
        description: The parameters to merge certificate.
        required: true
      summary: >-
        Merges a certificate or a certificate chain with a key pair existing on
        the server.
      x-ms-examples:
        MergeCertificate:
          $ref: ./examples/MergeCertificate-example.json
  '/certificates/{certificate-name}/policy':
    get:
      parameters:
        - description: The name of the certificate in a given key vault.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatePolicy'
          description: The certificate policy.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The GetCertificatePolicy operation returns the specified certificate
        policy resources in the specified key vault. This operation requires the
        certificates/get permission.
      operationId: GetCertificatePolicy
      summary: Lists the policy for a certificate.
      x-ms-examples:
        GetCertificatePolicy:
          $ref: ./examples/GetCertificatePolicy-example.json
    patch:
      parameters:
        - description: The name of the certificate in the given vault.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatePolicy'
          description: The certificate policy
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Set specified members in the certificate policy. Leave others as null.
        This operation requires the certificates/update permission.
      operationId: UpdateCertificatePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificatePolicy'
        description: The policy for the certificate.
        required: true
      summary: Updates the policy for a certificate.
      x-ms-examples:
        UpdateCertificatePolicy:
          $ref: ./examples/UpdateCertificatePolicy-example.json
  '/certificates/{certificate-name}/versions':
    get:
      parameters:
        - description: The name of the certificate.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateListResult'
          description: >-
            A response message containing a list of certificates in the key
            vault along with a link to the next page of keys.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The GetCertificateVersions operation returns the versions of a
        certificate in the specified key vault. This operation requires the
        certificates/list permission.
      operationId: GetCertificateVersions
      summary: List the versions of a certificate.
      x-ms-examples:
        GetCertificateVersions:
          $ref: ./examples/GetCertificateVersions-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/certificates/{certificate-name}/{certificate-version}':
    get:
      parameters:
        - description: The name of the certificate in the given vault.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - description: The version of the certificate.
          in: path
          name: certificate-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateBundle'
          description: The retrieved certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        Gets information about a specific certificate. This operation requires
        the certificates/get permission.
      operationId: GetCertificate
      summary: Gets information about a certificate.
      x-ms-examples:
        GetCertificate:
          $ref: ./examples/GetCertificate-example.json
    patch:
      parameters:
        - description: The name of the certificate in the given key vault.
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - description: The version of the certificate.
          in: path
          name: certificate-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateBundle'
          description: The updated certificate.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Certificates
      description: >-
        The UpdateCertificate operation applies the specified update on the
        given certificate; the only elements updated are the certificate's
        attributes. This operation requires the certificates/update permission.
      operationId: UpdateCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateUpdateParameters'
        description: The parameters for certificate update.
        required: true
      summary: Updates the specified attributes associated with the given certificate.
      x-ms-examples:
        UpdateCertificate:
          $ref: ./examples/UpdateCertificate-example.json
  /deletedcertificates:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - description: >-
            Specifies whether to include certificates which are not completely
            provisioned.
          in: query
          name: includePending
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedCertificateListResult'
          description: >-
            A response message containing a list of deleted certificates in the
            vault along with a link to the next page of deleted certificates
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedCertificates
      description: >-
        The GetDeletedCertificates operation retrieves the certificates in the
        current vault which are in a deleted state and ready for recovery or
        purging. This operation includes deletion-specific information. This
        operation requires the certificates/get/list permission. This operation
        can only be enabled on soft-delete enabled vaults.
      operationId: GetDeletedCertificates
      summary: >-
        Lists the deleted certificates in the specified vault currently
        available for recovery.
      x-ms-examples:
        GetDeletedCertificates:
          $ref: ./examples/GetDeletedCertificates-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/deletedcertificates/{certificate-name}':
    delete:
      parameters:
        - description: The name of the certificate
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '204':
          description: No content signaling that the certificate was purged forever.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedCertificates
      description: >-
        The PurgeDeletedCertificate operation performs an irreversible deletion
        of the specified certificate, without possibility for recovery. The
        operation is not available if the recovery level does not specify
        'Purgeable'. This operation requires the certificate/purge permission.
      operationId: PurgeDeletedCertificate
      summary: Permanently deletes the specified deleted certificate.
      x-ms-examples:
        PurgeDeletedCertificate:
          $ref: ./examples/PurgeDeletedCertificate-example.json
    get:
      parameters:
        - description: The name of the certificate
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedCertificateBundle'
          description: A Certificate bundle of the certificate and its attributes
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedCertificates
      description: >-
        The GetDeletedCertificate operation retrieves the deleted certificate
        information plus its attributes, such as retention interval, scheduled
        permanent deletion and the current deletion recovery level. This
        operation requires the certificates/get permission.
      operationId: GetDeletedCertificate
      summary: Retrieves information about the specified deleted certificate.
      x-ms-examples:
        GetDeletedCertificate:
          $ref: ./examples/GetDeletedCertificate-example.json
  '/deletedcertificates/{certificate-name}/recover':
    post:
      parameters:
        - description: The name of the deleted certificate
          in: path
          name: certificate-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateBundle'
          description: A Certificate bundle of the original certificate and its attributes
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedCertificates
      description: >-
        The RecoverDeletedCertificate operation performs the reversal of the
        Delete operation. The operation is applicable in vaults enabled for
        soft-delete, and must be issued during the retention interval (available
        in the deleted certificate's attributes). This operation requires the
        certificates/recover permission.
      operationId: RecoverDeletedCertificate
      summary: >-
        Recovers the deleted certificate back to its current version under
        /certificates.
      x-ms-examples:
        RecoverDeletedCertificate:
          $ref: ./examples/RecoverDeletedCertificate-example.json
  /deletedkeys:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedKeyListResult'
          description: >-
            A response message containing a list of deleted keys in the vault
            along with a link to the next page of deleted keys.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedKeys
      description: >-
        Retrieves a list of the keys in the Key Vault as JSON Web Key structures
        that contain the public part of a deleted key. This operation includes
        deletion-specific information. The Get Deleted Keys operation is
        applicable for vaults enabled for soft-delete. While the operation can
        be invoked on any vault, it will return an error if invoked on a non
        soft-delete enabled vault. This operation requires the keys/list
        permission.
      operationId: GetDeletedKeys
      summary: Lists the deleted keys in the specified vault.
      x-ms-examples:
        GetDeletedKeys:
          $ref: ./examples/GetDeletedKeys-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/deletedkeys/{key-name}':
    delete:
      parameters:
        - description: The name of the key
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '204':
          description: 'No content, signaling that the key was permanently purged.'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedKeys
      description: >-
        The Purge Deleted Key operation is applicable for soft-delete enabled
        vaults. While the operation can be invoked on any vault, it will return
        an error if invoked on a non soft-delete enabled vault. This operation
        requires the keys/purge permission.
      operationId: PurgeDeletedKey
      summary: Permanently deletes the specified key.
      x-ms-examples:
        PurgeDeletedKey:
          $ref: ./examples/PurgeDeletedKey-example.json
    get:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedKeyBundle'
          description: >-
            A DeletedKeyBundle consisting of a WebKey plus its Attributes and
            deletion information.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedKeys
      description: >-
        The Get Deleted Key operation is applicable for soft-delete enabled
        vaults. While the operation can be invoked on any vault, it will return
        an error if invoked on a non soft-delete enabled vault. This operation
        requires the keys/get permission. 
      operationId: GetDeletedKey
      summary: Gets the public part of a deleted key.
      x-ms-examples:
        GetDeletedKey:
          $ref: ./examples/GetDeletedKey-example.json
  '/deletedkeys/{key-name}/recover':
    post:
      parameters:
        - description: The name of the deleted key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyBundle'
          description: A Key bundle of the original key and its attributes
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedKeys
      description: >-
        The Recover Deleted Key operation is applicable for deleted keys in
        soft-delete enabled vaults. It recovers the deleted key back to its
        latest version under /keys. An attempt to recover an non-deleted key
        will return an error. Consider this the inverse of the delete operation
        on soft-delete enabled vaults. This operation requires the keys/recover
        permission.
      operationId: RecoverDeletedKey
      summary: Recovers the deleted key to its latest version.
      x-ms-examples:
        RecoverDeletedKey:
          $ref: ./examples/RecoverDeletedKey-example.json
  /deletedsecrets:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedSecretListResult'
          description: >-
            A response message containing a list of deleted secrets in the
            vault, along with a link to the next page of deleted secrets.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedSecrets
      description: >-
        The Get Deleted Secrets operation returns the secrets that have been
        deleted for a vault enabled for soft-delete. This operation requires the
        secrets/list permission.
      operationId: GetDeletedSecrets
      summary: Lists deleted secrets for the specified vault.
      x-ms-examples:
        GetDeletedSecrets:
          $ref: ./examples/GetDeletedSecrets-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/deletedsecrets/{secret-name}':
    delete:
      parameters:
        - description: The name of the secret.
          in: path
          name: secret-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '204':
          description: No content signaling that the secret was purged forever.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedSecrets
      description: >-
        The purge deleted secret operation removes the secret permanently,
        without the possibility of recovery. This operation can only be enabled
        on a soft-delete enabled vault. This operation requires the
        secrets/purge permission.
      operationId: PurgeDeletedSecret
      summary: Permanently deletes the specified secret.
      x-ms-examples:
        PurgeDeletedSecret:
          $ref: ./examples/PurgeDeletedSecret-example.json
    get:
      parameters:
        - description: The name of the secret.
          in: path
          name: secret-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedSecretBundle'
          description: A secret bundle of the secret and its attributes.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedSecrets
      description: >-
        The Get Deleted Secret operation returns the specified deleted secret
        along with its attributes. This operation requires the secrets/get
        permission.
      operationId: GetDeletedSecret
      summary: Gets the specified deleted secret.
      x-ms-examples:
        GetDeletedSecret:
          $ref: ./examples/GetDeletedSecret-example.json
  '/deletedsecrets/{secret-name}/recover':
    post:
      parameters:
        - description: The name of the deleted secret.
          in: path
          name: secret-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretBundle'
          description: A Secret bundle of the original secret and its attributes.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedSecrets
      description: >-
        Recovers the deleted secret in the specified vault. This operation can
        only be performed on a soft-delete enabled vault. This operation
        requires the secrets/recover permission.
      operationId: RecoverDeletedSecret
      summary: Recovers the deleted secret to the latest version.
      x-ms-examples:
        RecoverDeletedSecret:
          $ref: ./examples/RecoverDeletedSecret-example.json
  /deletedstorage:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedStorageListResult'
          description: >-
            A response message containing a list of deleted storage accounts in
            the vault, along with a link to the next page of deleted storage
            accounts.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedStorage
      description: >-
        The Get Deleted Storage Accounts operation returns the storage accounts
        that have been deleted for a vault enabled for soft-delete. This
        operation requires the storage/list permission.
      operationId: GetDeletedStorageAccounts
      summary: Lists deleted storage accounts for the specified vault.
      x-ms-examples:
        List Deleted Storage Accounts:
          $ref: ./examples/listDeletedStorageAccount.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/deletedstorage/{storage-account-name}':
    delete:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '204':
          description: No content signaling that the storage account was purged forever.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedStorage
      description: >-
        The purge deleted storage account operation removes the secret
        permanently, without the possibility of recovery. This operation can
        only be performed on a soft-delete enabled vault. This operation
        requires the storage/purge permission.
      operationId: PurgeDeletedStorageAccount
      summary: Permanently deletes the specified storage account.
      x-ms-examples:
        Purge Deleted Storage Account:
          $ref: ./examples/purgeStorageAccount.json
    get:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedStorageBundle'
          description: >-
            The deleted storage account and information on when it will be
            purged, and how to recover the deleted storage account.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedStorage
      description: >-
        The Get Deleted Storage Account operation returns the specified deleted
        storage account along with its attributes. This operation requires the
        storage/get permission.
      operationId: GetDeletedStorageAccount
      summary: Gets the specified deleted storage account.
      x-ms-examples:
        Get Deleted Storage:
          $ref: ./examples/getDeletedStorageAccount.json
  '/deletedstorage/{storage-account-name}/recover':
    post:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBundle'
          description: A storage bundle of the original storage account and its attributes.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedStorage
      description: >-
        Recovers the deleted storage account in the specified vault. This
        operation can only be performed on a soft-delete enabled vault. This
        operation requires the storage/recover permission.
      operationId: RecoverDeletedStorageAccount
      summary: Recovers the deleted storage account.
      x-ms-examples:
        Recover Deleted Storage Account:
          $ref: ./examples/recoverStorageAccount.json
  '/deletedstorage/{storage-account-name}/sas':
    get:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedSasDefinitionListResult'
          description: >-
            A response message containing a list of deleted SAS definitions for
            the storage account, along with a link to the next page of deleted
            SAS definitions.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedStorage
      description: >-
        The Get Deleted Sas Definitions operation returns the SAS definitions
        that have been deleted for a vault enabled for soft-delete. This
        operation requires the storage/listsas permission.
      operationId: GetDeletedSasDefinitions
      summary: >-
        Lists deleted SAS definitions for the specified vault and storage
        account.
      x-ms-examples:
        List Deleted Storage Sas Definitions:
          $ref: ./examples/listDeletedStorageSasDefinition.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/deletedstorage/{storage-account-name}/sas/{sas-definition-name}':
    get:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - description: The name of the SAS definition.
          in: path
          name: sas-definition-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedSasDefinitionBundle'
          description: >-
            The deleted SAS definition and information on when the it will be
            purged, and how to recover the deleted SAS definition.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedStorage
      description: >-
        The Get Deleted SAS Definition operation returns the specified deleted
        SAS definition along with its attributes. This operation requires the
        storage/getsas permission.
      operationId: GetDeletedSasDefinition
      summary: Gets the specified deleted sas definition.
      x-ms-examples:
        Get Deleted Storage Sas Definition:
          $ref: ./examples/getDeletedStorageSasDefinition.json
  '/deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover':
    post:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - description: The name of the SAS definition.
          in: path
          name: sas-definition-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SasDefinitionBundle'
          description: >-
            A SAS definition bundle of the original SAS definition and its
            attributes.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - DeletedStorage
      description: >-
        Recovers the deleted SAS definition for the specified storage account.
        This operation can only be performed on a soft-delete enabled vault.
        This operation requires the storage/recover permission.
      operationId: RecoverDeletedSasDefinition
      summary: Recovers the deleted SAS definition.
      x-ms-examples:
        Recover Deleted Storage Sas Definition:
          $ref: ./examples/recoverStorageSasDefinition.json
  /keys:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyListResult'
          description: >-
            A response message containing a list of keys in the vault along with
            a link to the next page of keys.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        Retrieves a list of the keys in the Key Vault as JSON Web Key structures
        that contain the public part of a stored key. The LIST operation is
        applicable to all key types, however only the base key identifier,
        attributes, and tags are provided in the response. Individual versions
        of a key are not listed in the response. This operation requires the
        keys/list permission.
      operationId: GetKeys
      summary: List keys in the specified vault.
      x-ms-examples:
        GetKeys:
          $ref: ./examples/GetKeys-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  /keys/restore:
    post:
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyBundle'
          description: Restored key bundle in the vault.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        Imports a previously backed up key into Azure Key Vault, restoring the
        key, its key identifier, attributes and access control policies. The
        RESTORE operation may be used to import a previously backed up key.
        Individual versions of a key cannot be restored. The key is restored in
        its entirety with the same key name as it had when it was backed up. If
        the key name is not available in the target Key Vault, the RESTORE
        operation will be rejected. While the key name is retained during
        restore, the final key identifier will change if the key is restored to
        a different vault. Restore will restore all versions and preserve
        version identifiers. The RESTORE operation is subject to security
        constraints: The target Key Vault must be owned by the same Microsoft
        Azure Subscription as the source Key Vault The user must have RESTORE
        permission in the target Key Vault. This operation requires the
        keys/restore permission.
      operationId: RestoreKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyRestoreParameters'
        description: The parameters to restore the key.
        required: true
      summary: Restores a backed up key to a vault.
      x-ms-examples:
        RestoreKey:
          $ref: ./examples/RestoreKey-example.json
  '/keys/{key-name}':
    delete:
      parameters:
        - description: The name of the key to delete.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedKeyBundle'
          description: >-
            The public part of the deleted key and deletion information on when
            the key will be purged.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The delete key operation cannot be used to remove individual versions of
        a key. This operation removes the cryptographic material associated with
        the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap
        or Encrypt/Decrypt operations. This operation requires the keys/delete
        permission.
      operationId: DeleteKey
      summary: Deletes a key of any type from storage in Azure Key Vault.
      x-ms-examples:
        Delete key:
          $ref: ./examples/DeleteKey-example.json
    put:
      parameters:
        - description: Name for the imported key.
          in: path
          name: key-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z-]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyBundle'
          description: Imported key bundle to the vault.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The import key operation may be used to import any key type into an
        Azure Key Vault. If the named key already exists, Azure Key Vault
        creates a new version of the key. This operation requires the
        keys/import permission.
      operationId: ImportKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyImportParameters'
        description: The parameters to import a key.
        required: true
      summary: >-
        Imports an externally created key, stores it, and returns key parameters
        and attributes to the client.
      x-ms-examples:
        Import key:
          $ref: ./examples/ImportKey-example.json
  '/keys/{key-name}/backup':
    post:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupKeyResult'
          description: The backup blob containing the backed up key.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The Key Backup operation exports a key from Azure Key Vault in a
        protected form. Note that this operation does NOT return key material in
        a form that can be used outside the Azure Key Vault system, the returned
        key material is either protected to a Azure Key Vault HSM or to Azure
        Key Vault itself. The intent of this operation is to allow a client to
        GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then
        RESTORE it into another Azure Key Vault instance. The BACKUP operation
        may be used to export, in protected form, any key type from Azure Key
        Vault. Individual versions of a key cannot be backed up. BACKUP /
        RESTORE can be performed within geographical boundaries only; meaning
        that a BACKUP from one geographical area cannot be restored to another
        geographical area. For example, a backup from the US geographical area
        cannot be restored in an EU geographical area. This operation requires
        the key/backup permission.
      operationId: BackupKey
      summary: Requests that a backup of the specified key be downloaded to the client.
      x-ms-examples:
        BackupKey:
          $ref: ./examples/BackupKey-example.json
  '/keys/{key-name}/create':
    post:
      parameters:
        - description: >-
            The name for the new key. The system will generate the version name
            for the new key.
          in: path
          name: key-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z-]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyBundle'
          description: A key bundle containing the result of the create key request.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The create key operation can be used to create any key type in Azure Key
        Vault. If the named key already exists, Azure Key Vault creates a new
        version of the key. It requires the keys/create permission.
      operationId: CreateKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyCreateParameters'
        description: The parameters to create a key.
        required: true
      summary: >-
        Creates a new key, stores it, then returns key parameters and attributes
        to the client.
      x-ms-examples:
        Create key:
          $ref: ./examples/CreateKey-example.json
  '/keys/{key-name}/versions':
    get:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyListResult'
          description: >-
            A response message containing a list of keys along with a link to
            the next page of keys.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The full key identifier, attributes, and tags are provided in the
        response. This operation requires the keys/list permission.
      operationId: GetKeyVersions
      summary: Retrieves a list of individual key versions with the same key name.
      x-ms-examples:
        GetKeyVersions:
          $ref: ./examples/GetKeyVersions-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/keys/{key-name}/{key-version}':
    get:
      parameters:
        - description: The name of the key to get.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: Adding the version parameter retrieves a specific version of a key.
          in: path
          name: key-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyBundle'
          description: A key bundle containing the key and its attributes.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The get key operation is applicable to all key types. If the requested
        key is symmetric, then no key material is released in the response. This
        operation requires the keys/get permission.
      operationId: GetKey
      summary: Gets the public part of a stored key.
      x-ms-examples:
        Get key:
          $ref: ./examples/GetKey-example.json
    patch:
      parameters:
        - description: The name of key to update.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: The version of the key to update.
          in: path
          name: key-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyBundle'
          description: The updated key.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        In order to perform this operation, the key must already exist in the
        Key Vault. Note: The cryptographic material of a key itself cannot be
        changed. This operation requires the keys/update permission.
      operationId: UpdateKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyUpdateParameters'
        description: The parameters of the key to update.
        required: true
      summary: >-
        The update key operation changes specified attributes of a stored key
        and can be applied to any key type and key version stored in Azure Key
        Vault.
      x-ms-examples:
        Update key:
          $ref: ./examples/UpdateKey-example.json
  '/keys/{key-name}/{key-version}/decrypt':
    post:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: The version of the key.
          in: path
          name: key-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyOperationResult'
          description: The decryption result.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The DECRYPT operation decrypts a well-formed block of ciphertext using
        the target encryption key and specified algorithm. This operation is the
        reverse of the ENCRYPT operation; only a single block of data may be
        decrypted, the size of this block is dependent on the target key and the
        algorithm to be used. The DECRYPT operation applies to asymmetric and
        symmetric keys stored in Azure Key Vault since it uses the private
        portion of the key. This operation requires the keys/decrypt permission.
      operationId: decrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyOperationsParameters'
        description: The parameters for the decryption operation.
        required: true
      summary: Decrypts a single block of encrypted data.
      x-ms-examples:
        Decrypt example:
          $ref: ./examples/decrypt-example.json
  '/keys/{key-name}/{key-version}/encrypt':
    post:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: The version of the key.
          in: path
          name: key-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyOperationResult'
          description: The encryption result.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The ENCRYPT operation encrypts an arbitrary sequence of bytes using an
        encryption key that is stored in Azure Key Vault. Note that the ENCRYPT
        operation only supports a single block of data, the size of which is
        dependent on the target key and the encryption algorithm to be used. The
        ENCRYPT operation is only strictly necessary for symmetric keys stored
        in Azure Key Vault since protection with an asymmetric key can be
        performed using public portion of the key. This operation is supported
        for asymmetric keys as a convenience for callers that have a
        key-reference but do not have access to the public key material. This
        operation requires the keys/encrypt permission.
      operationId: encrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyOperationsParameters'
        description: The parameters for the encryption operation.
        required: true
      summary: >-
        Encrypts an arbitrary sequence of bytes using an encryption key that is
        stored in a key vault.
      x-ms-examples:
        Encrypt example:
          $ref: ./examples/encrypt-example.json
  '/keys/{key-name}/{key-version}/sign':
    post:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: The version of the key.
          in: path
          name: key-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyOperationResult'
          description: The signature value.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The SIGN operation is applicable to asymmetric and symmetric keys stored
        in Azure Key Vault since this operation uses the private portion of the
        key. This operation requires the keys/sign permission.
      operationId: sign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeySignParameters'
        description: The parameters for the signing operation.
        required: true
      summary: Creates a signature from a digest using the specified key.
      x-ms-examples:
        Sign:
          $ref: ./examples/sign-example.json
  '/keys/{key-name}/{key-version}/unwrapkey':
    post:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: The version of the key.
          in: path
          name: key-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyOperationResult'
          description: The unwrapped symmetric key.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The UNWRAP operation supports decryption of a symmetric key using the
        target key encryption key. This operation is the reverse of the WRAP
        operation. The UNWRAP operation applies to asymmetric and symmetric keys
        stored in Azure Key Vault since it uses the private portion of the key.
        This operation requires the keys/unwrapKey permission.
      operationId: unwrapKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyOperationsParameters'
        description: The parameters for the key operation.
        required: true
      summary: >-
        Unwraps a symmetric key using the specified key that was initially used
        for wrapping that key.
      x-ms-examples:
        Unwrapkey:
          $ref: ./examples/unwrapKey-example.json
  '/keys/{key-name}/{key-version}/verify':
    post:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: The version of the key.
          in: path
          name: key-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVerifyResult'
          description: The verification result.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The VERIFY operation is applicable to symmetric keys stored in Azure Key
        Vault. VERIFY is not strictly necessary for asymmetric keys stored in
        Azure Key Vault since signature verification can be performed using the
        public portion of the key but this operation is supported as a
        convenience for callers that only have a key-reference and not the
        public portion of the key. This operation requires the keys/verify
        permission.
      operationId: verify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyVerifyParameters'
        description: The parameters for verify operations.
        required: true
      summary: Verifies a signature using a specified key.
      x-ms-examples:
        Verify:
          $ref: ./examples/verify-example.json
  '/keys/{key-name}/{key-version}/wrapkey':
    post:
      parameters:
        - description: The name of the key.
          in: path
          name: key-name
          required: true
          schema:
            type: string
        - description: The version of the key.
          in: path
          name: key-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyOperationResult'
          description: The wrapped symmetric key.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Keys
      description: >-
        The WRAP operation supports encryption of a symmetric key using a key
        encryption key that has previously been stored in an Azure Key Vault.
        The WRAP operation is only strictly necessary for symmetric keys stored
        in Azure Key Vault since protection with an asymmetric key can be
        performed using the public portion of the key. This operation is
        supported for asymmetric keys as a convenience for callers that have a
        key-reference but do not have access to the public key material. This
        operation requires the keys/wrapKey permission.
      operationId: wrapKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyOperationsParameters'
        description: The parameters for wrap operation.
        required: true
      summary: Wraps a symmetric key using a specified key.
      x-ms-examples:
        Wrapkey:
          $ref: ./examples/wrapKey-example.json
  /secrets:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretListResult'
          description: >-
            A response message containing a list of secrets in the vault along
            with a link to the next page of secrets.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Secrets
      description: >-
        The Get Secrets operation is applicable to the entire vault. However,
        only the base secret identifier and its attributes are provided in the
        response. Individual secret versions are not listed in the response.
        This operation requires the secrets/list permission.
      operationId: GetSecrets
      summary: List secrets in a specified key vault.
      x-ms-examples:
        GetSecrets:
          $ref: ./examples/GetSecrets-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  /secrets/restore:
    post:
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretBundle'
          description: Restored secret bundle in the vault.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Secrets
      description: >-
        Restores a backed up secret, and all its versions, to a vault. This
        operation requires the secrets/restore permission.
      operationId: RestoreSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretRestoreParameters'
        description: The parameters to restore the secret.
        required: true
      summary: Restores a backed up secret to a vault.
      x-ms-examples:
        RestoreSecret:
          $ref: ./examples/RestoreSecret-example.json
  '/secrets/{secret-name}':
    delete:
      parameters:
        - description: The name of the secret.
          in: path
          name: secret-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedSecretBundle'
          description: >-
            The deleted secret and information on when the secret will be
            deleted, and how to recover the deleted secret.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Secrets
      description: >-
        The DELETE operation applies to any secret stored in Azure Key Vault.
        DELETE cannot be applied to an individual version of a secret. This
        operation requires the secrets/delete permission.
      operationId: DeleteSecret
      summary: Deletes a secret from a specified key vault.
      x-ms-examples:
        DeleteSecret:
          $ref: ./examples/DeleteSecret-example.json
    put:
      parameters:
        - description: The name of the secret.
          in: path
          name: secret-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z-]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretBundle'
          description: A secret bundle containing the result of the set secret request.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Secrets
      description: ' The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.'
      operationId: SetSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretSetParameters'
        description: The parameters for setting the secret.
        required: true
      summary: Sets a secret in a specified key vault.
      x-ms-examples:
        SetSecret:
          $ref: ./examples/SetSecret-example.json
  '/secrets/{secret-name}/backup':
    post:
      parameters:
        - description: The name of the secret.
          in: path
          name: secret-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupSecretResult'
          description: The backup blob containing the backed up secret.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Secrets
      description: >-
        Requests that a backup of the specified secret be downloaded to the
        client. All versions of the secret will be downloaded. This operation
        requires the secrets/backup permission.
      operationId: BackupSecret
      summary: Backs up the specified secret.
      x-ms-examples:
        BackupSecret:
          $ref: ./examples/BackupSecret-example.json
  '/secrets/{secret-name}/versions':
    get:
      parameters:
        - description: The name of the secret.
          in: path
          name: secret-name
          required: true
          schema:
            type: string
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretListResult'
          description: >-
            A response message containing a list of secrets along with a link to
            the next page of secrets.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Secrets
      description: >-
        The full secret identifier and attributes are provided in the response.
        No values are returned for the secrets. This operations requires the
        secrets/list permission.
      operationId: GetSecretVersions
      summary: List all versions of the specified secret.
      x-ms-examples:
        GetSecretVersions:
          $ref: ./examples/GetSecretVersions-example.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/secrets/{secret-name}/{secret-version}':
    get:
      parameters:
        - description: The name of the secret.
          in: path
          name: secret-name
          required: true
          schema:
            type: string
        - description: The version of the secret.
          in: path
          name: secret-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretBundle'
          description: The retrieved secret.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Secrets
      description: >-
        The GET operation is applicable to any secret stored in Azure Key Vault.
        This operation requires the secrets/get permission.
      operationId: GetSecret
      summary: Get a specified secret from a given key vault.
      x-ms-examples:
        GetSecret:
          $ref: ./examples/GetSecret-example.json
    patch:
      parameters:
        - description: The name of the secret.
          in: path
          name: secret-name
          required: true
          schema:
            type: string
        - description: The version of the secret.
          in: path
          name: secret-version
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretBundle'
          description: The updated secret.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Secrets
      description: >-
        The UPDATE operation changes specified attributes of an existing stored
        secret. Attributes that are not specified in the request are left
        unchanged. The value of a secret itself cannot be changed. This
        operation requires the secrets/set permission.
      operationId: UpdateSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretUpdateParameters'
        description: The parameters for update secret operation.
        required: true
      summary: >-
        Updates the attributes associated with a specified secret in a given key
        vault.
      x-ms-examples:
        UpdateSecret:
          $ref: ./examples/UpdateSecret-example.json
  /storage:
    get:
      parameters:
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageListResult'
          description: >-
            A response message containing a list of storage accounts along with
            a link to the next page of storage accounts.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        List storage accounts managed by the specified key vault. This operation
        requires the storage/list permission.
      operationId: GetStorageAccounts
      x-ms-examples:
        List Storage account:
          $ref: ./examples/listStorageAccount.json
      x-ms-pageable:
        nextLinkName: nextLink
  /storage/restore:
    post:
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBundle'
          description: Restored storage account bundle in the vault.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Restores a backed up storage account to a vault. This operation requires
        the storage/restore permission.
      operationId: RestoreStorageAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageRestoreParameters'
        description: The parameters to restore the storage account.
        required: true
      summary: Restores a backed up storage account to a vault.
      x-ms-examples:
        Restore Storage Account:
          $ref: ./examples/restoreStorageAccount.json
  '/storage/{storage-account-name}':
    delete:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedStorageBundle'
          description: >-
            The deleted storage account and information on when the storage
            account will be deleted, and how to recover the deleted storage
            account.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Deletes a storage account. This operation requires the storage/delete
        permission.
      operationId: DeleteStorageAccount
      x-ms-examples:
        Delete Storage account:
          $ref: ./examples/deleteStorageAccount.json
    get:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBundle'
          description: The retrieved storage account.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Gets information about a specified storage account. This operation
        requires the storage/get permission.
      operationId: GetStorageAccount
      x-ms-examples:
        Get Storage account:
          $ref: ./examples/getStorageAccount.json
    patch:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBundle'
          description: The updated storage account.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Updates the specified attributes associated with the given storage
        account. This operation requires the storage/set/update permission.
      operationId: UpdateStorageAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageAccountUpdateParameters'
        description: The parameters to update a storage account.
        required: true
      x-ms-examples:
        Update Storage account:
          $ref: ./examples/updateStorageAccount.json
    put:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBundle'
          description: The created storage account.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Creates or updates a new storage account. This operation requires the
        storage/set permission.
      operationId: SetStorageAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageAccountCreateParameters'
        description: The parameters to create a storage account.
        required: true
      x-ms-examples:
        Set Storage account:
          $ref: ./examples/setStorageAccount.json
  '/storage/{storage-account-name}/backup':
    post:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupStorageResult'
          description: The backup blob containing the backed up storage account.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Requests that a backup of the specified storage account be downloaded to
        the client. This operation requires the storage/backup permission.
      operationId: BackupStorageAccount
      summary: Backs up the specified storage account.
      x-ms-examples:
        Backup Storage Account:
          $ref: ./examples/backupStorageAccount.json
  '/storage/{storage-account-name}/regeneratekey':
    post:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBundle'
          description: The updated storage account.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Regenerates the specified key value for the given storage account. This
        operation requires the storage/regeneratekey permission.
      operationId: RegenerateStorageAccountKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageAccountRegenerteKeyParameters'
        description: The parameters to regenerate storage account key.
        required: true
      x-ms-examples:
        Regenerate Storage account key:
          $ref: ./examples/regenerateStorageAccountKey.json
  '/storage/{storage-account-name}/sas':
    get:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - description: >-
            Specifies the maximum number of results to return in a page. Setting
            maxresults to a value less than 1 or greater than 25 results in
            error response code 400 (Bad Request). If there are additional
            results to return, then the service returns a nextLink containing a
            skip token for pagination. In certain cases, the service might
            return fewer results than specified by maxresults (even 0 results)
            and also return a nextLink. Clients should not make any assumptions
            on the minimum number of results per page, and should enumerate all
            pages until the nextLink becomes null.
          in: query
          name: maxresults
          required: false
          schema:
            format: int32
            maximum: 25
            minimum: 1
            type: integer
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SasDefinitionListResult'
          description: >-
            A response message containing a list of SAS definitions along with a
            link to the next page of SAS definitions.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        List storage SAS definitions for the given storage account. This
        operation requires the storage/listsas permission.
      operationId: GetSasDefinitions
      x-ms-examples:
        List Storage Sas Definition:
          $ref: ./examples/listStorageSasDefinition.json
      x-ms-pageable:
        nextLinkName: nextLink
  '/storage/{storage-account-name}/sas/{sas-definition-name}':
    delete:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - description: The name of the SAS definition.
          in: path
          name: sas-definition-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedSasDefinitionBundle'
          description: >-
            The deleted SAS definition and information on when the SAS
            definition will be deleted, and how to recover the deleted SAS
            definition.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Deletes a SAS definition from a specified storage account. This
        operation requires the storage/deletesas permission.
      operationId: DeleteSasDefinition
      x-ms-examples:
        Delete Storage Sas Definition:
          $ref: ./examples/deleteStorageSasDefinition.json
    get:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - description: The name of the SAS definition.
          in: path
          name: sas-definition-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SasDefinitionBundle'
          description: The retrieved SAS definition.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Gets information about a SAS definition for the specified storage
        account. This operation requires the storage/getsas permission.
      operationId: GetSasDefinition
      x-ms-examples:
        Get Storage Sas Definition:
          $ref: ./examples/getStorageSasDefinition.json
    patch:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - description: The name of the SAS definition.
          in: path
          name: sas-definition-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SasDefinitionBundle'
          description: The updated SAS definition.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Updates the specified attributes associated with the given SAS
        definition. This operation requires the storage/setsas permission.
      operationId: UpdateSasDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SasDefinitionUpdateParameters'
        description: The parameters to update a SAS definition.
        required: true
      x-ms-examples:
        Update Storage Sas definition:
          $ref: ./examples/updateStorageSasDefinition.json
    put:
      parameters:
        - description: The name of the storage account.
          in: path
          name: storage-account-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - description: The name of the SAS definition.
          in: path
          name: sas-definition-name
          required: true
          schema:
            pattern: '^[0-9a-zA-Z]+$'
            type: string
        - $ref: '#/components/parameters/ApiVersionParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SasDefinitionBundle'
          description: The created SAS definition.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyVaultError'
          description: Key Vault error response describing why the operation failed.
      tags:
        - Storage
      description: >-
        Creates or updates a new SAS definition for the specified storage
        account. This operation requires the storage/setsas permission.
      operationId: SetSasDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SasDefinitionCreateParameters'
        description: The parameters to create a SAS definition.
        required: true
      x-ms-examples:
        Set Storage Sas definition:
          $ref: ./examples/setStorageSasDefinition.json
components:
  parameters:
    ApiVersionParameter:
      description: Client API version.
      in: query
      name: api-version
      required: true
      schema:
        type: string
  schemas:
    Action:
      description: The action that will be executed.
      properties:
        action_type:
          description: The type of the action.
          enum:
            - EmailContacts
            - AutoRenew
          type: string
          x-ms-enum:
            modelAsString: false
            name: ActionType
      type: object
    AdministratorDetails:
      description: Details of the organization administrator of the certificate issuer.
      properties:
        email:
          description: Email address.
          type: string
          x-ms-client-name: EmailAddress
        first_name:
          description: First name.
          type: string
        last_name:
          description: Last name.
          type: string
        phone:
          description: Phone number.
          type: string
      type: object
    Attributes:
      description: The object attributes managed by the KeyVault service.
      properties:
        created:
          description: Creation time in UTC.
          format: unixtime
          readOnly: true
          type: integer
        enabled:
          description: Determines whether the object is enabled.
          type: boolean
        exp:
          description: Expiry date in UTC.
          format: unixtime
          type: integer
          x-ms-client-name: Expires
        nbf:
          description: Not before date in UTC.
          format: unixtime
          type: integer
          x-ms-client-name: NotBefore
        updated:
          description: Last updated time in UTC.
          format: unixtime
          readOnly: true
          type: integer
      type: object
    BackupCertificateResult:
      description: 'The backup certificate result, containing the backup blob.'
      properties:
        value:
          description: The backup blob containing the backed up certificate.
          format: base64url
          readOnly: true
          type: string
      type: object
    BackupKeyResult:
      description: 'The backup key result, containing the backup blob.'
      properties:
        value:
          description: The backup blob containing the backed up key.
          format: base64url
          readOnly: true
          type: string
      type: object
    BackupSecretResult:
      description: 'The backup secret result, containing the backup blob.'
      properties:
        value:
          description: The backup blob containing the backed up secret.
          format: base64url
          readOnly: true
          type: string
      type: object
    BackupStorageResult:
      description: 'The backup storage result, containing the backup blob.'
      properties:
        value:
          description: The backup blob containing the backed up storage account.
          format: base64url
          readOnly: true
          type: string
      type: object
    CertificateAttributes:
      allOf:
        - $ref: '#/components/schemas/Attributes'
      description: The certificate management attributes.
      properties:
        recoveryLevel:
          description: >-
            Reflects the deletion recovery level currently in effect for
            certificates in the current vault. If it contains 'Purgeable', the
            certificate can be permanently deleted by a privileged user;
            otherwise, only the system can purge the certificate, at the end of
            the retention interval.
          enum:
            - Purgeable
            - Recoverable+Purgeable
            - Recoverable
            - Recoverable+ProtectedSubscription
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: DeletionRecoveryLevel
      type: object
    CertificateBundle:
      description: >-
        A certificate bundle consists of a certificate (X509) plus its
        attributes.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs
          type: object
        attributes:
          $ref: '#/components/schemas/CertificateAttributes'
          description: The certificate attributes.
        cer:
          description: CER contents of x509 certificate.
          format: byte
          type: string
        contentType:
          description: The content type of the secret.
          type: string
        id:
          description: The certificate id.
          readOnly: true
          type: string
        kid:
          description: The key id.
          readOnly: true
          type: string
        policy:
          $ref: '#/components/schemas/CertificatePolicy'
          description: The management policy.
          readOnly: true
        sid:
          description: The secret id.
          readOnly: true
          type: string
        x5t:
          description: Thumbprint of the certificate.
          format: base64url
          readOnly: true
          type: string
          x-ms-client-name: X509Thumbprint
      type: object
    CertificateCreateParameters:
      description: The certificate create parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/CertificateAttributes'
          description: The attributes of the certificate (optional).
          x-ms-client-name: CertificateAttributes
        policy:
          $ref: '#/components/schemas/CertificatePolicy'
          description: The management policy for the certificate.
          x-ms-client-name: CertificatePolicy
      type: object
    CertificateImportParameters:
      description: The certificate import parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/CertificateAttributes'
          description: The attributes of the certificate (optional).
          x-ms-client-name: CertificateAttributes
        policy:
          $ref: '#/components/schemas/CertificatePolicy'
          description: The management policy for the certificate.
          x-ms-client-name: CertificatePolicy
        pwd:
          description: >-
            If the private key in base64EncodedCertificate is encrypted, the
            password used for encryption.
          type: string
          x-ms-client-name: password
        value:
          description: >-
            Base64 encoded representation of the certificate object to import.
            This certificate needs to contain the private key.
          type: string
          x-ms-client-name: base64EncodedCertificate
      required:
        - value
      type: object
    CertificateIssuerItem:
      description: The certificate issuer item containing certificate issuer metadata.
      properties:
        id:
          description: Certificate Identifier.
          type: string
        provider:
          description: The issuer provider.
          type: string
      type: object
    CertificateIssuerListResult:
      description: The certificate issuer list result.
      properties:
        nextLink:
          description: The URL to get the next set of certificate issuers.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of certificate issuers in the
            key vault along with a link to the next page of certificate issuers.
          items:
            $ref: '#/components/schemas/CertificateIssuerItem'
          readOnly: true
          type: array
      type: object
    CertificateIssuerSetParameters:
      description: The certificate issuer set parameters.
      properties:
        attributes:
          $ref: '#/components/schemas/IssuerAttributes'
          description: Attributes of the issuer object.
        credentials:
          $ref: '#/components/schemas/IssuerCredentials'
          description: The credentials to be used for the issuer.
        org_details:
          $ref: '#/components/schemas/OrganizationDetails'
          description: Details of the organization as provided to the issuer.
          x-ms-client-name: OrganizationDetails
        provider:
          description: The issuer provider.
          type: string
      required:
        - provider
      type: object
    CertificateIssuerUpdateParameters:
      description: The certificate issuer update parameters.
      properties:
        attributes:
          $ref: '#/components/schemas/IssuerAttributes'
          description: Attributes of the issuer object.
        credentials:
          $ref: '#/components/schemas/IssuerCredentials'
          description: The credentials to be used for the issuer.
        org_details:
          $ref: '#/components/schemas/OrganizationDetails'
          description: Details of the organization as provided to the issuer.
          x-ms-client-name: OrganizationDetails
        provider:
          description: The issuer provider.
          type: string
      type: object
    CertificateItem:
      description: The certificate item containing certificate metadata.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/CertificateAttributes'
          description: The certificate management attributes.
        id:
          description: Certificate identifier.
          type: string
        x5t:
          description: Thumbprint of the certificate.
          format: base64url
          type: string
          x-ms-client-name: X509Thumbprint
      type: object
    CertificateListResult:
      description: The certificate list result.
      properties:
        nextLink:
          description: The URL to get the next set of certificates.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of certificates in the key
            vault along with a link to the next page of certificates.
          items:
            $ref: '#/components/schemas/CertificateItem'
          readOnly: true
          type: array
      type: object
    CertificateMergeParameters:
      description: The certificate merge parameters
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/CertificateAttributes'
          description: The attributes of the certificate (optional).
          x-ms-client-name: CertificateAttributes
        x5c:
          description: The certificate or the certificate chain to merge.
          items:
            format: byte
            type: string
          type: array
          x-ms-client-name: x509Certificates
      required:
        - x5c
      type: object
    CertificateOperation:
      description: A certificate operation is returned in case of asynchronous requests.
      properties:
        cancellation_requested:
          description: >-
            Indicates if cancellation was requested on the certificate
            operation.
          type: boolean
        csr:
          description: >-
            The certificate signing request (CSR) that is being used in the
            certificate operation.
          format: byte
          type: string
        error:
          $ref: '#/components/schemas/Error'
          description: 'Error encountered, if any, during the certificate operation.'
        id:
          description: The certificate id.
          readOnly: true
          type: string
        issuer:
          $ref: '#/components/schemas/IssuerParameters'
          description: Parameters for the issuer of the X509 component of a certificate.
          x-ms-client-name: IssuerParameters
        request_id:
          description: Identifier for the certificate operation.
          type: string
        status:
          description: Status of the certificate operation.
          type: string
        status_details:
          description: The status details of the certificate operation.
          type: string
        target:
          description: Location which contains the result of the certificate operation.
          type: string
      type: object
    CertificateOperationUpdateParameter:
      description: The certificate operation update parameters.
      properties:
        cancellation_requested:
          description: >-
            Indicates if cancellation was requested on the certificate
            operation.
          type: boolean
      required:
        - cancellation_requested
      type: object
    CertificatePolicy:
      description: Management policy for a certificate.
      properties:
        attributes:
          $ref: '#/components/schemas/CertificateAttributes'
          description: The certificate attributes.
        id:
          description: The certificate id.
          readOnly: true
          type: string
        issuer:
          $ref: '#/components/schemas/IssuerParameters'
          description: Parameters for the issuer of the X509 component of a certificate.
          x-ms-client-name: IssuerParameters
        key_props:
          $ref: '#/components/schemas/KeyProperties'
          description: Properties of the key backing a certificate.
          x-ms-client-name: KeyProperties
        lifetime_actions:
          description: >-
            Actions that will be performed by Key Vault over the lifetime of a
            certificate.
          items:
            $ref: '#/components/schemas/LifetimeAction'
          type: array
        secret_props:
          $ref: '#/components/schemas/SecretProperties'
          description: Properties of the secret backing a certificate.
          x-ms-client-name: SecretProperties
        x509_props:
          $ref: '#/components/schemas/X509CertificateProperties'
          description: Properties of the X509 component of a certificate.
          x-ms-client-name: X509CertificateProperties
      type: object
    CertificateRestoreParameters:
      description: The certificate restore parameters.
      properties:
        value:
          description: The backup blob associated with a certificate bundle.
          format: base64url
          type: string
          x-ms-client-name: certificateBundleBackup
      required:
        - value
      type: object
    CertificateUpdateParameters:
      description: The certificate update parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/CertificateAttributes'
          description: The attributes of the certificate (optional).
          x-ms-client-name: CertificateAttributes
        policy:
          $ref: '#/components/schemas/CertificatePolicy'
          description: The management policy for the certificate.
          x-ms-client-name: CertificatePolicy
      type: object
    Contact:
      description: The contact information for the vault certificates.
      properties:
        email:
          description: Email address.
          type: string
          x-ms-client-name: EmailAddress
        name:
          description: Name.
          type: string
        phone:
          description: Phone number.
          type: string
      type: object
    Contacts:
      description: The contacts for the vault certificates.
      properties:
        contacts:
          description: The contact list for the vault certificates.
          items:
            $ref: '#/components/schemas/Contact'
          type: array
          x-ms-client-name: ContactList
        id:
          description: Identifier for the contacts collection.
          readOnly: true
          type: string
      type: object
    DeletedCertificateBundle:
      allOf:
        - $ref: '#/components/schemas/CertificateBundle'
      description: >-
        A Deleted Certificate consisting of its previous id, attributes and its
        tags, as well as information on when it will be purged.
      properties:
        deletedDate:
          description: 'The time when the certificate was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted certificate.
          type: string
        scheduledPurgeDate:
          description: 'The time when the certificate is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedCertificateItem:
      allOf:
        - $ref: '#/components/schemas/CertificateItem'
      description: >-
        The deleted certificate item containing metadata about the deleted
        certificate.
      properties:
        deletedDate:
          description: 'The time when the certificate was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted certificate.
          type: string
        scheduledPurgeDate:
          description: 'The time when the certificate is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedCertificateListResult:
      description: A list of certificates that have been deleted in this vault.
      properties:
        nextLink:
          description: The URL to get the next set of deleted certificates.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of deleted certificates in the
            vault along with a link to the next page of deleted certificates
          items:
            $ref: '#/components/schemas/DeletedCertificateItem'
          readOnly: true
          type: array
      type: object
    DeletedKeyBundle:
      allOf:
        - $ref: '#/components/schemas/KeyBundle'
      description: >-
        A DeletedKeyBundle consisting of a WebKey plus its Attributes and
        deletion info
      properties:
        deletedDate:
          description: 'The time when the key was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted key.
          type: string
        scheduledPurgeDate:
          description: 'The time when the key is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedKeyItem:
      allOf:
        - $ref: '#/components/schemas/KeyItem'
      description: >-
        The deleted key item containing the deleted key metadata and information
        about deletion.
      properties:
        deletedDate:
          description: 'The time when the key was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted key.
          type: string
        scheduledPurgeDate:
          description: 'The time when the key is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedKeyListResult:
      description: A list of keys that have been deleted in this vault.
      properties:
        nextLink:
          description: The URL to get the next set of deleted keys.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of deleted keys in the vault
            along with a link to the next page of deleted keys
          items:
            $ref: '#/components/schemas/DeletedKeyItem'
          readOnly: true
          type: array
      type: object
    DeletedSasDefinitionBundle:
      allOf:
        - $ref: '#/components/schemas/SasDefinitionBundle'
      description: >-
        A deleted SAS definition bundle consisting of its previous id,
        attributes and its tags, as well as information on when it will be
        purged.
      properties:
        deletedDate:
          description: 'The time when the SAS definition was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted SAS definition.
          type: string
        scheduledPurgeDate:
          description: 'The time when the SAS definition is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedSasDefinitionItem:
      allOf:
        - $ref: '#/components/schemas/SasDefinitionItem'
      description: >-
        The deleted SAS definition item containing metadata about the deleted
        SAS definition.
      properties:
        deletedDate:
          description: 'The time when the SAS definition was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted SAS definition.
          type: string
        scheduledPurgeDate:
          description: 'The time when the SAS definition is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedSasDefinitionListResult:
      description: The deleted SAS definition list result
      properties:
        nextLink:
          description: The URL to get the next set of deleted SAS definitions.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of the deleted SAS definitions
            in the vault along with a link to the next page of deleted sas
            definitions
          items:
            $ref: '#/components/schemas/DeletedSasDefinitionItem'
          readOnly: true
          type: array
      type: object
    DeletedSecretBundle:
      allOf:
        - $ref: '#/components/schemas/SecretBundle'
      description: >-
        A Deleted Secret consisting of its previous id, attributes and its tags,
        as well as information on when it will be purged.
      properties:
        deletedDate:
          description: 'The time when the secret was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted secret.
          type: string
        scheduledPurgeDate:
          description: 'The time when the secret is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedSecretItem:
      allOf:
        - $ref: '#/components/schemas/SecretItem'
      description: The deleted secret item containing metadata about the deleted secret.
      properties:
        deletedDate:
          description: 'The time when the secret was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted secret.
          type: string
        scheduledPurgeDate:
          description: 'The time when the secret is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedSecretListResult:
      description: The deleted secret list result
      properties:
        nextLink:
          description: The URL to get the next set of deleted secrets.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of the deleted secrets in the
            vault along with a link to the next page of deleted secrets
          items:
            $ref: '#/components/schemas/DeletedSecretItem'
          readOnly: true
          type: array
      type: object
    DeletedStorageAccountItem:
      allOf:
        - $ref: '#/components/schemas/StorageAccountItem'
      description: >-
        The deleted storage account item containing metadata about the deleted
        storage account.
      properties:
        deletedDate:
          description: 'The time when the storage account was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted storage account.
          type: string
        scheduledPurgeDate:
          description: 'The time when the storage account is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedStorageBundle:
      allOf:
        - $ref: '#/components/schemas/StorageBundle'
      description: >-
        A deleted storage account bundle consisting of its previous id,
        attributes and its tags, as well as information on when it will be
        purged.
      properties:
        deletedDate:
          description: 'The time when the storage account was deleted, in UTC'
          format: unixtime
          readOnly: true
          type: integer
        recoveryId:
          description: >-
            The url of the recovery object, used to identify and recover the
            deleted storage account.
          type: string
        scheduledPurgeDate:
          description: 'The time when the storage account is scheduled to be purged, in UTC'
          format: unixtime
          readOnly: true
          type: integer
      type: object
    DeletedStorageListResult:
      description: The deleted storage account list result
      properties:
        nextLink:
          description: The URL to get the next set of deleted storage accounts.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of the deleted storage accounts
            in the vault along with a link to the next page of deleted storage
            accounts
          items:
            $ref: '#/components/schemas/DeletedStorageAccountItem'
          readOnly: true
          type: array
      type: object
    Error:
      description: The key vault server error.
      properties:
        code:
          description: The error code.
          readOnly: true
          type: string
        innererror:
          $ref: '#/components/schemas/Error'
          readOnly: true
          x-ms-client-name: innerError
        message:
          description: The error message.
          readOnly: true
          type: string
      type: object
    IssuerAttributes:
      description: The attributes of an issuer managed by the Key Vault service.
      properties:
        created:
          description: Creation time in UTC.
          format: unixtime
          readOnly: true
          type: integer
        enabled:
          description: Determines whether the issuer is enabled.
          type: boolean
        updated:
          description: Last updated time in UTC.
          format: unixtime
          readOnly: true
          type: integer
      type: object
    IssuerBundle:
      description: The issuer for Key Vault certificate.
      properties:
        attributes:
          $ref: '#/components/schemas/IssuerAttributes'
          description: Attributes of the issuer object.
        credentials:
          $ref: '#/components/schemas/IssuerCredentials'
          description: The credentials to be used for the issuer.
        id:
          description: Identifier for the issuer object.
          readOnly: true
          type: string
        org_details:
          $ref: '#/components/schemas/OrganizationDetails'
          description: Details of the organization as provided to the issuer.
          x-ms-client-name: OrganizationDetails
        provider:
          description: The issuer provider.
          type: string
      type: object
    IssuerCredentials:
      description: The credentials to be used for the certificate issuer.
      properties:
        account_id:
          description: The user name/account name/account id.
          type: string
        pwd:
          description: The password/secret/account key.
          type: string
          x-ms-client-name: Password
      type: object
    IssuerParameters:
      description: Parameters for the issuer of the X509 component of a certificate.
      properties:
        cert_transparency:
          description: >-
            Indicates if the certificates generated under this policy should be
            published to certificate transparency logs.
          type: boolean
          x-ms-client-name: CertificateTransparency
        cty:
          description: >-
            Certificate type as supported by the provider (optional); for
            example 'OV-SSL', 'EV-SSL'
          type: string
          x-ms-client-name: CertificateType
        name:
          description: >-
            Name of the referenced issuer object or reserved names; for example,
            'Self' or 'Unknown'.
          type: string
      type: object
    JsonWebKey:
      description: 'As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18'
      properties:
        crv:
          description: 'Elliptic curve name. For valid values, see JsonWebKeyCurveName.'
          enum:
            - P-256
            - P-384
            - P-521
            - P-256K
          type: string
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeyCurveName
            values:
              - description: 'The NIST P-256 elliptic curve, AKA SECG curve SECP256R1.'
                value: P-256
              - description: 'The NIST P-384 elliptic curve, AKA SECG curve SECP384R1.'
                value: P-384
              - description: 'The NIST P-521 elliptic curve, AKA SECG curve SECP521R1.'
                value: P-521
              - description: The SECG SECP256K1 elliptic curve.
                value: P-256K
        d:
          description: 'RSA private exponent, or the D component of an EC private key.'
          format: base64url
          type: string
        dp:
          description: RSA private key parameter.
          format: base64url
          type: string
          x-ms-client-name: DP
        dq:
          description: RSA private key parameter.
          format: base64url
          type: string
          x-ms-client-name: DQ
        e:
          description: RSA public exponent.
          format: base64url
          type: string
        k:
          description: Symmetric key.
          format: base64url
          type: string
        key_hsm:
          description: 'HSM Token, used with ''Bring Your Own Key''.'
          format: base64url
          type: string
          x-ms-client-name: t
        key_ops:
          items:
            description: Supported key operations.
            type: string
          type: array
        kid:
          description: Key identifier.
          type: string
        kty:
          description: >-
            JsonWebKey Key Type (kty), as defined in
            https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
          enum:
            - EC
            - EC-HSM
            - RSA
            - RSA-HSM
            - oct
          type: string
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeyType
            values:
              - description: Elliptic Curve.
                value: EC
              - description: >-
                  Elliptic Curve with a private key which is not exportable from
                  the HSM.
                value: EC-HSM
              - description: 'RSA (https://tools.ietf.org/html/rfc3447)'
                value: RSA
              - description: RSA with a private key which is not exportable from the HSM.
                value: RSA-HSM
              - description: Octet sequence (used to represent symmetric keys)
                value: oct
        'n':
          description: RSA modulus.
          format: base64url
          type: string
        p:
          description: RSA secret prime.
          format: base64url
          type: string
        q:
          description: 'RSA secret prime, with p < q.'
          format: base64url
          type: string
        qi:
          description: RSA private key parameter.
          format: base64url
          type: string
          x-ms-client-name: QI
        x:
          description: X component of an EC public key.
          format: base64url
          type: string
        'y':
          description: Y component of an EC public key.
          format: base64url
          type: string
      type: object
    KeyAttributes:
      allOf:
        - $ref: '#/components/schemas/Attributes'
      description: The attributes of a key managed by the key vault service.
      properties:
        recoveryLevel:
          description: >-
            Reflects the deletion recovery level currently in effect for keys in
            the current vault. If it contains 'Purgeable' the key can be
            permanently deleted by a privileged user; otherwise, only the system
            can purge the key, at the end of the retention interval.
          enum:
            - Purgeable
            - Recoverable+Purgeable
            - Recoverable
            - Recoverable+ProtectedSubscription
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: DeletionRecoveryLevel
      type: object
    KeyBundle:
      description: A KeyBundle consisting of a WebKey plus its attributes.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/KeyAttributes'
          description: The key management attributes.
        key:
          $ref: '#/components/schemas/JsonWebKey'
          description: The Json web key.
        managed:
          description: >-
            True if the key's lifetime is managed by key vault. If this is a key
            backing a certificate, then managed will be true.
          readOnly: true
          type: boolean
      type: object
    KeyCreateParameters:
      description: The key create parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/KeyAttributes'
          x-ms-client-name: keyAttributes
        crv:
          description: 'Elliptic curve name. For valid values, see JsonWebKeyCurveName.'
          enum:
            - P-256
            - P-384
            - P-521
            - P-256K
          type: string
          x-ms-client-name: curve
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeyCurveName
        key_ops:
          items:
            description: >-
              JSON web key operations. For more information, see
              JsonWebKeyOperation.
            enum:
              - encrypt
              - decrypt
              - sign
              - verify
              - wrapKey
              - unwrapKey
            type: string
            x-ms-enum:
              modelAsString: true
              name: JsonWebKeyOperation
          type: array
        key_size:
          description: 'The key size in bits. For example: 2048, 3072, or 4096 for RSA.'
          format: int32
          type: integer
        kty:
          description: 'The type of key to create. For valid values, see JsonWebKeyType.'
          enum:
            - EC
            - EC-HSM
            - RSA
            - RSA-HSM
            - oct
          minLength: 1
          type: string
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeyType
      required:
        - kty
      type: object
    KeyImportParameters:
      description: The key import parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        Hsm:
          description: Whether to import as a hardware key (HSM) or software key.
          type: boolean
        attributes:
          $ref: '#/components/schemas/KeyAttributes'
          description: The key management attributes.
          x-ms-client-name: keyAttributes
        key:
          $ref: '#/components/schemas/JsonWebKey'
          description: The Json web key
      required:
        - key
      type: object
    KeyItem:
      description: The key item containing key metadata.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/KeyAttributes'
          description: The key management attributes.
        kid:
          description: Key identifier.
          type: string
        managed:
          description: >-
            True if the key's lifetime is managed by key vault. If this is a key
            backing a certificate, then managed will be true.
          readOnly: true
          type: boolean
      type: object
    KeyListResult:
      description: The key list result.
      properties:
        nextLink:
          description: The URL to get the next set of keys.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of keys in the key vault along
            with a link to the next page of keys.
          items:
            $ref: '#/components/schemas/KeyItem'
          readOnly: true
          type: array
      type: object
    KeyOperationResult:
      description: The key operation result.
      properties:
        kid:
          description: Key identifier
          readOnly: true
          type: string
        value:
          format: base64url
          readOnly: true
          type: string
          x-ms-client-name: result
      type: object
    KeyOperationsParameters:
      description: The key operations parameters.
      properties:
        alg:
          description: algorithm identifier
          enum:
            - RSA-OAEP
            - RSA-OAEP-256
            - RSA1_5
          minLength: 1
          type: string
          x-ms-client-name: algorithm
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeyEncryptionAlgorithm
        value:
          format: base64url
          type: string
      required:
        - alg
        - value
      type: object
    KeyProperties:
      description: Properties of the key pair backing a certificate.
      properties:
        crv:
          description: 'Elliptic curve name. For valid values, see JsonWebKeyCurveName.'
          enum:
            - P-256
            - P-384
            - P-521
            - P-256K
          type: string
          x-ms-client-name: curve
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeyCurveName
        exportable:
          description: Indicates if the private key can be exported.
          type: boolean
        key_size:
          description: 'The key size in bits. For example: 2048, 3072, or 4096 for RSA.'
          format: int32
          type: integer
        kty:
          description: The type of key pair to be used for the certificate.
          enum:
            - EC
            - EC-HSM
            - RSA
            - RSA-HSM
            - oct
          type: string
          x-ms-client-name: keyType
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeyType
        reuse_key:
          description: Indicates if the same key pair will be used on certificate renewal.
          type: boolean
      type: object
    KeyRestoreParameters:
      description: The key restore parameters.
      properties:
        value:
          description: The backup blob associated with a key bundle.
          format: base64url
          type: string
          x-ms-client-name: keyBundleBackup
      required:
        - value
      type: object
    KeySignParameters:
      description: The key operations parameters.
      properties:
        alg:
          description: >-
            The signing/verification algorithm identifier. For more information
            on possible algorithm types, see JsonWebKeySignatureAlgorithm.
          enum:
            - PS256
            - PS384
            - PS512
            - RS256
            - RS384
            - RS512
            - RSNULL
            - ES256
            - ES384
            - ES512
            - ES256K
          minLength: 1
          type: string
          x-ms-client-name: algorithm
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeySignatureAlgorithm
            values:
              - description: >-
                  RSASSA-PSS using SHA-256 and MGF1 with SHA-256, as described
                  in https://tools.ietf.org/html/rfc7518
                value: PS256
              - description: >-
                  RSASSA-PSS using SHA-384 and MGF1 with SHA-384, as described
                  in https://tools.ietf.org/html/rfc7518
                value: PS384
              - description: >-
                  RSASSA-PSS using SHA-512 and MGF1 with SHA-512, as described
                  in https://tools.ietf.org/html/rfc7518
                value: PS512
              - description: >-
                  RSASSA-PKCS1-v1_5 using SHA-256, as described in
                  https://tools.ietf.org/html/rfc7518
                value: RS256
              - description: >-
                  RSASSA-PKCS1-v1_5 using SHA-384, as described in
                  https://tools.ietf.org/html/rfc7518
                value: RS384
              - description: >-
                  RSASSA-PKCS1-v1_5 using SHA-512, as described in
                  https://tools.ietf.org/html/rfc7518
                value: RS512
              - description: Reserved
                value: RSNULL
              - description: >-
                  ECDSA using P-256 and SHA-256, as described in
                  https://tools.ietf.org/html/rfc7518.
                value: ES256
              - description: >-
                  ECDSA using P-384 and SHA-384, as described in
                  https://tools.ietf.org/html/rfc7518
                value: ES384
              - description: >-
                  ECDSA using P-521 and SHA-512, as described in
                  https://tools.ietf.org/html/rfc7518
                value: ES512
              - description: >-
                  ECDSA using P-256K and SHA-256, as described in
                  https://tools.ietf.org/html/rfc7518
                value: ES256K
        value:
          format: base64url
          type: string
      required:
        - alg
        - value
      type: object
    KeyUpdateParameters:
      description: The key update parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/KeyAttributes'
          x-ms-client-name: keyAttributes
        key_ops:
          description: >-
            Json web key operations. For more information on possible key
            operations, see JsonWebKeyOperation.
          items:
            enum:
              - encrypt
              - decrypt
              - sign
              - verify
              - wrapKey
              - unwrapKey
            type: string
            x-ms-enum:
              modelAsString: true
              name: JsonWebKeyOperation
          type: array
      type: object
    KeyVaultError:
      description: The key vault error exception.
      properties:
        error:
          $ref: '#/components/schemas/Error'
          readOnly: true
      type: object
    KeyVerifyParameters:
      description: The key verify parameters.
      properties:
        alg:
          description: >-
            The signing/verification algorithm. For more information on possible
            algorithm types, see JsonWebKeySignatureAlgorithm.
          enum:
            - PS256
            - PS384
            - PS512
            - RS256
            - RS384
            - RS512
            - RSNULL
            - ES256
            - ES384
            - ES512
            - ES256K
          minLength: 1
          type: string
          x-ms-client-name: algorithm
          x-ms-enum:
            modelAsString: true
            name: JsonWebKeySignatureAlgorithm
        digest:
          description: The digest used for signing.
          format: base64url
          type: string
        value:
          description: The signature to be verified.
          format: base64url
          type: string
          x-ms-client-name: signature
      required:
        - alg
        - digest
        - value
      type: object
    KeyVerifyResult:
      description: The key verify result.
      properties:
        value:
          description: 'True if the signature is verified, otherwise false.'
          readOnly: true
          type: boolean
      type: object
    LifetimeAction:
      description: >-
        Action and its trigger that will be performed by Key Vault over the
        lifetime of a certificate.
      properties:
        action:
          $ref: '#/components/schemas/Action'
          description: The action that will be executed.
        trigger:
          $ref: '#/components/schemas/Trigger'
          description: The condition that will execute the action.
      type: object
    OrganizationDetails:
      description: Details of the organization of the certificate issuer.
      properties:
        admin_details:
          description: Details of the organization administrator.
          items:
            $ref: '#/components/schemas/AdministratorDetails'
          type: array
        id:
          description: Id of the organization.
          type: string
      type: object
    PendingCertificateSigningRequestResult:
      description: The pending certificate signing request result.
      properties:
        value:
          description: The pending certificate signing request as Base64 encoded string.
          readOnly: true
          type: string
      type: object
    SasDefinitionAttributes:
      description: The SAS definition management attributes.
      properties:
        created:
          description: Creation time in UTC.
          format: unixtime
          readOnly: true
          type: integer
        enabled:
          description: the enabled state of the object.
          type: boolean
        recoveryLevel:
          description: >-
            Reflects the deletion recovery level currently in effect for SAS
            definitions in the current vault. If it contains 'Purgeable' the SAS
            definition can be permanently deleted by a privileged user;
            otherwise, only the system can purge the SAS definition, at the end
            of the retention interval.
          enum:
            - Purgeable
            - Recoverable+Purgeable
            - Recoverable
            - Recoverable+ProtectedSubscription
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: DeletionRecoveryLevel
        updated:
          description: Last updated time in UTC.
          format: unixtime
          readOnly: true
          type: integer
      type: object
    SasDefinitionBundle:
      description: >-
        A SAS definition bundle consists of key vault SAS definition details
        plus its attributes.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs
          readOnly: true
          type: object
        attributes:
          $ref: '#/components/schemas/SasDefinitionAttributes'
          description: The SAS definition attributes.
          readOnly: true
        id:
          description: The SAS definition id.
          readOnly: true
          type: string
        sasType:
          description: The type of SAS token the SAS definition will create.
          enum:
            - account
            - service
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: SasTokenType
        sid:
          description: Storage account SAS definition secret id.
          readOnly: true
          type: string
          x-ms-client-name: SecretId
        templateUri:
          description: >-
            The SAS definition token template signed with an arbitrary key. 
            Tokens created according to the SAS definition will have the same
            properties as the template.
          readOnly: true
          type: string
        validityPeriod:
          description: >-
            The validity period of SAS tokens created according to the SAS
            definition.
          readOnly: true
          type: string
      type: object
    SasDefinitionCreateParameters:
      description: The SAS definition create parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/SasDefinitionAttributes'
          description: The attributes of the SAS definition.
          x-ms-client-name: SasDefinitionAttributes
        sasType:
          description: The type of SAS token the SAS definition will create.
          enum:
            - account
            - service
          type: string
          x-ms-enum:
            modelAsString: true
            name: SasTokenType
        templateUri:
          description: >-
            The SAS definition token template signed with an arbitrary key. 
            Tokens created according to the SAS definition will have the same
            properties as the template.
          type: string
        validityPeriod:
          description: >-
            The validity period of SAS tokens created according to the SAS
            definition.
          type: string
      required:
        - templateUri
        - sasType
        - validityPeriod
      type: object
    SasDefinitionItem:
      description: The SAS definition item containing storage SAS definition metadata.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          readOnly: true
          type: object
        attributes:
          $ref: '#/components/schemas/SasDefinitionAttributes'
          description: The SAS definition management attributes.
          readOnly: true
        id:
          description: The storage SAS identifier.
          readOnly: true
          type: string
        sid:
          description: The storage account SAS definition secret id.
          readOnly: true
          type: string
          x-ms-client-name: SecretId
      type: object
    SasDefinitionListResult:
      description: The storage account SAS definition list result.
      properties:
        nextLink:
          description: The URL to get the next set of SAS definitions.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of SAS definitions along with a
            link to the next page of SAS definitions.
          items:
            $ref: '#/components/schemas/SasDefinitionItem'
          readOnly: true
          type: array
      type: object
    SasDefinitionUpdateParameters:
      description: The SAS definition update parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/SasDefinitionAttributes'
          description: The attributes of the SAS definition.
          x-ms-client-name: SasDefinitionAttributes
        sasType:
          description: The type of SAS token the SAS definition will create.
          enum:
            - account
            - service
          type: string
          x-ms-enum:
            modelAsString: true
            name: SasTokenType
        templateUri:
          description: >-
            The SAS definition token template signed with an arbitrary key. 
            Tokens created according to the SAS definition will have the same
            properties as the template.
          type: string
        validityPeriod:
          description: >-
            The validity period of SAS tokens created according to the SAS
            definition.
          type: string
      type: object
    SecretAttributes:
      allOf:
        - $ref: '#/components/schemas/Attributes'
      description: The secret management attributes.
      properties:
        recoveryLevel:
          description: >-
            Reflects the deletion recovery level currently in effect for secrets
            in the current vault. If it contains 'Purgeable', the secret can be
            permanently deleted by a privileged user; otherwise, only the system
            can purge the secret, at the end of the retention interval.
          enum:
            - Purgeable
            - Recoverable+Purgeable
            - Recoverable
            - Recoverable+ProtectedSubscription
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: DeletionRecoveryLevel
      type: object
    SecretBundle:
      description: 'A secret consisting of a value, id and its attributes.'
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/SecretAttributes'
          description: The secret management attributes.
        contentType:
          description: The content type of the secret.
          type: string
        id:
          description: The secret id.
          type: string
        kid:
          description: >-
            If this is a secret backing a KV certificate, then this field
            specifies the corresponding key backing the KV certificate.
          readOnly: true
          type: string
        managed:
          description: >-
            True if the secret's lifetime is managed by key vault. If this is a
            secret backing a certificate, then managed will be true.
          readOnly: true
          type: boolean
        value:
          description: The secret value.
          type: string
      type: object
    SecretItem:
      description: The secret item containing secret metadata.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/SecretAttributes'
          description: The secret management attributes.
        contentType:
          description: Type of the secret value such as a password.
          type: string
        id:
          description: Secret identifier.
          type: string
        managed:
          description: >-
            True if the secret's lifetime is managed by key vault. If this is a
            key backing a certificate, then managed will be true.
          readOnly: true
          type: boolean
      type: object
    SecretListResult:
      description: The secret list result.
      properties:
        nextLink:
          description: The URL to get the next set of secrets.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of secrets in the key vault
            along with a link to the next page of secrets.
          items:
            $ref: '#/components/schemas/SecretItem'
          readOnly: true
          type: array
      type: object
    SecretProperties:
      description: Properties of the key backing a certificate.
      properties:
        contentType:
          description: The media type (MIME type).
          type: string
      type: object
    SecretRestoreParameters:
      description: The secret restore parameters.
      properties:
        value:
          description: The backup blob associated with a secret bundle.
          format: base64url
          type: string
          x-ms-client-name: secretBundleBackup
      required:
        - value
      type: object
    SecretSetParameters:
      description: The secret set parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/SecretAttributes'
          description: The secret management attributes.
          x-ms-client-name: secretAttributes
        contentType:
          description: Type of the secret value such as a password.
          type: string
        value:
          description: The value of the secret.
          type: string
      required:
        - value
      type: object
    SecretUpdateParameters:
      description: The secret update parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        attributes:
          $ref: '#/components/schemas/SecretAttributes'
          description: The secret management attributes.
          x-ms-client-name: secretAttributes
        contentType:
          description: Type of the secret value such as a password.
          type: string
      type: object
    StorageAccountAttributes:
      description: The storage account management attributes.
      properties:
        created:
          description: Creation time in UTC.
          format: unixtime
          readOnly: true
          type: integer
        enabled:
          description: the enabled state of the object.
          type: boolean
        recoveryLevel:
          description: >-
            Reflects the deletion recovery level currently in effect for storage
            accounts in the current vault. If it contains 'Purgeable' the
            storage account can be permanently deleted by a privileged user;
            otherwise, only the system can purge the storage account, at the end
            of the retention interval.
          enum:
            - Purgeable
            - Recoverable+Purgeable
            - Recoverable
            - Recoverable+ProtectedSubscription
          nullable: false
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: DeletionRecoveryLevel
        updated:
          description: Last updated time in UTC.
          format: unixtime
          readOnly: true
          type: integer
      type: object
    StorageAccountCreateParameters:
      description: The storage account create parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        activeKeyName:
          description: Current active storage account key name.
          type: string
        attributes:
          $ref: '#/components/schemas/StorageAccountAttributes'
          description: The attributes of the storage account.
          x-ms-client-name: StorageAccountAttributes
        autoRegenerateKey:
          description: whether keyvault should manage the storage account for the user.
          type: boolean
        regenerationPeriod:
          description: The key regeneration time duration specified in ISO-8601 format.
          type: string
        resourceId:
          description: Storage account resource id.
          type: string
      required:
        - resourceId
        - activeKeyName
        - autoRegenerateKey
      type: object
    StorageAccountItem:
      description: The storage account item containing storage account metadata.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          readOnly: true
          type: object
        attributes:
          $ref: '#/components/schemas/StorageAccountAttributes'
          description: The storage account management attributes.
          readOnly: true
        id:
          description: Storage identifier.
          readOnly: true
          type: string
        resourceId:
          description: Storage account resource Id.
          readOnly: true
          type: string
      type: object
    StorageAccountRegenerteKeyParameters:
      description: The storage account key regenerate parameters.
      properties:
        keyName:
          description: The storage account key name.
          type: string
      required:
        - keyName
      type: object
    StorageAccountUpdateParameters:
      description: The storage account update parameters.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs.
          type: object
        activeKeyName:
          description: The current active storage account key name.
          type: string
        attributes:
          $ref: '#/components/schemas/StorageAccountAttributes'
          description: The attributes of the storage account.
          x-ms-client-name: StorageAccountAttributes
        autoRegenerateKey:
          description: whether keyvault should manage the storage account for the user.
          type: boolean
        regenerationPeriod:
          description: The key regeneration time duration specified in ISO-8601 format.
          type: string
      type: object
    StorageBundle:
      description: >-
        A Storage account bundle consists of key vault storage account details
        plus its attributes.
      properties:
        tags:
          additionalProperties:
            type: string
          description: Application specific metadata in the form of key-value pairs
          readOnly: true
          type: object
        activeKeyName:
          description: The current active storage account key name.
          readOnly: true
          type: string
        attributes:
          $ref: '#/components/schemas/StorageAccountAttributes'
          description: The storage account attributes.
          readOnly: true
        autoRegenerateKey:
          description: whether keyvault should manage the storage account for the user.
          readOnly: true
          type: boolean
        id:
          description: The storage account id.
          readOnly: true
          type: string
        regenerationPeriod:
          description: The key regeneration time duration specified in ISO-8601 format.
          readOnly: true
          type: string
        resourceId:
          description: The storage account resource id.
          readOnly: true
          type: string
      type: object
    StorageListResult:
      description: The storage accounts list result.
      properties:
        nextLink:
          description: The URL to get the next set of storage accounts.
          readOnly: true
          type: string
        value:
          description: >-
            A response message containing a list of storage accounts in the key
            vault along with a link to the next page of storage accounts.
          items:
            $ref: '#/components/schemas/StorageAccountItem'
          readOnly: true
          type: array
      type: object
    StorageRestoreParameters:
      description: The secret restore parameters.
      properties:
        value:
          description: The backup blob associated with a storage account.
          format: base64url
          type: string
          x-ms-client-name: storageBundleBackup
      required:
        - value
      type: object
    SubjectAlternativeNames:
      description: The subject alternate names of a X509 object.
      properties:
        dns_names:
          description: Domain names.
          items:
            type: string
          type: array
        emails:
          description: Email addresses.
          items:
            type: string
          type: array
        upns:
          description: User principal names.
          items:
            type: string
          type: array
      type: object
    Trigger:
      description: A condition to be satisfied for an action to be executed.
      properties:
        days_before_expiry:
          description: >-
            Days before expiry to attempt renewal. Value should be between 1 and
            validity_in_months multiplied by 27. If validity_in_months is 36,
            then value should be between 1 and 972 (36 * 27).
          format: int32
          type: integer
        lifetime_percentage:
          description: >-
            Percentage of lifetime at which to trigger. Value should be between
            1 and 99.
          format: int32
          maximum: 99
          minimum: 1
          type: integer
      type: object
    X509CertificateProperties:
      description: Properties of the X509 component of a certificate.
      properties:
        ekus:
          description: The enhanced key usage.
          items:
            type: string
          type: array
        key_usage:
          description: List of key usages.
          items:
            enum:
              - digitalSignature
              - nonRepudiation
              - keyEncipherment
              - dataEncipherment
              - keyAgreement
              - keyCertSign
              - cRLSign
              - encipherOnly
              - decipherOnly
            type: string
            x-ms-enum:
              modelAsString: true
              name: KeyUsageType
          type: array
        sans:
          $ref: '#/components/schemas/SubjectAlternativeNames'
          description: The subject alternative names.
          x-ms-client-name: SubjectAlternativeNames
        subject:
          description: The subject name. Should be a valid X509 distinguished Name.
          type: string
        validity_months:
          description: The duration that the certificate is valid in months.
          format: int32
          minimum: 0
          type: integer
          x-ms-client-name: ValidityInMonths
      type: object

