{
  "openapi": "3.0.0",
  "info": {
    "description": "Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.",
    "title": "ApiManagementClient",
    "version": "2016-10-10",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2016-10-10/apimproperties.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties": {
      "get": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "description": "| Field | Supported operators    | Supported functions                                   |\n|-------|------------------------|-------------------------------------------------------|\n| tags  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |\n| name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith           |",
            "in": "query",
            "name": "$filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyCollection"
                }
              }
            },
            "description": "A Collection of the Property entities for the specified API Management service instance."
          }
        },
        "tags": [
          "Property"
        ],
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/mt651775.aspx"
        },
        "description": "Lists a collection of properties defined within a service instance.",
        "operationId": "Properties_ListByService",
        "x-ms-odata": "#/components/schemas/PropertyContract",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties/{propId}": {
      "delete": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "description": "The entity state (Etag) version of the property to delete. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Property was successfully deleted."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
                }
              }
            },
            "description": "The specified property cannot be deleted because it is in use in a policy. You must remove all references to this property before it can be deleted."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Deletes specific property from the API Management service instance.",
        "operationId": "Property_Delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyContract"
                }
              }
            },
            "description": "The response body contains the specified Property entity.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Gets the details of the property specified by its identifier.",
        "operationId": "Property_Get"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "description": "The entity state (Etag) version of the property to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Property was successfully updated."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Updates the specific property.",
        "operationId": "Property_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyUpdateParameters"
              }
            }
          },
          "description": "Update parameters.",
          "required": true
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Property was successfully created."
          },
          "204": {
            "description": "Property was successfully updated."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Creates or updates a property.",
        "operationId": "Property_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyCreateParameters"
              }
            }
          },
          "description": "Create parameters.",
          "required": true
        }
      }
    }
  },
  "components": {
    "parameters": {
      "PropertyIdParameter": {
        "description": "Identifier of the property.",
        "in": "path",
        "name": "propId",
        "required": true,
        "schema": {
          "maxLength": 256,
          "pattern": "^[^*#&+:<>?]+$",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "schemas": {
      "PropertyCollection": {
        "description": "Paged Property list representation.",
        "properties": {
          "count": {
            "description": "Total record count number across all pages.",
            "format": "int64",
            "type": "integer"
          },
          "nextLink": {
            "description": "Next page link if any.",
            "type": "string"
          },
          "value": {
            "description": "Page values.",
            "items": {
              "$ref": "#/components/schemas/PropertyContract"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PropertyContract": {
        "description": "Property details.",
        "properties": {
          "tags": {
            "description": "Optional tags that when provided can be used to filter the property list.",
            "items": {
              "type": "string"
            },
            "maxItems": 32,
            "type": "array"
          },
          "id": {
            "description": "Uniquely identifies the property within the current API Management service instance. The value is a valid relative URL in the format of /properties/{propId} where {propId} is a property identifier.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[A-Z0-9-._]+$",
            "type": "string"
          },
          "secret": {
            "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
            "type": "boolean"
          },
          "value": {
            "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "PropertyCreateParameters": {
        "description": "Parameters supplied to the Create Property operation.",
        "properties": {
          "tags": {
            "description": "Optional tags that when provided can be used to filter the property list.",
            "items": {
              "type": "string"
            },
            "maxItems": 32,
            "type": "array"
          },
          "name": {
            "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[A-Z0-9-._]+$",
            "type": "string"
          },
          "secret": {
            "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
            "type": "boolean"
          },
          "value": {
            "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "PropertyUpdateParameters": {
        "description": "Parameters supplied to the Update Property operation.",
        "properties": {
          "tags": {
            "description": "Optional tags that when provided can be used to filter the property list.",
            "items": {
              "type": "string"
            },
            "maxItems": 32,
            "type": "array"
          },
          "name": {
            "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[A-Z0-9-._]+$",
            "type": "string"
          },
          "secret": {
            "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
            "type": "boolean"
          },
          "value": {
            "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow.",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}