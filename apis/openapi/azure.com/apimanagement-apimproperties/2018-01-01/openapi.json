{
  "openapi": "3.0.0",
  "info": {
    "description": "Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.",
    "title": "ApiManagementClient",
    "version": "2018-01-01",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2018-01-01/apimproperties.json"
  },
  "servers": [
    {
      "url": "https://management.azure.com/"
    }
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties": {
      "get": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "description": "| Field | Supported operators    | Supported functions                                   |\n|-------|------------------------|-------------------------------------------------------|\n| tags  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |\n| name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith           |",
            "in": "query",
            "name": "$filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyCollection"
                }
              }
            },
            "description": "A Collection of the Property entities for the specified API Management service instance."
          }
        },
        "tags": [
          "Property"
        ],
        "externalDocs": {
          "url": "https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-properties"
        },
        "description": "Lists a collection of properties defined within a service instance.",
        "operationId": "Property_ListByService",
        "x-ms-examples": {
          "ApiManagementListProperties": {
            "$ref": "./examples/ApiManagementListProperties.json"
          }
        },
        "x-ms-odata": "#/components/schemas/PropertyContract",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties/{propId}": {
      "delete": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Property was successfully deleted."
          },
          "204": {
            "description": "Property was successfully deleted."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Deletes specific property from the API Management service instance.",
        "operationId": "Property_Delete",
        "x-ms-examples": {
          "ApiManagementDeleteProperty": {
            "$ref": "./examples/ApiManagementDeleteProperty.json"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyContract"
                }
              }
            },
            "description": "The response body contains the specified Property entity.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Gets the details of the property specified by its identifier.",
        "operationId": "Property_Get",
        "x-ms-examples": {
          "ApiManagementGetProperty": {
            "$ref": "./examples/ApiManagementGetProperty.json"
          }
        }
      },
      "head": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified Property entity exists and current entity state version is present in the ETag header.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Gets the entity state (Etag) version of the property specified by its identifier.",
        "operationId": "Property_GetEntityTag",
        "x-ms-examples": {
          "ApiManagementHeadProperty": {
            "$ref": "./examples/ApiManagementHeadProperty.json"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Property was successfully updated."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Updates the specific property.",
        "operationId": "Property_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyUpdateParameters"
              }
            }
          },
          "description": "Update parameters.",
          "required": true
        },
        "x-ms-examples": {
          "ApiManagementUpdateProperty": {
            "$ref": "./examples/ApiManagementUpdateProperty.json"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/components/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/components/parameters/PropertyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/components/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyContract"
                }
              }
            },
            "description": "Property was successfully updated."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyContract"
                }
              }
            },
            "description": "Property was successfully created."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./apimanagement.json#/definitions/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "Property"
        ],
        "description": "Creates or updates a property.",
        "operationId": "Property_CreateOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyContract"
              }
            }
          },
          "description": "Create parameters.",
          "required": true
        },
        "x-ms-examples": {
          "ApiManagementCreateProperty": {
            "$ref": "./examples/ApiManagementCreateProperty.json"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "PropertyIdParameter": {
        "description": "Identifier of the property.",
        "in": "path",
        "name": "propId",
        "required": true,
        "schema": {
          "maxLength": 80,
          "pattern": "(^[\\w]+$)|(^[\\w][\\w\\-]+[\\w]$)",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "schemas": {
      "PropertyCollection": {
        "description": "Paged Property list representation.",
        "properties": {
          "nextLink": {
            "description": "Next page link if any.",
            "type": "string"
          },
          "value": {
            "description": "Page values.",
            "items": {
              "$ref": "#/components/schemas/PropertyContract"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PropertyContract": {
        "allOf": [
          {
            "$ref": "./apimanagement.json#/definitions/Resource"
          }
        ],
        "description": "Property details.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/PropertyContractProperties",
            "description": "Property entity contract properties.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      },
      "PropertyContractProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PropertyEntityBaseParameters"
          }
        ],
        "description": "Property Contract properties.",
        "properties": {
          "displayName": {
            "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9-._]+$",
            "type": "string"
          },
          "value": {
            "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "value"
        ],
        "type": "object"
      },
      "PropertyEntityBaseParameters": {
        "description": "Property Entity Base Parameters set.",
        "properties": {
          "tags": {
            "description": "Optional tags that when provided can be used to filter the property list.",
            "items": {
              "type": "string"
            },
            "maxItems": 32,
            "type": "array"
          },
          "secret": {
            "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PropertyUpdateParameterProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PropertyEntityBaseParameters"
          }
        ],
        "description": "Property Contract properties.",
        "properties": {
          "displayName": {
            "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9-._]+$",
            "type": "string"
          },
          "value": {
            "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PropertyUpdateParameters": {
        "description": "Property update Parameters.",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/PropertyUpdateParameterProperties",
            "description": "Property entity Update contract properties.",
            "x-ms-client-flatten": true
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "description": "Azure Active Directory OAuth2 Flow.",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}