{
  "openapi": "3.0.0",
  "info": {
    "title": "Azure Machine Learning Datastore Management Client",
    "version": "2019-09-30",
    "x-jentic-source-url": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/machinelearningservices/data-plane/Microsoft.MachineLearningServices/preview/2019-09-30/datastore.json"
  },
  "servers": [],
  "paths": {
    "/datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/workspaceNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "All the Datastores in the workspace are deleted successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "DataStore"
        ],
        "description": "Delete all Datastores in the workspace.",
        "operationId": "DataStores_DeleteAll",
        "summary": "Delete all Datastores."
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/workspaceNameParameter"
          },
          {
            "description": "List of Datastore names.",
            "explode": true,
            "in": "query",
            "name": "dataStoreNames",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "uniqueItems": false
            }
          },
          {
            "description": "The Continuation Token.",
            "in": "query",
            "name": "continuationToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Count of Datastores to be returned.",
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Whether to include the datastore secret in the response.",
            "in": "query",
            "name": "includeSecret",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDataStoreList"
                }
              }
            },
            "description": "The list of Datastores are returned successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "DataStore"
        ],
        "description": "Get the list of Datastores attached to the workspace.",
        "operationId": "DataStores_List",
        "summary": "Get Datastores list.",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/workspaceNameParameter"
          },
          {
            "description": "If set to true, the call will create an Datastore if it doesn't exist.",
            "in": "query",
            "name": "createIfNotExists",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "If set to true, the call will skip Datastore validation.",
            "in": "query",
            "name": "skipValidation",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Datastore is created/updated successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "DataStore"
        ],
        "description": "Create or update a Datastore in the given workspace.",
        "operationId": "DataStores_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataStore"
              }
            }
          },
          "description": "The Datastore details."
        },
        "summary": "Create or update a Datastore."
      }
    },
    "/datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/workspaceNameParameter"
          },
          {
            "description": "The Datastore name.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Datastore is deleted successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "DataStore"
        ],
        "description": "Delete a Datastore with a specific name.",
        "operationId": "DataStores_Delete",
        "summary": "Delete a Datastore."
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/workspaceNameParameter"
          },
          {
            "description": "The Datastore name.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStore"
                }
              }
            },
            "description": "The Datastore details are returned successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "DataStore"
        ],
        "description": "Get details of a Datastore with a specific name.",
        "operationId": "DataStores_Get",
        "summary": "Get Datastore details."
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/workspaceNameParameter"
          },
          {
            "description": "The Datastore name.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set to true, the call will create an Datastore if it doesn't exist.",
            "in": "query",
            "name": "createIfNotExists",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "If set to true, the call will skip Datastore validation.",
            "in": "query",
            "name": "skipValidation",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Datastore is created/updated successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "DataStore"
        ],
        "description": "Update or create a Datastore in the given workspace.",
        "operationId": "DataStores_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataStore"
              }
            }
          },
          "description": "The Datastore details."
        },
        "summary": "Update or create a Datastore."
      }
    },
    "/datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/default": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/workspaceNameParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStore"
                }
              }
            },
            "description": "The default Datastore is returned successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "DataStoreDefault"
        ],
        "description": "Get the default Datastore in the workspace.",
        "operationId": "DataStores_GetDefault",
        "summary": "Get the default Datastore."
      }
    },
    "/datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/default/{name}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/components/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/components/parameters/workspaceNameParameter"
          },
          {
            "description": "The Datastore name.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The default Datastore is set successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Error response describing why the operation failed."
          }
        },
        "tags": [
          "DataStoreDefault"
        ],
        "description": "Set a default Datastore in the workspace.",
        "operationId": "DataStores_SetDefault",
        "summary": "Set a default Datastore."
      }
    }
  },
  "components": {
    "parameters": {
      "resourceGroupNameParameter": {
        "description": "The Name of the resource group in which the workspace is located.",
        "in": "path",
        "name": "resourceGroupName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "subscriptionIdParameter": {
        "description": "The Azure Subscription ID.",
        "in": "path",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      },
      "workspaceNameParameter": {
        "description": "The name of the workspace.",
        "in": "path",
        "name": "workspaceName",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-ms-parameter-location": "method"
      }
    },
    "requestBodies": {
      "DataStore": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataStore"
            }
          }
        },
        "description": "The Datastore details."
      }
    },
    "schemas": {
      "AzureDataLake": {
        "properties": {
          "authorityUrl": {
            "description": "The authority URL used for authentication",
            "type": "string"
          },
          "certificate": {
            "description": "The content of the certificate used for authentication",
            "type": "string"
          },
          "clientId": {
            "description": "The Client ID/Application ID",
            "format": "uuid",
            "type": "string"
          },
          "clientSecret": {
            "description": "The client secret",
            "type": "string"
          },
          "isCertAuth": {
            "description": "Is it using certificate to authenticate. If false then use client secret",
            "type": "boolean"
          },
          "resourceGroup": {
            "description": "Resource Group Name",
            "type": "string"
          },
          "resourceUri": {
            "description": "The resource the service principal/app has access to",
            "type": "string"
          },
          "storeName": {
            "description": "The Azure Data Lake store name",
            "type": "string"
          },
          "subscriptionId": {
            "description": "Subscription Id",
            "format": "uuid",
            "type": "string"
          },
          "tenantId": {
            "description": "The ID of the tenant the service principal/app belongs to",
            "format": "uuid",
            "type": "string"
          },
          "thumbprint": {
            "description": "The thumbprint of the certificate above",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AzurePostgreSql": {
        "properties": {
          "databaseName": {
            "description": "The Azure PostgreSQL database name",
            "type": "string"
          },
          "endpoint": {
            "description": "The Azure PostgreSQL server host endpoint",
            "type": "string"
          },
          "portNumber": {
            "description": "The Azure PostgreSQL port number",
            "type": "string"
          },
          "resourceGroup": {
            "description": "Resource Group Name",
            "type": "string"
          },
          "serverName": {
            "description": "The Azure PostgreSQL server name",
            "type": "string"
          },
          "subscriptionId": {
            "description": "Subscription Id",
            "format": "uuid",
            "type": "string"
          },
          "userId": {
            "description": "The Azure PostgreSQL user id",
            "type": "string"
          },
          "userPassword": {
            "description": "The Azure PostgreSQL user password",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AzureSqlDatabase": {
        "properties": {
          "authorityUrl": {
            "description": "The authority URL used for authentication",
            "type": "string"
          },
          "certificate": {
            "description": "The content of the certificate used for authentication",
            "type": "string"
          },
          "clientId": {
            "description": "The Client ID/Application ID",
            "format": "uuid",
            "type": "string"
          },
          "clientSecret": {
            "description": "The client secret",
            "type": "string"
          },
          "databaseName": {
            "description": "The Azure SQL database name",
            "type": "string"
          },
          "endpoint": {
            "description": "The server host endpoint",
            "type": "string"
          },
          "isCertAuth": {
            "description": "Is it using certificate to authenticate. If false then use client secret",
            "type": "boolean"
          },
          "resourceGroup": {
            "description": "Resource Group Name",
            "type": "string"
          },
          "resourceUri": {
            "description": "The resource the service principal/app has access to",
            "type": "string"
          },
          "serverName": {
            "description": "The Azure SQL server name",
            "type": "string"
          },
          "subscriptionId": {
            "description": "Subscription Id",
            "format": "uuid",
            "type": "string"
          },
          "tenantId": {
            "description": "The ID of the tenant the service principal/app belongs to",
            "format": "uuid",
            "type": "string"
          },
          "thumbprint": {
            "description": "The thumbprint of the certificate above",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AzureStorage": {
        "properties": {
          "accountKey": {
            "description": "Storage Account Key (Deprecated)",
            "type": "string"
          },
          "accountName": {
            "description": "Storage Account Name",
            "type": "string"
          },
          "areWorkspaceManagedIdentitiesAllowed": {
            "description": "Indicate if we are using Workspace ManagedIdentities/MSI token",
            "type": "boolean"
          },
          "blobCacheTimeout": {
            "description": "If this is an Microsoft.MachineLearning.DataStore.Contracts.DataStoreType.AzureBlob, the length of time (in seconds) to cache files locally after they are accessed (downloaded).",
            "format": "int32",
            "type": "integer"
          },
          "clientCredentials": {
            "$ref": "#/components/schemas/ClientCredentials",
            "description": "Service principal credential when credential type is Microsoft.MachineLearning.DataStore.Contracts.AzureStorageCredentialTypes.ClientCredentials"
          },
          "containerName": {
            "description": "The storage container name",
            "type": "string"
          },
          "credential": {
            "description": "The credential",
            "type": "string"
          },
          "credentialType": {
            "description": "The credential type",
            "enum": [
              "None",
              "Sas",
              "AccountKey",
              "ClientCredentials"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "AzureStorageCredentialTypes"
            }
          },
          "endpoint": {
            "description": "The host of the container",
            "type": "string"
          },
          "isSas": {
            "description": "Indicate if we are using SAS token or Account Key (Deprecated)",
            "type": "boolean"
          },
          "protocol": {
            "description": "The protocol to use. Defaults to https",
            "type": "string"
          },
          "resourceGroup": {
            "description": "Resource Group Name",
            "type": "string"
          },
          "sasToken": {
            "description": "SAS Token for the container (Deprecated)",
            "type": "string"
          },
          "subscriptionId": {
            "description": "Subscription Id",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientCredentials": {
        "properties": {
          "authorityUrl": {
            "description": "The authority URL used for authentication",
            "type": "string"
          },
          "certificate": {
            "description": "The content of the certificate used for authentication",
            "type": "string"
          },
          "clientId": {
            "description": "The Client ID/Application ID",
            "format": "uuid",
            "type": "string"
          },
          "clientSecret": {
            "description": "The client secret",
            "type": "string"
          },
          "isCertAuth": {
            "description": "Is it using certificate to authenticate. If false then use client secret",
            "type": "boolean"
          },
          "resourceGroup": {
            "description": "Resource Group Name",
            "type": "string"
          },
          "resourceUri": {
            "description": "The resource the service principal/app has access to",
            "type": "string"
          },
          "subscriptionId": {
            "description": "Subscription Id",
            "format": "uuid",
            "type": "string"
          },
          "tenantId": {
            "description": "The ID of the tenant the service principal/app belongs to",
            "format": "uuid",
            "type": "string"
          },
          "thumbprint": {
            "description": "The thumbprint of the certificate above",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataStore": {
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags to datastore",
            "type": "object"
          },
          "azureDataLakeSection": {
            "$ref": "#/components/schemas/AzureDataLake",
            "description": "Data Specific to azure data lake"
          },
          "azurePostgreSqlSection": {
            "$ref": "#/components/schemas/AzurePostgreSql",
            "description": "Data specific to azure PostgreSQL"
          },
          "azureSqlDatabaseSection": {
            "$ref": "#/components/schemas/AzureSqlDatabase",
            "description": "Data specific to azure SQL database"
          },
          "azureStorageSection": {
            "$ref": "#/components/schemas/AzureStorage",
            "description": "Data specific to azure storage"
          },
          "dataStoreType": {
            "description": "The Azure storage service this datastore points to.",
            "enum": [
              "AzureBlob",
              "AzureFile",
              "AzureDataLake",
              "AzureSqlDatabase",
              "AzurePostgreSql",
              "DBFS",
              "AzureDataLakeGen2",
              "GlusterFs"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "DataStoreType"
            }
          },
          "glusterFsSection": {
            "$ref": "#/components/schemas/GlusterFs",
            "description": "Data specific to GlusterFS"
          },
          "hasBeenValidated": {
            "description": "A read only property that denotes whether the service datastore has been validated with credentials.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the datastore",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorDetails": {
        "description": "The error details.",
        "properties": {
          "code": {
            "description": "The error code.",
            "type": "string"
          },
          "message": {
            "description": "The error message.",
            "type": "string"
          },
          "target": {
            "description": "The target of the error (e.g., the name of the property in error).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "description": "The error response.",
        "properties": {
          "correlation": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary containing correlation details for the error.",
            "type": "object"
          },
          "environment": {
            "description": "The hosting environment.",
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/RootError",
            "description": "The top level error that occurred."
          },
          "location": {
            "description": "The Azure region.",
            "type": "string"
          },
          "time": {
            "description": "The time in UTC.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GlusterFs": {
        "properties": {
          "serverAddress": {
            "description": "The server address of one of the servers that hosts the GlusterFS. Can be either the IP address\r\nor server name.",
            "type": "string"
          },
          "volumeName": {
            "description": "The name of the created GlusterFS volume.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InnerErrorResponse": {
        "description": "A nested structure of errors.",
        "properties": {
          "code": {
            "description": "The error code.",
            "type": "string"
          },
          "innerError": {
            "$ref": "#/components/schemas/InnerErrorResponse",
            "description": "A nested list of inner errors. When evaluating errors, clients MUST traverse through all of the nested \u201cinnerErrors\u201d and choose the deepest one that they understand."
          }
        },
        "type": "object"
      },
      "PaginatedDataStoreList": {
        "description": "A paginated list of DataStores.",
        "properties": {
          "continuationToken": {
            "description": "The token used in retrieving the next page.  If null, there are no additional pages.",
            "type": "string"
          },
          "nextLink": {
            "description": "The link to the next page constructed using the continuationToken.  If null, there are no additional pages.",
            "type": "string"
          },
          "value": {
            "description": "An array of objects of type DataStore.",
            "items": {
              "$ref": "#/components/schemas/DataStore"
            },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "RootError": {
        "description": "The root error.",
        "properties": {
          "code": {
            "description": "The service-defined error code. Supported error codes: ServiceError, UserError, ValidationError, AzureStorageError, TransientError, RequestThrottled.",
            "type": "string"
          },
          "details": {
            "description": "The related errors that occurred during the request.",
            "items": {
              "$ref": "#/components/schemas/ErrorDetails"
            },
            "type": "array",
            "uniqueItems": false
          },
          "innerError": {
            "$ref": "#/components/schemas/InnerErrorResponse",
            "description": "A nested list of inner errors. When evaluating errors, clients MUST traverse through all of the nested \u201cinnerErrors\u201d and choose the deepest one that they understand."
          },
          "message": {
            "description": "A human-readable representation of the error.",
            "type": "string"
          },
          "target": {
            "description": "The target of the error (e.g., the name of the property in error).",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "azure_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "scopes": {
              "user_impersonation": "impersonate your user account"
            }
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "tags": []
}